
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00100000

Program Header:
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000014 memsz 0x00000014 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000014  00100000  00100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000011  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00001028  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015a  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ba  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f6  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000156  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00100000 l    d  .text	00000000 .text
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 init.c
0010000e g     F .text	00000006 kernel_init
00100000 g       .text	00000000 _start
00101014 g       .text	00000000 __bss_start
00101014 g       .text	00000000 _edata
00101014 g       .text	00000000 _end



Disassembly of section .text:

00100000 <_start>:

    # void start (boot_info_t * boot_info)
_start:

    # 取出boot_info到 eax中
    push %ebp
  100000:	55                   	push   %ebp
    mov %esp,%ebp
  100001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp),%eax
  100003:	8b 45 08             	mov    0x8(%ebp),%eax



    # kernel_init(boot_info)
    push %eax
  100006:	50                   	push   %eax
    call kernel_init
  100007:	e8 02 00 00 00       	call   10000e <kernel_init>
  10000c:	eb fe                	jmp    10000c <_start+0xc>

0010000e <kernel_init>:
#include "init.h"
#include "comm/boot_info.h"


void kernel_init(boot_info_t * boot_info){
  10000e:	55                   	push   %ebp
  10000f:	89 e5                	mov    %esp,%ebp
    
  100011:	90                   	nop
  100012:	5d                   	pop    %ebp
  100013:	c3                   	ret    
