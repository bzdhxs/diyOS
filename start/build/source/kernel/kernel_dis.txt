
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000019bc memsz 0x000056d0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000165f  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000358  00011660  00011660  00002660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  000119b8  000119b8  000029b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d10  000119c0  000119c0  000029bc  2**5
                  ALLOC
  4 .debug_line   00000a3a  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019b4  00000000  00000000  000033f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fa  00000000  00000000  00004daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000100  00000000  00000000  000055a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000866  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00005f0e  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000964  00000000  00000000  00005f20  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011660 l    d  .rodata	00000000 .rodata
000119b8 l    d  .data	00000000 .data
000119c0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102ba l     F .text	000000f6 tss_init
000116b8 l     O .rodata	0000000a __func__.1860
00000000 l    df *ABS*	00000000 cpu.c
0001044e l     F .text	00000028 lgdt
00010476 l     F .text	0000001a far_jump
000119c0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001062b l     F .text	0000001d inb
00010648 l     F .text	0000001f outb
00010667 l     F .text	00000007 cli
0001066e l     F .text	00000007 sti
00010675 l     F .text	00000028 lidt
0001069d l     F .text	00000007 hlt
000106a4 l     F .text	000000d9 dump_core_regs
0001077d l     F .text	0000003e do_default_handler
000121c0 l     O .bss	00000400 idt_table
000109eb l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010db9 l     F .text	0000001f outb
000125c0 l     O .bss	00000004 sys_tick
00010dfb l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00010e73 l     F .text	00000017 write_tr
000125e0 l     O .bss	00000070 first_task
00012660 l     O .bss	00001000 init_task_stack
00013660 l     O .bss	00000070 init_task
00000000 l    df *ABS*	00000000 klib.c
00010faf l     F .text	00000007 hlt
000119b8 l     O .data	00000004 num2ch.1900
00000000 l    df *ABS*	00000000 log.c
000114fa l     F .text	0000001d inb
00011517 l     F .text	0000001f outb
00011122 g     F .text	0000004f kernel_memcpy
00010d83 g     F .text	0000000b irq_enable_global
000108ef g     F .text	0000001c do_handler_segment_not_present
00011171 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
000105c7 g     F .text	0000000b cpu_init
00011536 g     F .text	00000075 log_init
00010ee5 g     F .text	000000ca init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00010fb6 g     F .text	00000047 kernel_strcpy
00010c66 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010847 g     F .text	0000001c do_handler_overflow
0001097b g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010927 g     F .text	0000001c do_handler_general_protection
000107d7 g     F .text	0000001c do_handler_divider
000108b7 g     F .text	0000001c do_handler_double_fault
00010ea7 g     F .text	0000003e init_task_entry
00010943 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010d8e g     F .text	0000002b pic_send_eoi
00010dd8 g     F .text	00000023 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
000109cf g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
000136d0 g     O .bss	00002000 stack
000100e2 g       .text	00000000 exception_handler_bound_range
0001087f g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
0001095f g     F .text	0000001c do_handler_fpu_error
00010997 g     F .text	0000001c do_handler_machine_check
000107f3 g     F .text	0000001c do_handler_Debug
0001080f g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00010ffd g     F .text	00000070 kernel_strncpy
00010d78 g     F .text	0000000b irq_disable_global
00010e8a g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
00011379 g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
000108d3 g     F .text	0000001c do_handler_invalid_tss
000114c4 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00010c2c g     F .text	0000003a irq_install
00010513 g     F .text	0000006d init_gdt
00010cf1 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
0001089b g     F .text	0000001c do_handler_device_unavailable
00010617 g     F .text	00000014 switch_to_tss
000111b2 g     F .text	00000064 kernel_memcmp
000109b3 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
000107bb g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
000103b0 g     F .text	0000001e task_switch_from_to
00010a7e g     F .text	000001ae irq_init
000110e7 g     F .text	0000003b kernel_strlen
00010490 g     F .text	00000083 segment_desc_set
00010863 g     F .text	0000001c do_handler_bound_range
0001106d g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010066 g       .text	00000000 exception_handler_Debug
0001090b g     F .text	0000001c do_handler_stack_segment_fault
0001082b g     F .text	0000001c do_handler_breakpoint
000115ab g     F .text	000000b4 log_printf
000103ce g     F .text	00000080 task_init
00011216 g     F .text	00000024 kernel_sprintf
000105d2 g     F .text	00000045 gdt_alloc_desc
0001123a g     F .text	0000013f kernel_itoa
00010580 g     F .text	00000047 gate_desc_set
00010e5b g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 81 0e 00 00       	call   10e8a <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc d0 56 01 00       	mov    $0x156d0,%esp
    jmp init_main
   10023:	e9 bd 0e 00 00       	jmp    10ee5 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 82 07 00 00       	call   107bb <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 7f 07 00 00       	call   107d7 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 7c 07 00 00       	call   107f3 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 79 07 00 00       	call   1080f <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 76 07 00 00       	call   1082b <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 73 07 00 00       	call   10847 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 70 07 00 00       	call   10863 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 6d 07 00 00       	call   1087f <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 6a 07 00 00       	call   1089b <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 69 07 00 00       	call   108b7 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 68 07 00 00       	call   108d3 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 67 07 00 00       	call   108ef <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 66 07 00 00       	call   1090b <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 65 07 00 00       	call   10927 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 64 07 00 00       	call   10943 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 61 07 00 00       	call   1095f <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 60 07 00 00       	call   1097b <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 5d 07 00 00       	call   10997 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 5a 07 00 00       	call   109b3 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 57 07 00 00       	call   109cf <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 41 0b 00 00       	call   10dd8 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    .text
    .global simple_switch

simple_switch:

    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp,(%eax)
   102b1:	89 20                	mov    %esp,(%eax)
    
    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp

    ret
   102b9:	c3                   	ret    

000102ba <tss_init>:
#include "cpu/cpu.h"
#include "os_cfg.h"
#include "tools/log.h"


static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
   102bd:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102c0:	e8 0d 03 00 00       	call   105d2 <gdt_alloc_desc>
   102c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   102c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102cc:	79 1a                	jns    102e8 <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   102ce:	83 ec 0c             	sub    $0xc,%esp
   102d1:	68 60 16 01 00       	push   $0x11660
   102d6:	e8 d0 12 00 00       	call   115ab <log_printf>
   102db:	83 c4 10             	add    $0x10,%esp
        return -1;
   102de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102e3:	e9 c6 00 00 00       	jmp    103ae <tss_init+0xf4>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   102e8:	8b 45 08             	mov    0x8(%ebp),%eax
   102eb:	83 c0 04             	add    $0x4,%eax
   102ee:	68 89 00 00 00       	push   $0x89
   102f3:	6a 68                	push   $0x68
   102f5:	50                   	push   %eax
   102f6:	ff 75 f4             	pushl  -0xc(%ebp)
   102f9:	e8 92 01 00 00       	call   10490 <segment_desc_set>
   102fe:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10301:	8b 45 08             	mov    0x8(%ebp),%eax
   10304:	83 c0 04             	add    $0x4,%eax
   10307:	83 ec 04             	sub    $0x4,%esp
   1030a:	6a 68                	push   $0x68
   1030c:	6a 00                	push   $0x0
   1030e:	50                   	push   %eax
   1030f:	e8 5d 0e 00 00       	call   11171 <kernel_memset>
   10314:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1031d:	89 50 24             	mov    %edx,0x24(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10320:	8b 45 08             	mov    0x8(%ebp),%eax
   10323:	8b 55 10             	mov    0x10(%ebp),%edx
   10326:	89 50 08             	mov    %edx,0x8(%eax)
   10329:	8b 45 08             	mov    0x8(%ebp),%eax
   1032c:	8b 50 08             	mov    0x8(%eax),%edx
   1032f:	8b 45 08             	mov    0x8(%ebp),%eax
   10332:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10335:	8b 45 08             	mov    0x8(%ebp),%eax
   10338:	c7 40 0c 10 00 00 00 	movl   $0x10,0xc(%eax)
    task->tss.eip = entry;
   1033f:	8b 45 08             	mov    0x8(%ebp),%eax
   10342:	8b 55 0c             	mov    0xc(%ebp),%edx
   10345:	89 50 24             	mov    %edx,0x24(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10348:	8b 45 08             	mov    0x8(%ebp),%eax
   1034b:	c7 40 28 02 02 00 00 	movl   $0x202,0x28(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   10352:	8b 45 08             	mov    0x8(%ebp),%eax
   10355:	c7 40 60 10 00 00 00 	movl   $0x10,0x60(%eax)
   1035c:	8b 45 08             	mov    0x8(%ebp),%eax
   1035f:	8b 50 60             	mov    0x60(%eax),%edx
   10362:	8b 45 08             	mov    0x8(%ebp),%eax
   10365:	89 50 5c             	mov    %edx,0x5c(%eax)
   10368:	8b 45 08             	mov    0x8(%ebp),%eax
   1036b:	8b 50 5c             	mov    0x5c(%eax),%edx
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	89 50 58             	mov    %edx,0x58(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   10374:	8b 45 08             	mov    0x8(%ebp),%eax
   10377:	8b 50 58             	mov    0x58(%eax),%edx
   1037a:	8b 45 08             	mov    0x8(%ebp),%eax
   1037d:	89 50 54             	mov    %edx,0x54(%eax)
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	8b 50 54             	mov    0x54(%eax),%edx
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   1038c:	8b 45 08             	mov    0x8(%ebp),%eax
   1038f:	c7 40 50 08 00 00 00 	movl   $0x8,0x50(%eax)
    task->tss.iomap = 0;
   10396:	8b 45 08             	mov    0x8(%ebp),%eax
   10399:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)

    task->tss_sel = tss_sel;
   103a0:	8b 45 08             	mov    0x8(%ebp),%eax
   103a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103a6:	89 50 6c             	mov    %edx,0x6c(%eax)
    return 0;
   103a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103ae:	c9                   	leave  
   103af:	c3                   	ret    

000103b0 <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   103b0:	55                   	push   %ebp
   103b1:	89 e5                	mov    %esp,%ebp
   103b3:	83 ec 08             	sub    $0x8,%esp
    // switch_to_tss(to->tss_sel);
    simple_switch(&from->stack,to->stack);
   103b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   103b9:	8b 10                	mov    (%eax),%edx
   103bb:	8b 45 08             	mov    0x8(%ebp),%eax
   103be:	83 ec 08             	sub    $0x8,%esp
   103c1:	52                   	push   %edx
   103c2:	50                   	push   %eax
   103c3:	e8 dd fe ff ff       	call   102a5 <simple_switch>
   103c8:	83 c4 10             	add    $0x10,%esp
}
   103cb:	90                   	nop
   103cc:	c9                   	leave  
   103cd:	c3                   	ret    

000103ce <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task, uint32_t entry, uint32_t esp){
   103ce:	55                   	push   %ebp
   103cf:	89 e5                	mov    %esp,%ebp
   103d1:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   103d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103d8:	75 19                	jne    103f3 <task_init+0x25>
   103da:	68 73 16 01 00       	push   $0x11673
   103df:	68 b8 16 01 00       	push   $0x116b8
   103e4:	6a 35                	push   $0x35
   103e6:	68 88 16 01 00       	push   $0x11688
   103eb:	e8 d4 10 00 00       	call   114c4 <panic>
   103f0:	83 c4 10             	add    $0x10,%esp

    // tss_init(task,entry,esp);

    uint32_t *pesp = (uint32_t *)esp;
   103f3:	8b 45 10             	mov    0x10(%ebp),%eax
   103f6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (pesp) {
   103f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   103fd:	74 48                	je     10447 <task_init+0x79>
        *(--pesp) = entry;
   103ff:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10403:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10406:	8b 55 0c             	mov    0xc(%ebp),%edx
   10409:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   1040b:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   1040f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10412:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   10418:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   1041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1041f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   10425:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10429:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1042c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   10432:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10436:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10439:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   1043f:	8b 45 08             	mov    0x8(%ebp),%eax
   10442:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10445:	89 10                	mov    %edx,(%eax)
    }
    return 0;
   10447:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1044c:	c9                   	leave  
   1044d:	c3                   	ret    

0001044e <lgdt>:
static inline void sti(void){
    __asm__ __volatile__("sti");    
}


static inline void lgdt(uint32_t start,uint32_t size){
   1044e:	55                   	push   %ebp
   1044f:	89 e5                	mov    %esp,%ebp
   10451:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }gdt;
    
    gdt.start32_16 = start >> 16;
   10454:	8b 45 08             	mov    0x8(%ebp),%eax
   10457:	c1 e8 10             	shr    $0x10,%eax
   1045a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   1045e:	8b 45 08             	mov    0x8(%ebp),%eax
   10461:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10465:	8b 45 0c             	mov    0xc(%ebp),%eax
   10468:	83 e8 01             	sub    $0x1,%eax
   1046b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1046f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10473:	90                   	nop
   10474:	c9                   	leave  
   10475:	c3                   	ret    

00010476 <far_jump>:

    __asm__ __volatile__("mov %[v],%%cr0"::[v]"r"(v));
}


static inline void far_jump(uint32_t selector,uint32_t offset){
   10476:	55                   	push   %ebp
   10477:	89 e5                	mov    %esp,%ebp
   10479:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   1047c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1047f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10482:	8b 45 08             	mov    0x8(%ebp),%eax
   10485:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10488:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1048b:	ff 28                	ljmp   *(%eax)
}
   1048d:	90                   	nop
   1048e:	c9                   	leave  
   1048f:	c3                   	ret    

00010490 <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   10490:	55                   	push   %ebp
   10491:	89 e5                	mov    %esp,%ebp
   10493:	83 ec 14             	sub    $0x14,%esp
   10496:	8b 45 14             	mov    0x14(%ebp),%eax
   10499:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	83 e0 f8             	and    $0xfffffff8,%eax
   104a3:	05 c0 19 01 00       	add    $0x119c0,%eax
   104a8:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   104ab:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   104b2:	76 0f                	jbe    104c3 <segment_desc_set+0x33>
		attr |= SEG_G;
   104b4:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   104ba:	8b 45 10             	mov    0x10(%ebp),%eax
   104bd:	c1 e8 0c             	shr    $0xc,%eax
   104c0:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   104c3:	8b 45 10             	mov    0x10(%ebp),%eax
   104c6:	89 c2                	mov    %eax,%edx
   104c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104cb:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   104ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   104d1:	89 c2                	mov    %eax,%edx
   104d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104d6:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   104da:	8b 45 0c             	mov    0xc(%ebp),%eax
   104dd:	c1 e8 10             	shr    $0x10,%eax
   104e0:	89 c2                	mov    %eax,%edx
   104e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104e5:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   104e8:	8b 45 10             	mov    0x10(%ebp),%eax
   104eb:	c1 e8 10             	shr    $0x10,%eax
   104ee:	c1 e0 08             	shl    $0x8,%eax
   104f1:	66 25 00 0f          	and    $0xf00,%ax
   104f5:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   104f9:	89 c2                	mov    %eax,%edx
   104fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104fe:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10502:	8b 45 0c             	mov    0xc(%ebp),%eax
   10505:	c1 e8 18             	shr    $0x18,%eax
   10508:	89 c2                	mov    %eax,%edx
   1050a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1050d:	88 50 07             	mov    %dl,0x7(%eax)

}
   10510:	90                   	nop
   10511:	c9                   	leave  
   10512:	c3                   	ret    

00010513 <init_gdt>:

void init_gdt(void){
   10513:	55                   	push   %ebp
   10514:	89 e5                	mov    %esp,%ebp
   10516:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10519:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10520:	eb 19                	jmp    1053b <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10522:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10525:	c1 e0 03             	shl    $0x3,%eax
   10528:	6a 00                	push   $0x0
   1052a:	6a 00                	push   $0x0
   1052c:	6a 00                	push   $0x0
   1052e:	50                   	push   %eax
   1052f:	e8 5c ff ff ff       	call   10490 <segment_desc_set>
   10534:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10537:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1053b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10542:	7e de                	jle    10522 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10544:	68 9a 40 00 00       	push   $0x409a
   10549:	6a ff                	push   $0xffffffff
   1054b:	6a 00                	push   $0x0
   1054d:	6a 08                	push   $0x8
   1054f:	e8 3c ff ff ff       	call   10490 <segment_desc_set>
   10554:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10557:	68 92 40 00 00       	push   $0x4092
   1055c:	6a ff                	push   $0xffffffff
   1055e:	6a 00                	push   $0x0
   10560:	6a 10                	push   $0x10
   10562:	e8 29 ff ff ff       	call   10490 <segment_desc_set>
   10567:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   1056a:	b8 c0 19 01 00       	mov    $0x119c0,%eax
   1056f:	68 00 08 00 00       	push   $0x800
   10574:	50                   	push   %eax
   10575:	e8 d4 fe ff ff       	call   1044e <lgdt>
   1057a:	83 c4 08             	add    $0x8,%esp
}
   1057d:	90                   	nop
   1057e:	c9                   	leave  
   1057f:	c3                   	ret    

00010580 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10580:	55                   	push   %ebp
   10581:	89 e5                	mov    %esp,%ebp
   10583:	83 ec 08             	sub    $0x8,%esp
   10586:	8b 55 0c             	mov    0xc(%ebp),%edx
   10589:	8b 45 14             	mov    0x14(%ebp),%eax
   1058c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10590:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   10594:	8b 45 10             	mov    0x10(%ebp),%eax
   10597:	89 c2                	mov    %eax,%edx
   10599:	8b 45 08             	mov    0x8(%ebp),%eax
   1059c:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1059f:	8b 45 08             	mov    0x8(%ebp),%eax
   105a2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   105a6:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   105aa:	8b 45 08             	mov    0x8(%ebp),%eax
   105ad:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   105b1:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   105b5:	8b 45 10             	mov    0x10(%ebp),%eax
   105b8:	c1 e8 10             	shr    $0x10,%eax
   105bb:	89 c2                	mov    %eax,%edx
   105bd:	8b 45 08             	mov    0x8(%ebp),%eax
   105c0:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   105c4:	90                   	nop
   105c5:	c9                   	leave  
   105c6:	c3                   	ret    

000105c7 <cpu_init>:

void cpu_init (void){
   105c7:	55                   	push   %ebp
   105c8:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   105ca:	e8 44 ff ff ff       	call   10513 <init_gdt>
}
   105cf:	90                   	nop
   105d0:	5d                   	pop    %ebp
   105d1:	c3                   	ret    

000105d2 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   105d2:	55                   	push   %ebp
   105d3:	89 e5                	mov    %esp,%ebp
   105d5:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   105d8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   105df:	eb 26                	jmp    10607 <gdt_alloc_desc+0x35>

        segment_desc_t * desc = gdt_table + i;
   105e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105e4:	c1 e0 03             	shl    $0x3,%eax
   105e7:	05 c0 19 01 00       	add    $0x119c0,%eax
   105ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   105ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
   105f2:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   105f6:	66 85 c0             	test   %ax,%ax
   105f9:	75 08                	jne    10603 <gdt_alloc_desc+0x31>
            return i * sizeof(segment_desc_t);
   105fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105fe:	c1 e0 03             	shl    $0x3,%eax
   10601:	eb 12                	jmp    10615 <gdt_alloc_desc+0x43>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10603:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10607:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1060e:	7e d1                	jle    105e1 <gdt_alloc_desc+0xf>
        }
    }
    return -1;
   10610:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10615:	c9                   	leave  
   10616:	c3                   	ret    

00010617 <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   10617:	55                   	push   %ebp
   10618:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   1061a:	8b 45 08             	mov    0x8(%ebp),%eax
   1061d:	6a 00                	push   $0x0
   1061f:	50                   	push   %eax
   10620:	e8 51 fe ff ff       	call   10476 <far_jump>
   10625:	83 c4 08             	add    $0x8,%esp
   10628:	90                   	nop
   10629:	c9                   	leave  
   1062a:	c3                   	ret    

0001062b <inb>:
static inline uint8_t inb(uint16_t port) {
   1062b:	55                   	push   %ebp
   1062c:	89 e5                	mov    %esp,%ebp
   1062e:	83 ec 14             	sub    $0x14,%esp
   10631:	8b 45 08             	mov    0x8(%ebp),%eax
   10634:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10638:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1063c:	89 c2                	mov    %eax,%edx
   1063e:	ec                   	in     (%dx),%al
   1063f:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10642:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10646:	c9                   	leave  
   10647:	c3                   	ret    

00010648 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10648:	55                   	push   %ebp
   10649:	89 e5                	mov    %esp,%ebp
   1064b:	83 ec 08             	sub    $0x8,%esp
   1064e:	8b 55 08             	mov    0x8(%ebp),%edx
   10651:	8b 45 0c             	mov    0xc(%ebp),%eax
   10654:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10658:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   1065b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1065f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10663:	ee                   	out    %al,(%dx)
}
   10664:	90                   	nop
   10665:	c9                   	leave  
   10666:	c3                   	ret    

00010667 <cli>:
static inline void cli(void){
   10667:	55                   	push   %ebp
   10668:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   1066a:	fa                   	cli    
}
   1066b:	90                   	nop
   1066c:	5d                   	pop    %ebp
   1066d:	c3                   	ret    

0001066e <sti>:
static inline void sti(void){
   1066e:	55                   	push   %ebp
   1066f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10671:	fb                   	sti    
}
   10672:	90                   	nop
   10673:	5d                   	pop    %ebp
   10674:	c3                   	ret    

00010675 <lidt>:



static inline void lidt(uint32_t start,uint32_t size){
   10675:	55                   	push   %ebp
   10676:	89 e5                	mov    %esp,%ebp
   10678:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }idt;
    
    idt.start32_16 = start >> 16;
   1067b:	8b 45 08             	mov    0x8(%ebp),%eax
   1067e:	c1 e8 10             	shr    $0x10,%eax
   10681:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10685:	8b 45 08             	mov    0x8(%ebp),%eax
   10688:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   1068c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1068f:	83 e8 01             	sub    $0x1,%eax
   10692:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10696:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1069a:	90                   	nop
   1069b:	c9                   	leave  
   1069c:	c3                   	ret    

0001069d <hlt>:

static inline void hlt (void) {
   1069d:	55                   	push   %ebp
   1069e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   106a0:	f4                   	hlt    
}
   106a1:	90                   	nop
   106a2:	5d                   	pop    %ebp
   106a3:	c3                   	ret    

000106a4 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   106a4:	55                   	push   %ebp
   106a5:	89 e5                	mov    %esp,%ebp
   106a7:	57                   	push   %edi
   106a8:	56                   	push   %esi
   106a9:	53                   	push   %ebx
   106aa:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   106ad:	8b 45 08             	mov    0x8(%ebp),%eax
   106b0:	8b 50 34             	mov    0x34(%eax),%edx
   106b3:	8b 45 08             	mov    0x8(%ebp),%eax
   106b6:	8b 40 30             	mov    0x30(%eax),%eax
   106b9:	83 ec 04             	sub    $0x4,%esp
   106bc:	52                   	push   %edx
   106bd:	50                   	push   %eax
   106be:	68 c4 16 01 00       	push   $0x116c4
   106c3:	e8 e3 0e 00 00       	call   115ab <log_printf>
   106c8:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   106cb:	8b 45 08             	mov    0x8(%ebp),%eax
   106ce:	8b 38                	mov    (%eax),%edi
   106d0:	8b 45 08             	mov    0x8(%ebp),%eax
   106d3:	8b 70 04             	mov    0x4(%eax),%esi
   106d6:	8b 45 08             	mov    0x8(%ebp),%eax
   106d9:	8b 58 0c             	mov    0xc(%eax),%ebx
   106dc:	8b 45 08             	mov    0x8(%ebp),%eax
   106df:	8b 48 08             	mov    0x8(%eax),%ecx
   106e2:	8b 45 08             	mov    0x8(%ebp),%eax
   106e5:	8b 50 0c             	mov    0xc(%eax),%edx
   106e8:	8b 45 08             	mov    0x8(%ebp),%eax
   106eb:	8b 40 3c             	mov    0x3c(%eax),%eax
   106ee:	83 ec 04             	sub    $0x4,%esp
   106f1:	57                   	push   %edi
   106f2:	56                   	push   %esi
   106f3:	53                   	push   %ebx
   106f4:	51                   	push   %ecx
   106f5:	52                   	push   %edx
   106f6:	50                   	push   %eax
   106f7:	68 dc 16 01 00       	push   $0x116dc
   106fc:	e8 aa 0e 00 00       	call   115ab <log_printf>
   10701:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   10704:	8b 45 08             	mov    0x8(%ebp),%eax
   10707:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1070a:	8b 45 08             	mov    0x8(%ebp),%eax
   1070d:	8b 40 18             	mov    0x18(%eax),%eax
   10710:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10713:	8b 45 08             	mov    0x8(%ebp),%eax
   10716:	8b 58 14             	mov    0x14(%eax),%ebx
   10719:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1071c:	8b 45 08             	mov    0x8(%ebp),%eax
   1071f:	8b 78 10             	mov    0x10(%eax),%edi
   10722:	8b 45 08             	mov    0x8(%ebp),%eax
   10725:	8b 70 24             	mov    0x24(%eax),%esi
   10728:	8b 45 08             	mov    0x8(%ebp),%eax
   1072b:	8b 58 28             	mov    0x28(%eax),%ebx
   1072e:	8b 45 08             	mov    0x8(%ebp),%eax
   10731:	8b 50 20             	mov    0x20(%eax),%edx
   10734:	8b 45 08             	mov    0x8(%ebp),%eax
   10737:	8b 40 2c             	mov    0x2c(%eax),%eax
   1073a:	83 ec 0c             	sub    $0xc,%esp
   1073d:	51                   	push   %ecx
   1073e:	ff 75 e4             	pushl  -0x1c(%ebp)
   10741:	ff 75 e0             	pushl  -0x20(%ebp)
   10744:	57                   	push   %edi
   10745:	56                   	push   %esi
   10746:	53                   	push   %ebx
   10747:	52                   	push   %edx
   10748:	50                   	push   %eax
   10749:	68 08 17 01 00       	push   $0x11708
   1074e:	e8 58 0e 00 00       	call   115ab <log_printf>
   10753:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10756:	8b 45 08             	mov    0x8(%ebp),%eax
   10759:	8b 50 40             	mov    0x40(%eax),%edx
   1075c:	8b 45 08             	mov    0x8(%ebp),%eax
   1075f:	8b 40 38             	mov    0x38(%eax),%eax
   10762:	83 ec 04             	sub    $0x4,%esp
   10765:	52                   	push   %edx
   10766:	50                   	push   %eax
   10767:	68 51 17 01 00       	push   $0x11751
   1076c:	e8 3a 0e 00 00       	call   115ab <log_printf>
   10771:	83 c4 10             	add    $0x10,%esp
}
   10774:	90                   	nop
   10775:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10778:	5b                   	pop    %ebx
   10779:	5e                   	pop    %esi
   1077a:	5f                   	pop    %edi
   1077b:	5d                   	pop    %ebp
   1077c:	c3                   	ret    

0001077d <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   1077d:	55                   	push   %ebp
   1077e:	89 e5                	mov    %esp,%ebp
   10780:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10783:	83 ec 0c             	sub    $0xc,%esp
   10786:	68 67 17 01 00       	push   $0x11767
   1078b:	e8 1b 0e 00 00       	call   115ab <log_printf>
   10790:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10793:	83 ec 08             	sub    $0x8,%esp
   10796:	ff 75 0c             	pushl  0xc(%ebp)
   10799:	68 84 17 01 00       	push   $0x11784
   1079e:	e8 08 0e 00 00       	call   115ab <log_printf>
   107a3:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   107a6:	83 ec 0c             	sub    $0xc,%esp
   107a9:	ff 75 08             	pushl  0x8(%ebp)
   107ac:	e8 f3 fe ff ff       	call   106a4 <dump_core_regs>
   107b1:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   107b4:	e8 e4 fe ff ff       	call   1069d <hlt>
   107b9:	eb f9                	jmp    107b4 <do_default_handler+0x37>

000107bb <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   107bb:	55                   	push   %ebp
   107bc:	89 e5                	mov    %esp,%ebp
   107be:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   107c1:	83 ec 08             	sub    $0x8,%esp
   107c4:	68 9e 17 01 00       	push   $0x1179e
   107c9:	ff 75 08             	pushl  0x8(%ebp)
   107cc:	e8 ac ff ff ff       	call   1077d <do_default_handler>
   107d1:	83 c4 10             	add    $0x10,%esp

}
   107d4:	90                   	nop
   107d5:	c9                   	leave  
   107d6:	c3                   	ret    

000107d7 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   107d7:	55                   	push   %ebp
   107d8:	89 e5                	mov    %esp,%ebp
   107da:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   107dd:	83 ec 08             	sub    $0x8,%esp
   107e0:	68 b0 17 01 00       	push   $0x117b0
   107e5:	ff 75 08             	pushl  0x8(%ebp)
   107e8:	e8 90 ff ff ff       	call   1077d <do_default_handler>
   107ed:	83 c4 10             	add    $0x10,%esp
}
   107f0:	90                   	nop
   107f1:	c9                   	leave  
   107f2:	c3                   	ret    

000107f3 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   107f3:	55                   	push   %ebp
   107f4:	89 e5                	mov    %esp,%ebp
   107f6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   107f9:	83 ec 08             	sub    $0x8,%esp
   107fc:	68 c1 17 01 00       	push   $0x117c1
   10801:	ff 75 08             	pushl  0x8(%ebp)
   10804:	e8 74 ff ff ff       	call   1077d <do_default_handler>
   10809:	83 c4 10             	add    $0x10,%esp
}
   1080c:	90                   	nop
   1080d:	c9                   	leave  
   1080e:	c3                   	ret    

0001080f <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   1080f:	55                   	push   %ebp
   10810:	89 e5                	mov    %esp,%ebp
   10812:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   10815:	83 ec 08             	sub    $0x8,%esp
   10818:	68 d1 17 01 00       	push   $0x117d1
   1081d:	ff 75 08             	pushl  0x8(%ebp)
   10820:	e8 58 ff ff ff       	call   1077d <do_default_handler>
   10825:	83 c4 10             	add    $0x10,%esp
}
   10828:	90                   	nop
   10829:	c9                   	leave  
   1082a:	c3                   	ret    

0001082b <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   1082b:	55                   	push   %ebp
   1082c:	89 e5                	mov    %esp,%ebp
   1082e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10831:	83 ec 08             	sub    $0x8,%esp
   10834:	68 e0 17 01 00       	push   $0x117e0
   10839:	ff 75 08             	pushl  0x8(%ebp)
   1083c:	e8 3c ff ff ff       	call   1077d <do_default_handler>
   10841:	83 c4 10             	add    $0x10,%esp
}
   10844:	90                   	nop
   10845:	c9                   	leave  
   10846:	c3                   	ret    

00010847 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10847:	55                   	push   %ebp
   10848:	89 e5                	mov    %esp,%ebp
   1084a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   1084d:	83 ec 08             	sub    $0x8,%esp
   10850:	68 ec 17 01 00       	push   $0x117ec
   10855:	ff 75 08             	pushl  0x8(%ebp)
   10858:	e8 20 ff ff ff       	call   1077d <do_default_handler>
   1085d:	83 c4 10             	add    $0x10,%esp
}
   10860:	90                   	nop
   10861:	c9                   	leave  
   10862:	c3                   	ret    

00010863 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10863:	55                   	push   %ebp
   10864:	89 e5                	mov    %esp,%ebp
   10866:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10869:	83 ec 08             	sub    $0x8,%esp
   1086c:	68 f6 17 01 00       	push   $0x117f6
   10871:	ff 75 08             	pushl  0x8(%ebp)
   10874:	e8 04 ff ff ff       	call   1077d <do_default_handler>
   10879:	83 c4 10             	add    $0x10,%esp
}
   1087c:	90                   	nop
   1087d:	c9                   	leave  
   1087e:	c3                   	ret    

0001087f <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   1087f:	55                   	push   %ebp
   10880:	89 e5                	mov    %esp,%ebp
   10882:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10885:	83 ec 08             	sub    $0x8,%esp
   10888:	68 0c 18 01 00       	push   $0x1180c
   1088d:	ff 75 08             	pushl  0x8(%ebp)
   10890:	e8 e8 fe ff ff       	call   1077d <do_default_handler>
   10895:	83 c4 10             	add    $0x10,%esp
}
   10898:	90                   	nop
   10899:	c9                   	leave  
   1089a:	c3                   	ret    

0001089b <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   1089b:	55                   	push   %ebp
   1089c:	89 e5                	mov    %esp,%ebp
   1089e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   108a1:	83 ec 08             	sub    $0x8,%esp
   108a4:	68 1c 18 01 00       	push   $0x1181c
   108a9:	ff 75 08             	pushl  0x8(%ebp)
   108ac:	e8 cc fe ff ff       	call   1077d <do_default_handler>
   108b1:	83 c4 10             	add    $0x10,%esp
}
   108b4:	90                   	nop
   108b5:	c9                   	leave  
   108b6:	c3                   	ret    

000108b7 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   108b7:	55                   	push   %ebp
   108b8:	89 e5                	mov    %esp,%ebp
   108ba:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   108bd:	83 ec 08             	sub    $0x8,%esp
   108c0:	68 32 18 01 00       	push   $0x11832
   108c5:	ff 75 08             	pushl  0x8(%ebp)
   108c8:	e8 b0 fe ff ff       	call   1077d <do_default_handler>
   108cd:	83 c4 10             	add    $0x10,%esp
}
   108d0:	90                   	nop
   108d1:	c9                   	leave  
   108d2:	c3                   	ret    

000108d3 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   108d3:	55                   	push   %ebp
   108d4:	89 e5                	mov    %esp,%ebp
   108d6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   108d9:	83 ec 08             	sub    $0x8,%esp
   108dc:	68 40 18 01 00       	push   $0x11840
   108e1:	ff 75 08             	pushl  0x8(%ebp)
   108e4:	e8 94 fe ff ff       	call   1077d <do_default_handler>
   108e9:	83 c4 10             	add    $0x10,%esp
}
   108ec:	90                   	nop
   108ed:	c9                   	leave  
   108ee:	c3                   	ret    

000108ef <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   108ef:	55                   	push   %ebp
   108f0:	89 e5                	mov    %esp,%ebp
   108f2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   108f5:	83 ec 08             	sub    $0x8,%esp
   108f8:	68 4c 18 01 00       	push   $0x1184c
   108fd:	ff 75 08             	pushl  0x8(%ebp)
   10900:	e8 78 fe ff ff       	call   1077d <do_default_handler>
   10905:	83 c4 10             	add    $0x10,%esp
}
   10908:	90                   	nop
   10909:	c9                   	leave  
   1090a:	c3                   	ret    

0001090b <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   1090b:	55                   	push   %ebp
   1090c:	89 e5                	mov    %esp,%ebp
   1090e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   10911:	83 ec 08             	sub    $0x8,%esp
   10914:	68 61 18 01 00       	push   $0x11861
   10919:	ff 75 08             	pushl  0x8(%ebp)
   1091c:	e8 5c fe ff ff       	call   1077d <do_default_handler>
   10921:	83 c4 10             	add    $0x10,%esp
}
   10924:	90                   	nop
   10925:	c9                   	leave  
   10926:	c3                   	ret    

00010927 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   10927:	55                   	push   %ebp
   10928:	89 e5                	mov    %esp,%ebp
   1092a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   1092d:	83 ec 08             	sub    $0x8,%esp
   10930:	68 76 18 01 00       	push   $0x11876
   10935:	ff 75 08             	pushl  0x8(%ebp)
   10938:	e8 40 fe ff ff       	call   1077d <do_default_handler>
   1093d:	83 c4 10             	add    $0x10,%esp
}
   10940:	90                   	nop
   10941:	c9                   	leave  
   10942:	c3                   	ret    

00010943 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10943:	55                   	push   %ebp
   10944:	89 e5                	mov    %esp,%ebp
   10946:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10949:	83 ec 08             	sub    $0x8,%esp
   1094c:	68 8a 18 01 00       	push   $0x1188a
   10951:	ff 75 08             	pushl  0x8(%ebp)
   10954:	e8 24 fe ff ff       	call   1077d <do_default_handler>
   10959:	83 c4 10             	add    $0x10,%esp
}
   1095c:	90                   	nop
   1095d:	c9                   	leave  
   1095e:	c3                   	ret    

0001095f <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   1095f:	55                   	push   %ebp
   10960:	89 e5                	mov    %esp,%ebp
   10962:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10965:	83 ec 08             	sub    $0x8,%esp
   10968:	68 96 18 01 00       	push   $0x11896
   1096d:	ff 75 08             	pushl  0x8(%ebp)
   10970:	e8 08 fe ff ff       	call   1077d <do_default_handler>
   10975:	83 c4 10             	add    $0x10,%esp
}
   10978:	90                   	nop
   10979:	c9                   	leave  
   1097a:	c3                   	ret    

0001097b <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   1097b:	55                   	push   %ebp
   1097c:	89 e5                	mov    %esp,%ebp
   1097e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10981:	83 ec 08             	sub    $0x8,%esp
   10984:	68 b4 18 01 00       	push   $0x118b4
   10989:	ff 75 08             	pushl  0x8(%ebp)
   1098c:	e8 ec fd ff ff       	call   1077d <do_default_handler>
   10991:	83 c4 10             	add    $0x10,%esp
}
   10994:	90                   	nop
   10995:	c9                   	leave  
   10996:	c3                   	ret    

00010997 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10997:	55                   	push   %ebp
   10998:	89 e5                	mov    %esp,%ebp
   1099a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   1099d:	83 ec 08             	sub    $0x8,%esp
   109a0:	68 c5 18 01 00       	push   $0x118c5
   109a5:	ff 75 08             	pushl  0x8(%ebp)
   109a8:	e8 d0 fd ff ff       	call   1077d <do_default_handler>
   109ad:	83 c4 10             	add    $0x10,%esp
}
   109b0:	90                   	nop
   109b1:	c9                   	leave  
   109b2:	c3                   	ret    

000109b3 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   109b3:	55                   	push   %ebp
   109b4:	89 e5                	mov    %esp,%ebp
   109b6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   109b9:	83 ec 08             	sub    $0x8,%esp
   109bc:	68 d4 18 01 00       	push   $0x118d4
   109c1:	ff 75 08             	pushl  0x8(%ebp)
   109c4:	e8 b4 fd ff ff       	call   1077d <do_default_handler>
   109c9:	83 c4 10             	add    $0x10,%esp
}
   109cc:	90                   	nop
   109cd:	c9                   	leave  
   109ce:	c3                   	ret    

000109cf <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   109cf:	55                   	push   %ebp
   109d0:	89 e5                	mov    %esp,%ebp
   109d2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   109d5:	83 ec 08             	sub    $0x8,%esp
   109d8:	68 f3 18 01 00       	push   $0x118f3
   109dd:	ff 75 08             	pushl  0x8(%ebp)
   109e0:	e8 98 fd ff ff       	call   1077d <do_default_handler>
   109e5:	83 c4 10             	add    $0x10,%esp
}
   109e8:	90                   	nop
   109e9:	c9                   	leave  
   109ea:	c3                   	ret    

000109eb <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   109eb:	55                   	push   %ebp
   109ec:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   109ee:	6a 11                	push   $0x11
   109f0:	6a 20                	push   $0x20
   109f2:	e8 51 fc ff ff       	call   10648 <outb>
   109f7:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   109fa:	6a 20                	push   $0x20
   109fc:	6a 21                	push   $0x21
   109fe:	e8 45 fc ff ff       	call   10648 <outb>
   10a03:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10a06:	6a 04                	push   $0x4
   10a08:	6a 21                	push   $0x21
   10a0a:	e8 39 fc ff ff       	call   10648 <outb>
   10a0f:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10a12:	6a 01                	push   $0x1
   10a14:	6a 21                	push   $0x21
   10a16:	e8 2d fc ff ff       	call   10648 <outb>
   10a1b:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10a1e:	6a 11                	push   $0x11
   10a20:	68 a0 00 00 00       	push   $0xa0
   10a25:	e8 1e fc ff ff       	call   10648 <outb>
   10a2a:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10a2d:	6a 28                	push   $0x28
   10a2f:	68 a1 00 00 00       	push   $0xa1
   10a34:	e8 0f fc ff ff       	call   10648 <outb>
   10a39:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10a3c:	6a 02                	push   $0x2
   10a3e:	68 a1 00 00 00       	push   $0xa1
   10a43:	e8 00 fc ff ff       	call   10648 <outb>
   10a48:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10a4b:	6a 01                	push   $0x1
   10a4d:	68 a1 00 00 00       	push   $0xa1
   10a52:	e8 f1 fb ff ff       	call   10648 <outb>
   10a57:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10a5a:	68 fb 00 00 00       	push   $0xfb
   10a5f:	6a 21                	push   $0x21
   10a61:	e8 e2 fb ff ff       	call   10648 <outb>
   10a66:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10a69:	68 ff 00 00 00       	push   $0xff
   10a6e:	68 a1 00 00 00       	push   $0xa1
   10a73:	e8 d0 fb ff ff       	call   10648 <outb>
   10a78:	83 c4 08             	add    $0x8,%esp
}
   10a7b:	90                   	nop
   10a7c:	c9                   	leave  
   10a7d:	c3                   	ret    

00010a7e <irq_init>:


void irq_init(void){ 
   10a7e:	55                   	push   %ebp
   10a7f:	89 e5                	mov    %esp,%ebp
   10a81:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10a84:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10a8b:	eb 25                	jmp    10ab2 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10a8d:	ba 28 00 01 00       	mov    $0x10028,%edx
   10a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a95:	c1 e0 03             	shl    $0x3,%eax
   10a98:	05 c0 21 01 00       	add    $0x121c0,%eax
   10a9d:	68 00 8e 00 00       	push   $0x8e00
   10aa2:	52                   	push   %edx
   10aa3:	6a 08                	push   $0x8
   10aa5:	50                   	push   %eax
   10aa6:	e8 d5 fa ff ff       	call   10580 <gate_desc_set>
   10aab:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10aae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10ab2:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10ab6:	7e d5                	jle    10a8d <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10ab8:	83 ec 08             	sub    $0x8,%esp
   10abb:	68 47 00 01 00       	push   $0x10047
   10ac0:	6a 00                	push   $0x0
   10ac2:	e8 65 01 00 00       	call   10c2c <irq_install>
   10ac7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10aca:	83 ec 08             	sub    $0x8,%esp
   10acd:	68 66 00 01 00       	push   $0x10066
   10ad2:	6a 01                	push   $0x1
   10ad4:	e8 53 01 00 00       	call   10c2c <irq_install>
   10ad9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10adc:	83 ec 08             	sub    $0x8,%esp
   10adf:	68 85 00 01 00       	push   $0x10085
   10ae4:	6a 02                	push   $0x2
   10ae6:	e8 41 01 00 00       	call   10c2c <irq_install>
   10aeb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10aee:	83 ec 08             	sub    $0x8,%esp
   10af1:	68 a4 00 01 00       	push   $0x100a4
   10af6:	6a 03                	push   $0x3
   10af8:	e8 2f 01 00 00       	call   10c2c <irq_install>
   10afd:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10b00:	83 ec 08             	sub    $0x8,%esp
   10b03:	68 c3 00 01 00       	push   $0x100c3
   10b08:	6a 04                	push   $0x4
   10b0a:	e8 1d 01 00 00       	call   10c2c <irq_install>
   10b0f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10b12:	83 ec 08             	sub    $0x8,%esp
   10b15:	68 e2 00 01 00       	push   $0x100e2
   10b1a:	6a 05                	push   $0x5
   10b1c:	e8 0b 01 00 00       	call   10c2c <irq_install>
   10b21:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10b24:	83 ec 08             	sub    $0x8,%esp
   10b27:	68 01 01 01 00       	push   $0x10101
   10b2c:	6a 06                	push   $0x6
   10b2e:	e8 f9 00 00 00       	call   10c2c <irq_install>
   10b33:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10b36:	83 ec 08             	sub    $0x8,%esp
   10b39:	68 20 01 01 00       	push   $0x10120
   10b3e:	6a 07                	push   $0x7
   10b40:	e8 e7 00 00 00       	call   10c2c <irq_install>
   10b45:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10b48:	83 ec 08             	sub    $0x8,%esp
   10b4b:	68 3f 01 01 00       	push   $0x1013f
   10b50:	6a 08                	push   $0x8
   10b52:	e8 d5 00 00 00       	call   10c2c <irq_install>
   10b57:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10b5a:	83 ec 08             	sub    $0x8,%esp
   10b5d:	68 5c 01 01 00       	push   $0x1015c
   10b62:	6a 0a                	push   $0xa
   10b64:	e8 c3 00 00 00       	call   10c2c <irq_install>
   10b69:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10b6c:	83 ec 08             	sub    $0x8,%esp
   10b6f:	68 79 01 01 00       	push   $0x10179
   10b74:	6a 0b                	push   $0xb
   10b76:	e8 b1 00 00 00       	call   10c2c <irq_install>
   10b7b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10b7e:	83 ec 08             	sub    $0x8,%esp
   10b81:	68 96 01 01 00       	push   $0x10196
   10b86:	6a 0c                	push   $0xc
   10b88:	e8 9f 00 00 00       	call   10c2c <irq_install>
   10b8d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10b90:	83 ec 08             	sub    $0x8,%esp
   10b93:	68 b3 01 01 00       	push   $0x101b3
   10b98:	6a 0d                	push   $0xd
   10b9a:	e8 8d 00 00 00       	call   10c2c <irq_install>
   10b9f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10ba2:	83 ec 08             	sub    $0x8,%esp
   10ba5:	68 d0 01 01 00       	push   $0x101d0
   10baa:	6a 0e                	push   $0xe
   10bac:	e8 7b 00 00 00       	call   10c2c <irq_install>
   10bb1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10bb4:	83 ec 08             	sub    $0x8,%esp
   10bb7:	68 ed 01 01 00       	push   $0x101ed
   10bbc:	6a 10                	push   $0x10
   10bbe:	e8 69 00 00 00       	call   10c2c <irq_install>
   10bc3:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10bc6:	83 ec 08             	sub    $0x8,%esp
   10bc9:	68 0c 02 01 00       	push   $0x1020c
   10bce:	6a 11                	push   $0x11
   10bd0:	e8 57 00 00 00       	call   10c2c <irq_install>
   10bd5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10bd8:	83 ec 08             	sub    $0x8,%esp
   10bdb:	68 29 02 01 00       	push   $0x10229
   10be0:	6a 12                	push   $0x12
   10be2:	e8 45 00 00 00       	call   10c2c <irq_install>
   10be7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10bea:	83 ec 08             	sub    $0x8,%esp
   10bed:	68 48 02 01 00       	push   $0x10248
   10bf2:	6a 13                	push   $0x13
   10bf4:	e8 33 00 00 00       	call   10c2c <irq_install>
   10bf9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10bfc:	83 ec 08             	sub    $0x8,%esp
   10bff:	68 67 02 01 00       	push   $0x10267
   10c04:	6a 14                	push   $0x14
   10c06:	e8 21 00 00 00       	call   10c2c <irq_install>
   10c0b:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10c0e:	b8 c0 21 01 00       	mov    $0x121c0,%eax
   10c13:	83 ec 08             	sub    $0x8,%esp
   10c16:	68 00 04 00 00       	push   $0x400
   10c1b:	50                   	push   %eax
   10c1c:	e8 54 fa ff ff       	call   10675 <lidt>
   10c21:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10c24:	e8 c2 fd ff ff       	call   109eb <init_pic>
}
   10c29:	90                   	nop
   10c2a:	c9                   	leave  
   10c2b:	c3                   	ret    

00010c2c <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   10c2c:	55                   	push   %ebp
   10c2d:	89 e5                	mov    %esp,%ebp
   10c2f:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10c32:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10c36:	7e 07                	jle    10c3f <irq_install+0x13>
        return -1;
   10c38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c3d:	eb 25                	jmp    10c64 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   10c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c42:	8b 55 08             	mov    0x8(%ebp),%edx
   10c45:	c1 e2 03             	shl    $0x3,%edx
   10c48:	81 c2 c0 21 01 00    	add    $0x121c0,%edx
   10c4e:	68 00 8e 00 00       	push   $0x8e00
   10c53:	50                   	push   %eax
   10c54:	6a 08                	push   $0x8
   10c56:	52                   	push   %edx
   10c57:	e8 24 f9 ff ff       	call   10580 <gate_desc_set>
   10c5c:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   10c5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c64:	c9                   	leave  
   10c65:	c3                   	ret    

00010c66 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   10c66:	55                   	push   %ebp
   10c67:	89 e5                	mov    %esp,%ebp
   10c69:	53                   	push   %ebx
   10c6a:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10c6d:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c71:	7e 78                	jle    10ceb <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10c73:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10c77:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c7b:	7f 32                	jg     10caf <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c7d:	6a 21                	push   $0x21
   10c7f:	e8 a7 f9 ff ff       	call   1062b <inb>
   10c84:	83 c4 04             	add    $0x4,%esp
   10c87:	89 c2                	mov    %eax,%edx
   10c89:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8c:	bb 01 00 00 00       	mov    $0x1,%ebx
   10c91:	89 c1                	mov    %eax,%ecx
   10c93:	d3 e3                	shl    %cl,%ebx
   10c95:	89 d8                	mov    %ebx,%eax
   10c97:	f7 d0                	not    %eax
   10c99:	21 d0                	and    %edx,%eax
   10c9b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10c9e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ca2:	50                   	push   %eax
   10ca3:	6a 21                	push   $0x21
   10ca5:	e8 9e f9 ff ff       	call   10648 <outb>
   10caa:	83 c4 08             	add    $0x8,%esp
   10cad:	eb 3d                	jmp    10cec <irq_enable+0x86>
    }else{
        irq_num -= 8;
   10caf:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10cb3:	68 a1 00 00 00       	push   $0xa1
   10cb8:	e8 6e f9 ff ff       	call   1062b <inb>
   10cbd:	83 c4 04             	add    $0x4,%esp
   10cc0:	89 c2                	mov    %eax,%edx
   10cc2:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc5:	bb 01 00 00 00       	mov    $0x1,%ebx
   10cca:	89 c1                	mov    %eax,%ecx
   10ccc:	d3 e3                	shl    %cl,%ebx
   10cce:	89 d8                	mov    %ebx,%eax
   10cd0:	f7 d0                	not    %eax
   10cd2:	21 d0                	and    %edx,%eax
   10cd4:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10cd7:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10cdb:	50                   	push   %eax
   10cdc:	68 a1 00 00 00       	push   $0xa1
   10ce1:	e8 62 f9 ff ff       	call   10648 <outb>
   10ce6:	83 c4 08             	add    $0x8,%esp
   10ce9:	eb 01                	jmp    10cec <irq_enable+0x86>
        return;
   10ceb:	90                   	nop
    }
}
   10cec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10cef:	c9                   	leave  
   10cf0:	c3                   	ret    

00010cf1 <irq_disable>:
void irq_disable (int irq_num) {
   10cf1:	55                   	push   %ebp
   10cf2:	89 e5                	mov    %esp,%ebp
   10cf4:	53                   	push   %ebx
   10cf5:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10cf8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10cfc:	7e 74                	jle    10d72 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10cfe:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d02:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d06:	7f 30                	jg     10d38 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10d08:	6a 21                	push   $0x21
   10d0a:	e8 1c f9 ff ff       	call   1062b <inb>
   10d0f:	83 c4 04             	add    $0x4,%esp
   10d12:	89 c3                	mov    %eax,%ebx
   10d14:	8b 45 08             	mov    0x8(%ebp),%eax
   10d17:	ba 01 00 00 00       	mov    $0x1,%edx
   10d1c:	89 c1                	mov    %eax,%ecx
   10d1e:	d3 e2                	shl    %cl,%edx
   10d20:	89 d0                	mov    %edx,%eax
   10d22:	09 d8                	or     %ebx,%eax
   10d24:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10d27:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d2b:	50                   	push   %eax
   10d2c:	6a 21                	push   $0x21
   10d2e:	e8 15 f9 ff ff       	call   10648 <outb>
   10d33:	83 c4 08             	add    $0x8,%esp
   10d36:	eb 3b                	jmp    10d73 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10d38:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10d3c:	68 a1 00 00 00       	push   $0xa1
   10d41:	e8 e5 f8 ff ff       	call   1062b <inb>
   10d46:	83 c4 04             	add    $0x4,%esp
   10d49:	89 c3                	mov    %eax,%ebx
   10d4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4e:	ba 01 00 00 00       	mov    $0x1,%edx
   10d53:	89 c1                	mov    %eax,%ecx
   10d55:	d3 e2                	shl    %cl,%edx
   10d57:	89 d0                	mov    %edx,%eax
   10d59:	09 d8                	or     %ebx,%eax
   10d5b:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10d5e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d62:	50                   	push   %eax
   10d63:	68 a1 00 00 00       	push   $0xa1
   10d68:	e8 db f8 ff ff       	call   10648 <outb>
   10d6d:	83 c4 08             	add    $0x8,%esp
   10d70:	eb 01                	jmp    10d73 <irq_disable+0x82>
        return;
   10d72:	90                   	nop
    }
}
   10d73:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d76:	c9                   	leave  
   10d77:	c3                   	ret    

00010d78 <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   10d78:	55                   	push   %ebp
   10d79:	89 e5                	mov    %esp,%ebp
    cli();
   10d7b:	e8 e7 f8 ff ff       	call   10667 <cli>
}
   10d80:	90                   	nop
   10d81:	5d                   	pop    %ebp
   10d82:	c3                   	ret    

00010d83 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   10d83:	55                   	push   %ebp
   10d84:	89 e5                	mov    %esp,%ebp
    sti();
   10d86:	e8 e3 f8 ff ff       	call   1066e <sti>
}
   10d8b:	90                   	nop
   10d8c:	5d                   	pop    %ebp
   10d8d:	c3                   	ret    

00010d8e <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10d8e:	55                   	push   %ebp
   10d8f:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   10d91:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   10d95:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d99:	7e 0f                	jle    10daa <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   10d9b:	6a 20                	push   $0x20
   10d9d:	68 a0 00 00 00       	push   $0xa0
   10da2:	e8 a1 f8 ff ff       	call   10648 <outb>
   10da7:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10daa:	6a 20                	push   $0x20
   10dac:	6a 20                	push   $0x20
   10dae:	e8 95 f8 ff ff       	call   10648 <outb>
   10db3:	83 c4 08             	add    $0x8,%esp

}
   10db6:	90                   	nop
   10db7:	c9                   	leave  
   10db8:	c3                   	ret    

00010db9 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10db9:	55                   	push   %ebp
   10dba:	89 e5                	mov    %esp,%ebp
   10dbc:	83 ec 08             	sub    $0x8,%esp
   10dbf:	8b 55 08             	mov    0x8(%ebp),%edx
   10dc2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dc5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10dc9:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10dcc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10dd0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10dd4:	ee                   	out    %al,(%dx)
}
   10dd5:	90                   	nop
   10dd6:	c9                   	leave  
   10dd7:	c3                   	ret    

00010dd8 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   10dd8:	55                   	push   %ebp
   10dd9:	89 e5                	mov    %esp,%ebp
   10ddb:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10dde:	a1 c0 25 01 00       	mov    0x125c0,%eax
   10de3:	83 c0 01             	add    $0x1,%eax
   10de6:	a3 c0 25 01 00       	mov    %eax,0x125c0
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   10deb:	83 ec 0c             	sub    $0xc,%esp
   10dee:	6a 20                	push   $0x20
   10df0:	e8 99 ff ff ff       	call   10d8e <pic_send_eoi>
   10df5:	83 c4 10             	add    $0x10,%esp
}
   10df8:	90                   	nop
   10df9:	c9                   	leave  
   10dfa:	c3                   	ret    

00010dfb <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10dfb:	55                   	push   %ebp
   10dfc:	89 e5                	mov    %esp,%ebp
   10dfe:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10e01:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   10e08:	6a 36                	push   $0x36
   10e0a:	6a 43                	push   $0x43
   10e0c:	e8 a8 ff ff ff       	call   10db9 <outb>
   10e11:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   10e14:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e17:	0f b6 c0             	movzbl %al,%eax
   10e1a:	50                   	push   %eax
   10e1b:	6a 40                	push   $0x40
   10e1d:	e8 97 ff ff ff       	call   10db9 <outb>
   10e22:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   10e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e28:	c1 e8 08             	shr    $0x8,%eax
   10e2b:	0f b6 c0             	movzbl %al,%eax
   10e2e:	50                   	push   %eax
   10e2f:	6a 40                	push   $0x40
   10e31:	e8 83 ff ff ff       	call   10db9 <outb>
   10e36:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10e39:	83 ec 08             	sub    $0x8,%esp
   10e3c:	68 86 02 01 00       	push   $0x10286
   10e41:	6a 20                	push   $0x20
   10e43:	e8 e4 fd ff ff       	call   10c2c <irq_install>
   10e48:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10e4b:	83 ec 0c             	sub    $0xc,%esp
   10e4e:	6a 20                	push   $0x20
   10e50:	e8 11 fe ff ff       	call   10c66 <irq_enable>
   10e55:	83 c4 10             	add    $0x10,%esp
}
   10e58:	90                   	nop
   10e59:	c9                   	leave  
   10e5a:	c3                   	ret    

00010e5b <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   10e5b:	55                   	push   %ebp
   10e5c:	89 e5                	mov    %esp,%ebp
   10e5e:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e61:	c7 05 c0 25 01 00 00 	movl   $0x0,0x125c0
   10e68:	00 00 00 

    init_pit();
   10e6b:	e8 8b ff ff ff       	call   10dfb <init_pit>
   10e70:	90                   	nop
   10e71:	c9                   	leave  
   10e72:	c3                   	ret    

00010e73 <write_tr>:

static inline void write_tr(uint16_t tss_sel) {
   10e73:	55                   	push   %ebp
   10e74:	89 e5                	mov    %esp,%ebp
   10e76:	83 ec 04             	sub    $0x4,%esp
   10e79:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   10e80:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10e84:	0f 00 d8             	ltr    %ax
}
   10e87:	90                   	nop
   10e88:	c9                   	leave  
   10e89:	c3                   	ret    

00010e8a <kernel_init>:
#include "core/task.h" 

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   10e8a:	55                   	push   %ebp
   10e8b:	89 e5                	mov    %esp,%ebp
   10e8d:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10e90:	e8 32 f7 ff ff       	call   105c7 <cpu_init>

    log_init();
   10e95:	e8 9c 06 00 00       	call   11536 <log_init>
    irq_init();
   10e9a:	e8 df fb ff ff       	call   10a7e <irq_init>
    time_init();
   10e9f:	e8 b7 ff ff ff       	call   10e5b <time_init>
}
   10ea4:	90                   	nop
   10ea5:	c9                   	leave  
   10ea6:	c3                   	ret    

00010ea7 <init_task_entry>:

static task_t first_task;
static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   10ea7:	55                   	push   %ebp
   10ea8:	89 e5                	mov    %esp,%ebp
   10eaa:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   10ead:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int task: %d",count++);
   10eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eb7:	8d 50 01             	lea    0x1(%eax),%edx
   10eba:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10ebd:	83 ec 08             	sub    $0x8,%esp
   10ec0:	50                   	push   %eax
   10ec1:	68 0d 19 01 00       	push   $0x1190d
   10ec6:	e8 e0 06 00 00       	call   115ab <log_printf>
   10ecb:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task,&first_task);
   10ece:	83 ec 08             	sub    $0x8,%esp
   10ed1:	68 e0 25 01 00       	push   $0x125e0
   10ed6:	68 60 36 01 00       	push   $0x13660
   10edb:	e8 d0 f4 ff ff       	call   103b0 <task_switch_from_to>
   10ee0:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d",count++);
   10ee3:	eb cf                	jmp    10eb4 <init_task_entry+0xd>

00010ee5 <init_main>:
    }    

}

void init_main(void) {
   10ee5:	55                   	push   %ebp
   10ee6:	89 e5                	mov    %esp,%ebp
   10ee8:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   10eeb:	83 ec 0c             	sub    $0xc,%esp
   10eee:	68 1a 19 01 00       	push   $0x1191a
   10ef3:	e8 b3 06 00 00       	call   115ab <log_printf>
   10ef8:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   10efb:	83 ec 04             	sub    $0x4,%esp
   10efe:	68 30 19 01 00       	push   $0x11930
   10f03:	68 39 19 01 00       	push   $0x11939
   10f08:	68 3f 19 01 00       	push   $0x1193f
   10f0d:	e8 99 06 00 00       	call   115ab <log_printf>
   10f12:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   10f15:	83 ec 0c             	sub    $0xc,%esp
   10f18:	6a 61                	push   $0x61
   10f1a:	68 45 23 01 00       	push   $0x12345
   10f1f:	6a 85                	push   $0xffffff85
   10f21:	68 40 e2 01 00       	push   $0x1e240
   10f26:	68 4e 19 01 00       	push   $0x1194e
   10f2b:	e8 7b 06 00 00       	call   115ab <log_printf>
   10f30:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, (uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   10f33:	ba 60 36 01 00       	mov    $0x13660,%edx
   10f38:	b8 a7 0e 01 00       	mov    $0x10ea7,%eax
   10f3d:	83 ec 04             	sub    $0x4,%esp
   10f40:	52                   	push   %edx
   10f41:	50                   	push   %eax
   10f42:	68 60 36 01 00       	push   $0x13660
   10f47:	e8 82 f4 ff ff       	call   103ce <task_init>
   10f4c:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0,0);
   10f4f:	83 ec 04             	sub    $0x4,%esp
   10f52:	6a 00                	push   $0x0
   10f54:	6a 00                	push   $0x0
   10f56:	68 e0 25 01 00       	push   $0x125e0
   10f5b:	e8 6e f4 ff ff       	call   103ce <task_init>
   10f60:	83 c4 10             	add    $0x10,%esp
    write_tr(first_task.tss_sel); // 初始化任务寄存器 task register
   10f63:	a1 4c 26 01 00       	mov    0x1264c,%eax
   10f68:	0f b7 c0             	movzwl %ax,%eax
   10f6b:	83 ec 0c             	sub    $0xc,%esp
   10f6e:	50                   	push   %eax
   10f6f:	e8 ff fe ff ff       	call   10e73 <write_tr>
   10f74:	83 c4 10             	add    $0x10,%esp

    int count = 0;
   10f77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int main: %d",count++);
   10f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f81:	8d 50 01             	lea    0x1(%eax),%edx
   10f84:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f87:	83 ec 08             	sub    $0x8,%esp
   10f8a:	50                   	push   %eax
   10f8b:	68 5a 19 01 00       	push   $0x1195a
   10f90:	e8 16 06 00 00       	call   115ab <log_printf>
   10f95:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&first_task,&init_task);
   10f98:	83 ec 08             	sub    $0x8,%esp
   10f9b:	68 60 36 01 00       	push   $0x13660
   10fa0:	68 e0 25 01 00       	push   $0x125e0
   10fa5:	e8 06 f4 ff ff       	call   103b0 <task_switch_from_to>
   10faa:	83 c4 10             	add    $0x10,%esp
        log_printf("int main: %d",count++);
   10fad:	eb cf                	jmp    10f7e <init_main+0x99>

00010faf <hlt>:
static inline void hlt (void) {
   10faf:	55                   	push   %ebp
   10fb0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fb2:	f4                   	hlt    
}
   10fb3:	90                   	nop
   10fb4:	5d                   	pop    %ebp
   10fb5:	c3                   	ret    

00010fb6 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   10fb6:	55                   	push   %ebp
   10fb7:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   10fb9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fbd:	74 3b                	je     10ffa <kernel_strcpy+0x44>
   10fbf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fc3:	74 35                	je     10ffa <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   10fc5:	eb 17                	jmp    10fde <kernel_strcpy+0x28>
        *dest++ = *src++;
   10fc7:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fca:	8d 42 01             	lea    0x1(%edx),%eax
   10fcd:	89 45 0c             	mov    %eax,0xc(%ebp)
   10fd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd3:	8d 48 01             	lea    0x1(%eax),%ecx
   10fd6:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10fd9:	0f b6 12             	movzbl (%edx),%edx
   10fdc:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   10fde:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe1:	0f b6 00             	movzbl (%eax),%eax
   10fe4:	84 c0                	test   %al,%al
   10fe6:	74 0a                	je     10ff2 <kernel_strcpy+0x3c>
   10fe8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10feb:	0f b6 00             	movzbl (%eax),%eax
   10fee:	84 c0                	test   %al,%al
   10ff0:	75 d5                	jne    10fc7 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   10ff2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff5:	c6 00 00             	movb   $0x0,(%eax)
   10ff8:	eb 01                	jmp    10ffb <kernel_strcpy+0x45>
        return;
   10ffa:	90                   	nop
}
   10ffb:	5d                   	pop    %ebp
   10ffc:	c3                   	ret    

00010ffd <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   10ffd:	55                   	push   %ebp
   10ffe:	89 e5                	mov    %esp,%ebp
   11000:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   11003:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11007:	74 61                	je     1106a <kernel_strncpy+0x6d>
   11009:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1100d:	74 5b                	je     1106a <kernel_strncpy+0x6d>
   1100f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11013:	74 55                	je     1106a <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   11015:	8b 45 08             	mov    0x8(%ebp),%eax
   11018:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   1101b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1101e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   11021:	eb 17                	jmp    1103a <kernel_strncpy+0x3d>
        *d++ = *s++;
   11023:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11026:	8d 42 01             	lea    0x1(%edx),%eax
   11029:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1102c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1102f:	8d 48 01             	lea    0x1(%eax),%ecx
   11032:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11035:	0f b6 12             	movzbl (%edx),%edx
   11038:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1103a:	8b 45 10             	mov    0x10(%ebp),%eax
   1103d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11040:	89 55 10             	mov    %edx,0x10(%ebp)
   11043:	85 c0                	test   %eax,%eax
   11045:	7e 0a                	jle    11051 <kernel_strncpy+0x54>
   11047:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1104a:	0f b6 00             	movzbl (%eax),%eax
   1104d:	84 c0                	test   %al,%al
   1104f:	75 d2                	jne    11023 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   11051:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11055:	75 0b                	jne    11062 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11057:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1105a:	83 e8 01             	sub    $0x1,%eax
   1105d:	c6 00 00             	movb   $0x0,(%eax)
   11060:	eb 09                	jmp    1106b <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   11062:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11065:	c6 00 00             	movb   $0x0,(%eax)
   11068:	eb 01                	jmp    1106b <kernel_strncpy+0x6e>
        return;
   1106a:	90                   	nop
    }
}
   1106b:	c9                   	leave  
   1106c:	c3                   	ret    

0001106d <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   1106d:	55                   	push   %ebp
   1106e:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   11070:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11074:	74 06                	je     1107c <kernel_strncmp+0xf>
   11076:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1107a:	75 0f                	jne    1108b <kernel_strncmp+0x1e>
        return -1;
   1107c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11081:	eb 62                	jmp    110e5 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   11083:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11087:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   1108b:	8b 45 08             	mov    0x8(%ebp),%eax
   1108e:	0f b6 00             	movzbl (%eax),%eax
   11091:	84 c0                	test   %al,%al
   11093:	74 20                	je     110b5 <kernel_strncmp+0x48>
   11095:	8b 45 0c             	mov    0xc(%ebp),%eax
   11098:	0f b6 00             	movzbl (%eax),%eax
   1109b:	84 c0                	test   %al,%al
   1109d:	74 16                	je     110b5 <kernel_strncmp+0x48>
   1109f:	8b 45 08             	mov    0x8(%ebp),%eax
   110a2:	0f b6 10             	movzbl (%eax),%edx
   110a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a8:	0f b6 00             	movzbl (%eax),%eax
   110ab:	38 c2                	cmp    %al,%dl
   110ad:	75 06                	jne    110b5 <kernel_strncmp+0x48>
   110af:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110b3:	75 ce                	jne    11083 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   110b5:	8b 45 08             	mov    0x8(%ebp),%eax
   110b8:	0f b6 00             	movzbl (%eax),%eax
   110bb:	84 c0                	test   %al,%al
   110bd:	74 21                	je     110e0 <kernel_strncmp+0x73>
   110bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   110c2:	0f b6 00             	movzbl (%eax),%eax
   110c5:	84 c0                	test   %al,%al
   110c7:	74 17                	je     110e0 <kernel_strncmp+0x73>
   110c9:	8b 45 08             	mov    0x8(%ebp),%eax
   110cc:	0f b6 10             	movzbl (%eax),%edx
   110cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d2:	0f b6 00             	movzbl (%eax),%eax
   110d5:	38 c2                	cmp    %al,%dl
   110d7:	74 07                	je     110e0 <kernel_strncmp+0x73>
   110d9:	b8 01 00 00 00       	mov    $0x1,%eax
   110de:	eb 05                	jmp    110e5 <kernel_strncmp+0x78>
   110e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110e5:	5d                   	pop    %ebp
   110e6:	c3                   	ret    

000110e7 <kernel_strlen>:
int kernel_strlen(const char * str){
   110e7:	55                   	push   %ebp
   110e8:	89 e5                	mov    %esp,%ebp
   110ea:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   110ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110f1:	75 07                	jne    110fa <kernel_strlen+0x13>
        return 0;
   110f3:	b8 00 00 00 00       	mov    $0x0,%eax
   110f8:	eb 26                	jmp    11120 <kernel_strlen+0x39>
    }

    const char * c = str;
   110fa:	8b 45 08             	mov    0x8(%ebp),%eax
   110fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11100:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11107:	eb 04                	jmp    1110d <kernel_strlen+0x26>
        len++;
   11109:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   1110d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11110:	8d 50 01             	lea    0x1(%eax),%edx
   11113:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11116:	0f b6 00             	movzbl (%eax),%eax
   11119:	84 c0                	test   %al,%al
   1111b:	75 ec                	jne    11109 <kernel_strlen+0x22>
    }
    return len;
   1111d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11120:	c9                   	leave  
   11121:	c3                   	ret    

00011122 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   11122:	55                   	push   %ebp
   11123:	89 e5                	mov    %esp,%ebp
   11125:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11128:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1112c:	74 40                	je     1116e <kernel_memcpy+0x4c>
   1112e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11132:	74 3a                	je     1116e <kernel_memcpy+0x4c>
   11134:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11138:	74 34                	je     1116e <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   1113a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1113d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   11140:	8b 45 08             	mov    0x8(%ebp),%eax
   11143:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11146:	eb 17                	jmp    1115f <kernel_memcpy+0x3d>
        *d++ = *s++;
   11148:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1114b:	8d 42 01             	lea    0x1(%edx),%eax
   1114e:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11151:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11154:	8d 48 01             	lea    0x1(%eax),%ecx
   11157:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1115a:	0f b6 12             	movzbl (%edx),%edx
   1115d:	88 10                	mov    %dl,(%eax)
    while(size--){
   1115f:	8b 45 10             	mov    0x10(%ebp),%eax
   11162:	8d 50 ff             	lea    -0x1(%eax),%edx
   11165:	89 55 10             	mov    %edx,0x10(%ebp)
   11168:	85 c0                	test   %eax,%eax
   1116a:	75 dc                	jne    11148 <kernel_memcpy+0x26>
   1116c:	eb 01                	jmp    1116f <kernel_memcpy+0x4d>
        return;
   1116e:	90                   	nop
    }

}
   1116f:	c9                   	leave  
   11170:	c3                   	ret    

00011171 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   11171:	55                   	push   %ebp
   11172:	89 e5                	mov    %esp,%ebp
   11174:	83 ec 14             	sub    $0x14,%esp
   11177:	8b 45 0c             	mov    0xc(%ebp),%eax
   1117a:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   1117d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11181:	74 2c                	je     111af <kernel_memset+0x3e>
   11183:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11187:	74 26                	je     111af <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11189:	8b 45 08             	mov    0x8(%ebp),%eax
   1118c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   1118f:	eb 0f                	jmp    111a0 <kernel_memset+0x2f>
       *d++ = v; 
   11191:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11194:	8d 50 01             	lea    0x1(%eax),%edx
   11197:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1119a:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1119e:	88 10                	mov    %dl,(%eax)
    while(size--){
   111a0:	8b 45 10             	mov    0x10(%ebp),%eax
   111a3:	8d 50 ff             	lea    -0x1(%eax),%edx
   111a6:	89 55 10             	mov    %edx,0x10(%ebp)
   111a9:	85 c0                	test   %eax,%eax
   111ab:	75 e4                	jne    11191 <kernel_memset+0x20>
   111ad:	eb 01                	jmp    111b0 <kernel_memset+0x3f>
        return;
   111af:	90                   	nop
    }
}
   111b0:	c9                   	leave  
   111b1:	c3                   	ret    

000111b2 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   111b2:	55                   	push   %ebp
   111b3:	89 e5                	mov    %esp,%ebp
   111b5:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   111b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111bc:	74 0c                	je     111ca <kernel_memcmp+0x18>
   111be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111c2:	74 06                	je     111ca <kernel_memcmp+0x18>
   111c4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111c8:	75 07                	jne    111d1 <kernel_memcmp+0x1f>
        return -1;
   111ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   111cf:	eb 43                	jmp    11214 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   111d1:	8b 45 08             	mov    0x8(%ebp),%eax
   111d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   111d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   111da:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   111dd:	eb 23                	jmp    11202 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   111df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111e2:	8d 50 01             	lea    0x1(%eax),%edx
   111e5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111e8:	0f b6 08             	movzbl (%eax),%ecx
   111eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111ee:	8d 50 01             	lea    0x1(%eax),%edx
   111f1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   111f4:	0f b6 00             	movzbl (%eax),%eax
   111f7:	38 c1                	cmp    %al,%cl
   111f9:	74 07                	je     11202 <kernel_memcmp+0x50>
            return -1;
   111fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11200:	eb 12                	jmp    11214 <kernel_memcmp+0x62>
    while(size--){
   11202:	8b 45 10             	mov    0x10(%ebp),%eax
   11205:	8d 50 ff             	lea    -0x1(%eax),%edx
   11208:	89 55 10             	mov    %edx,0x10(%ebp)
   1120b:	85 c0                	test   %eax,%eax
   1120d:	75 d0                	jne    111df <kernel_memcmp+0x2d>
        }
    }
    return 0;
   1120f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11214:	c9                   	leave  
   11215:	c3                   	ret    

00011216 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   11216:	55                   	push   %ebp
   11217:	89 e5                	mov    %esp,%ebp
   11219:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   1121c:	8d 45 10             	lea    0x10(%ebp),%eax
   1121f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   11222:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11225:	83 ec 04             	sub    $0x4,%esp
   11228:	50                   	push   %eax
   11229:	ff 75 0c             	pushl  0xc(%ebp)
   1122c:	ff 75 08             	pushl  0x8(%ebp)
   1122f:	e8 45 01 00 00       	call   11379 <kernel_vsprintf>
   11234:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11237:	90                   	nop
   11238:	c9                   	leave  
   11239:	c3                   	ret    

0001123a <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   1123a:	55                   	push   %ebp
   1123b:	89 e5                	mov    %esp,%ebp
   1123d:	53                   	push   %ebx
   1123e:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11241:	8b 45 08             	mov    0x8(%ebp),%eax
   11244:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11247:	8b 45 0c             	mov    0xc(%ebp),%eax
   1124a:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   1124d:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11251:	74 1d                	je     11270 <kernel_itoa+0x36>
   11253:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11257:	74 17                	je     11270 <kernel_itoa+0x36>
   11259:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1125d:	74 11                	je     11270 <kernel_itoa+0x36>
   1125f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11263:	74 0b                	je     11270 <kernel_itoa+0x36>
        *p = '\0';
   11265:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11268:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1126b:	e9 03 01 00 00       	jmp    11373 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11270:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11277:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1127b:	79 19                	jns    11296 <kernel_itoa+0x5c>
   1127d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11281:	75 13                	jne    11296 <kernel_itoa+0x5c>
        *p++ = '-';
   11283:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11286:	8d 50 01             	lea    0x1(%eax),%edx
   11289:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1128c:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   1128f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1129a:	74 3b                	je     112d7 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   1129c:	8b 0d b8 19 01 00    	mov    0x119b8,%ecx
   112a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   112a5:	99                   	cltd   
   112a6:	f7 7d 10             	idivl  0x10(%ebp)
   112a9:	89 d0                	mov    %edx,%eax
   112ab:	83 c0 0f             	add    $0xf,%eax
   112ae:	01 c8                	add    %ecx,%eax
   112b0:	0f b6 00             	movzbl (%eax),%eax
   112b3:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   112b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112b9:	8d 50 01             	lea    0x1(%eax),%edx
   112bc:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112bf:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   112c3:	88 10                	mov    %dl,(%eax)
            num /= base;
   112c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c8:	99                   	cltd   
   112c9:	f7 7d 10             	idivl  0x10(%ebp)
   112cc:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   112cf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112d3:	75 c7                	jne    1129c <kernel_itoa+0x62>
   112d5:	eb 4b                	jmp    11322 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   112d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   112da:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   112dd:	8b 0d b8 19 01 00    	mov    0x119b8,%ecx
   112e3:	8b 5d 10             	mov    0x10(%ebp),%ebx
   112e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112e9:	ba 00 00 00 00       	mov    $0x0,%edx
   112ee:	f7 f3                	div    %ebx
   112f0:	89 d0                	mov    %edx,%eax
   112f2:	83 c0 0f             	add    $0xf,%eax
   112f5:	01 c8                	add    %ecx,%eax
   112f7:	0f b6 00             	movzbl (%eax),%eax
   112fa:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   112fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11300:	8d 50 01             	lea    0x1(%eax),%edx
   11303:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11306:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1130a:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   1130c:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1130f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11312:	ba 00 00 00 00       	mov    $0x0,%edx
   11317:	f7 f3                	div    %ebx
   11319:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   1131c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11320:	75 bb                	jne    112dd <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11322:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11325:	8d 50 ff             	lea    -0x1(%eax),%edx
   11328:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1132b:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   1132e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11332:	74 08                	je     1133c <kernel_itoa+0x102>
   11334:	8b 45 08             	mov    0x8(%ebp),%eax
   11337:	83 c0 01             	add    $0x1,%eax
   1133a:	eb 03                	jmp    1133f <kernel_itoa+0x105>
   1133c:	8b 45 08             	mov    0x8(%ebp),%eax
   1133f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   11342:	eb 27                	jmp    1136b <kernel_itoa+0x131>
        char ch = *start;
   11344:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11347:	0f b6 00             	movzbl (%eax),%eax
   1134a:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   1134d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11350:	0f b6 10             	movzbl (%eax),%edx
   11353:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11356:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11358:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1135b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1135e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11361:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11365:	88 10                	mov    %dl,(%eax)
        start++;
   11367:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1136b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1136e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11371:	72 d1                	jb     11344 <kernel_itoa+0x10a>
    }
}
   11373:	83 c4 20             	add    $0x20,%esp
   11376:	5b                   	pop    %ebx
   11377:	5d                   	pop    %ebp
   11378:	c3                   	ret    

00011379 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   11379:	55                   	push   %ebp
   1137a:	89 e5                	mov    %esp,%ebp
   1137c:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   1137f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11386:	8b 45 08             	mov    0x8(%ebp),%eax
   11389:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   1138c:	e9 17 01 00 00       	jmp    114a8 <kernel_vsprintf+0x12f>
        switch(state) {
   11391:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11394:	85 c0                	test   %eax,%eax
   11396:	74 0a                	je     113a2 <kernel_vsprintf+0x29>
   11398:	83 f8 01             	cmp    $0x1,%eax
   1139b:	74 2b                	je     113c8 <kernel_vsprintf+0x4f>
   1139d:	e9 06 01 00 00       	jmp    114a8 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   113a2:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   113a6:	75 0c                	jne    113b4 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   113a8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   113af:	e9 f4 00 00 00       	jmp    114a8 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   113b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113b7:	8d 50 01             	lea    0x1(%eax),%edx
   113ba:	89 55 f8             	mov    %edx,-0x8(%ebp)
   113bd:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   113c1:	88 10                	mov    %dl,(%eax)
                }
                break;
   113c3:	e9 e0 00 00 00       	jmp    114a8 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   113c8:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   113cc:	75 47                	jne    11415 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   113ce:	8b 45 10             	mov    0x10(%ebp),%eax
   113d1:	8d 50 04             	lea    0x4(%eax),%edx
   113d4:	89 55 10             	mov    %edx,0x10(%ebp)
   113d7:	8b 00                	mov    (%eax),%eax
   113d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   113dc:	ff 75 f4             	pushl  -0xc(%ebp)
   113df:	e8 03 fd ff ff       	call   110e7 <kernel_strlen>
   113e4:	83 c4 04             	add    $0x4,%esp
   113e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   113ea:	eb 17                	jmp    11403 <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   113ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113ef:	8d 42 01             	lea    0x1(%edx),%eax
   113f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
   113f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113f8:	8d 48 01             	lea    0x1(%eax),%ecx
   113fb:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113fe:	0f b6 12             	movzbl (%edx),%edx
   11401:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   11403:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11406:	8d 50 ff             	lea    -0x1(%eax),%edx
   11409:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1140c:	85 c0                	test   %eax,%eax
   1140e:	75 dc                	jne    113ec <kernel_vsprintf+0x73>
   11410:	e9 8b 00 00 00       	jmp    114a0 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   11415:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11419:	75 2e                	jne    11449 <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   1141b:	8b 45 10             	mov    0x10(%ebp),%eax
   1141e:	8d 50 04             	lea    0x4(%eax),%edx
   11421:	89 55 10             	mov    %edx,0x10(%ebp)
   11424:	8b 00                	mov    (%eax),%eax
   11426:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   11429:	6a 0a                	push   $0xa
   1142b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1142e:	ff 75 f8             	pushl  -0x8(%ebp)
   11431:	e8 04 fe ff ff       	call   1123a <kernel_itoa>
   11436:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   11439:	ff 75 f8             	pushl  -0x8(%ebp)
   1143c:	e8 a6 fc ff ff       	call   110e7 <kernel_strlen>
   11441:	83 c4 04             	add    $0x4,%esp
   11444:	01 45 f8             	add    %eax,-0x8(%ebp)
   11447:	eb 57                	jmp    114a0 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   11449:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1144d:	75 2e                	jne    1147d <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   1144f:	8b 45 10             	mov    0x10(%ebp),%eax
   11452:	8d 50 04             	lea    0x4(%eax),%edx
   11455:	89 55 10             	mov    %edx,0x10(%ebp)
   11458:	8b 00                	mov    (%eax),%eax
   1145a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   1145d:	6a 10                	push   $0x10
   1145f:	ff 75 e8             	pushl  -0x18(%ebp)
   11462:	ff 75 f8             	pushl  -0x8(%ebp)
   11465:	e8 d0 fd ff ff       	call   1123a <kernel_itoa>
   1146a:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   1146d:	ff 75 f8             	pushl  -0x8(%ebp)
   11470:	e8 72 fc ff ff       	call   110e7 <kernel_strlen>
   11475:	83 c4 04             	add    $0x4,%esp
   11478:	01 45 f8             	add    %eax,-0x8(%ebp)
   1147b:	eb 23                	jmp    114a0 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   1147d:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11481:	75 1d                	jne    114a0 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   11483:	8b 45 10             	mov    0x10(%ebp),%eax
   11486:	8d 50 04             	lea    0x4(%eax),%edx
   11489:	89 55 10             	mov    %edx,0x10(%ebp)
   1148c:	8b 00                	mov    (%eax),%eax
   1148e:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11491:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11494:	8d 50 01             	lea    0x1(%eax),%edx
   11497:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1149a:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1149e:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   114a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   114a7:	90                   	nop
    while ((ch = *fmt++)) {
   114a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   114ab:	8d 50 01             	lea    0x1(%eax),%edx
   114ae:	89 55 0c             	mov    %edx,0xc(%ebp)
   114b1:	0f b6 00             	movzbl (%eax),%eax
   114b4:	88 45 ef             	mov    %al,-0x11(%ebp)
   114b7:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   114bb:	0f 85 d0 fe ff ff    	jne    11391 <kernel_vsprintf+0x18>
        }
    }
}
   114c1:	90                   	nop
   114c2:	c9                   	leave  
   114c3:	c3                   	ret    

000114c4 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   114c4:	55                   	push   %ebp
   114c5:	89 e5                	mov    %esp,%ebp
   114c7:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   114ca:	83 ec 08             	sub    $0x8,%esp
   114cd:	ff 75 14             	pushl  0x14(%ebp)
   114d0:	68 68 19 01 00       	push   $0x11968
   114d5:	e8 d1 00 00 00       	call   115ab <log_printf>
   114da:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   114dd:	ff 75 10             	pushl  0x10(%ebp)
   114e0:	ff 75 0c             	pushl  0xc(%ebp)
   114e3:	ff 75 08             	pushl  0x8(%ebp)
   114e6:	68 7a 19 01 00       	push   $0x1197a
   114eb:	e8 bb 00 00 00       	call   115ab <log_printf>
   114f0:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   114f3:	e8 b7 fa ff ff       	call   10faf <hlt>
   114f8:	eb f9                	jmp    114f3 <panic+0x2f>

000114fa <inb>:
static inline uint8_t inb(uint16_t port) {
   114fa:	55                   	push   %ebp
   114fb:	89 e5                	mov    %esp,%ebp
   114fd:	83 ec 14             	sub    $0x14,%esp
   11500:	8b 45 08             	mov    0x8(%ebp),%eax
   11503:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   11507:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1150b:	89 c2                	mov    %eax,%edx
   1150d:	ec                   	in     (%dx),%al
   1150e:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11511:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11515:	c9                   	leave  
   11516:	c3                   	ret    

00011517 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11517:	55                   	push   %ebp
   11518:	89 e5                	mov    %esp,%ebp
   1151a:	83 ec 08             	sub    $0x8,%esp
   1151d:	8b 55 08             	mov    0x8(%ebp),%edx
   11520:	8b 45 0c             	mov    0xc(%ebp),%eax
   11523:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11527:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   1152a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1152e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11532:	ee                   	out    %al,(%dx)
}
   11533:	90                   	nop
   11534:	c9                   	leave  
   11535:	c3                   	ret    

00011536 <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值

#define COM1_PORT 0x3f8

void log_init(void) {
   11536:	55                   	push   %ebp
   11537:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   11539:	6a 00                	push   $0x0
   1153b:	68 f9 03 00 00       	push   $0x3f9
   11540:	e8 d2 ff ff ff       	call   11517 <outb>
   11545:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11548:	68 80 00 00 00       	push   $0x80
   1154d:	68 fb 03 00 00       	push   $0x3fb
   11552:	e8 c0 ff ff ff       	call   11517 <outb>
   11557:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   1155a:	6a 03                	push   $0x3
   1155c:	68 f8 03 00 00       	push   $0x3f8
   11561:	e8 b1 ff ff ff       	call   11517 <outb>
   11566:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11569:	6a 00                	push   $0x0
   1156b:	68 f9 03 00 00       	push   $0x3f9
   11570:	e8 a2 ff ff ff       	call   11517 <outb>
   11575:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11578:	6a 03                	push   $0x3
   1157a:	68 fb 03 00 00       	push   $0x3fb
   1157f:	e8 93 ff ff ff       	call   11517 <outb>
   11584:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11587:	68 c7 00 00 00       	push   $0xc7
   1158c:	68 fa 03 00 00       	push   $0x3fa
   11591:	e8 81 ff ff ff       	call   11517 <outb>
   11596:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11599:	6a 0f                	push   $0xf
   1159b:	68 fc 03 00 00       	push   $0x3fc
   115a0:	e8 72 ff ff ff       	call   11517 <outb>
   115a5:	83 c4 08             	add    $0x8,%esp

}
   115a8:	90                   	nop
   115a9:	c9                   	leave  
   115aa:	c3                   	ret    

000115ab <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   115ab:	55                   	push   %ebp
   115ac:	89 e5                	mov    %esp,%ebp
   115ae:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   115b4:	83 ec 04             	sub    $0x4,%esp
   115b7:	68 80 00 00 00       	push   $0x80
   115bc:	6a 00                	push   $0x0
   115be:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   115c4:	50                   	push   %eax
   115c5:	e8 a7 fb ff ff       	call   11171 <kernel_memset>
   115ca:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   115cd:	8d 45 0c             	lea    0xc(%ebp),%eax
   115d0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(str_buf,fmt,args);
   115d6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   115dc:	83 ec 04             	sub    $0x4,%esp
   115df:	50                   	push   %eax
   115e0:	ff 75 08             	pushl  0x8(%ebp)
   115e3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   115e9:	50                   	push   %eax
   115ea:	e8 8a fd ff ff       	call   11379 <kernel_vsprintf>
   115ef:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;
   115f2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   115f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   115fb:	eb 31                	jmp    1162e <log_printf+0x83>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   115fd:	90                   	nop
   115fe:	83 ec 0c             	sub    $0xc,%esp
   11601:	68 fd 03 00 00       	push   $0x3fd
   11606:	e8 ef fe ff ff       	call   114fa <inb>
   1160b:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   1160e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11611:	8d 50 01             	lea    0x1(%eax),%edx
   11614:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11617:	0f b6 00             	movzbl (%eax),%eax
   1161a:	0f b6 c0             	movzbl %al,%eax
   1161d:	83 ec 08             	sub    $0x8,%esp
   11620:	50                   	push   %eax
   11621:	68 f8 03 00 00       	push   $0x3f8
   11626:	e8 ec fe ff ff       	call   11517 <outb>
   1162b:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   1162e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11631:	0f b6 00             	movzbl (%eax),%eax
   11634:	84 c0                	test   %al,%al
   11636:	75 c5                	jne    115fd <log_printf+0x52>
    }

// 变列
    outb(COM1_PORT,'\r');
   11638:	83 ec 08             	sub    $0x8,%esp
   1163b:	6a 0d                	push   $0xd
   1163d:	68 f8 03 00 00       	push   $0x3f8
   11642:	e8 d0 fe ff ff       	call   11517 <outb>
   11647:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   1164a:	83 ec 08             	sub    $0x8,%esp
   1164d:	6a 0a                	push   $0xa
   1164f:	68 f8 03 00 00       	push   $0x3f8
   11654:	e8 be fe ff ff       	call   11517 <outb>
   11659:	83 c4 10             	add    $0x10,%esp
   1165c:	90                   	nop
   1165d:	c9                   	leave  
   1165e:	c3                   	ret    
