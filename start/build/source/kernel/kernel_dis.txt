
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001bb0 memsz 0x000058f0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001853  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000358  00011854  00011854  00002854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011bac  00011bac  00002bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d30  00011bc0  00011bc0  00002bb0  2**5
                  ALLOC
  4 .debug_line   00000b3b  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c55  00000000  00000000  000036eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093d  00000000  00000000  00005340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  00005c80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000971  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00006711  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000a98  00000000  00000000  00006724  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011854 l    d  .rodata	00000000 .rodata
00011bac l    d  .data	00000000 .data
00011bc0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	00000017 write_tr
00011bc0 l     O .bss	00000088 task_manager
000102bc l     F .text	000000f0 tss_init
000118ac l     O .rodata	0000000a __func__.1969
00000000 l    df *ABS*	00000000 cpu.c
0001047b l     F .text	00000028 lgdt
000104a3 l     F .text	0000001a far_jump
00011c60 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010658 l     F .text	0000001d inb
00010675 l     F .text	0000001f outb
00010694 l     F .text	00000007 cli
0001069b l     F .text	00000007 sti
000106a2 l     F .text	00000028 lidt
000106ca l     F .text	00000007 hlt
000106d1 l     F .text	000000d9 dump_core_regs
000107aa l     F .text	0000003e do_default_handler
00012460 l     O .bss	00000400 idt_table
00010a18 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010de6 l     F .text	0000001f outb
00012860 l     O .bss	00000004 sys_tick
00010e28 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012880 l     O .bss	00001000 init_task_stack
00013880 l     O .bss	0000006c init_task
00000000 l    df *ABS*	00000000 klib.c
00010fa9 l     F .text	00000007 hlt
00011bac l     O .data	00000004 num2ch.1900
00000000 l    df *ABS*	00000000 list.c
000114f4 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000116ee l     F .text	0000001d inb
0001170b l     F .text	0000001f outb
0001111c g     F .text	0000004f kernel_memcpy
00010db0 g     F .text	0000000b irq_enable_global
0001158c g     F .text	00000064 list_insert_last
0001091c g     F .text	0000001c do_handler_segment_not_present
0001116b g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
000105f4 g     F .text	0000000b cpu_init
0001172a g     F .text	00000075 log_init
00010f01 g     F .text	000000a8 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00010fb0 g     F .text	00000047 kernel_strcpy
00010c93 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010874 g     F .text	0000001c do_handler_overflow
000109a8 g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010954 g     F .text	0000001c do_handler_general_protection
00010804 g     F .text	0000001c do_handler_divider
000108e4 g     F .text	0000001c do_handler_double_fault
00010ec2 g     F .text	0000003f init_task_entry
00010970 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010dbb g     F .text	0000002b pic_send_eoi
0001043e g     F .text	0000000a task_first_task
00010e05 g     F .text	00000023 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
000109fc g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
000138f0 g     O .bss	00002000 stack
000100e2 g       .text	00000000 exception_handler_bound_range
000108ac g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
0001098c g     F .text	0000001c do_handler_fpu_error
00010403 g     F .text	0000003b task_first_init
000109c4 g     F .text	0000001c do_handler_machine_check
00010820 g     F .text	0000001c do_handler_Debug
0001152c g     F .text	00000060 list_insert_first
0001083c g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00010ff7 g     F .text	00000070 kernel_strncpy
00010da5 g     F .text	0000000b irq_disable_global
00010ea0 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
00011373 g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
00010900 g     F .text	0000001c do_handler_invalid_tss
000114be g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00010c59 g     F .text	0000003a irq_install
00010540 g     F .text	0000006d init_gdt
00010d1e g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
000108c8 g     F .text	0000001c do_handler_device_unavailable
00010644 g     F .text	00000014 switch_to_tss
000111ac g     F .text	00000064 kernel_memcmp
00011507 g     F .text	00000025 list_init
000109e0 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
000107e8 g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
000103ac g     F .text	0000001b task_switch_from_to
00010aab g     F .text	000001ae irq_init
000110e1 g     F .text	0000003b kernel_strlen
000104bd g     F .text	00000083 segment_desc_set
00010890 g     F .text	0000001c do_handler_bound_range
000115f0 g     F .text	00000079 list_remove_first
00011067 g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010448 g     F .text	00000033 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00010938 g     F .text	0000001c do_handler_stack_segment_fault
00010858 g     F .text	0000001c do_handler_breakpoint
0001179f g     F .text	000000b4 log_printf
000103c7 g     F .text	0000003c task_init
00011210 g     F .text	00000024 kernel_sprintf
000105ff g     F .text	00000045 gdt_alloc_desc
00011234 g     F .text	0000013f kernel_itoa
00011669 g     F .text	00000085 list_remove
000105ad g     F .text	00000047 gate_desc_set
00010e88 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 97 0e 00 00       	call   10ea0 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc f0 58 01 00       	mov    $0x158f0,%esp
    jmp init_main
   10023:	e9 d9 0e 00 00       	jmp    10f01 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 af 07 00 00       	call   107e8 <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 ac 07 00 00       	call   10804 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 a9 07 00 00       	call   10820 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 a6 07 00 00       	call   1083c <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 a3 07 00 00       	call   10858 <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 a0 07 00 00       	call   10874 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 9d 07 00 00       	call   10890 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 9a 07 00 00       	call   108ac <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 97 07 00 00       	call   108c8 <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 96 07 00 00       	call   108e4 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 95 07 00 00       	call   10900 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 94 07 00 00       	call   1091c <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 93 07 00 00       	call   10938 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 92 07 00 00       	call   10954 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 91 07 00 00       	call   10970 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 8e 07 00 00       	call   1098c <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 8d 07 00 00       	call   109a8 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 8a 07 00 00       	call   109c4 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 87 07 00 00       	call   109e0 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 84 07 00 00       	call   109fc <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 6e 0b 00 00       	call   10e05 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <write_tr>:

static inline void hlt (void) {
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
   102a8:	83 ec 04             	sub    $0x4,%esp
   102ab:	8b 45 08             	mov    0x8(%ebp),%eax
   102ae:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   102b2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102b6:	0f 00 d8             	ltr    %ax
}
   102b9:	90                   	nop
   102ba:	c9                   	leave  
   102bb:	c3                   	ret    

000102bc <tss_init>:
#include "tools/log.h"
#include "comm/cpu_instr.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102bc:	55                   	push   %ebp
   102bd:	89 e5                	mov    %esp,%ebp
   102bf:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102c2:	e8 38 03 00 00       	call   105ff <gdt_alloc_desc>
   102c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   102ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102ce:	79 1a                	jns    102ea <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   102d0:	83 ec 0c             	sub    $0xc,%esp
   102d3:	68 54 18 01 00       	push   $0x11854
   102d8:	e8 c2 14 00 00       	call   1179f <log_printf>
   102dd:	83 c4 10             	add    $0x10,%esp
        return -1;
   102e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102e5:	e9 c0 00 00 00       	jmp    103aa <tss_init+0xee>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   102ea:	8b 45 08             	mov    0x8(%ebp),%eax
   102ed:	68 89 00 00 00       	push   $0x89
   102f2:	6a 68                	push   $0x68
   102f4:	50                   	push   %eax
   102f5:	ff 75 f4             	pushl  -0xc(%ebp)
   102f8:	e8 c0 01 00 00       	call   104bd <segment_desc_set>
   102fd:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10300:	8b 45 08             	mov    0x8(%ebp),%eax
   10303:	83 ec 04             	sub    $0x4,%esp
   10306:	6a 68                	push   $0x68
   10308:	6a 00                	push   $0x0
   1030a:	50                   	push   %eax
   1030b:	e8 5b 0e 00 00       	call   1116b <kernel_memset>
   10310:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10313:	8b 45 08             	mov    0x8(%ebp),%eax
   10316:	8b 55 0c             	mov    0xc(%ebp),%edx
   10319:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1031c:	8b 45 08             	mov    0x8(%ebp),%eax
   1031f:	8b 55 10             	mov    0x10(%ebp),%edx
   10322:	89 50 04             	mov    %edx,0x4(%eax)
   10325:	8b 45 08             	mov    0x8(%ebp),%eax
   10328:	8b 50 04             	mov    0x4(%eax),%edx
   1032b:	8b 45 08             	mov    0x8(%ebp),%eax
   1032e:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10331:	8b 45 08             	mov    0x8(%ebp),%eax
   10334:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
    task->tss.eip = entry;
   1033b:	8b 45 08             	mov    0x8(%ebp),%eax
   1033e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10341:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10344:	8b 45 08             	mov    0x8(%ebp),%eax
   10347:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
   10358:	8b 45 08             	mov    0x8(%ebp),%eax
   1035b:	8b 50 5c             	mov    0x5c(%eax),%edx
   1035e:	8b 45 08             	mov    0x8(%ebp),%eax
   10361:	89 50 58             	mov    %edx,0x58(%eax)
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	8b 50 58             	mov    0x58(%eax),%edx
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	8b 50 54             	mov    0x54(%eax),%edx
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	89 50 50             	mov    %edx,0x50(%eax)
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	8b 50 50             	mov    0x50(%eax),%edx
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   10388:	8b 45 08             	mov    0x8(%ebp),%eax
   1038b:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)
    task->tss.iomap = 0;
   10392:	8b 45 08             	mov    0x8(%ebp),%eax
   10395:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)

    task->tss_sel = tss_sel;
   1039c:	8b 45 08             	mov    0x8(%ebp),%eax
   1039f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103a2:	89 50 68             	mov    %edx,0x68(%eax)
    return 0;
   103a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103aa:	c9                   	leave  
   103ab:	c3                   	ret    

000103ac <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   103ac:	55                   	push   %ebp
   103ad:	89 e5                	mov    %esp,%ebp
   103af:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   103b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   103b5:	8b 40 68             	mov    0x68(%eax),%eax
   103b8:	83 ec 0c             	sub    $0xc,%esp
   103bb:	50                   	push   %eax
   103bc:	e8 83 02 00 00       	call   10644 <switch_to_tss>
   103c1:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   103c4:	90                   	nop
   103c5:	c9                   	leave  
   103c6:	c3                   	ret    

000103c7 <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task, uint32_t entry, uint32_t esp){
   103c7:	55                   	push   %ebp
   103c8:	89 e5                	mov    %esp,%ebp
   103ca:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   103cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103d1:	75 19                	jne    103ec <task_init+0x25>
   103d3:	68 67 18 01 00       	push   $0x11867
   103d8:	68 ac 18 01 00       	push   $0x118ac
   103dd:	6a 37                	push   $0x37
   103df:	68 7c 18 01 00       	push   $0x1187c
   103e4:	e8 d5 10 00 00       	call   114be <panic>
   103e9:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   103ec:	83 ec 04             	sub    $0x4,%esp
   103ef:	ff 75 10             	pushl  0x10(%ebp)
   103f2:	ff 75 0c             	pushl  0xc(%ebp)
   103f5:	ff 75 08             	pushl  0x8(%ebp)
   103f8:	e8 bf fe ff ff       	call   102bc <tss_init>
   103fd:	83 c4 10             	add    $0x10,%esp
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     task->stack = pesp;
    // }
    // return 0;
}
   10400:	90                   	nop
   10401:	c9                   	leave  
   10402:	c3                   	ret    

00010403 <task_first_init>:

void task_first_init (void) {
   10403:	55                   	push   %ebp
   10404:	89 e5                	mov    %esp,%ebp
   10406:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, 0,0);
   10409:	83 ec 04             	sub    $0x4,%esp
   1040c:	6a 00                	push   $0x0
   1040e:	6a 00                	push   $0x0
   10410:	68 dc 1b 01 00       	push   $0x11bdc
   10415:	e8 ad ff ff ff       	call   103c7 <task_init>
   1041a:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   1041d:	a1 44 1c 01 00       	mov    0x11c44,%eax
   10422:	0f b7 c0             	movzwl %ax,%eax
   10425:	83 ec 0c             	sub    $0xc,%esp
   10428:	50                   	push   %eax
   10429:	e8 77 fe ff ff       	call   102a5 <write_tr>
   1042e:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10431:	c7 05 c0 1b 01 00 dc 	movl   $0x11bdc,0x11bc0
   10438:	1b 01 00 
}
   1043b:	90                   	nop
   1043c:	c9                   	leave  
   1043d:	c3                   	ret    

0001043e <task_first_task>:

task_t * task_first_task (void) {
   1043e:	55                   	push   %ebp
   1043f:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10441:	b8 dc 1b 01 00       	mov    $0x11bdc,%eax
}
   10446:	5d                   	pop    %ebp
   10447:	c3                   	ret    

00010448 <task_manager_init>:

void task_manager_init (void) {
   10448:	55                   	push   %ebp
   10449:	89 e5                	mov    %esp,%ebp
   1044b:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1044e:	83 ec 0c             	sub    $0xc,%esp
   10451:	68 c4 1b 01 00       	push   $0x11bc4
   10456:	e8 ac 10 00 00       	call   11507 <list_init>
   1045b:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1045e:	83 ec 0c             	sub    $0xc,%esp
   10461:	68 d0 1b 01 00       	push   $0x11bd0
   10466:	e8 9c 10 00 00       	call   11507 <list_init>
   1046b:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   1046e:	c7 05 c0 1b 01 00 00 	movl   $0x0,0x11bc0
   10475:	00 00 00 
}
   10478:	90                   	nop
   10479:	c9                   	leave  
   1047a:	c3                   	ret    

0001047b <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   1047b:	55                   	push   %ebp
   1047c:	89 e5                	mov    %esp,%ebp
   1047e:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   10481:	8b 45 08             	mov    0x8(%ebp),%eax
   10484:	c1 e8 10             	shr    $0x10,%eax
   10487:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   1048b:	8b 45 08             	mov    0x8(%ebp),%eax
   1048e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10492:	8b 45 0c             	mov    0xc(%ebp),%eax
   10495:	83 e8 01             	sub    $0x1,%eax
   10498:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1049c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   104a0:	90                   	nop
   104a1:	c9                   	leave  
   104a2:	c3                   	ret    

000104a3 <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   104a3:	55                   	push   %ebp
   104a4:	89 e5                	mov    %esp,%ebp
   104a6:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   104a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   104ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
   104af:	8b 45 08             	mov    0x8(%ebp),%eax
   104b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   104b5:	8d 45 f8             	lea    -0x8(%ebp),%eax
   104b8:	ff 28                	ljmp   *(%eax)
}
   104ba:	90                   	nop
   104bb:	c9                   	leave  
   104bc:	c3                   	ret    

000104bd <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   104bd:	55                   	push   %ebp
   104be:	89 e5                	mov    %esp,%ebp
   104c0:	83 ec 14             	sub    $0x14,%esp
   104c3:	8b 45 14             	mov    0x14(%ebp),%eax
   104c6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   104ca:	8b 45 08             	mov    0x8(%ebp),%eax
   104cd:	83 e0 f8             	and    $0xfffffff8,%eax
   104d0:	05 60 1c 01 00       	add    $0x11c60,%eax
   104d5:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   104d8:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   104df:	76 0f                	jbe    104f0 <segment_desc_set+0x33>
		attr |= SEG_G;
   104e1:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   104e7:	8b 45 10             	mov    0x10(%ebp),%eax
   104ea:	c1 e8 0c             	shr    $0xc,%eax
   104ed:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   104f0:	8b 45 10             	mov    0x10(%ebp),%eax
   104f3:	89 c2                	mov    %eax,%edx
   104f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104f8:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   104fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   104fe:	89 c2                	mov    %eax,%edx
   10500:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10503:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10507:	8b 45 0c             	mov    0xc(%ebp),%eax
   1050a:	c1 e8 10             	shr    $0x10,%eax
   1050d:	89 c2                	mov    %eax,%edx
   1050f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10512:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   10515:	8b 45 10             	mov    0x10(%ebp),%eax
   10518:	c1 e8 10             	shr    $0x10,%eax
   1051b:	c1 e0 08             	shl    $0x8,%eax
   1051e:	66 25 00 0f          	and    $0xf00,%ax
   10522:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10526:	89 c2                	mov    %eax,%edx
   10528:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1052b:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   1052f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10532:	c1 e8 18             	shr    $0x18,%eax
   10535:	89 c2                	mov    %eax,%edx
   10537:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1053a:	88 50 07             	mov    %dl,0x7(%eax)

}
   1053d:	90                   	nop
   1053e:	c9                   	leave  
   1053f:	c3                   	ret    

00010540 <init_gdt>:

void init_gdt(void){
   10540:	55                   	push   %ebp
   10541:	89 e5                	mov    %esp,%ebp
   10543:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10546:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1054d:	eb 19                	jmp    10568 <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   1054f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10552:	c1 e0 03             	shl    $0x3,%eax
   10555:	6a 00                	push   $0x0
   10557:	6a 00                	push   $0x0
   10559:	6a 00                	push   $0x0
   1055b:	50                   	push   %eax
   1055c:	e8 5c ff ff ff       	call   104bd <segment_desc_set>
   10561:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10564:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10568:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1056f:	7e de                	jle    1054f <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10571:	68 9a 40 00 00       	push   $0x409a
   10576:	6a ff                	push   $0xffffffff
   10578:	6a 00                	push   $0x0
   1057a:	6a 08                	push   $0x8
   1057c:	e8 3c ff ff ff       	call   104bd <segment_desc_set>
   10581:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10584:	68 92 40 00 00       	push   $0x4092
   10589:	6a ff                	push   $0xffffffff
   1058b:	6a 00                	push   $0x0
   1058d:	6a 10                	push   $0x10
   1058f:	e8 29 ff ff ff       	call   104bd <segment_desc_set>
   10594:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   10597:	b8 60 1c 01 00       	mov    $0x11c60,%eax
   1059c:	68 00 08 00 00       	push   $0x800
   105a1:	50                   	push   %eax
   105a2:	e8 d4 fe ff ff       	call   1047b <lgdt>
   105a7:	83 c4 08             	add    $0x8,%esp
}
   105aa:	90                   	nop
   105ab:	c9                   	leave  
   105ac:	c3                   	ret    

000105ad <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   105ad:	55                   	push   %ebp
   105ae:	89 e5                	mov    %esp,%ebp
   105b0:	83 ec 08             	sub    $0x8,%esp
   105b3:	8b 55 0c             	mov    0xc(%ebp),%edx
   105b6:	8b 45 14             	mov    0x14(%ebp),%eax
   105b9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   105bd:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   105c1:	8b 45 10             	mov    0x10(%ebp),%eax
   105c4:	89 c2                	mov    %eax,%edx
   105c6:	8b 45 08             	mov    0x8(%ebp),%eax
   105c9:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   105cc:	8b 45 08             	mov    0x8(%ebp),%eax
   105cf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   105d3:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   105d7:	8b 45 08             	mov    0x8(%ebp),%eax
   105da:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   105de:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   105e2:	8b 45 10             	mov    0x10(%ebp),%eax
   105e5:	c1 e8 10             	shr    $0x10,%eax
   105e8:	89 c2                	mov    %eax,%edx
   105ea:	8b 45 08             	mov    0x8(%ebp),%eax
   105ed:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   105f1:	90                   	nop
   105f2:	c9                   	leave  
   105f3:	c3                   	ret    

000105f4 <cpu_init>:

void cpu_init (void){
   105f4:	55                   	push   %ebp
   105f5:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   105f7:	e8 44 ff ff ff       	call   10540 <init_gdt>
}
   105fc:	90                   	nop
   105fd:	5d                   	pop    %ebp
   105fe:	c3                   	ret    

000105ff <gdt_alloc_desc>:

int gdt_alloc_desc(){
   105ff:	55                   	push   %ebp
   10600:	89 e5                	mov    %esp,%ebp
   10602:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10605:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1060c:	eb 26                	jmp    10634 <gdt_alloc_desc+0x35>

        segment_desc_t * desc = gdt_table + i;
   1060e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10611:	c1 e0 03             	shl    $0x3,%eax
   10614:	05 60 1c 01 00       	add    $0x11c60,%eax
   10619:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   1061c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1061f:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10623:	66 85 c0             	test   %ax,%ax
   10626:	75 08                	jne    10630 <gdt_alloc_desc+0x31>
            return i * sizeof(segment_desc_t);
   10628:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1062b:	c1 e0 03             	shl    $0x3,%eax
   1062e:	eb 12                	jmp    10642 <gdt_alloc_desc+0x43>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10630:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10634:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1063b:	7e d1                	jle    1060e <gdt_alloc_desc+0xf>
        }
    }
    return -1;
   1063d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10642:	c9                   	leave  
   10643:	c3                   	ret    

00010644 <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   10644:	55                   	push   %ebp
   10645:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   10647:	8b 45 08             	mov    0x8(%ebp),%eax
   1064a:	6a 00                	push   $0x0
   1064c:	50                   	push   %eax
   1064d:	e8 51 fe ff ff       	call   104a3 <far_jump>
   10652:	83 c4 08             	add    $0x8,%esp
   10655:	90                   	nop
   10656:	c9                   	leave  
   10657:	c3                   	ret    

00010658 <inb>:
static inline uint8_t inb(uint16_t port) {
   10658:	55                   	push   %ebp
   10659:	89 e5                	mov    %esp,%ebp
   1065b:	83 ec 14             	sub    $0x14,%esp
   1065e:	8b 45 08             	mov    0x8(%ebp),%eax
   10661:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10665:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10669:	89 c2                	mov    %eax,%edx
   1066b:	ec                   	in     (%dx),%al
   1066c:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1066f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10673:	c9                   	leave  
   10674:	c3                   	ret    

00010675 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10675:	55                   	push   %ebp
   10676:	89 e5                	mov    %esp,%ebp
   10678:	83 ec 08             	sub    $0x8,%esp
   1067b:	8b 55 08             	mov    0x8(%ebp),%edx
   1067e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10681:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10685:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10688:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1068c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10690:	ee                   	out    %al,(%dx)
}
   10691:	90                   	nop
   10692:	c9                   	leave  
   10693:	c3                   	ret    

00010694 <cli>:
static inline void cli(void){
   10694:	55                   	push   %ebp
   10695:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10697:	fa                   	cli    
}
   10698:	90                   	nop
   10699:	5d                   	pop    %ebp
   1069a:	c3                   	ret    

0001069b <sti>:
static inline void sti(void){
   1069b:	55                   	push   %ebp
   1069c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   1069e:	fb                   	sti    
}
   1069f:	90                   	nop
   106a0:	5d                   	pop    %ebp
   106a1:	c3                   	ret    

000106a2 <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   106a2:	55                   	push   %ebp
   106a3:	89 e5                	mov    %esp,%ebp
   106a5:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   106a8:	8b 45 08             	mov    0x8(%ebp),%eax
   106ab:	c1 e8 10             	shr    $0x10,%eax
   106ae:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   106b2:	8b 45 08             	mov    0x8(%ebp),%eax
   106b5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   106b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   106bc:	83 e8 01             	sub    $0x1,%eax
   106bf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   106c3:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   106c7:	90                   	nop
   106c8:	c9                   	leave  
   106c9:	c3                   	ret    

000106ca <hlt>:
static inline void hlt (void) {
   106ca:	55                   	push   %ebp
   106cb:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   106cd:	f4                   	hlt    
}
   106ce:	90                   	nop
   106cf:	5d                   	pop    %ebp
   106d0:	c3                   	ret    

000106d1 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   106d1:	55                   	push   %ebp
   106d2:	89 e5                	mov    %esp,%ebp
   106d4:	57                   	push   %edi
   106d5:	56                   	push   %esi
   106d6:	53                   	push   %ebx
   106d7:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   106da:	8b 45 08             	mov    0x8(%ebp),%eax
   106dd:	8b 50 34             	mov    0x34(%eax),%edx
   106e0:	8b 45 08             	mov    0x8(%ebp),%eax
   106e3:	8b 40 30             	mov    0x30(%eax),%eax
   106e6:	83 ec 04             	sub    $0x4,%esp
   106e9:	52                   	push   %edx
   106ea:	50                   	push   %eax
   106eb:	68 b8 18 01 00       	push   $0x118b8
   106f0:	e8 aa 10 00 00       	call   1179f <log_printf>
   106f5:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   106f8:	8b 45 08             	mov    0x8(%ebp),%eax
   106fb:	8b 38                	mov    (%eax),%edi
   106fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10700:	8b 70 04             	mov    0x4(%eax),%esi
   10703:	8b 45 08             	mov    0x8(%ebp),%eax
   10706:	8b 58 0c             	mov    0xc(%eax),%ebx
   10709:	8b 45 08             	mov    0x8(%ebp),%eax
   1070c:	8b 48 08             	mov    0x8(%eax),%ecx
   1070f:	8b 45 08             	mov    0x8(%ebp),%eax
   10712:	8b 50 0c             	mov    0xc(%eax),%edx
   10715:	8b 45 08             	mov    0x8(%ebp),%eax
   10718:	8b 40 3c             	mov    0x3c(%eax),%eax
   1071b:	83 ec 04             	sub    $0x4,%esp
   1071e:	57                   	push   %edi
   1071f:	56                   	push   %esi
   10720:	53                   	push   %ebx
   10721:	51                   	push   %ecx
   10722:	52                   	push   %edx
   10723:	50                   	push   %eax
   10724:	68 d0 18 01 00       	push   $0x118d0
   10729:	e8 71 10 00 00       	call   1179f <log_printf>
   1072e:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   10731:	8b 45 08             	mov    0x8(%ebp),%eax
   10734:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10737:	8b 45 08             	mov    0x8(%ebp),%eax
   1073a:	8b 40 18             	mov    0x18(%eax),%eax
   1073d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10740:	8b 45 08             	mov    0x8(%ebp),%eax
   10743:	8b 58 14             	mov    0x14(%eax),%ebx
   10746:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10749:	8b 45 08             	mov    0x8(%ebp),%eax
   1074c:	8b 78 10             	mov    0x10(%eax),%edi
   1074f:	8b 45 08             	mov    0x8(%ebp),%eax
   10752:	8b 70 24             	mov    0x24(%eax),%esi
   10755:	8b 45 08             	mov    0x8(%ebp),%eax
   10758:	8b 58 28             	mov    0x28(%eax),%ebx
   1075b:	8b 45 08             	mov    0x8(%ebp),%eax
   1075e:	8b 50 20             	mov    0x20(%eax),%edx
   10761:	8b 45 08             	mov    0x8(%ebp),%eax
   10764:	8b 40 2c             	mov    0x2c(%eax),%eax
   10767:	83 ec 0c             	sub    $0xc,%esp
   1076a:	51                   	push   %ecx
   1076b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1076e:	ff 75 e0             	pushl  -0x20(%ebp)
   10771:	57                   	push   %edi
   10772:	56                   	push   %esi
   10773:	53                   	push   %ebx
   10774:	52                   	push   %edx
   10775:	50                   	push   %eax
   10776:	68 fc 18 01 00       	push   $0x118fc
   1077b:	e8 1f 10 00 00       	call   1179f <log_printf>
   10780:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10783:	8b 45 08             	mov    0x8(%ebp),%eax
   10786:	8b 50 40             	mov    0x40(%eax),%edx
   10789:	8b 45 08             	mov    0x8(%ebp),%eax
   1078c:	8b 40 38             	mov    0x38(%eax),%eax
   1078f:	83 ec 04             	sub    $0x4,%esp
   10792:	52                   	push   %edx
   10793:	50                   	push   %eax
   10794:	68 45 19 01 00       	push   $0x11945
   10799:	e8 01 10 00 00       	call   1179f <log_printf>
   1079e:	83 c4 10             	add    $0x10,%esp
}
   107a1:	90                   	nop
   107a2:	8d 65 f4             	lea    -0xc(%ebp),%esp
   107a5:	5b                   	pop    %ebx
   107a6:	5e                   	pop    %esi
   107a7:	5f                   	pop    %edi
   107a8:	5d                   	pop    %ebp
   107a9:	c3                   	ret    

000107aa <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   107aa:	55                   	push   %ebp
   107ab:	89 e5                	mov    %esp,%ebp
   107ad:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   107b0:	83 ec 0c             	sub    $0xc,%esp
   107b3:	68 5b 19 01 00       	push   $0x1195b
   107b8:	e8 e2 0f 00 00       	call   1179f <log_printf>
   107bd:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   107c0:	83 ec 08             	sub    $0x8,%esp
   107c3:	ff 75 0c             	pushl  0xc(%ebp)
   107c6:	68 78 19 01 00       	push   $0x11978
   107cb:	e8 cf 0f 00 00       	call   1179f <log_printf>
   107d0:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   107d3:	83 ec 0c             	sub    $0xc,%esp
   107d6:	ff 75 08             	pushl  0x8(%ebp)
   107d9:	e8 f3 fe ff ff       	call   106d1 <dump_core_regs>
   107de:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   107e1:	e8 e4 fe ff ff       	call   106ca <hlt>
   107e6:	eb f9                	jmp    107e1 <do_default_handler+0x37>

000107e8 <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   107e8:	55                   	push   %ebp
   107e9:	89 e5                	mov    %esp,%ebp
   107eb:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   107ee:	83 ec 08             	sub    $0x8,%esp
   107f1:	68 92 19 01 00       	push   $0x11992
   107f6:	ff 75 08             	pushl  0x8(%ebp)
   107f9:	e8 ac ff ff ff       	call   107aa <do_default_handler>
   107fe:	83 c4 10             	add    $0x10,%esp

}
   10801:	90                   	nop
   10802:	c9                   	leave  
   10803:	c3                   	ret    

00010804 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   10804:	55                   	push   %ebp
   10805:	89 e5                	mov    %esp,%ebp
   10807:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   1080a:	83 ec 08             	sub    $0x8,%esp
   1080d:	68 a4 19 01 00       	push   $0x119a4
   10812:	ff 75 08             	pushl  0x8(%ebp)
   10815:	e8 90 ff ff ff       	call   107aa <do_default_handler>
   1081a:	83 c4 10             	add    $0x10,%esp
}
   1081d:	90                   	nop
   1081e:	c9                   	leave  
   1081f:	c3                   	ret    

00010820 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   10820:	55                   	push   %ebp
   10821:	89 e5                	mov    %esp,%ebp
   10823:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   10826:	83 ec 08             	sub    $0x8,%esp
   10829:	68 b5 19 01 00       	push   $0x119b5
   1082e:	ff 75 08             	pushl  0x8(%ebp)
   10831:	e8 74 ff ff ff       	call   107aa <do_default_handler>
   10836:	83 c4 10             	add    $0x10,%esp
}
   10839:	90                   	nop
   1083a:	c9                   	leave  
   1083b:	c3                   	ret    

0001083c <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   1083c:	55                   	push   %ebp
   1083d:	89 e5                	mov    %esp,%ebp
   1083f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   10842:	83 ec 08             	sub    $0x8,%esp
   10845:	68 c5 19 01 00       	push   $0x119c5
   1084a:	ff 75 08             	pushl  0x8(%ebp)
   1084d:	e8 58 ff ff ff       	call   107aa <do_default_handler>
   10852:	83 c4 10             	add    $0x10,%esp
}
   10855:	90                   	nop
   10856:	c9                   	leave  
   10857:	c3                   	ret    

00010858 <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   10858:	55                   	push   %ebp
   10859:	89 e5                	mov    %esp,%ebp
   1085b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   1085e:	83 ec 08             	sub    $0x8,%esp
   10861:	68 d4 19 01 00       	push   $0x119d4
   10866:	ff 75 08             	pushl  0x8(%ebp)
   10869:	e8 3c ff ff ff       	call   107aa <do_default_handler>
   1086e:	83 c4 10             	add    $0x10,%esp
}
   10871:	90                   	nop
   10872:	c9                   	leave  
   10873:	c3                   	ret    

00010874 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10874:	55                   	push   %ebp
   10875:	89 e5                	mov    %esp,%ebp
   10877:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   1087a:	83 ec 08             	sub    $0x8,%esp
   1087d:	68 e0 19 01 00       	push   $0x119e0
   10882:	ff 75 08             	pushl  0x8(%ebp)
   10885:	e8 20 ff ff ff       	call   107aa <do_default_handler>
   1088a:	83 c4 10             	add    $0x10,%esp
}
   1088d:	90                   	nop
   1088e:	c9                   	leave  
   1088f:	c3                   	ret    

00010890 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10890:	55                   	push   %ebp
   10891:	89 e5                	mov    %esp,%ebp
   10893:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10896:	83 ec 08             	sub    $0x8,%esp
   10899:	68 ea 19 01 00       	push   $0x119ea
   1089e:	ff 75 08             	pushl  0x8(%ebp)
   108a1:	e8 04 ff ff ff       	call   107aa <do_default_handler>
   108a6:	83 c4 10             	add    $0x10,%esp
}
   108a9:	90                   	nop
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   108b2:	83 ec 08             	sub    $0x8,%esp
   108b5:	68 00 1a 01 00       	push   $0x11a00
   108ba:	ff 75 08             	pushl  0x8(%ebp)
   108bd:	e8 e8 fe ff ff       	call   107aa <do_default_handler>
   108c2:	83 c4 10             	add    $0x10,%esp
}
   108c5:	90                   	nop
   108c6:	c9                   	leave  
   108c7:	c3                   	ret    

000108c8 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   108c8:	55                   	push   %ebp
   108c9:	89 e5                	mov    %esp,%ebp
   108cb:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   108ce:	83 ec 08             	sub    $0x8,%esp
   108d1:	68 10 1a 01 00       	push   $0x11a10
   108d6:	ff 75 08             	pushl  0x8(%ebp)
   108d9:	e8 cc fe ff ff       	call   107aa <do_default_handler>
   108de:	83 c4 10             	add    $0x10,%esp
}
   108e1:	90                   	nop
   108e2:	c9                   	leave  
   108e3:	c3                   	ret    

000108e4 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   108e4:	55                   	push   %ebp
   108e5:	89 e5                	mov    %esp,%ebp
   108e7:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   108ea:	83 ec 08             	sub    $0x8,%esp
   108ed:	68 26 1a 01 00       	push   $0x11a26
   108f2:	ff 75 08             	pushl  0x8(%ebp)
   108f5:	e8 b0 fe ff ff       	call   107aa <do_default_handler>
   108fa:	83 c4 10             	add    $0x10,%esp
}
   108fd:	90                   	nop
   108fe:	c9                   	leave  
   108ff:	c3                   	ret    

00010900 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   10900:	55                   	push   %ebp
   10901:	89 e5                	mov    %esp,%ebp
   10903:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   10906:	83 ec 08             	sub    $0x8,%esp
   10909:	68 34 1a 01 00       	push   $0x11a34
   1090e:	ff 75 08             	pushl  0x8(%ebp)
   10911:	e8 94 fe ff ff       	call   107aa <do_default_handler>
   10916:	83 c4 10             	add    $0x10,%esp
}
   10919:	90                   	nop
   1091a:	c9                   	leave  
   1091b:	c3                   	ret    

0001091c <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   1091c:	55                   	push   %ebp
   1091d:	89 e5                	mov    %esp,%ebp
   1091f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10922:	83 ec 08             	sub    $0x8,%esp
   10925:	68 40 1a 01 00       	push   $0x11a40
   1092a:	ff 75 08             	pushl  0x8(%ebp)
   1092d:	e8 78 fe ff ff       	call   107aa <do_default_handler>
   10932:	83 c4 10             	add    $0x10,%esp
}
   10935:	90                   	nop
   10936:	c9                   	leave  
   10937:	c3                   	ret    

00010938 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   10938:	55                   	push   %ebp
   10939:	89 e5                	mov    %esp,%ebp
   1093b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   1093e:	83 ec 08             	sub    $0x8,%esp
   10941:	68 55 1a 01 00       	push   $0x11a55
   10946:	ff 75 08             	pushl  0x8(%ebp)
   10949:	e8 5c fe ff ff       	call   107aa <do_default_handler>
   1094e:	83 c4 10             	add    $0x10,%esp
}
   10951:	90                   	nop
   10952:	c9                   	leave  
   10953:	c3                   	ret    

00010954 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   10954:	55                   	push   %ebp
   10955:	89 e5                	mov    %esp,%ebp
   10957:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   1095a:	83 ec 08             	sub    $0x8,%esp
   1095d:	68 6a 1a 01 00       	push   $0x11a6a
   10962:	ff 75 08             	pushl  0x8(%ebp)
   10965:	e8 40 fe ff ff       	call   107aa <do_default_handler>
   1096a:	83 c4 10             	add    $0x10,%esp
}
   1096d:	90                   	nop
   1096e:	c9                   	leave  
   1096f:	c3                   	ret    

00010970 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10970:	55                   	push   %ebp
   10971:	89 e5                	mov    %esp,%ebp
   10973:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10976:	83 ec 08             	sub    $0x8,%esp
   10979:	68 7e 1a 01 00       	push   $0x11a7e
   1097e:	ff 75 08             	pushl  0x8(%ebp)
   10981:	e8 24 fe ff ff       	call   107aa <do_default_handler>
   10986:	83 c4 10             	add    $0x10,%esp
}
   10989:	90                   	nop
   1098a:	c9                   	leave  
   1098b:	c3                   	ret    

0001098c <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   1098c:	55                   	push   %ebp
   1098d:	89 e5                	mov    %esp,%ebp
   1098f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10992:	83 ec 08             	sub    $0x8,%esp
   10995:	68 8a 1a 01 00       	push   $0x11a8a
   1099a:	ff 75 08             	pushl  0x8(%ebp)
   1099d:	e8 08 fe ff ff       	call   107aa <do_default_handler>
   109a2:	83 c4 10             	add    $0x10,%esp
}
   109a5:	90                   	nop
   109a6:	c9                   	leave  
   109a7:	c3                   	ret    

000109a8 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   109a8:	55                   	push   %ebp
   109a9:	89 e5                	mov    %esp,%ebp
   109ab:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   109ae:	83 ec 08             	sub    $0x8,%esp
   109b1:	68 a8 1a 01 00       	push   $0x11aa8
   109b6:	ff 75 08             	pushl  0x8(%ebp)
   109b9:	e8 ec fd ff ff       	call   107aa <do_default_handler>
   109be:	83 c4 10             	add    $0x10,%esp
}
   109c1:	90                   	nop
   109c2:	c9                   	leave  
   109c3:	c3                   	ret    

000109c4 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   109c4:	55                   	push   %ebp
   109c5:	89 e5                	mov    %esp,%ebp
   109c7:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   109ca:	83 ec 08             	sub    $0x8,%esp
   109cd:	68 b9 1a 01 00       	push   $0x11ab9
   109d2:	ff 75 08             	pushl  0x8(%ebp)
   109d5:	e8 d0 fd ff ff       	call   107aa <do_default_handler>
   109da:	83 c4 10             	add    $0x10,%esp
}
   109dd:	90                   	nop
   109de:	c9                   	leave  
   109df:	c3                   	ret    

000109e0 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   109e0:	55                   	push   %ebp
   109e1:	89 e5                	mov    %esp,%ebp
   109e3:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   109e6:	83 ec 08             	sub    $0x8,%esp
   109e9:	68 c8 1a 01 00       	push   $0x11ac8
   109ee:	ff 75 08             	pushl  0x8(%ebp)
   109f1:	e8 b4 fd ff ff       	call   107aa <do_default_handler>
   109f6:	83 c4 10             	add    $0x10,%esp
}
   109f9:	90                   	nop
   109fa:	c9                   	leave  
   109fb:	c3                   	ret    

000109fc <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   109fc:	55                   	push   %ebp
   109fd:	89 e5                	mov    %esp,%ebp
   109ff:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10a02:	83 ec 08             	sub    $0x8,%esp
   10a05:	68 e7 1a 01 00       	push   $0x11ae7
   10a0a:	ff 75 08             	pushl  0x8(%ebp)
   10a0d:	e8 98 fd ff ff       	call   107aa <do_default_handler>
   10a12:	83 c4 10             	add    $0x10,%esp
}
   10a15:	90                   	nop
   10a16:	c9                   	leave  
   10a17:	c3                   	ret    

00010a18 <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   10a18:	55                   	push   %ebp
   10a19:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10a1b:	6a 11                	push   $0x11
   10a1d:	6a 20                	push   $0x20
   10a1f:	e8 51 fc ff ff       	call   10675 <outb>
   10a24:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10a27:	6a 20                	push   $0x20
   10a29:	6a 21                	push   $0x21
   10a2b:	e8 45 fc ff ff       	call   10675 <outb>
   10a30:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10a33:	6a 04                	push   $0x4
   10a35:	6a 21                	push   $0x21
   10a37:	e8 39 fc ff ff       	call   10675 <outb>
   10a3c:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10a3f:	6a 01                	push   $0x1
   10a41:	6a 21                	push   $0x21
   10a43:	e8 2d fc ff ff       	call   10675 <outb>
   10a48:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10a4b:	6a 11                	push   $0x11
   10a4d:	68 a0 00 00 00       	push   $0xa0
   10a52:	e8 1e fc ff ff       	call   10675 <outb>
   10a57:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10a5a:	6a 28                	push   $0x28
   10a5c:	68 a1 00 00 00       	push   $0xa1
   10a61:	e8 0f fc ff ff       	call   10675 <outb>
   10a66:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10a69:	6a 02                	push   $0x2
   10a6b:	68 a1 00 00 00       	push   $0xa1
   10a70:	e8 00 fc ff ff       	call   10675 <outb>
   10a75:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10a78:	6a 01                	push   $0x1
   10a7a:	68 a1 00 00 00       	push   $0xa1
   10a7f:	e8 f1 fb ff ff       	call   10675 <outb>
   10a84:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10a87:	68 fb 00 00 00       	push   $0xfb
   10a8c:	6a 21                	push   $0x21
   10a8e:	e8 e2 fb ff ff       	call   10675 <outb>
   10a93:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10a96:	68 ff 00 00 00       	push   $0xff
   10a9b:	68 a1 00 00 00       	push   $0xa1
   10aa0:	e8 d0 fb ff ff       	call   10675 <outb>
   10aa5:	83 c4 08             	add    $0x8,%esp
}
   10aa8:	90                   	nop
   10aa9:	c9                   	leave  
   10aaa:	c3                   	ret    

00010aab <irq_init>:


void irq_init(void){ 
   10aab:	55                   	push   %ebp
   10aac:	89 e5                	mov    %esp,%ebp
   10aae:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10ab1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10ab8:	eb 25                	jmp    10adf <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10aba:	ba 28 00 01 00       	mov    $0x10028,%edx
   10abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ac2:	c1 e0 03             	shl    $0x3,%eax
   10ac5:	05 60 24 01 00       	add    $0x12460,%eax
   10aca:	68 00 8e 00 00       	push   $0x8e00
   10acf:	52                   	push   %edx
   10ad0:	6a 08                	push   $0x8
   10ad2:	50                   	push   %eax
   10ad3:	e8 d5 fa ff ff       	call   105ad <gate_desc_set>
   10ad8:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10adb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10adf:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10ae3:	7e d5                	jle    10aba <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10ae5:	83 ec 08             	sub    $0x8,%esp
   10ae8:	68 47 00 01 00       	push   $0x10047
   10aed:	6a 00                	push   $0x0
   10aef:	e8 65 01 00 00       	call   10c59 <irq_install>
   10af4:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10af7:	83 ec 08             	sub    $0x8,%esp
   10afa:	68 66 00 01 00       	push   $0x10066
   10aff:	6a 01                	push   $0x1
   10b01:	e8 53 01 00 00       	call   10c59 <irq_install>
   10b06:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10b09:	83 ec 08             	sub    $0x8,%esp
   10b0c:	68 85 00 01 00       	push   $0x10085
   10b11:	6a 02                	push   $0x2
   10b13:	e8 41 01 00 00       	call   10c59 <irq_install>
   10b18:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10b1b:	83 ec 08             	sub    $0x8,%esp
   10b1e:	68 a4 00 01 00       	push   $0x100a4
   10b23:	6a 03                	push   $0x3
   10b25:	e8 2f 01 00 00       	call   10c59 <irq_install>
   10b2a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10b2d:	83 ec 08             	sub    $0x8,%esp
   10b30:	68 c3 00 01 00       	push   $0x100c3
   10b35:	6a 04                	push   $0x4
   10b37:	e8 1d 01 00 00       	call   10c59 <irq_install>
   10b3c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10b3f:	83 ec 08             	sub    $0x8,%esp
   10b42:	68 e2 00 01 00       	push   $0x100e2
   10b47:	6a 05                	push   $0x5
   10b49:	e8 0b 01 00 00       	call   10c59 <irq_install>
   10b4e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10b51:	83 ec 08             	sub    $0x8,%esp
   10b54:	68 01 01 01 00       	push   $0x10101
   10b59:	6a 06                	push   $0x6
   10b5b:	e8 f9 00 00 00       	call   10c59 <irq_install>
   10b60:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10b63:	83 ec 08             	sub    $0x8,%esp
   10b66:	68 20 01 01 00       	push   $0x10120
   10b6b:	6a 07                	push   $0x7
   10b6d:	e8 e7 00 00 00       	call   10c59 <irq_install>
   10b72:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10b75:	83 ec 08             	sub    $0x8,%esp
   10b78:	68 3f 01 01 00       	push   $0x1013f
   10b7d:	6a 08                	push   $0x8
   10b7f:	e8 d5 00 00 00       	call   10c59 <irq_install>
   10b84:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10b87:	83 ec 08             	sub    $0x8,%esp
   10b8a:	68 5c 01 01 00       	push   $0x1015c
   10b8f:	6a 0a                	push   $0xa
   10b91:	e8 c3 00 00 00       	call   10c59 <irq_install>
   10b96:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10b99:	83 ec 08             	sub    $0x8,%esp
   10b9c:	68 79 01 01 00       	push   $0x10179
   10ba1:	6a 0b                	push   $0xb
   10ba3:	e8 b1 00 00 00       	call   10c59 <irq_install>
   10ba8:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10bab:	83 ec 08             	sub    $0x8,%esp
   10bae:	68 96 01 01 00       	push   $0x10196
   10bb3:	6a 0c                	push   $0xc
   10bb5:	e8 9f 00 00 00       	call   10c59 <irq_install>
   10bba:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10bbd:	83 ec 08             	sub    $0x8,%esp
   10bc0:	68 b3 01 01 00       	push   $0x101b3
   10bc5:	6a 0d                	push   $0xd
   10bc7:	e8 8d 00 00 00       	call   10c59 <irq_install>
   10bcc:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10bcf:	83 ec 08             	sub    $0x8,%esp
   10bd2:	68 d0 01 01 00       	push   $0x101d0
   10bd7:	6a 0e                	push   $0xe
   10bd9:	e8 7b 00 00 00       	call   10c59 <irq_install>
   10bde:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10be1:	83 ec 08             	sub    $0x8,%esp
   10be4:	68 ed 01 01 00       	push   $0x101ed
   10be9:	6a 10                	push   $0x10
   10beb:	e8 69 00 00 00       	call   10c59 <irq_install>
   10bf0:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10bf3:	83 ec 08             	sub    $0x8,%esp
   10bf6:	68 0c 02 01 00       	push   $0x1020c
   10bfb:	6a 11                	push   $0x11
   10bfd:	e8 57 00 00 00       	call   10c59 <irq_install>
   10c02:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10c05:	83 ec 08             	sub    $0x8,%esp
   10c08:	68 29 02 01 00       	push   $0x10229
   10c0d:	6a 12                	push   $0x12
   10c0f:	e8 45 00 00 00       	call   10c59 <irq_install>
   10c14:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10c17:	83 ec 08             	sub    $0x8,%esp
   10c1a:	68 48 02 01 00       	push   $0x10248
   10c1f:	6a 13                	push   $0x13
   10c21:	e8 33 00 00 00       	call   10c59 <irq_install>
   10c26:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10c29:	83 ec 08             	sub    $0x8,%esp
   10c2c:	68 67 02 01 00       	push   $0x10267
   10c31:	6a 14                	push   $0x14
   10c33:	e8 21 00 00 00       	call   10c59 <irq_install>
   10c38:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10c3b:	b8 60 24 01 00       	mov    $0x12460,%eax
   10c40:	83 ec 08             	sub    $0x8,%esp
   10c43:	68 00 04 00 00       	push   $0x400
   10c48:	50                   	push   %eax
   10c49:	e8 54 fa ff ff       	call   106a2 <lidt>
   10c4e:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10c51:	e8 c2 fd ff ff       	call   10a18 <init_pic>
}
   10c56:	90                   	nop
   10c57:	c9                   	leave  
   10c58:	c3                   	ret    

00010c59 <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   10c59:	55                   	push   %ebp
   10c5a:	89 e5                	mov    %esp,%ebp
   10c5c:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10c5f:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10c63:	7e 07                	jle    10c6c <irq_install+0x13>
        return -1;
   10c65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c6a:	eb 25                	jmp    10c91 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   10c6c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c6f:	8b 55 08             	mov    0x8(%ebp),%edx
   10c72:	c1 e2 03             	shl    $0x3,%edx
   10c75:	81 c2 60 24 01 00    	add    $0x12460,%edx
   10c7b:	68 00 8e 00 00       	push   $0x8e00
   10c80:	50                   	push   %eax
   10c81:	6a 08                	push   $0x8
   10c83:	52                   	push   %edx
   10c84:	e8 24 f9 ff ff       	call   105ad <gate_desc_set>
   10c89:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   10c8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c91:	c9                   	leave  
   10c92:	c3                   	ret    

00010c93 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   10c93:	55                   	push   %ebp
   10c94:	89 e5                	mov    %esp,%ebp
   10c96:	53                   	push   %ebx
   10c97:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10c9a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c9e:	7e 78                	jle    10d18 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10ca0:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10ca4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ca8:	7f 32                	jg     10cdc <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10caa:	6a 21                	push   $0x21
   10cac:	e8 a7 f9 ff ff       	call   10658 <inb>
   10cb1:	83 c4 04             	add    $0x4,%esp
   10cb4:	89 c2                	mov    %eax,%edx
   10cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb9:	bb 01 00 00 00       	mov    $0x1,%ebx
   10cbe:	89 c1                	mov    %eax,%ecx
   10cc0:	d3 e3                	shl    %cl,%ebx
   10cc2:	89 d8                	mov    %ebx,%eax
   10cc4:	f7 d0                	not    %eax
   10cc6:	21 d0                	and    %edx,%eax
   10cc8:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10ccb:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ccf:	50                   	push   %eax
   10cd0:	6a 21                	push   $0x21
   10cd2:	e8 9e f9 ff ff       	call   10675 <outb>
   10cd7:	83 c4 08             	add    $0x8,%esp
   10cda:	eb 3d                	jmp    10d19 <irq_enable+0x86>
    }else{
        irq_num -= 8;
   10cdc:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10ce0:	68 a1 00 00 00       	push   $0xa1
   10ce5:	e8 6e f9 ff ff       	call   10658 <inb>
   10cea:	83 c4 04             	add    $0x4,%esp
   10ced:	89 c2                	mov    %eax,%edx
   10cef:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf2:	bb 01 00 00 00       	mov    $0x1,%ebx
   10cf7:	89 c1                	mov    %eax,%ecx
   10cf9:	d3 e3                	shl    %cl,%ebx
   10cfb:	89 d8                	mov    %ebx,%eax
   10cfd:	f7 d0                	not    %eax
   10cff:	21 d0                	and    %edx,%eax
   10d01:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10d04:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d08:	50                   	push   %eax
   10d09:	68 a1 00 00 00       	push   $0xa1
   10d0e:	e8 62 f9 ff ff       	call   10675 <outb>
   10d13:	83 c4 08             	add    $0x8,%esp
   10d16:	eb 01                	jmp    10d19 <irq_enable+0x86>
        return;
   10d18:	90                   	nop
    }
}
   10d19:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d1c:	c9                   	leave  
   10d1d:	c3                   	ret    

00010d1e <irq_disable>:
void irq_disable (int irq_num) {
   10d1e:	55                   	push   %ebp
   10d1f:	89 e5                	mov    %esp,%ebp
   10d21:	53                   	push   %ebx
   10d22:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10d25:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d29:	7e 74                	jle    10d9f <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10d2b:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d2f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d33:	7f 30                	jg     10d65 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10d35:	6a 21                	push   $0x21
   10d37:	e8 1c f9 ff ff       	call   10658 <inb>
   10d3c:	83 c4 04             	add    $0x4,%esp
   10d3f:	89 c3                	mov    %eax,%ebx
   10d41:	8b 45 08             	mov    0x8(%ebp),%eax
   10d44:	ba 01 00 00 00       	mov    $0x1,%edx
   10d49:	89 c1                	mov    %eax,%ecx
   10d4b:	d3 e2                	shl    %cl,%edx
   10d4d:	89 d0                	mov    %edx,%eax
   10d4f:	09 d8                	or     %ebx,%eax
   10d51:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10d54:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d58:	50                   	push   %eax
   10d59:	6a 21                	push   $0x21
   10d5b:	e8 15 f9 ff ff       	call   10675 <outb>
   10d60:	83 c4 08             	add    $0x8,%esp
   10d63:	eb 3b                	jmp    10da0 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10d65:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10d69:	68 a1 00 00 00       	push   $0xa1
   10d6e:	e8 e5 f8 ff ff       	call   10658 <inb>
   10d73:	83 c4 04             	add    $0x4,%esp
   10d76:	89 c3                	mov    %eax,%ebx
   10d78:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7b:	ba 01 00 00 00       	mov    $0x1,%edx
   10d80:	89 c1                	mov    %eax,%ecx
   10d82:	d3 e2                	shl    %cl,%edx
   10d84:	89 d0                	mov    %edx,%eax
   10d86:	09 d8                	or     %ebx,%eax
   10d88:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10d8b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d8f:	50                   	push   %eax
   10d90:	68 a1 00 00 00       	push   $0xa1
   10d95:	e8 db f8 ff ff       	call   10675 <outb>
   10d9a:	83 c4 08             	add    $0x8,%esp
   10d9d:	eb 01                	jmp    10da0 <irq_disable+0x82>
        return;
   10d9f:	90                   	nop
    }
}
   10da0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10da3:	c9                   	leave  
   10da4:	c3                   	ret    

00010da5 <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   10da5:	55                   	push   %ebp
   10da6:	89 e5                	mov    %esp,%ebp
    cli();
   10da8:	e8 e7 f8 ff ff       	call   10694 <cli>
}
   10dad:	90                   	nop
   10dae:	5d                   	pop    %ebp
   10daf:	c3                   	ret    

00010db0 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   10db0:	55                   	push   %ebp
   10db1:	89 e5                	mov    %esp,%ebp
    sti();
   10db3:	e8 e3 f8 ff ff       	call   1069b <sti>
}
   10db8:	90                   	nop
   10db9:	5d                   	pop    %ebp
   10dba:	c3                   	ret    

00010dbb <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10dbb:	55                   	push   %ebp
   10dbc:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   10dbe:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   10dc2:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10dc6:	7e 0f                	jle    10dd7 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   10dc8:	6a 20                	push   $0x20
   10dca:	68 a0 00 00 00       	push   $0xa0
   10dcf:	e8 a1 f8 ff ff       	call   10675 <outb>
   10dd4:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10dd7:	6a 20                	push   $0x20
   10dd9:	6a 20                	push   $0x20
   10ddb:	e8 95 f8 ff ff       	call   10675 <outb>
   10de0:	83 c4 08             	add    $0x8,%esp

}
   10de3:	90                   	nop
   10de4:	c9                   	leave  
   10de5:	c3                   	ret    

00010de6 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10de6:	55                   	push   %ebp
   10de7:	89 e5                	mov    %esp,%ebp
   10de9:	83 ec 08             	sub    $0x8,%esp
   10dec:	8b 55 08             	mov    0x8(%ebp),%edx
   10def:	8b 45 0c             	mov    0xc(%ebp),%eax
   10df2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10df6:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10df9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10dfd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10e01:	ee                   	out    %al,(%dx)
}
   10e02:	90                   	nop
   10e03:	c9                   	leave  
   10e04:	c3                   	ret    

00010e05 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   10e05:	55                   	push   %ebp
   10e06:	89 e5                	mov    %esp,%ebp
   10e08:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10e0b:	a1 60 28 01 00       	mov    0x12860,%eax
   10e10:	83 c0 01             	add    $0x1,%eax
   10e13:	a3 60 28 01 00       	mov    %eax,0x12860
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   10e18:	83 ec 0c             	sub    $0xc,%esp
   10e1b:	6a 20                	push   $0x20
   10e1d:	e8 99 ff ff ff       	call   10dbb <pic_send_eoi>
   10e22:	83 c4 10             	add    $0x10,%esp
}
   10e25:	90                   	nop
   10e26:	c9                   	leave  
   10e27:	c3                   	ret    

00010e28 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10e28:	55                   	push   %ebp
   10e29:	89 e5                	mov    %esp,%ebp
   10e2b:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10e2e:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   10e35:	6a 36                	push   $0x36
   10e37:	6a 43                	push   $0x43
   10e39:	e8 a8 ff ff ff       	call   10de6 <outb>
   10e3e:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   10e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e44:	0f b6 c0             	movzbl %al,%eax
   10e47:	50                   	push   %eax
   10e48:	6a 40                	push   $0x40
   10e4a:	e8 97 ff ff ff       	call   10de6 <outb>
   10e4f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   10e52:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e55:	c1 e8 08             	shr    $0x8,%eax
   10e58:	0f b6 c0             	movzbl %al,%eax
   10e5b:	50                   	push   %eax
   10e5c:	6a 40                	push   $0x40
   10e5e:	e8 83 ff ff ff       	call   10de6 <outb>
   10e63:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10e66:	83 ec 08             	sub    $0x8,%esp
   10e69:	68 86 02 01 00       	push   $0x10286
   10e6e:	6a 20                	push   $0x20
   10e70:	e8 e4 fd ff ff       	call   10c59 <irq_install>
   10e75:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10e78:	83 ec 0c             	sub    $0xc,%esp
   10e7b:	6a 20                	push   $0x20
   10e7d:	e8 11 fe ff ff       	call   10c93 <irq_enable>
   10e82:	83 c4 10             	add    $0x10,%esp
}
   10e85:	90                   	nop
   10e86:	c9                   	leave  
   10e87:	c3                   	ret    

00010e88 <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   10e88:	55                   	push   %ebp
   10e89:	89 e5                	mov    %esp,%ebp
   10e8b:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e8e:	c7 05 60 28 01 00 00 	movl   $0x0,0x12860
   10e95:	00 00 00 

    init_pit();
   10e98:	e8 8b ff ff ff       	call   10e28 <init_pit>
   10e9d:	90                   	nop
   10e9e:	c9                   	leave  
   10e9f:	c3                   	ret    

00010ea0 <kernel_init>:
#include "tools/list.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   10ea0:	55                   	push   %ebp
   10ea1:	89 e5                	mov    %esp,%ebp
   10ea3:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10ea6:	e8 49 f7 ff ff       	call   105f4 <cpu_init>
    log_init();
   10eab:	e8 7a 08 00 00       	call   1172a <log_init>
    irq_init();
   10eb0:	e8 f6 fb ff ff       	call   10aab <irq_init>
    time_init();
   10eb5:	e8 ce ff ff ff       	call   10e88 <time_init>

    task_manager_init();
   10eba:	e8 89 f5 ff ff       	call   10448 <task_manager_init>

}
   10ebf:	90                   	nop
   10ec0:	c9                   	leave  
   10ec1:	c3                   	ret    

00010ec2 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   10ec2:	55                   	push   %ebp
   10ec3:	89 e5                	mov    %esp,%ebp
   10ec5:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   10ec8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int task: %d",count++);
   10ecf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ed2:	8d 50 01             	lea    0x1(%eax),%edx
   10ed5:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10ed8:	83 ec 08             	sub    $0x8,%esp
   10edb:	50                   	push   %eax
   10edc:	68 01 1b 01 00       	push   $0x11b01
   10ee1:	e8 b9 08 00 00       	call   1179f <log_printf>
   10ee6:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task,task_first_task());
   10ee9:	e8 50 f5 ff ff       	call   1043e <task_first_task>
   10eee:	83 ec 08             	sub    $0x8,%esp
   10ef1:	50                   	push   %eax
   10ef2:	68 80 38 01 00       	push   $0x13880
   10ef7:	e8 b0 f4 ff ff       	call   103ac <task_switch_from_to>
   10efc:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d",count++);
   10eff:	eb ce                	jmp    10ecf <init_task_entry+0xd>

00010f01 <init_main>:

}



void init_main(void) {
   10f01:	55                   	push   %ebp
   10f02:	89 e5                	mov    %esp,%ebp
   10f04:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   10f07:	83 ec 0c             	sub    $0xc,%esp
   10f0a:	68 0e 1b 01 00       	push   $0x11b0e
   10f0f:	e8 8b 08 00 00       	call   1179f <log_printf>
   10f14:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   10f17:	83 ec 04             	sub    $0x4,%esp
   10f1a:	68 24 1b 01 00       	push   $0x11b24
   10f1f:	68 2d 1b 01 00       	push   $0x11b2d
   10f24:	68 33 1b 01 00       	push   $0x11b33
   10f29:	e8 71 08 00 00       	call   1179f <log_printf>
   10f2e:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   10f31:	83 ec 0c             	sub    $0xc,%esp
   10f34:	6a 61                	push   $0x61
   10f36:	68 45 23 01 00       	push   $0x12345
   10f3b:	6a 85                	push   $0xffffff85
   10f3d:	68 40 e2 01 00       	push   $0x1e240
   10f42:	68 42 1b 01 00       	push   $0x11b42
   10f47:	e8 53 08 00 00       	call   1179f <log_printf>
   10f4c:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, (uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   10f4f:	ba 80 38 01 00       	mov    $0x13880,%edx
   10f54:	b8 c2 0e 01 00       	mov    $0x10ec2,%eax
   10f59:	83 ec 04             	sub    $0x4,%esp
   10f5c:	52                   	push   %edx
   10f5d:	50                   	push   %eax
   10f5e:	68 80 38 01 00       	push   $0x13880
   10f63:	e8 5f f4 ff ff       	call   103c7 <task_init>
   10f68:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   10f6b:	e8 93 f4 ff ff       	call   10403 <task_first_init>

    int count = 0;
   10f70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int main: %d",count++);
   10f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f7a:	8d 50 01             	lea    0x1(%eax),%edx
   10f7d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f80:	83 ec 08             	sub    $0x8,%esp
   10f83:	50                   	push   %eax
   10f84:	68 4e 1b 01 00       	push   $0x11b4e
   10f89:	e8 11 08 00 00       	call   1179f <log_printf>
   10f8e:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(task_first_task(),&init_task);
   10f91:	e8 a8 f4 ff ff       	call   1043e <task_first_task>
   10f96:	83 ec 08             	sub    $0x8,%esp
   10f99:	68 80 38 01 00       	push   $0x13880
   10f9e:	50                   	push   %eax
   10f9f:	e8 08 f4 ff ff       	call   103ac <task_switch_from_to>
   10fa4:	83 c4 10             	add    $0x10,%esp
        log_printf("int main: %d",count++);
   10fa7:	eb ce                	jmp    10f77 <init_main+0x76>

00010fa9 <hlt>:
static inline void hlt (void) {
   10fa9:	55                   	push   %ebp
   10faa:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fac:	f4                   	hlt    
}
   10fad:	90                   	nop
   10fae:	5d                   	pop    %ebp
   10faf:	c3                   	ret    

00010fb0 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   10fb0:	55                   	push   %ebp
   10fb1:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   10fb3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fb7:	74 3b                	je     10ff4 <kernel_strcpy+0x44>
   10fb9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fbd:	74 35                	je     10ff4 <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   10fbf:	eb 17                	jmp    10fd8 <kernel_strcpy+0x28>
        *dest++ = *src++;
   10fc1:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fc4:	8d 42 01             	lea    0x1(%edx),%eax
   10fc7:	89 45 0c             	mov    %eax,0xc(%ebp)
   10fca:	8b 45 08             	mov    0x8(%ebp),%eax
   10fcd:	8d 48 01             	lea    0x1(%eax),%ecx
   10fd0:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10fd3:	0f b6 12             	movzbl (%edx),%edx
   10fd6:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   10fd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdb:	0f b6 00             	movzbl (%eax),%eax
   10fde:	84 c0                	test   %al,%al
   10fe0:	74 0a                	je     10fec <kernel_strcpy+0x3c>
   10fe2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fe5:	0f b6 00             	movzbl (%eax),%eax
   10fe8:	84 c0                	test   %al,%al
   10fea:	75 d5                	jne    10fc1 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   10fec:	8b 45 08             	mov    0x8(%ebp),%eax
   10fef:	c6 00 00             	movb   $0x0,(%eax)
   10ff2:	eb 01                	jmp    10ff5 <kernel_strcpy+0x45>
        return;
   10ff4:	90                   	nop
}
   10ff5:	5d                   	pop    %ebp
   10ff6:	c3                   	ret    

00010ff7 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   10ff7:	55                   	push   %ebp
   10ff8:	89 e5                	mov    %esp,%ebp
   10ffa:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   10ffd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11001:	74 61                	je     11064 <kernel_strncpy+0x6d>
   11003:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11007:	74 5b                	je     11064 <kernel_strncpy+0x6d>
   11009:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1100d:	74 55                	je     11064 <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   1100f:	8b 45 08             	mov    0x8(%ebp),%eax
   11012:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   11015:	8b 45 0c             	mov    0xc(%ebp),%eax
   11018:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   1101b:	eb 17                	jmp    11034 <kernel_strncpy+0x3d>
        *d++ = *s++;
   1101d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11020:	8d 42 01             	lea    0x1(%edx),%eax
   11023:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11026:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11029:	8d 48 01             	lea    0x1(%eax),%ecx
   1102c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1102f:	0f b6 12             	movzbl (%edx),%edx
   11032:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   11034:	8b 45 10             	mov    0x10(%ebp),%eax
   11037:	8d 50 ff             	lea    -0x1(%eax),%edx
   1103a:	89 55 10             	mov    %edx,0x10(%ebp)
   1103d:	85 c0                	test   %eax,%eax
   1103f:	7e 0a                	jle    1104b <kernel_strncpy+0x54>
   11041:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11044:	0f b6 00             	movzbl (%eax),%eax
   11047:	84 c0                	test   %al,%al
   11049:	75 d2                	jne    1101d <kernel_strncpy+0x26>
    }
    if (size == 0) {
   1104b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1104f:	75 0b                	jne    1105c <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11051:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11054:	83 e8 01             	sub    $0x1,%eax
   11057:	c6 00 00             	movb   $0x0,(%eax)
   1105a:	eb 09                	jmp    11065 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   1105c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1105f:	c6 00 00             	movb   $0x0,(%eax)
   11062:	eb 01                	jmp    11065 <kernel_strncpy+0x6e>
        return;
   11064:	90                   	nop
    }
}
   11065:	c9                   	leave  
   11066:	c3                   	ret    

00011067 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   11067:	55                   	push   %ebp
   11068:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   1106a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1106e:	74 06                	je     11076 <kernel_strncmp+0xf>
   11070:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11074:	75 0f                	jne    11085 <kernel_strncmp+0x1e>
        return -1;
   11076:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1107b:	eb 62                	jmp    110df <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   1107d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11081:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   11085:	8b 45 08             	mov    0x8(%ebp),%eax
   11088:	0f b6 00             	movzbl (%eax),%eax
   1108b:	84 c0                	test   %al,%al
   1108d:	74 20                	je     110af <kernel_strncmp+0x48>
   1108f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11092:	0f b6 00             	movzbl (%eax),%eax
   11095:	84 c0                	test   %al,%al
   11097:	74 16                	je     110af <kernel_strncmp+0x48>
   11099:	8b 45 08             	mov    0x8(%ebp),%eax
   1109c:	0f b6 10             	movzbl (%eax),%edx
   1109f:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a2:	0f b6 00             	movzbl (%eax),%eax
   110a5:	38 c2                	cmp    %al,%dl
   110a7:	75 06                	jne    110af <kernel_strncmp+0x48>
   110a9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110ad:	75 ce                	jne    1107d <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   110af:	8b 45 08             	mov    0x8(%ebp),%eax
   110b2:	0f b6 00             	movzbl (%eax),%eax
   110b5:	84 c0                	test   %al,%al
   110b7:	74 21                	je     110da <kernel_strncmp+0x73>
   110b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   110bc:	0f b6 00             	movzbl (%eax),%eax
   110bf:	84 c0                	test   %al,%al
   110c1:	74 17                	je     110da <kernel_strncmp+0x73>
   110c3:	8b 45 08             	mov    0x8(%ebp),%eax
   110c6:	0f b6 10             	movzbl (%eax),%edx
   110c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   110cc:	0f b6 00             	movzbl (%eax),%eax
   110cf:	38 c2                	cmp    %al,%dl
   110d1:	74 07                	je     110da <kernel_strncmp+0x73>
   110d3:	b8 01 00 00 00       	mov    $0x1,%eax
   110d8:	eb 05                	jmp    110df <kernel_strncmp+0x78>
   110da:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110df:	5d                   	pop    %ebp
   110e0:	c3                   	ret    

000110e1 <kernel_strlen>:
int kernel_strlen(const char * str){
   110e1:	55                   	push   %ebp
   110e2:	89 e5                	mov    %esp,%ebp
   110e4:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   110e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110eb:	75 07                	jne    110f4 <kernel_strlen+0x13>
        return 0;
   110ed:	b8 00 00 00 00       	mov    $0x0,%eax
   110f2:	eb 26                	jmp    1111a <kernel_strlen+0x39>
    }

    const char * c = str;
   110f4:	8b 45 08             	mov    0x8(%ebp),%eax
   110f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   110fa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11101:	eb 04                	jmp    11107 <kernel_strlen+0x26>
        len++;
   11103:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   11107:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1110a:	8d 50 01             	lea    0x1(%eax),%edx
   1110d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11110:	0f b6 00             	movzbl (%eax),%eax
   11113:	84 c0                	test   %al,%al
   11115:	75 ec                	jne    11103 <kernel_strlen+0x22>
    }
    return len;
   11117:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1111a:	c9                   	leave  
   1111b:	c3                   	ret    

0001111c <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   1111c:	55                   	push   %ebp
   1111d:	89 e5                	mov    %esp,%ebp
   1111f:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11122:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11126:	74 40                	je     11168 <kernel_memcpy+0x4c>
   11128:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1112c:	74 3a                	je     11168 <kernel_memcpy+0x4c>
   1112e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11132:	74 34                	je     11168 <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   11134:	8b 45 0c             	mov    0xc(%ebp),%eax
   11137:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   1113a:	8b 45 08             	mov    0x8(%ebp),%eax
   1113d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11140:	eb 17                	jmp    11159 <kernel_memcpy+0x3d>
        *d++ = *s++;
   11142:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11145:	8d 42 01             	lea    0x1(%edx),%eax
   11148:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1114b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1114e:	8d 48 01             	lea    0x1(%eax),%ecx
   11151:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11154:	0f b6 12             	movzbl (%edx),%edx
   11157:	88 10                	mov    %dl,(%eax)
    while(size--){
   11159:	8b 45 10             	mov    0x10(%ebp),%eax
   1115c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1115f:	89 55 10             	mov    %edx,0x10(%ebp)
   11162:	85 c0                	test   %eax,%eax
   11164:	75 dc                	jne    11142 <kernel_memcpy+0x26>
   11166:	eb 01                	jmp    11169 <kernel_memcpy+0x4d>
        return;
   11168:	90                   	nop
    }

}
   11169:	c9                   	leave  
   1116a:	c3                   	ret    

0001116b <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   1116b:	55                   	push   %ebp
   1116c:	89 e5                	mov    %esp,%ebp
   1116e:	83 ec 14             	sub    $0x14,%esp
   11171:	8b 45 0c             	mov    0xc(%ebp),%eax
   11174:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   11177:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1117b:	74 2c                	je     111a9 <kernel_memset+0x3e>
   1117d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11181:	74 26                	je     111a9 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11183:	8b 45 08             	mov    0x8(%ebp),%eax
   11186:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   11189:	eb 0f                	jmp    1119a <kernel_memset+0x2f>
       *d++ = v; 
   1118b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1118e:	8d 50 01             	lea    0x1(%eax),%edx
   11191:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11194:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11198:	88 10                	mov    %dl,(%eax)
    while(size--){
   1119a:	8b 45 10             	mov    0x10(%ebp),%eax
   1119d:	8d 50 ff             	lea    -0x1(%eax),%edx
   111a0:	89 55 10             	mov    %edx,0x10(%ebp)
   111a3:	85 c0                	test   %eax,%eax
   111a5:	75 e4                	jne    1118b <kernel_memset+0x20>
   111a7:	eb 01                	jmp    111aa <kernel_memset+0x3f>
        return;
   111a9:	90                   	nop
    }
}
   111aa:	c9                   	leave  
   111ab:	c3                   	ret    

000111ac <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   111ac:	55                   	push   %ebp
   111ad:	89 e5                	mov    %esp,%ebp
   111af:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   111b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111b6:	74 0c                	je     111c4 <kernel_memcmp+0x18>
   111b8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111bc:	74 06                	je     111c4 <kernel_memcmp+0x18>
   111be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111c2:	75 07                	jne    111cb <kernel_memcmp+0x1f>
        return -1;
   111c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   111c9:	eb 43                	jmp    1120e <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   111cb:	8b 45 08             	mov    0x8(%ebp),%eax
   111ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   111d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   111d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   111d7:	eb 23                	jmp    111fc <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   111d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111dc:	8d 50 01             	lea    0x1(%eax),%edx
   111df:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111e2:	0f b6 08             	movzbl (%eax),%ecx
   111e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111e8:	8d 50 01             	lea    0x1(%eax),%edx
   111eb:	89 55 f8             	mov    %edx,-0x8(%ebp)
   111ee:	0f b6 00             	movzbl (%eax),%eax
   111f1:	38 c1                	cmp    %al,%cl
   111f3:	74 07                	je     111fc <kernel_memcmp+0x50>
            return -1;
   111f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   111fa:	eb 12                	jmp    1120e <kernel_memcmp+0x62>
    while(size--){
   111fc:	8b 45 10             	mov    0x10(%ebp),%eax
   111ff:	8d 50 ff             	lea    -0x1(%eax),%edx
   11202:	89 55 10             	mov    %edx,0x10(%ebp)
   11205:	85 c0                	test   %eax,%eax
   11207:	75 d0                	jne    111d9 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11209:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1120e:	c9                   	leave  
   1120f:	c3                   	ret    

00011210 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   11210:	55                   	push   %ebp
   11211:	89 e5                	mov    %esp,%ebp
   11213:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   11216:	8d 45 10             	lea    0x10(%ebp),%eax
   11219:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   1121c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1121f:	83 ec 04             	sub    $0x4,%esp
   11222:	50                   	push   %eax
   11223:	ff 75 0c             	pushl  0xc(%ebp)
   11226:	ff 75 08             	pushl  0x8(%ebp)
   11229:	e8 45 01 00 00       	call   11373 <kernel_vsprintf>
   1122e:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11231:	90                   	nop
   11232:	c9                   	leave  
   11233:	c3                   	ret    

00011234 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   11234:	55                   	push   %ebp
   11235:	89 e5                	mov    %esp,%ebp
   11237:	53                   	push   %ebx
   11238:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   1123b:	8b 45 08             	mov    0x8(%ebp),%eax
   1123e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11241:	8b 45 0c             	mov    0xc(%ebp),%eax
   11244:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   11247:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1124b:	74 1d                	je     1126a <kernel_itoa+0x36>
   1124d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11251:	74 17                	je     1126a <kernel_itoa+0x36>
   11253:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11257:	74 11                	je     1126a <kernel_itoa+0x36>
   11259:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1125d:	74 0b                	je     1126a <kernel_itoa+0x36>
        *p = '\0';
   1125f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11262:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11265:	e9 03 01 00 00       	jmp    1136d <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1126a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11271:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11275:	79 19                	jns    11290 <kernel_itoa+0x5c>
   11277:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1127b:	75 13                	jne    11290 <kernel_itoa+0x5c>
        *p++ = '-';
   1127d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11280:	8d 50 01             	lea    0x1(%eax),%edx
   11283:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11286:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11289:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11290:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11294:	74 3b                	je     112d1 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   11296:	8b 0d ac 1b 01 00    	mov    0x11bac,%ecx
   1129c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1129f:	99                   	cltd   
   112a0:	f7 7d 10             	idivl  0x10(%ebp)
   112a3:	89 d0                	mov    %edx,%eax
   112a5:	83 c0 0f             	add    $0xf,%eax
   112a8:	01 c8                	add    %ecx,%eax
   112aa:	0f b6 00             	movzbl (%eax),%eax
   112ad:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   112b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112b3:	8d 50 01             	lea    0x1(%eax),%edx
   112b6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112b9:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   112bd:	88 10                	mov    %dl,(%eax)
            num /= base;
   112bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c2:	99                   	cltd   
   112c3:	f7 7d 10             	idivl  0x10(%ebp)
   112c6:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   112c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112cd:	75 c7                	jne    11296 <kernel_itoa+0x62>
   112cf:	eb 4b                	jmp    1131c <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   112d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   112d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   112d7:	8b 0d ac 1b 01 00    	mov    0x11bac,%ecx
   112dd:	8b 5d 10             	mov    0x10(%ebp),%ebx
   112e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112e3:	ba 00 00 00 00       	mov    $0x0,%edx
   112e8:	f7 f3                	div    %ebx
   112ea:	89 d0                	mov    %edx,%eax
   112ec:	83 c0 0f             	add    $0xf,%eax
   112ef:	01 c8                	add    %ecx,%eax
   112f1:	0f b6 00             	movzbl (%eax),%eax
   112f4:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   112f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112fa:	8d 50 01             	lea    0x1(%eax),%edx
   112fd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11300:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11304:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11306:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11309:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1130c:	ba 00 00 00 00       	mov    $0x0,%edx
   11311:	f7 f3                	div    %ebx
   11313:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11316:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1131a:	75 bb                	jne    112d7 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   1131c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1131f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11322:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11325:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   11328:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1132c:	74 08                	je     11336 <kernel_itoa+0x102>
   1132e:	8b 45 08             	mov    0x8(%ebp),%eax
   11331:	83 c0 01             	add    $0x1,%eax
   11334:	eb 03                	jmp    11339 <kernel_itoa+0x105>
   11336:	8b 45 08             	mov    0x8(%ebp),%eax
   11339:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   1133c:	eb 27                	jmp    11365 <kernel_itoa+0x131>
        char ch = *start;
   1133e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11341:	0f b6 00             	movzbl (%eax),%eax
   11344:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11347:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1134a:	0f b6 10             	movzbl (%eax),%edx
   1134d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11350:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11352:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11355:	8d 50 ff             	lea    -0x1(%eax),%edx
   11358:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1135b:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   1135f:	88 10                	mov    %dl,(%eax)
        start++;
   11361:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   11365:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11368:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1136b:	72 d1                	jb     1133e <kernel_itoa+0x10a>
    }
}
   1136d:	83 c4 20             	add    $0x20,%esp
   11370:	5b                   	pop    %ebx
   11371:	5d                   	pop    %ebp
   11372:	c3                   	ret    

00011373 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   11373:	55                   	push   %ebp
   11374:	89 e5                	mov    %esp,%ebp
   11376:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   11379:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11380:	8b 45 08             	mov    0x8(%ebp),%eax
   11383:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   11386:	e9 17 01 00 00       	jmp    114a2 <kernel_vsprintf+0x12f>
        switch(state) {
   1138b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1138e:	85 c0                	test   %eax,%eax
   11390:	74 0a                	je     1139c <kernel_vsprintf+0x29>
   11392:	83 f8 01             	cmp    $0x1,%eax
   11395:	74 2b                	je     113c2 <kernel_vsprintf+0x4f>
   11397:	e9 06 01 00 00       	jmp    114a2 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   1139c:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   113a0:	75 0c                	jne    113ae <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   113a2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   113a9:	e9 f4 00 00 00       	jmp    114a2 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   113ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113b1:	8d 50 01             	lea    0x1(%eax),%edx
   113b4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   113b7:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   113bb:	88 10                	mov    %dl,(%eax)
                }
                break;
   113bd:	e9 e0 00 00 00       	jmp    114a2 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   113c2:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   113c6:	75 47                	jne    1140f <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   113c8:	8b 45 10             	mov    0x10(%ebp),%eax
   113cb:	8d 50 04             	lea    0x4(%eax),%edx
   113ce:	89 55 10             	mov    %edx,0x10(%ebp)
   113d1:	8b 00                	mov    (%eax),%eax
   113d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   113d6:	ff 75 f4             	pushl  -0xc(%ebp)
   113d9:	e8 03 fd ff ff       	call   110e1 <kernel_strlen>
   113de:	83 c4 04             	add    $0x4,%esp
   113e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   113e4:	eb 17                	jmp    113fd <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   113e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113e9:	8d 42 01             	lea    0x1(%edx),%eax
   113ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
   113ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113f2:	8d 48 01             	lea    0x1(%eax),%ecx
   113f5:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113f8:	0f b6 12             	movzbl (%edx),%edx
   113fb:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   113fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11400:	8d 50 ff             	lea    -0x1(%eax),%edx
   11403:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11406:	85 c0                	test   %eax,%eax
   11408:	75 dc                	jne    113e6 <kernel_vsprintf+0x73>
   1140a:	e9 8b 00 00 00       	jmp    1149a <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   1140f:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11413:	75 2e                	jne    11443 <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   11415:	8b 45 10             	mov    0x10(%ebp),%eax
   11418:	8d 50 04             	lea    0x4(%eax),%edx
   1141b:	89 55 10             	mov    %edx,0x10(%ebp)
   1141e:	8b 00                	mov    (%eax),%eax
   11420:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   11423:	6a 0a                	push   $0xa
   11425:	ff 75 e4             	pushl  -0x1c(%ebp)
   11428:	ff 75 f8             	pushl  -0x8(%ebp)
   1142b:	e8 04 fe ff ff       	call   11234 <kernel_itoa>
   11430:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   11433:	ff 75 f8             	pushl  -0x8(%ebp)
   11436:	e8 a6 fc ff ff       	call   110e1 <kernel_strlen>
   1143b:	83 c4 04             	add    $0x4,%esp
   1143e:	01 45 f8             	add    %eax,-0x8(%ebp)
   11441:	eb 57                	jmp    1149a <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   11443:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11447:	75 2e                	jne    11477 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   11449:	8b 45 10             	mov    0x10(%ebp),%eax
   1144c:	8d 50 04             	lea    0x4(%eax),%edx
   1144f:	89 55 10             	mov    %edx,0x10(%ebp)
   11452:	8b 00                	mov    (%eax),%eax
   11454:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   11457:	6a 10                	push   $0x10
   11459:	ff 75 e8             	pushl  -0x18(%ebp)
   1145c:	ff 75 f8             	pushl  -0x8(%ebp)
   1145f:	e8 d0 fd ff ff       	call   11234 <kernel_itoa>
   11464:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   11467:	ff 75 f8             	pushl  -0x8(%ebp)
   1146a:	e8 72 fc ff ff       	call   110e1 <kernel_strlen>
   1146f:	83 c4 04             	add    $0x4,%esp
   11472:	01 45 f8             	add    %eax,-0x8(%ebp)
   11475:	eb 23                	jmp    1149a <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   11477:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1147b:	75 1d                	jne    1149a <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   1147d:	8b 45 10             	mov    0x10(%ebp),%eax
   11480:	8d 50 04             	lea    0x4(%eax),%edx
   11483:	89 55 10             	mov    %edx,0x10(%ebp)
   11486:	8b 00                	mov    (%eax),%eax
   11488:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   1148b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1148e:	8d 50 01             	lea    0x1(%eax),%edx
   11491:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11494:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11498:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   1149a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   114a1:	90                   	nop
    while ((ch = *fmt++)) {
   114a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   114a5:	8d 50 01             	lea    0x1(%eax),%edx
   114a8:	89 55 0c             	mov    %edx,0xc(%ebp)
   114ab:	0f b6 00             	movzbl (%eax),%eax
   114ae:	88 45 ef             	mov    %al,-0x11(%ebp)
   114b1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   114b5:	0f 85 d0 fe ff ff    	jne    1138b <kernel_vsprintf+0x18>
        }
    }
}
   114bb:	90                   	nop
   114bc:	c9                   	leave  
   114bd:	c3                   	ret    

000114be <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   114be:	55                   	push   %ebp
   114bf:	89 e5                	mov    %esp,%ebp
   114c1:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   114c4:	83 ec 08             	sub    $0x8,%esp
   114c7:	ff 75 14             	pushl  0x14(%ebp)
   114ca:	68 5c 1b 01 00       	push   $0x11b5c
   114cf:	e8 cb 02 00 00       	call   1179f <log_printf>
   114d4:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   114d7:	ff 75 10             	pushl  0x10(%ebp)
   114da:	ff 75 0c             	pushl  0xc(%ebp)
   114dd:	ff 75 08             	pushl  0x8(%ebp)
   114e0:	68 6e 1b 01 00       	push   $0x11b6e
   114e5:	e8 b5 02 00 00       	call   1179f <log_printf>
   114ea:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   114ed:	e8 b7 fa ff ff       	call   10fa9 <hlt>
   114f2:	eb f9                	jmp    114ed <panic+0x2f>

000114f4 <list_is_empty>:
/**
 * 判断链表是否为空
 * @param list 判断的链表
 * @return 1 - 空，0 - 非空
 */
static inline int list_is_empty(list_t *list) {
   114f4:	55                   	push   %ebp
   114f5:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   114f7:	8b 45 08             	mov    0x8(%ebp),%eax
   114fa:	8b 40 08             	mov    0x8(%eax),%eax
   114fd:	85 c0                	test   %eax,%eax
   114ff:	0f 94 c0             	sete   %al
   11502:	0f b6 c0             	movzbl %al,%eax
}
   11505:	5d                   	pop    %ebp
   11506:	c3                   	ret    

00011507 <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   11507:	55                   	push   %ebp
   11508:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   1150a:	8b 45 08             	mov    0x8(%ebp),%eax
   1150d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11514:	8b 45 08             	mov    0x8(%ebp),%eax
   11517:	8b 50 04             	mov    0x4(%eax),%edx
   1151a:	8b 45 08             	mov    0x8(%ebp),%eax
   1151d:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1151f:	8b 45 08             	mov    0x8(%ebp),%eax
   11522:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11529:	90                   	nop
   1152a:	5d                   	pop    %ebp
   1152b:	c3                   	ret    

0001152c <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   1152c:	55                   	push   %ebp
   1152d:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   1152f:	8b 45 08             	mov    0x8(%ebp),%eax
   11532:	8b 10                	mov    (%eax),%edx
   11534:	8b 45 0c             	mov    0xc(%ebp),%eax
   11537:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   1153a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1153d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   11543:	ff 75 08             	pushl  0x8(%ebp)
   11546:	e8 a9 ff ff ff       	call   114f4 <list_is_empty>
   1154b:	83 c4 04             	add    $0x4,%esp
   1154e:	85 c0                	test   %eax,%eax
   11550:	74 16                	je     11568 <list_insert_first+0x3c>
        list->first = list->last = node;
   11552:	8b 45 08             	mov    0x8(%ebp),%eax
   11555:	8b 55 0c             	mov    0xc(%ebp),%edx
   11558:	89 50 04             	mov    %edx,0x4(%eax)
   1155b:	8b 45 08             	mov    0x8(%ebp),%eax
   1155e:	8b 50 04             	mov    0x4(%eax),%edx
   11561:	8b 45 08             	mov    0x8(%ebp),%eax
   11564:	89 10                	mov    %edx,(%eax)
   11566:	eb 12                	jmp    1157a <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   11568:	8b 45 08             	mov    0x8(%ebp),%eax
   1156b:	8b 00                	mov    (%eax),%eax
   1156d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11570:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11572:	8b 45 08             	mov    0x8(%ebp),%eax
   11575:	8b 55 0c             	mov    0xc(%ebp),%edx
   11578:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   1157a:	8b 45 08             	mov    0x8(%ebp),%eax
   1157d:	8b 40 08             	mov    0x8(%eax),%eax
   11580:	8d 50 01             	lea    0x1(%eax),%edx
   11583:	8b 45 08             	mov    0x8(%ebp),%eax
   11586:	89 50 08             	mov    %edx,0x8(%eax)
}
   11589:	90                   	nop
   1158a:	c9                   	leave  
   1158b:	c3                   	ret    

0001158c <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1158c:	55                   	push   %ebp
   1158d:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1158f:	8b 45 08             	mov    0x8(%ebp),%eax
   11592:	8b 50 04             	mov    0x4(%eax),%edx
   11595:	8b 45 0c             	mov    0xc(%ebp),%eax
   11598:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   1159a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1159d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   115a4:	ff 75 08             	pushl  0x8(%ebp)
   115a7:	e8 48 ff ff ff       	call   114f4 <list_is_empty>
   115ac:	83 c4 04             	add    $0x4,%esp
   115af:	85 c0                	test   %eax,%eax
   115b1:	74 16                	je     115c9 <list_insert_last+0x3d>
        list->first = list->last = node;
   115b3:	8b 45 08             	mov    0x8(%ebp),%eax
   115b6:	8b 55 0c             	mov    0xc(%ebp),%edx
   115b9:	89 50 04             	mov    %edx,0x4(%eax)
   115bc:	8b 45 08             	mov    0x8(%ebp),%eax
   115bf:	8b 50 04             	mov    0x4(%eax),%edx
   115c2:	8b 45 08             	mov    0x8(%ebp),%eax
   115c5:	89 10                	mov    %edx,(%eax)
   115c7:	eb 15                	jmp    115de <list_insert_last+0x52>
    } else {
        list->last->next = node;
   115c9:	8b 45 08             	mov    0x8(%ebp),%eax
   115cc:	8b 40 04             	mov    0x4(%eax),%eax
   115cf:	8b 55 0c             	mov    0xc(%ebp),%edx
   115d2:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   115d5:	8b 45 08             	mov    0x8(%ebp),%eax
   115d8:	8b 55 0c             	mov    0xc(%ebp),%edx
   115db:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   115de:	8b 45 08             	mov    0x8(%ebp),%eax
   115e1:	8b 40 08             	mov    0x8(%eax),%eax
   115e4:	8d 50 01             	lea    0x1(%eax),%edx
   115e7:	8b 45 08             	mov    0x8(%ebp),%eax
   115ea:	89 50 08             	mov    %edx,0x8(%eax)
}
   115ed:	90                   	nop
   115ee:	c9                   	leave  
   115ef:	c3                   	ret    

000115f0 <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   115f0:	55                   	push   %ebp
   115f1:	89 e5                	mov    %esp,%ebp
   115f3:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   115f6:	ff 75 08             	pushl  0x8(%ebp)
   115f9:	e8 f6 fe ff ff       	call   114f4 <list_is_empty>
   115fe:	83 c4 04             	add    $0x4,%esp
   11601:	85 c0                	test   %eax,%eax
   11603:	74 07                	je     1160c <list_remove_first+0x1c>
        return (list_node_t *)0;
   11605:	b8 00 00 00 00       	mov    $0x0,%eax
   1160a:	eb 5b                	jmp    11667 <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   1160c:	8b 45 08             	mov    0x8(%ebp),%eax
   1160f:	8b 00                	mov    (%eax),%eax
   11611:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   11614:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11617:	8b 50 04             	mov    0x4(%eax),%edx
   1161a:	8b 45 08             	mov    0x8(%ebp),%eax
   1161d:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   1161f:	8b 45 08             	mov    0x8(%ebp),%eax
   11622:	8b 00                	mov    (%eax),%eax
   11624:	85 c0                	test   %eax,%eax
   11626:	75 0c                	jne    11634 <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   11628:	8b 45 08             	mov    0x8(%ebp),%eax
   1162b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11632:	eb 0c                	jmp    11640 <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   11634:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11637:	8b 40 04             	mov    0x4(%eax),%eax
   1163a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   11640:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11643:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1164a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1164d:	8b 50 04             	mov    0x4(%eax),%edx
   11650:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11653:	89 10                	mov    %edx,(%eax)
    list->count--;
   11655:	8b 45 08             	mov    0x8(%ebp),%eax
   11658:	8b 40 08             	mov    0x8(%eax),%eax
   1165b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1165e:	8b 45 08             	mov    0x8(%ebp),%eax
   11661:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11664:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11667:	c9                   	leave  
   11668:	c3                   	ret    

00011669 <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   11669:	55                   	push   %ebp
   1166a:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   1166c:	8b 45 08             	mov    0x8(%ebp),%eax
   1166f:	8b 00                	mov    (%eax),%eax
   11671:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11674:	75 0b                	jne    11681 <list_remove+0x18>
        list->first = node->next;
   11676:	8b 45 0c             	mov    0xc(%ebp),%eax
   11679:	8b 50 04             	mov    0x4(%eax),%edx
   1167c:	8b 45 08             	mov    0x8(%ebp),%eax
   1167f:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   11681:	8b 45 08             	mov    0x8(%ebp),%eax
   11684:	8b 40 04             	mov    0x4(%eax),%eax
   11687:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1168a:	75 0b                	jne    11697 <list_remove+0x2e>
        list->last = node->pre;
   1168c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1168f:	8b 10                	mov    (%eax),%edx
   11691:	8b 45 08             	mov    0x8(%ebp),%eax
   11694:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   11697:	8b 45 0c             	mov    0xc(%ebp),%eax
   1169a:	8b 00                	mov    (%eax),%eax
   1169c:	85 c0                	test   %eax,%eax
   1169e:	74 0e                	je     116ae <list_remove+0x45>
        node->pre->next = node->next;
   116a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   116a3:	8b 00                	mov    (%eax),%eax
   116a5:	8b 55 0c             	mov    0xc(%ebp),%edx
   116a8:	8b 52 04             	mov    0x4(%edx),%edx
   116ab:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   116ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   116b1:	8b 40 04             	mov    0x4(%eax),%eax
   116b4:	85 c0                	test   %eax,%eax
   116b6:	74 0d                	je     116c5 <list_remove+0x5c>
        node->next->pre = node->pre;
   116b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   116bb:	8b 40 04             	mov    0x4(%eax),%eax
   116be:	8b 55 0c             	mov    0xc(%ebp),%edx
   116c1:	8b 12                	mov    (%edx),%edx
   116c3:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   116c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   116c8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d2:	8b 50 04             	mov    0x4(%eax),%edx
   116d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d8:	89 10                	mov    %edx,(%eax)

    list->count--;
   116da:	8b 45 08             	mov    0x8(%ebp),%eax
   116dd:	8b 40 08             	mov    0x8(%eax),%eax
   116e0:	8d 50 ff             	lea    -0x1(%eax),%edx
   116e3:	8b 45 08             	mov    0x8(%ebp),%eax
   116e6:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   116e9:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   116ec:	5d                   	pop    %ebp
   116ed:	c3                   	ret    

000116ee <inb>:
static inline uint8_t inb(uint16_t port) {
   116ee:	55                   	push   %ebp
   116ef:	89 e5                	mov    %esp,%ebp
   116f1:	83 ec 14             	sub    $0x14,%esp
   116f4:	8b 45 08             	mov    0x8(%ebp),%eax
   116f7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   116fb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   116ff:	89 c2                	mov    %eax,%edx
   11701:	ec                   	in     (%dx),%al
   11702:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11705:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11709:	c9                   	leave  
   1170a:	c3                   	ret    

0001170b <outb>:
static inline void outb(uint16_t port,uint8_t data){
   1170b:	55                   	push   %ebp
   1170c:	89 e5                	mov    %esp,%ebp
   1170e:	83 ec 08             	sub    $0x8,%esp
   11711:	8b 55 08             	mov    0x8(%ebp),%edx
   11714:	8b 45 0c             	mov    0xc(%ebp),%eax
   11717:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1171b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   1171e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11722:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11726:	ee                   	out    %al,(%dx)
}
   11727:	90                   	nop
   11728:	c9                   	leave  
   11729:	c3                   	ret    

0001172a <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值

#define COM1_PORT 0x3f8

void log_init(void) {
   1172a:	55                   	push   %ebp
   1172b:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   1172d:	6a 00                	push   $0x0
   1172f:	68 f9 03 00 00       	push   $0x3f9
   11734:	e8 d2 ff ff ff       	call   1170b <outb>
   11739:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   1173c:	68 80 00 00 00       	push   $0x80
   11741:	68 fb 03 00 00       	push   $0x3fb
   11746:	e8 c0 ff ff ff       	call   1170b <outb>
   1174b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   1174e:	6a 03                	push   $0x3
   11750:	68 f8 03 00 00       	push   $0x3f8
   11755:	e8 b1 ff ff ff       	call   1170b <outb>
   1175a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   1175d:	6a 00                	push   $0x0
   1175f:	68 f9 03 00 00       	push   $0x3f9
   11764:	e8 a2 ff ff ff       	call   1170b <outb>
   11769:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   1176c:	6a 03                	push   $0x3
   1176e:	68 fb 03 00 00       	push   $0x3fb
   11773:	e8 93 ff ff ff       	call   1170b <outb>
   11778:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   1177b:	68 c7 00 00 00       	push   $0xc7
   11780:	68 fa 03 00 00       	push   $0x3fa
   11785:	e8 81 ff ff ff       	call   1170b <outb>
   1178a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   1178d:	6a 0f                	push   $0xf
   1178f:	68 fc 03 00 00       	push   $0x3fc
   11794:	e8 72 ff ff ff       	call   1170b <outb>
   11799:	83 c4 08             	add    $0x8,%esp

}
   1179c:	90                   	nop
   1179d:	c9                   	leave  
   1179e:	c3                   	ret    

0001179f <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   1179f:	55                   	push   %ebp
   117a0:	89 e5                	mov    %esp,%ebp
   117a2:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   117a8:	83 ec 04             	sub    $0x4,%esp
   117ab:	68 80 00 00 00       	push   $0x80
   117b0:	6a 00                	push   $0x0
   117b2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   117b8:	50                   	push   %eax
   117b9:	e8 ad f9 ff ff       	call   1116b <kernel_memset>
   117be:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   117c1:	8d 45 0c             	lea    0xc(%ebp),%eax
   117c4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(str_buf,fmt,args);
   117ca:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   117d0:	83 ec 04             	sub    $0x4,%esp
   117d3:	50                   	push   %eax
   117d4:	ff 75 08             	pushl  0x8(%ebp)
   117d7:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   117dd:	50                   	push   %eax
   117de:	e8 90 fb ff ff       	call   11373 <kernel_vsprintf>
   117e3:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;
   117e6:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   117ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   117ef:	eb 31                	jmp    11822 <log_printf+0x83>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   117f1:	90                   	nop
   117f2:	83 ec 0c             	sub    $0xc,%esp
   117f5:	68 fd 03 00 00       	push   $0x3fd
   117fa:	e8 ef fe ff ff       	call   116ee <inb>
   117ff:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   11802:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11805:	8d 50 01             	lea    0x1(%eax),%edx
   11808:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1180b:	0f b6 00             	movzbl (%eax),%eax
   1180e:	0f b6 c0             	movzbl %al,%eax
   11811:	83 ec 08             	sub    $0x8,%esp
   11814:	50                   	push   %eax
   11815:	68 f8 03 00 00       	push   $0x3f8
   1181a:	e8 ec fe ff ff       	call   1170b <outb>
   1181f:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11822:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11825:	0f b6 00             	movzbl (%eax),%eax
   11828:	84 c0                	test   %al,%al
   1182a:	75 c5                	jne    117f1 <log_printf+0x52>
    }

// 变列
    outb(COM1_PORT,'\r');
   1182c:	83 ec 08             	sub    $0x8,%esp
   1182f:	6a 0d                	push   $0xd
   11831:	68 f8 03 00 00       	push   $0x3f8
   11836:	e8 d0 fe ff ff       	call   1170b <outb>
   1183b:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   1183e:	83 ec 08             	sub    $0x8,%esp
   11841:	6a 0a                	push   $0xa
   11843:	68 f8 03 00 00       	push   $0x3f8
   11848:	e8 be fe ff ff       	call   1170b <outb>
   1184d:	83 c4 10             	add    $0x10,%esp
   11850:	90                   	nop
   11851:	c9                   	leave  
   11852:	c3                   	ret    
