
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001fe0 memsz 0x00005d90 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c7b  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000360  00011c7c  00011c7c  00002c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011fdc  00011fdc  00002fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003db0  00011fe0  00011fe0  00002fe0  2**5
                  ALLOC
  4 .debug_line   00000c67  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000216a  00000000  00000000  00003c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a23  00000000  00000000  00005db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  000067d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b04  00000000  00000000  000068f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  000073fc  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000cd8  00000000  00000000  00007410  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011c7c l    d  .rodata	00000000 .rodata
00011fdc l    d  .data	00000000 .data
00011fe0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	0000001b list_node_init
000102c0 l     F .text	0000000b list_node_next
000102cb l     F .text	0000000b list_count
000102d6 l     F .text	0000000a list_first
000102e0 l     F .text	00000017 write_tr
00011fe0 l     O .bss	000000d4 task_manager
000102f7 l     F .text	00000111 tss_init
00011cdc l     O .rodata	0000000a __func__.2088
00000000 l    df *ABS*	00000000 cpu.c
0001084f l     F .text	00000028 lgdt
00010877 l     F .text	0000001a far_jump
000120c0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010a50 l     F .text	0000001d inb
00010a6d l     F .text	0000001f outb
00010a8c l     F .text	00000007 cli
00010a93 l     F .text	00000007 sti
00010a9a l     F .text	00000028 lidt
00010ac2 l     F .text	00000007 hlt
00010ac9 l     F .text	00000010 read_eflags
00010ad9 l     F .text	0000000b write_eflags
00010ae4 l     F .text	000000d9 dump_core_regs
00010bbd l     F .text	0000003e do_default_handler
000128c0 l     O .bss	00000400 idt_table
00010e2b l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011222 l     F .text	0000001f outb
00012cc0 l     O .bss	00000004 sys_tick
00011269 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012ce0 l     O .bss	00001000 init_task_stack
00013ce0 l     O .bss	000000ac init_task
00000000 l    df *ABS*	00000000 klib.c
000113bb l     F .text	00000007 hlt
00011fdc l     O .data	00000004 num2ch.1907
00000000 l    df *ABS*	00000000 list.c
00011906 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011b00 l     F .text	0000001d inb
00011b1d l     F .text	0000001f outb
0001152e g     F .text	0000004f kernel_memcpy
000105ff g     F .text	0000000a task_current
000111c3 g     F .text	0000000b irq_enable_global
0001199e g     F .text	00000064 list_insert_last
00010d2f g     F .text	0000001c do_handler_segment_not_present
0001058b g     F .text	00000029 task_set_ready
0001157d g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
000109c8 g     F .text	0000000b cpu_init
00011b3c g     F .text	00000075 log_init
00011312 g     F .text	000000a9 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
000113c2 g     F .text	00000047 kernel_strcpy
000110a6 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010c87 g     F .text	0000001c do_handler_overflow
00010dbb g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010d67 g     F .text	0000001c do_handler_general_protection
00010c17 g     F .text	0000001c do_handler_divider
00010cf7 g     F .text	0000001c do_handler_double_fault
00011303 g     F .text	0000000f init_task_entry
00010d83 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
000111ce g     F .text	0000002b pic_send_eoi
0001053e g     F .text	0000000a task_first_task
00011241 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010e0f g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00013d90 g     O .bss	00002000 stack
000107f8 g     F .text	00000057 sys_sleep
000100e2 g       .text	00000000 exception_handler_bound_range
00010cbf g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010d9f g     F .text	0000001c do_handler_fpu_error
00010501 g     F .text	0000003d task_first_init
00010dd7 g     F .text	0000001c do_handler_machine_check
00010c33 g     F .text	0000001c do_handler_Debug
0001193e g     F .text	00000060 list_insert_first
000107d8 g     F .text	00000020 task_set_wakeup
00010c4f g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00011409 g     F .text	00000070 kernel_strncpy
000111b8 g     F .text	0000000b irq_disable_global
00010664 g     F .text	00000061 sys_sched_yield
000112e1 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
00011785 g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
00010d13 g     F .text	0000001c do_handler_invalid_tss
0001079e g     F .text	0000003a task_set_sleep
000118d0 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
0001106c g     F .text	0000003a irq_install
00010914 g     F .text	0000006d init_gdt
000111f9 g     F .text	00000018 irq_enter_protection
00011131 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00010cdb g     F .text	0000001c do_handler_device_unavailable
00010609 g     F .text	0000005b task_dispatch
00010a3c g     F .text	00000014 switch_to_tss
000105d4 g     F .text	0000002b task_next_run
000115be g     F .text	00000064 kernel_memcmp
00011919 g     F .text	00000025 list_init
00010df3 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
000105b4 g     F .text	00000020 task_set_block
00010bfb g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
00010408 g     F .text	0000001e task_switch_from_to
00010ebe g     F .text	000001ae irq_init
00011211 g     F .text	00000011 irq_leave_protection
000114f3 g     F .text	0000003b kernel_strlen
00010891 g     F .text	00000083 segment_desc_set
00010ca3 g     F .text	0000001c do_handler_bound_range
00011a02 g     F .text	00000079 list_remove_first
00011479 g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010548 g     F .text	00000043 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
000106c5 g     F .text	000000d9 task_time_tick
00010d4b g     F .text	0000001c do_handler_stack_segment_fault
00010c6b g     F .text	0000001c do_handler_breakpoint
00011bb1 g     F .text	000000ca log_printf
00010426 g     F .text	000000db task_init
00011622 g     F .text	00000024 kernel_sprintf
000109d3 g     F .text	00000069 gdt_alloc_desc
00011646 g     F .text	0000013f kernel_itoa
00011a7b g     F .text	00000085 list_remove
00010981 g     F .text	00000047 gate_desc_set
000112c9 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 d8 12 00 00       	call   112e1 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 90 5d 01 00       	mov    $0x15d90,%esp
    jmp init_main
   10023:	e9 ea 12 00 00       	jmp    11312 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 c2 0b 00 00       	call   10bfb <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 bf 0b 00 00       	call   10c17 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 bc 0b 00 00       	call   10c33 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 b9 0b 00 00       	call   10c4f <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 b6 0b 00 00       	call   10c6b <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 b3 0b 00 00       	call   10c87 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 b0 0b 00 00       	call   10ca3 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 ad 0b 00 00       	call   10cbf <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 aa 0b 00 00       	call   10cdb <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 a9 0b 00 00       	call   10cf7 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 a8 0b 00 00       	call   10d13 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 a7 0b 00 00       	call   10d2f <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 a6 0b 00 00       	call   10d4b <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 a5 0b 00 00       	call   10d67 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 a4 0b 00 00       	call   10d83 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 a1 0b 00 00       	call   10d9f <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 a0 0b 00 00       	call   10dbb <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 9d 0b 00 00       	call   10dd7 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 9a 0b 00 00       	call   10df3 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 97 0b 00 00       	call   10e0f <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 aa 0f 00 00       	call   11241 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102b2:	8b 45 08             	mov    0x8(%ebp),%eax
   102b5:	8b 50 04             	mov    0x4(%eax),%edx
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	89 10                	mov    %edx,(%eax)
}
   102bd:	90                   	nop
   102be:	5d                   	pop    %ebp
   102bf:	c3                   	ret    

000102c0 <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
    return node->next;
   102c3:	8b 45 08             	mov    0x8(%ebp),%eax
   102c6:	8b 40 04             	mov    0x4(%eax),%eax
}
   102c9:	5d                   	pop    %ebp
   102ca:	c3                   	ret    

000102cb <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   102cb:	55                   	push   %ebp
   102cc:	89 e5                	mov    %esp,%ebp
    return list->count;
   102ce:	8b 45 08             	mov    0x8(%ebp),%eax
   102d1:	8b 40 08             	mov    0x8(%eax),%eax
}
   102d4:	5d                   	pop    %ebp
   102d5:	c3                   	ret    

000102d6 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   102d6:	55                   	push   %ebp
   102d7:	89 e5                	mov    %esp,%ebp
    return list->first;
   102d9:	8b 45 08             	mov    0x8(%ebp),%eax
   102dc:	8b 00                	mov    (%eax),%eax
}
   102de:	5d                   	pop    %ebp
   102df:	c3                   	ret    

000102e0 <write_tr>:

static inline void hlt (void) {
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel) {
   102e0:	55                   	push   %ebp
   102e1:	89 e5                	mov    %esp,%ebp
   102e3:	83 ec 04             	sub    $0x4,%esp
   102e6:	8b 45 08             	mov    0x8(%ebp),%eax
   102e9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   102ed:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102f1:	0f 00 d8             	ltr    %ax
}
   102f4:	90                   	nop
   102f5:	c9                   	leave  
   102f6:	c3                   	ret    

000102f7 <tss_init>:
#include "comm/cpu_instr.h"
#include "cpu/irq.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
   102fa:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102fd:	e8 d1 06 00 00       	call   109d3 <gdt_alloc_desc>
   10302:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   10305:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10309:	79 1a                	jns    10325 <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   1030b:	83 ec 0c             	sub    $0xc,%esp
   1030e:	68 7c 1c 01 00       	push   $0x11c7c
   10313:	e8 99 18 00 00       	call   11bb1 <log_printf>
   10318:	83 c4 10             	add    $0x10,%esp
        return -1;
   1031b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10320:	e9 e1 00 00 00       	jmp    10406 <tss_init+0x10f>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   10325:	8b 45 08             	mov    0x8(%ebp),%eax
   10328:	83 c0 40             	add    $0x40,%eax
   1032b:	68 89 00 00 00       	push   $0x89
   10330:	6a 68                	push   $0x68
   10332:	50                   	push   %eax
   10333:	ff 75 f4             	pushl  -0xc(%ebp)
   10336:	e8 56 05 00 00       	call   10891 <segment_desc_set>
   1033b:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   1033e:	8b 45 08             	mov    0x8(%ebp),%eax
   10341:	83 c0 40             	add    $0x40,%eax
   10344:	83 ec 04             	sub    $0x4,%esp
   10347:	6a 68                	push   $0x68
   10349:	6a 00                	push   $0x0
   1034b:	50                   	push   %eax
   1034c:	e8 2c 12 00 00       	call   1157d <kernel_memset>
   10351:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10354:	8b 45 08             	mov    0x8(%ebp),%eax
   10357:	8b 55 0c             	mov    0xc(%ebp),%edx
   1035a:	89 50 60             	mov    %edx,0x60(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1035d:	8b 45 08             	mov    0x8(%ebp),%eax
   10360:	8b 55 10             	mov    0x10(%ebp),%edx
   10363:	89 50 44             	mov    %edx,0x44(%eax)
   10366:	8b 45 08             	mov    0x8(%ebp),%eax
   10369:	8b 50 44             	mov    0x44(%eax),%edx
   1036c:	8b 45 08             	mov    0x8(%ebp),%eax
   1036f:	89 50 78             	mov    %edx,0x78(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10372:	8b 45 08             	mov    0x8(%ebp),%eax
   10375:	c7 40 48 10 00 00 00 	movl   $0x10,0x48(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	c7 40 64 02 02 00 00 	movl   $0x202,0x64(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   10390:	00 00 00 
   10393:	8b 45 08             	mov    0x8(%ebp),%eax
   10396:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   1039c:	8b 45 08             	mov    0x8(%ebp),%eax
   1039f:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   103a5:	8b 45 08             	mov    0x8(%ebp),%eax
   103a8:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   103b7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ba:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   103c0:	8b 45 08             	mov    0x8(%ebp),%eax
   103c3:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
   103c9:	8b 45 08             	mov    0x8(%ebp),%eax
   103cc:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   103d2:	8b 45 08             	mov    0x8(%ebp),%eax
   103d5:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   103db:	8b 45 08             	mov    0x8(%ebp),%eax
   103de:	c7 80 8c 00 00 00 08 	movl   $0x8,0x8c(%eax)
   103e5:	00 00 00 
    task->tss.iomap = 0;
   103e8:	8b 45 08             	mov    0x8(%ebp),%eax
   103eb:	c7 80 a4 00 00 00 00 	movl   $0x0,0xa4(%eax)
   103f2:	00 00 00 

    task->tss_sel = tss_sel;
   103f5:	8b 45 08             	mov    0x8(%ebp),%eax
   103f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103fb:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    return 0;
   10401:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10406:	c9                   	leave  
   10407:	c3                   	ret    

00010408 <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   10408:	55                   	push   %ebp
   10409:	89 e5                	mov    %esp,%ebp
   1040b:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   1040e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10411:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   10417:	83 ec 0c             	sub    $0xc,%esp
   1041a:	50                   	push   %eax
   1041b:	e8 1c 06 00 00       	call   10a3c <switch_to_tss>
   10420:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   10423:	90                   	nop
   10424:	c9                   	leave  
   10425:	c3                   	ret    

00010426 <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   10426:	55                   	push   %ebp
   10427:	89 e5                	mov    %esp,%ebp
   10429:	83 ec 18             	sub    $0x18,%esp

    ASSERT(task != (task_t*)0);
   1042c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10430:	75 19                	jne    1044b <task_init+0x25>
   10432:	68 8f 1c 01 00       	push   $0x11c8f
   10437:	68 dc 1c 01 00       	push   $0x11cdc
   1043c:	6a 38                	push   $0x38
   1043e:	68 a4 1c 01 00       	push   $0x11ca4
   10443:	e8 88 14 00 00       	call   118d0 <panic>
   10448:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   1044b:	83 ec 04             	sub    $0x4,%esp
   1044e:	ff 75 14             	pushl  0x14(%ebp)
   10451:	ff 75 10             	pushl  0x10(%ebp)
   10454:	ff 75 08             	pushl  0x8(%ebp)
   10457:	e8 9b fe ff ff       	call   102f7 <tss_init>
   1045c:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   1045f:	8b 45 08             	mov    0x8(%ebp),%eax
   10462:	83 c0 10             	add    $0x10,%eax
   10465:	83 ec 04             	sub    $0x4,%esp
   10468:	6a 20                	push   $0x20
   1046a:	ff 75 0c             	pushl  0xc(%ebp)
   1046d:	50                   	push   %eax
   1046e:	e8 96 0f 00 00       	call   11409 <kernel_strncpy>
   10473:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10476:	8b 45 08             	mov    0x8(%ebp),%eax
   10479:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   1047f:	8b 45 08             	mov    0x8(%ebp),%eax
   10482:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10489:	8b 45 08             	mov    0x8(%ebp),%eax
   1048c:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   10493:	8b 45 08             	mov    0x8(%ebp),%eax
   10496:	8b 50 08             	mov    0x8(%eax),%edx
   10499:	8b 45 08             	mov    0x8(%ebp),%eax
   1049c:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   1049f:	8b 45 08             	mov    0x8(%ebp),%eax
   104a2:	83 c0 38             	add    $0x38,%eax
   104a5:	83 ec 0c             	sub    $0xc,%esp
   104a8:	50                   	push   %eax
   104a9:	e8 f7 fd ff ff       	call   102a5 <list_node_init>
   104ae:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   104b1:	8b 45 08             	mov    0x8(%ebp),%eax
   104b4:	83 c0 30             	add    $0x30,%eax
   104b7:	83 ec 0c             	sub    $0xc,%esp
   104ba:	50                   	push   %eax
   104bb:	e8 e5 fd ff ff       	call   102a5 <list_node_init>
   104c0:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   104c3:	e8 31 0d 00 00       	call   111f9 <irq_enter_protection>
   104c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   104cb:	83 ec 0c             	sub    $0xc,%esp
   104ce:	ff 75 08             	pushl  0x8(%ebp)
   104d1:	e8 b5 00 00 00       	call   1058b <task_set_ready>
   104d6:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   104d9:	8b 45 08             	mov    0x8(%ebp),%eax
   104dc:	83 c0 38             	add    $0x38,%eax
   104df:	83 ec 08             	sub    $0x8,%esp
   104e2:	50                   	push   %eax
   104e3:	68 f0 1f 01 00       	push   $0x11ff0
   104e8:	e8 b1 14 00 00       	call   1199e <list_insert_last>
   104ed:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   104f0:	83 ec 0c             	sub    $0xc,%esp
   104f3:	ff 75 f4             	pushl  -0xc(%ebp)
   104f6:	e8 16 0d 00 00       	call   11211 <irq_leave_protection>
   104fb:	83 c4 10             	add    $0x10,%esp
}
   104fe:	90                   	nop
   104ff:	c9                   	leave  
   10500:	c3                   	ret    

00010501 <task_first_init>:

void task_first_init (void) {
   10501:	55                   	push   %ebp
   10502:	89 e5                	mov    %esp,%ebp
   10504:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   10507:	6a 00                	push   $0x0
   10509:	6a 00                	push   $0x0
   1050b:	68 d1 1c 01 00       	push   $0x11cd1
   10510:	68 08 20 01 00       	push   $0x12008
   10515:	e8 0c ff ff ff       	call   10426 <task_init>
   1051a:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   1051d:	a1 b0 20 01 00       	mov    0x120b0,%eax
   10522:	0f b7 c0             	movzwl %ax,%eax
   10525:	83 ec 0c             	sub    $0xc,%esp
   10528:	50                   	push   %eax
   10529:	e8 b2 fd ff ff       	call   102e0 <write_tr>
   1052e:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10531:	c7 05 e0 1f 01 00 08 	movl   $0x12008,0x11fe0
   10538:	20 01 00 
}
   1053b:	90                   	nop
   1053c:	c9                   	leave  
   1053d:	c3                   	ret    

0001053e <task_first_task>:

task_t * task_first_task (void) {
   1053e:	55                   	push   %ebp
   1053f:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10541:	b8 08 20 01 00       	mov    $0x12008,%eax
}
   10546:	5d                   	pop    %ebp
   10547:	c3                   	ret    

00010548 <task_manager_init>:

void task_manager_init (void) {
   10548:	55                   	push   %ebp
   10549:	89 e5                	mov    %esp,%ebp
   1054b:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1054e:	83 ec 0c             	sub    $0xc,%esp
   10551:	68 e4 1f 01 00       	push   $0x11fe4
   10556:	e8 be 13 00 00       	call   11919 <list_init>
   1055b:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1055e:	83 ec 0c             	sub    $0xc,%esp
   10561:	68 f0 1f 01 00       	push   $0x11ff0
   10566:	e8 ae 13 00 00       	call   11919 <list_init>
   1056b:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1056e:	83 ec 0c             	sub    $0xc,%esp
   10571:	68 fc 1f 01 00       	push   $0x11ffc
   10576:	e8 9e 13 00 00       	call   11919 <list_init>
   1057b:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   1057e:	c7 05 e0 1f 01 00 00 	movl   $0x0,0x11fe0
   10585:	00 00 00 
}
   10588:	90                   	nop
   10589:	c9                   	leave  
   1058a:	c3                   	ret    

0001058b <task_set_ready>:

void task_set_ready(task_t * task) {
   1058b:	55                   	push   %ebp
   1058c:	89 e5                	mov    %esp,%ebp
   1058e:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list,&task->run_node);
   10591:	8b 45 08             	mov    0x8(%ebp),%eax
   10594:	83 c0 30             	add    $0x30,%eax
   10597:	83 ec 08             	sub    $0x8,%esp
   1059a:	50                   	push   %eax
   1059b:	68 e4 1f 01 00       	push   $0x11fe4
   105a0:	e8 f9 13 00 00       	call   1199e <list_insert_last>
   105a5:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   105a8:	8b 45 08             	mov    0x8(%ebp),%eax
   105ab:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   105b1:	90                   	nop
   105b2:	c9                   	leave  
   105b3:	c3                   	ret    

000105b4 <task_set_block>:

void task_set_block(task_t * task) {
   105b4:	55                   	push   %ebp
   105b5:	89 e5                	mov    %esp,%ebp
   105b7:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list,&task->run_node);
   105ba:	8b 45 08             	mov    0x8(%ebp),%eax
   105bd:	83 c0 30             	add    $0x30,%eax
   105c0:	83 ec 08             	sub    $0x8,%esp
   105c3:	50                   	push   %eax
   105c4:	68 e4 1f 01 00       	push   $0x11fe4
   105c9:	e8 ad 14 00 00       	call   11a7b <list_remove>
   105ce:	83 c4 10             	add    $0x10,%esp

}
   105d1:	90                   	nop
   105d2:	c9                   	leave  
   105d3:	c3                   	ret    

000105d4 <task_next_run>:


task_t * task_next_run(void) {
   105d4:	55                   	push   %ebp
   105d5:	89 e5                	mov    %esp,%ebp
   105d7:	83 ec 10             	sub    $0x10,%esp
    list_node_t * task_node = list_first(&task_manager.ready_list);
   105da:	68 e4 1f 01 00       	push   $0x11fe4
   105df:	e8 f2 fc ff ff       	call   102d6 <list_first>
   105e4:	83 c4 04             	add    $0x4,%esp
   105e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   105ea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   105ee:	74 08                	je     105f8 <task_next_run+0x24>
   105f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105f3:	83 e8 30             	sub    $0x30,%eax
   105f6:	eb 05                	jmp    105fd <task_next_run+0x29>
   105f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105fd:	c9                   	leave  
   105fe:	c3                   	ret    

000105ff <task_current>:

task_t * task_current (void) {
   105ff:	55                   	push   %ebp
   10600:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10602:	a1 e0 1f 01 00       	mov    0x11fe0,%eax
}
   10607:	5d                   	pop    %ebp
   10608:	c3                   	ret    

00010609 <task_dispatch>:


void task_dispatch(void) {
   10609:	55                   	push   %ebp
   1060a:	89 e5                	mov    %esp,%ebp
   1060c:	83 ec 18             	sub    $0x18,%esp


    irq_state_t state = irq_enter_protection();
   1060f:	e8 e5 0b 00 00       	call   111f9 <irq_enter_protection>
   10614:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * to = task_next_run();
   10617:	e8 b8 ff ff ff       	call   105d4 <task_next_run>
   1061c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( to != task_manager.curr_task) {
   1061f:	a1 e0 1f 01 00       	mov    0x11fe0,%eax
   10624:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10627:	74 2a                	je     10653 <task_dispatch+0x4a>
        task_t * from = task_current();
   10629:	e8 d1 ff ff ff       	call   105ff <task_current>
   1062e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10631:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10634:	a3 e0 1f 01 00       	mov    %eax,0x11fe0
        to->state = TASK_RUNNING;
   10639:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1063c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from,to);
   10642:	83 ec 08             	sub    $0x8,%esp
   10645:	ff 75 f0             	pushl  -0x10(%ebp)
   10648:	ff 75 ec             	pushl  -0x14(%ebp)
   1064b:	e8 b8 fd ff ff       	call   10408 <task_switch_from_to>
   10650:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   10653:	83 ec 0c             	sub    $0xc,%esp
   10656:	ff 75 f4             	pushl  -0xc(%ebp)
   10659:	e8 b3 0b 00 00       	call   11211 <irq_leave_protection>
   1065e:	83 c4 10             	add    $0x10,%esp

}
   10661:	90                   	nop
   10662:	c9                   	leave  
   10663:	c3                   	ret    

00010664 <sys_sched_yield>:

int sys_sched_yield(void) {
   10664:	55                   	push   %ebp
   10665:	89 e5                	mov    %esp,%ebp
   10667:	83 ec 18             	sub    $0x18,%esp
    
    irq_state_t state = irq_enter_protection();
   1066a:	e8 8a 0b 00 00       	call   111f9 <irq_enter_protection>
   1066f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&task_manager.ready_list) > 1) {
   10672:	83 ec 0c             	sub    $0xc,%esp
   10675:	68 e4 1f 01 00       	push   $0x11fe4
   1067a:	e8 4c fc ff ff       	call   102cb <list_count>
   1067f:	83 c4 10             	add    $0x10,%esp
   10682:	83 f8 01             	cmp    $0x1,%eax
   10685:	7e 29                	jle    106b0 <sys_sched_yield+0x4c>
        task_t * curr_task = task_current();
   10687:	e8 73 ff ff ff       	call   105ff <task_current>
   1068c:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   1068f:	83 ec 0c             	sub    $0xc,%esp
   10692:	ff 75 f0             	pushl  -0x10(%ebp)
   10695:	e8 1a ff ff ff       	call   105b4 <task_set_block>
   1069a:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1069d:	83 ec 0c             	sub    $0xc,%esp
   106a0:	ff 75 f0             	pushl  -0x10(%ebp)
   106a3:	e8 e3 fe ff ff       	call   1058b <task_set_ready>
   106a8:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   106ab:	e8 59 ff ff ff       	call   10609 <task_dispatch>
    }

    irq_leave_protection(state);
   106b0:	83 ec 0c             	sub    $0xc,%esp
   106b3:	ff 75 f4             	pushl  -0xc(%ebp)
   106b6:	e8 56 0b 00 00       	call   11211 <irq_leave_protection>
   106bb:	83 c4 10             	add    $0x10,%esp
    return 0;
   106be:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106c3:	c9                   	leave  
   106c4:	c3                   	ret    

000106c5 <task_time_tick>:

void task_time_tick(void) {
   106c5:	55                   	push   %ebp
   106c6:	89 e5                	mov    %esp,%ebp
   106c8:	83 ec 18             	sub    $0x18,%esp
    
    task_t * curr_task = task_current();
   106cb:	e8 2f ff ff ff       	call   105ff <task_current>
   106d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--curr_task->slice_ticks == 0) {
   106d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d6:	8b 40 0c             	mov    0xc(%eax),%eax
   106d9:	8d 50 ff             	lea    -0x1(%eax),%edx
   106dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106df:	89 50 0c             	mov    %edx,0xc(%eax)
   106e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106e5:	8b 40 0c             	mov    0xc(%eax),%eax
   106e8:	85 c0                	test   %eax,%eax
   106ea:	75 2d                	jne    10719 <task_time_tick+0x54>
        
        curr_task->slice_ticks = curr_task->time_ticks;
   106ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ef:	8b 50 08             	mov    0x8(%eax),%edx
   106f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106f5:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(curr_task);
   106f8:	83 ec 0c             	sub    $0xc,%esp
   106fb:	ff 75 f0             	pushl  -0x10(%ebp)
   106fe:	e8 b1 fe ff ff       	call   105b4 <task_set_block>
   10703:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);      
   10706:	83 ec 0c             	sub    $0xc,%esp
   10709:	ff 75 f0             	pushl  -0x10(%ebp)
   1070c:	e8 7a fe ff ff       	call   1058b <task_set_ready>
   10711:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10714:	e8 f0 fe ff ff       	call   10609 <task_dispatch>
    }
    list_node_t * curr = list_first(&task_manager.sleep_list);
   10719:	83 ec 0c             	sub    $0xc,%esp
   1071c:	68 fc 1f 01 00       	push   $0x11ffc
   10721:	e8 b0 fb ff ff       	call   102d6 <list_first>
   10726:	83 c4 10             	add    $0x10,%esp
   10729:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (curr) {
   1072c:	eb 62                	jmp    10790 <task_time_tick+0xcb>
        list_node_t * next = list_node_next(curr);
   1072e:	83 ec 0c             	sub    $0xc,%esp
   10731:	ff 75 f4             	pushl  -0xc(%ebp)
   10734:	e8 87 fb ff ff       	call   102c0 <list_node_next>
   10739:	83 c4 10             	add    $0x10,%esp
   1073c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   1073f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10743:	74 08                	je     1074d <task_time_tick+0x88>
   10745:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10748:	83 e8 30             	sub    $0x30,%eax
   1074b:	eb 05                	jmp    10752 <task_time_tick+0x8d>
   1074d:	b8 00 00 00 00       	mov    $0x0,%eax
   10752:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) {
   10755:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10758:	8b 40 04             	mov    0x4(%eax),%eax
   1075b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1075e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10761:	89 50 04             	mov    %edx,0x4(%eax)
   10764:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10767:	8b 40 04             	mov    0x4(%eax),%eax
   1076a:	85 c0                	test   %eax,%eax
   1076c:	75 1c                	jne    1078a <task_time_tick+0xc5>
            task_set_wakeup(task);
   1076e:	83 ec 0c             	sub    $0xc,%esp
   10771:	ff 75 e8             	pushl  -0x18(%ebp)
   10774:	e8 5f 00 00 00       	call   107d8 <task_set_wakeup>
   10779:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1077c:	83 ec 0c             	sub    $0xc,%esp
   1077f:	ff 75 e8             	pushl  -0x18(%ebp)
   10782:	e8 04 fe ff ff       	call   1058b <task_set_ready>
   10787:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   1078a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1078d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10790:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10794:	75 98                	jne    1072e <task_time_tick+0x69>
    }

    task_dispatch();
   10796:	e8 6e fe ff ff       	call   10609 <task_dispatch>
}
   1079b:	90                   	nop
   1079c:	c9                   	leave  
   1079d:	c3                   	ret    

0001079e <task_set_sleep>:

void task_set_sleep (task_t * task, uint32_t ticks) {
   1079e:	55                   	push   %ebp
   1079f:	89 e5                	mov    %esp,%ebp
   107a1:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   107a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   107a8:	74 2b                	je     107d5 <task_set_sleep+0x37>
        return;
    }

    task->sleep_ticks = ticks;
   107aa:	8b 55 0c             	mov    0xc(%ebp),%edx
   107ad:	8b 45 08             	mov    0x8(%ebp),%eax
   107b0:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   107b3:	8b 45 08             	mov    0x8(%ebp),%eax
   107b6:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last (&task_manager.sleep_list,&task->run_node);
   107bc:	8b 45 08             	mov    0x8(%ebp),%eax
   107bf:	83 c0 30             	add    $0x30,%eax
   107c2:	83 ec 08             	sub    $0x8,%esp
   107c5:	50                   	push   %eax
   107c6:	68 fc 1f 01 00       	push   $0x11ffc
   107cb:	e8 ce 11 00 00       	call   1199e <list_insert_last>
   107d0:	83 c4 10             	add    $0x10,%esp
   107d3:	eb 01                	jmp    107d6 <task_set_sleep+0x38>
        return;
   107d5:	90                   	nop
}
   107d6:	c9                   	leave  
   107d7:	c3                   	ret    

000107d8 <task_set_wakeup>:
void task_set_wakeup (task_t * task) {
   107d8:	55                   	push   %ebp
   107d9:	89 e5                	mov    %esp,%ebp
   107db:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   107de:	8b 45 08             	mov    0x8(%ebp),%eax
   107e1:	83 c0 30             	add    $0x30,%eax
   107e4:	83 ec 08             	sub    $0x8,%esp
   107e7:	50                   	push   %eax
   107e8:	68 fc 1f 01 00       	push   $0x11ffc
   107ed:	e8 89 12 00 00       	call   11a7b <list_remove>
   107f2:	83 c4 10             	add    $0x10,%esp
}
   107f5:	90                   	nop
   107f6:	c9                   	leave  
   107f7:	c3                   	ret    

000107f8 <sys_sleep>:
void sys_sleep (uint32_t ms) {
   107f8:	55                   	push   %ebp
   107f9:	89 e5                	mov    %esp,%ebp
   107fb:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   107fe:	e8 f6 09 00 00       	call   111f9 <irq_enter_protection>
   10803:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_set_block(task_manager.curr_task);
   10806:	a1 e0 1f 01 00       	mov    0x11fe0,%eax
   1080b:	83 ec 0c             	sub    $0xc,%esp
   1080e:	50                   	push   %eax
   1080f:	e8 a0 fd ff ff       	call   105b4 <task_set_block>
   10814:	83 c4 10             	add    $0x10,%esp
    // ms 19ms
    task_set_sleep(task_manager.curr_task,(ms + OS_TICK_MS - 1)/OS_TICK_MS);
   10817:	8b 45 08             	mov    0x8(%ebp),%eax
   1081a:	83 c0 09             	add    $0x9,%eax
   1081d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10822:	f7 e2                	mul    %edx
   10824:	c1 ea 03             	shr    $0x3,%edx
   10827:	a1 e0 1f 01 00       	mov    0x11fe0,%eax
   1082c:	83 ec 08             	sub    $0x8,%esp
   1082f:	52                   	push   %edx
   10830:	50                   	push   %eax
   10831:	e8 68 ff ff ff       	call   1079e <task_set_sleep>
   10836:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   10839:	e8 cb fd ff ff       	call   10609 <task_dispatch>
    irq_leave_protection(state);
   1083e:	83 ec 0c             	sub    $0xc,%esp
   10841:	ff 75 f4             	pushl  -0xc(%ebp)
   10844:	e8 c8 09 00 00       	call   11211 <irq_leave_protection>
   10849:	83 c4 10             	add    $0x10,%esp
}
   1084c:	90                   	nop
   1084d:	c9                   	leave  
   1084e:	c3                   	ret    

0001084f <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   1084f:	55                   	push   %ebp
   10850:	89 e5                	mov    %esp,%ebp
   10852:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   10855:	8b 45 08             	mov    0x8(%ebp),%eax
   10858:	c1 e8 10             	shr    $0x10,%eax
   1085b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   1085f:	8b 45 08             	mov    0x8(%ebp),%eax
   10862:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10866:	8b 45 0c             	mov    0xc(%ebp),%eax
   10869:	83 e8 01             	sub    $0x1,%eax
   1086c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10870:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10874:	90                   	nop
   10875:	c9                   	leave  
   10876:	c3                   	ret    

00010877 <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   10877:	55                   	push   %ebp
   10878:	89 e5                	mov    %esp,%ebp
   1087a:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   1087d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10880:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10883:	8b 45 08             	mov    0x8(%ebp),%eax
   10886:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10889:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1088c:	ff 28                	ljmp   *(%eax)
}
   1088e:	90                   	nop
   1088f:	c9                   	leave  
   10890:	c3                   	ret    

00010891 <segment_desc_set>:
#include "cpu/irq.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   10891:	55                   	push   %ebp
   10892:	89 e5                	mov    %esp,%ebp
   10894:	83 ec 14             	sub    $0x14,%esp
   10897:	8b 45 14             	mov    0x14(%ebp),%eax
   1089a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   1089e:	8b 45 08             	mov    0x8(%ebp),%eax
   108a1:	83 e0 f8             	and    $0xfffffff8,%eax
   108a4:	05 c0 20 01 00       	add    $0x120c0,%eax
   108a9:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   108ac:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   108b3:	76 0f                	jbe    108c4 <segment_desc_set+0x33>
		attr |= SEG_G;
   108b5:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   108bb:	8b 45 10             	mov    0x10(%ebp),%eax
   108be:	c1 e8 0c             	shr    $0xc,%eax
   108c1:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   108c4:	8b 45 10             	mov    0x10(%ebp),%eax
   108c7:	89 c2                	mov    %eax,%edx
   108c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108cc:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   108cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   108d2:	89 c2                	mov    %eax,%edx
   108d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108d7:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   108db:	8b 45 0c             	mov    0xc(%ebp),%eax
   108de:	c1 e8 10             	shr    $0x10,%eax
   108e1:	89 c2                	mov    %eax,%edx
   108e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108e6:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   108e9:	8b 45 10             	mov    0x10(%ebp),%eax
   108ec:	c1 e8 10             	shr    $0x10,%eax
   108ef:	c1 e0 08             	shl    $0x8,%eax
   108f2:	66 25 00 0f          	and    $0xf00,%ax
   108f6:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   108fa:	89 c2                	mov    %eax,%edx
   108fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108ff:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10903:	8b 45 0c             	mov    0xc(%ebp),%eax
   10906:	c1 e8 18             	shr    $0x18,%eax
   10909:	89 c2                	mov    %eax,%edx
   1090b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1090e:	88 50 07             	mov    %dl,0x7(%eax)

}
   10911:	90                   	nop
   10912:	c9                   	leave  
   10913:	c3                   	ret    

00010914 <init_gdt>:

void init_gdt(void){
   10914:	55                   	push   %ebp
   10915:	89 e5                	mov    %esp,%ebp
   10917:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1091a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10921:	eb 19                	jmp    1093c <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10923:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10926:	c1 e0 03             	shl    $0x3,%eax
   10929:	6a 00                	push   $0x0
   1092b:	6a 00                	push   $0x0
   1092d:	6a 00                	push   $0x0
   1092f:	50                   	push   %eax
   10930:	e8 5c ff ff ff       	call   10891 <segment_desc_set>
   10935:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10938:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1093c:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10943:	7e de                	jle    10923 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10945:	68 9a 40 00 00       	push   $0x409a
   1094a:	6a ff                	push   $0xffffffff
   1094c:	6a 00                	push   $0x0
   1094e:	6a 08                	push   $0x8
   10950:	e8 3c ff ff ff       	call   10891 <segment_desc_set>
   10955:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10958:	68 92 40 00 00       	push   $0x4092
   1095d:	6a ff                	push   $0xffffffff
   1095f:	6a 00                	push   $0x0
   10961:	6a 10                	push   $0x10
   10963:	e8 29 ff ff ff       	call   10891 <segment_desc_set>
   10968:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   1096b:	b8 c0 20 01 00       	mov    $0x120c0,%eax
   10970:	68 00 08 00 00       	push   $0x800
   10975:	50                   	push   %eax
   10976:	e8 d4 fe ff ff       	call   1084f <lgdt>
   1097b:	83 c4 08             	add    $0x8,%esp
}
   1097e:	90                   	nop
   1097f:	c9                   	leave  
   10980:	c3                   	ret    

00010981 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10981:	55                   	push   %ebp
   10982:	89 e5                	mov    %esp,%ebp
   10984:	83 ec 08             	sub    $0x8,%esp
   10987:	8b 55 0c             	mov    0xc(%ebp),%edx
   1098a:	8b 45 14             	mov    0x14(%ebp),%eax
   1098d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10991:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   10995:	8b 45 10             	mov    0x10(%ebp),%eax
   10998:	89 c2                	mov    %eax,%edx
   1099a:	8b 45 08             	mov    0x8(%ebp),%eax
   1099d:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   109a0:	8b 45 08             	mov    0x8(%ebp),%eax
   109a3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   109a7:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   109ab:	8b 45 08             	mov    0x8(%ebp),%eax
   109ae:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   109b2:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   109b6:	8b 45 10             	mov    0x10(%ebp),%eax
   109b9:	c1 e8 10             	shr    $0x10,%eax
   109bc:	89 c2                	mov    %eax,%edx
   109be:	8b 45 08             	mov    0x8(%ebp),%eax
   109c1:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   109c5:	90                   	nop
   109c6:	c9                   	leave  
   109c7:	c3                   	ret    

000109c8 <cpu_init>:

void cpu_init (void){
   109c8:	55                   	push   %ebp
   109c9:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   109cb:	e8 44 ff ff ff       	call   10914 <init_gdt>
}
   109d0:	90                   	nop
   109d1:	5d                   	pop    %ebp
   109d2:	c3                   	ret    

000109d3 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   109d3:	55                   	push   %ebp
   109d4:	89 e5                	mov    %esp,%ebp
   109d6:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   109d9:	e8 1b 08 00 00       	call   111f9 <irq_enter_protection>
   109de:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   109e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   109e8:	eb 34                	jmp    10a1e <gdt_alloc_desc+0x4b>

        segment_desc_t * desc = gdt_table + i;
   109ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109ed:	c1 e0 03             	shl    $0x3,%eax
   109f0:	05 c0 20 01 00       	add    $0x120c0,%eax
   109f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if(desc->attr == 0) {
   109f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109fb:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   109ff:	66 85 c0             	test   %ax,%ax
   10a02:	75 16                	jne    10a1a <gdt_alloc_desc+0x47>
            
            irq_leave_protection(state);
   10a04:	83 ec 0c             	sub    $0xc,%esp
   10a07:	ff 75 f0             	pushl  -0x10(%ebp)
   10a0a:	e8 02 08 00 00       	call   11211 <irq_leave_protection>
   10a0f:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a15:	c1 e0 03             	shl    $0x3,%eax
   10a18:	eb 20                	jmp    10a3a <gdt_alloc_desc+0x67>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10a1a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a1e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10a25:	7e c3                	jle    109ea <gdt_alloc_desc+0x17>
        }
    }
    irq_leave_protection(state);
   10a27:	83 ec 0c             	sub    $0xc,%esp
   10a2a:	ff 75 f0             	pushl  -0x10(%ebp)
   10a2d:	e8 df 07 00 00       	call   11211 <irq_leave_protection>
   10a32:	83 c4 10             	add    $0x10,%esp

    return -1;
   10a35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   10a3a:	c9                   	leave  
   10a3b:	c3                   	ret    

00010a3c <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   10a3c:	55                   	push   %ebp
   10a3d:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   10a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a42:	6a 00                	push   $0x0
   10a44:	50                   	push   %eax
   10a45:	e8 2d fe ff ff       	call   10877 <far_jump>
   10a4a:	83 c4 08             	add    $0x8,%esp
   10a4d:	90                   	nop
   10a4e:	c9                   	leave  
   10a4f:	c3                   	ret    

00010a50 <inb>:
static inline uint8_t inb(uint16_t port) {
   10a50:	55                   	push   %ebp
   10a51:	89 e5                	mov    %esp,%ebp
   10a53:	83 ec 14             	sub    $0x14,%esp
   10a56:	8b 45 08             	mov    0x8(%ebp),%eax
   10a59:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10a5d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10a61:	89 c2                	mov    %eax,%edx
   10a63:	ec                   	in     (%dx),%al
   10a64:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10a67:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10a6b:	c9                   	leave  
   10a6c:	c3                   	ret    

00010a6d <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10a6d:	55                   	push   %ebp
   10a6e:	89 e5                	mov    %esp,%ebp
   10a70:	83 ec 08             	sub    $0x8,%esp
   10a73:	8b 55 08             	mov    0x8(%ebp),%edx
   10a76:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a79:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10a7d:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10a80:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a84:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10a88:	ee                   	out    %al,(%dx)
}
   10a89:	90                   	nop
   10a8a:	c9                   	leave  
   10a8b:	c3                   	ret    

00010a8c <cli>:
static inline void cli(void){
   10a8c:	55                   	push   %ebp
   10a8d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10a8f:	fa                   	cli    
}
   10a90:	90                   	nop
   10a91:	5d                   	pop    %ebp
   10a92:	c3                   	ret    

00010a93 <sti>:
static inline void sti(void){
   10a93:	55                   	push   %ebp
   10a94:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10a96:	fb                   	sti    
}
   10a97:	90                   	nop
   10a98:	5d                   	pop    %ebp
   10a99:	c3                   	ret    

00010a9a <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   10a9a:	55                   	push   %ebp
   10a9b:	89 e5                	mov    %esp,%ebp
   10a9d:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   10aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa3:	c1 e8 10             	shr    $0x10,%eax
   10aa6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   10aad:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10ab1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ab4:	83 e8 01             	sub    $0x1,%eax
   10ab7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10abb:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10abf:	90                   	nop
   10ac0:	c9                   	leave  
   10ac1:	c3                   	ret    

00010ac2 <hlt>:
static inline void hlt (void) {
   10ac2:	55                   	push   %ebp
   10ac3:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10ac5:	f4                   	hlt    
}
   10ac6:	90                   	nop
   10ac7:	5d                   	pop    %ebp
   10ac8:	c3                   	ret    

00010ac9 <read_eflags>:

static inline uint32_t read_eflags (void) {
   10ac9:	55                   	push   %ebp
   10aca:	89 e5                	mov    %esp,%ebp
   10acc:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__ ("pushf\n\tpop %%eax":"=a"(eflags));    
   10acf:	9c                   	pushf  
   10ad0:	58                   	pop    %eax
   10ad1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10ad4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10ad7:	c9                   	leave  
   10ad8:	c3                   	ret    

00010ad9 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   10ad9:	55                   	push   %ebp
   10ada:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__ ("push %%eax\n\tpopf"::"a"(eflags));  
   10adc:	8b 45 08             	mov    0x8(%ebp),%eax
   10adf:	50                   	push   %eax
   10ae0:	9d                   	popf   
}
   10ae1:	90                   	nop
   10ae2:	5d                   	pop    %ebp
   10ae3:	c3                   	ret    

00010ae4 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   10ae4:	55                   	push   %ebp
   10ae5:	89 e5                	mov    %esp,%ebp
   10ae7:	57                   	push   %edi
   10ae8:	56                   	push   %esi
   10ae9:	53                   	push   %ebx
   10aea:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   10aed:	8b 45 08             	mov    0x8(%ebp),%eax
   10af0:	8b 50 34             	mov    0x34(%eax),%edx
   10af3:	8b 45 08             	mov    0x8(%ebp),%eax
   10af6:	8b 40 30             	mov    0x30(%eax),%eax
   10af9:	83 ec 04             	sub    $0x4,%esp
   10afc:	52                   	push   %edx
   10afd:	50                   	push   %eax
   10afe:	68 e8 1c 01 00       	push   $0x11ce8
   10b03:	e8 a9 10 00 00       	call   11bb1 <log_printf>
   10b08:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   10b0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b0e:	8b 38                	mov    (%eax),%edi
   10b10:	8b 45 08             	mov    0x8(%ebp),%eax
   10b13:	8b 70 04             	mov    0x4(%eax),%esi
   10b16:	8b 45 08             	mov    0x8(%ebp),%eax
   10b19:	8b 58 0c             	mov    0xc(%eax),%ebx
   10b1c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1f:	8b 48 08             	mov    0x8(%eax),%ecx
   10b22:	8b 45 08             	mov    0x8(%ebp),%eax
   10b25:	8b 50 0c             	mov    0xc(%eax),%edx
   10b28:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2b:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b2e:	83 ec 04             	sub    $0x4,%esp
   10b31:	57                   	push   %edi
   10b32:	56                   	push   %esi
   10b33:	53                   	push   %ebx
   10b34:	51                   	push   %ecx
   10b35:	52                   	push   %edx
   10b36:	50                   	push   %eax
   10b37:	68 00 1d 01 00       	push   $0x11d00
   10b3c:	e8 70 10 00 00       	call   11bb1 <log_printf>
   10b41:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   10b44:	8b 45 08             	mov    0x8(%ebp),%eax
   10b47:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10b4a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4d:	8b 40 18             	mov    0x18(%eax),%eax
   10b50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10b53:	8b 45 08             	mov    0x8(%ebp),%eax
   10b56:	8b 58 14             	mov    0x14(%eax),%ebx
   10b59:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5f:	8b 78 10             	mov    0x10(%eax),%edi
   10b62:	8b 45 08             	mov    0x8(%ebp),%eax
   10b65:	8b 70 24             	mov    0x24(%eax),%esi
   10b68:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6b:	8b 58 28             	mov    0x28(%eax),%ebx
   10b6e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b71:	8b 50 20             	mov    0x20(%eax),%edx
   10b74:	8b 45 08             	mov    0x8(%ebp),%eax
   10b77:	8b 40 2c             	mov    0x2c(%eax),%eax
   10b7a:	83 ec 0c             	sub    $0xc,%esp
   10b7d:	51                   	push   %ecx
   10b7e:	ff 75 e4             	pushl  -0x1c(%ebp)
   10b81:	ff 75 e0             	pushl  -0x20(%ebp)
   10b84:	57                   	push   %edi
   10b85:	56                   	push   %esi
   10b86:	53                   	push   %ebx
   10b87:	52                   	push   %edx
   10b88:	50                   	push   %eax
   10b89:	68 2c 1d 01 00       	push   $0x11d2c
   10b8e:	e8 1e 10 00 00       	call   11bb1 <log_printf>
   10b93:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10b96:	8b 45 08             	mov    0x8(%ebp),%eax
   10b99:	8b 50 40             	mov    0x40(%eax),%edx
   10b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9f:	8b 40 38             	mov    0x38(%eax),%eax
   10ba2:	83 ec 04             	sub    $0x4,%esp
   10ba5:	52                   	push   %edx
   10ba6:	50                   	push   %eax
   10ba7:	68 75 1d 01 00       	push   $0x11d75
   10bac:	e8 00 10 00 00       	call   11bb1 <log_printf>
   10bb1:	83 c4 10             	add    $0x10,%esp
}
   10bb4:	90                   	nop
   10bb5:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10bb8:	5b                   	pop    %ebx
   10bb9:	5e                   	pop    %esi
   10bba:	5f                   	pop    %edi
   10bbb:	5d                   	pop    %ebp
   10bbc:	c3                   	ret    

00010bbd <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   10bbd:	55                   	push   %ebp
   10bbe:	89 e5                	mov    %esp,%ebp
   10bc0:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10bc3:	83 ec 0c             	sub    $0xc,%esp
   10bc6:	68 8b 1d 01 00       	push   $0x11d8b
   10bcb:	e8 e1 0f 00 00       	call   11bb1 <log_printf>
   10bd0:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10bd3:	83 ec 08             	sub    $0x8,%esp
   10bd6:	ff 75 0c             	pushl  0xc(%ebp)
   10bd9:	68 a8 1d 01 00       	push   $0x11da8
   10bde:	e8 ce 0f 00 00       	call   11bb1 <log_printf>
   10be3:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10be6:	83 ec 0c             	sub    $0xc,%esp
   10be9:	ff 75 08             	pushl  0x8(%ebp)
   10bec:	e8 f3 fe ff ff       	call   10ae4 <dump_core_regs>
   10bf1:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   10bf4:	e8 c9 fe ff ff       	call   10ac2 <hlt>
   10bf9:	eb f9                	jmp    10bf4 <do_default_handler+0x37>

00010bfb <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   10bfb:	55                   	push   %ebp
   10bfc:	89 e5                	mov    %esp,%ebp
   10bfe:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   10c01:	83 ec 08             	sub    $0x8,%esp
   10c04:	68 c2 1d 01 00       	push   $0x11dc2
   10c09:	ff 75 08             	pushl  0x8(%ebp)
   10c0c:	e8 ac ff ff ff       	call   10bbd <do_default_handler>
   10c11:	83 c4 10             	add    $0x10,%esp

}
   10c14:	90                   	nop
   10c15:	c9                   	leave  
   10c16:	c3                   	ret    

00010c17 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   10c17:	55                   	push   %ebp
   10c18:	89 e5                	mov    %esp,%ebp
   10c1a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   10c1d:	83 ec 08             	sub    $0x8,%esp
   10c20:	68 d4 1d 01 00       	push   $0x11dd4
   10c25:	ff 75 08             	pushl  0x8(%ebp)
   10c28:	e8 90 ff ff ff       	call   10bbd <do_default_handler>
   10c2d:	83 c4 10             	add    $0x10,%esp
}
   10c30:	90                   	nop
   10c31:	c9                   	leave  
   10c32:	c3                   	ret    

00010c33 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   10c33:	55                   	push   %ebp
   10c34:	89 e5                	mov    %esp,%ebp
   10c36:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   10c39:	83 ec 08             	sub    $0x8,%esp
   10c3c:	68 e5 1d 01 00       	push   $0x11de5
   10c41:	ff 75 08             	pushl  0x8(%ebp)
   10c44:	e8 74 ff ff ff       	call   10bbd <do_default_handler>
   10c49:	83 c4 10             	add    $0x10,%esp
}
   10c4c:	90                   	nop
   10c4d:	c9                   	leave  
   10c4e:	c3                   	ret    

00010c4f <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   10c4f:	55                   	push   %ebp
   10c50:	89 e5                	mov    %esp,%ebp
   10c52:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   10c55:	83 ec 08             	sub    $0x8,%esp
   10c58:	68 f5 1d 01 00       	push   $0x11df5
   10c5d:	ff 75 08             	pushl  0x8(%ebp)
   10c60:	e8 58 ff ff ff       	call   10bbd <do_default_handler>
   10c65:	83 c4 10             	add    $0x10,%esp
}
   10c68:	90                   	nop
   10c69:	c9                   	leave  
   10c6a:	c3                   	ret    

00010c6b <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   10c6b:	55                   	push   %ebp
   10c6c:	89 e5                	mov    %esp,%ebp
   10c6e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10c71:	83 ec 08             	sub    $0x8,%esp
   10c74:	68 04 1e 01 00       	push   $0x11e04
   10c79:	ff 75 08             	pushl  0x8(%ebp)
   10c7c:	e8 3c ff ff ff       	call   10bbd <do_default_handler>
   10c81:	83 c4 10             	add    $0x10,%esp
}
   10c84:	90                   	nop
   10c85:	c9                   	leave  
   10c86:	c3                   	ret    

00010c87 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10c87:	55                   	push   %ebp
   10c88:	89 e5                	mov    %esp,%ebp
   10c8a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   10c8d:	83 ec 08             	sub    $0x8,%esp
   10c90:	68 10 1e 01 00       	push   $0x11e10
   10c95:	ff 75 08             	pushl  0x8(%ebp)
   10c98:	e8 20 ff ff ff       	call   10bbd <do_default_handler>
   10c9d:	83 c4 10             	add    $0x10,%esp
}
   10ca0:	90                   	nop
   10ca1:	c9                   	leave  
   10ca2:	c3                   	ret    

00010ca3 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10ca3:	55                   	push   %ebp
   10ca4:	89 e5                	mov    %esp,%ebp
   10ca6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10ca9:	83 ec 08             	sub    $0x8,%esp
   10cac:	68 1a 1e 01 00       	push   $0x11e1a
   10cb1:	ff 75 08             	pushl  0x8(%ebp)
   10cb4:	e8 04 ff ff ff       	call   10bbd <do_default_handler>
   10cb9:	83 c4 10             	add    $0x10,%esp
}
   10cbc:	90                   	nop
   10cbd:	c9                   	leave  
   10cbe:	c3                   	ret    

00010cbf <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   10cbf:	55                   	push   %ebp
   10cc0:	89 e5                	mov    %esp,%ebp
   10cc2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10cc5:	83 ec 08             	sub    $0x8,%esp
   10cc8:	68 30 1e 01 00       	push   $0x11e30
   10ccd:	ff 75 08             	pushl  0x8(%ebp)
   10cd0:	e8 e8 fe ff ff       	call   10bbd <do_default_handler>
   10cd5:	83 c4 10             	add    $0x10,%esp
}
   10cd8:	90                   	nop
   10cd9:	c9                   	leave  
   10cda:	c3                   	ret    

00010cdb <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   10cdb:	55                   	push   %ebp
   10cdc:	89 e5                	mov    %esp,%ebp
   10cde:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   10ce1:	83 ec 08             	sub    $0x8,%esp
   10ce4:	68 40 1e 01 00       	push   $0x11e40
   10ce9:	ff 75 08             	pushl  0x8(%ebp)
   10cec:	e8 cc fe ff ff       	call   10bbd <do_default_handler>
   10cf1:	83 c4 10             	add    $0x10,%esp
}
   10cf4:	90                   	nop
   10cf5:	c9                   	leave  
   10cf6:	c3                   	ret    

00010cf7 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10cf7:	55                   	push   %ebp
   10cf8:	89 e5                	mov    %esp,%ebp
   10cfa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   10cfd:	83 ec 08             	sub    $0x8,%esp
   10d00:	68 56 1e 01 00       	push   $0x11e56
   10d05:	ff 75 08             	pushl  0x8(%ebp)
   10d08:	e8 b0 fe ff ff       	call   10bbd <do_default_handler>
   10d0d:	83 c4 10             	add    $0x10,%esp
}
   10d10:	90                   	nop
   10d11:	c9                   	leave  
   10d12:	c3                   	ret    

00010d13 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   10d13:	55                   	push   %ebp
   10d14:	89 e5                	mov    %esp,%ebp
   10d16:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   10d19:	83 ec 08             	sub    $0x8,%esp
   10d1c:	68 64 1e 01 00       	push   $0x11e64
   10d21:	ff 75 08             	pushl  0x8(%ebp)
   10d24:	e8 94 fe ff ff       	call   10bbd <do_default_handler>
   10d29:	83 c4 10             	add    $0x10,%esp
}
   10d2c:	90                   	nop
   10d2d:	c9                   	leave  
   10d2e:	c3                   	ret    

00010d2f <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   10d2f:	55                   	push   %ebp
   10d30:	89 e5                	mov    %esp,%ebp
   10d32:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10d35:	83 ec 08             	sub    $0x8,%esp
   10d38:	68 70 1e 01 00       	push   $0x11e70
   10d3d:	ff 75 08             	pushl  0x8(%ebp)
   10d40:	e8 78 fe ff ff       	call   10bbd <do_default_handler>
   10d45:	83 c4 10             	add    $0x10,%esp
}
   10d48:	90                   	nop
   10d49:	c9                   	leave  
   10d4a:	c3                   	ret    

00010d4b <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   10d4b:	55                   	push   %ebp
   10d4c:	89 e5                	mov    %esp,%ebp
   10d4e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   10d51:	83 ec 08             	sub    $0x8,%esp
   10d54:	68 85 1e 01 00       	push   $0x11e85
   10d59:	ff 75 08             	pushl  0x8(%ebp)
   10d5c:	e8 5c fe ff ff       	call   10bbd <do_default_handler>
   10d61:	83 c4 10             	add    $0x10,%esp
}
   10d64:	90                   	nop
   10d65:	c9                   	leave  
   10d66:	c3                   	ret    

00010d67 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   10d67:	55                   	push   %ebp
   10d68:	89 e5                	mov    %esp,%ebp
   10d6a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   10d6d:	83 ec 08             	sub    $0x8,%esp
   10d70:	68 9a 1e 01 00       	push   $0x11e9a
   10d75:	ff 75 08             	pushl  0x8(%ebp)
   10d78:	e8 40 fe ff ff       	call   10bbd <do_default_handler>
   10d7d:	83 c4 10             	add    $0x10,%esp
}
   10d80:	90                   	nop
   10d81:	c9                   	leave  
   10d82:	c3                   	ret    

00010d83 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10d83:	55                   	push   %ebp
   10d84:	89 e5                	mov    %esp,%ebp
   10d86:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10d89:	83 ec 08             	sub    $0x8,%esp
   10d8c:	68 ae 1e 01 00       	push   $0x11eae
   10d91:	ff 75 08             	pushl  0x8(%ebp)
   10d94:	e8 24 fe ff ff       	call   10bbd <do_default_handler>
   10d99:	83 c4 10             	add    $0x10,%esp
}
   10d9c:	90                   	nop
   10d9d:	c9                   	leave  
   10d9e:	c3                   	ret    

00010d9f <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   10d9f:	55                   	push   %ebp
   10da0:	89 e5                	mov    %esp,%ebp
   10da2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10da5:	83 ec 08             	sub    $0x8,%esp
   10da8:	68 ba 1e 01 00       	push   $0x11eba
   10dad:	ff 75 08             	pushl  0x8(%ebp)
   10db0:	e8 08 fe ff ff       	call   10bbd <do_default_handler>
   10db5:	83 c4 10             	add    $0x10,%esp
}
   10db8:	90                   	nop
   10db9:	c9                   	leave  
   10dba:	c3                   	ret    

00010dbb <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   10dbb:	55                   	push   %ebp
   10dbc:	89 e5                	mov    %esp,%ebp
   10dbe:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10dc1:	83 ec 08             	sub    $0x8,%esp
   10dc4:	68 d8 1e 01 00       	push   $0x11ed8
   10dc9:	ff 75 08             	pushl  0x8(%ebp)
   10dcc:	e8 ec fd ff ff       	call   10bbd <do_default_handler>
   10dd1:	83 c4 10             	add    $0x10,%esp
}
   10dd4:	90                   	nop
   10dd5:	c9                   	leave  
   10dd6:	c3                   	ret    

00010dd7 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10dd7:	55                   	push   %ebp
   10dd8:	89 e5                	mov    %esp,%ebp
   10dda:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   10ddd:	83 ec 08             	sub    $0x8,%esp
   10de0:	68 e9 1e 01 00       	push   $0x11ee9
   10de5:	ff 75 08             	pushl  0x8(%ebp)
   10de8:	e8 d0 fd ff ff       	call   10bbd <do_default_handler>
   10ded:	83 c4 10             	add    $0x10,%esp
}
   10df0:	90                   	nop
   10df1:	c9                   	leave  
   10df2:	c3                   	ret    

00010df3 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10df3:	55                   	push   %ebp
   10df4:	89 e5                	mov    %esp,%ebp
   10df6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10df9:	83 ec 08             	sub    $0x8,%esp
   10dfc:	68 f8 1e 01 00       	push   $0x11ef8
   10e01:	ff 75 08             	pushl  0x8(%ebp)
   10e04:	e8 b4 fd ff ff       	call   10bbd <do_default_handler>
   10e09:	83 c4 10             	add    $0x10,%esp
}
   10e0c:	90                   	nop
   10e0d:	c9                   	leave  
   10e0e:	c3                   	ret    

00010e0f <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   10e0f:	55                   	push   %ebp
   10e10:	89 e5                	mov    %esp,%ebp
   10e12:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10e15:	83 ec 08             	sub    $0x8,%esp
   10e18:	68 17 1f 01 00       	push   $0x11f17
   10e1d:	ff 75 08             	pushl  0x8(%ebp)
   10e20:	e8 98 fd ff ff       	call   10bbd <do_default_handler>
   10e25:	83 c4 10             	add    $0x10,%esp
}
   10e28:	90                   	nop
   10e29:	c9                   	leave  
   10e2a:	c3                   	ret    

00010e2b <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   10e2b:	55                   	push   %ebp
   10e2c:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10e2e:	6a 11                	push   $0x11
   10e30:	6a 20                	push   $0x20
   10e32:	e8 36 fc ff ff       	call   10a6d <outb>
   10e37:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10e3a:	6a 20                	push   $0x20
   10e3c:	6a 21                	push   $0x21
   10e3e:	e8 2a fc ff ff       	call   10a6d <outb>
   10e43:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10e46:	6a 04                	push   $0x4
   10e48:	6a 21                	push   $0x21
   10e4a:	e8 1e fc ff ff       	call   10a6d <outb>
   10e4f:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10e52:	6a 01                	push   $0x1
   10e54:	6a 21                	push   $0x21
   10e56:	e8 12 fc ff ff       	call   10a6d <outb>
   10e5b:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10e5e:	6a 11                	push   $0x11
   10e60:	68 a0 00 00 00       	push   $0xa0
   10e65:	e8 03 fc ff ff       	call   10a6d <outb>
   10e6a:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10e6d:	6a 28                	push   $0x28
   10e6f:	68 a1 00 00 00       	push   $0xa1
   10e74:	e8 f4 fb ff ff       	call   10a6d <outb>
   10e79:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10e7c:	6a 02                	push   $0x2
   10e7e:	68 a1 00 00 00       	push   $0xa1
   10e83:	e8 e5 fb ff ff       	call   10a6d <outb>
   10e88:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10e8b:	6a 01                	push   $0x1
   10e8d:	68 a1 00 00 00       	push   $0xa1
   10e92:	e8 d6 fb ff ff       	call   10a6d <outb>
   10e97:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10e9a:	68 fb 00 00 00       	push   $0xfb
   10e9f:	6a 21                	push   $0x21
   10ea1:	e8 c7 fb ff ff       	call   10a6d <outb>
   10ea6:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10ea9:	68 ff 00 00 00       	push   $0xff
   10eae:	68 a1 00 00 00       	push   $0xa1
   10eb3:	e8 b5 fb ff ff       	call   10a6d <outb>
   10eb8:	83 c4 08             	add    $0x8,%esp
}
   10ebb:	90                   	nop
   10ebc:	c9                   	leave  
   10ebd:	c3                   	ret    

00010ebe <irq_init>:


void irq_init(void){ 
   10ebe:	55                   	push   %ebp
   10ebf:	89 e5                	mov    %esp,%ebp
   10ec1:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10ec4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10ecb:	eb 25                	jmp    10ef2 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10ecd:	ba 28 00 01 00       	mov    $0x10028,%edx
   10ed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ed5:	c1 e0 03             	shl    $0x3,%eax
   10ed8:	05 c0 28 01 00       	add    $0x128c0,%eax
   10edd:	68 00 8e 00 00       	push   $0x8e00
   10ee2:	52                   	push   %edx
   10ee3:	6a 08                	push   $0x8
   10ee5:	50                   	push   %eax
   10ee6:	e8 96 fa ff ff       	call   10981 <gate_desc_set>
   10eeb:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10eee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10ef2:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10ef6:	7e d5                	jle    10ecd <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10ef8:	83 ec 08             	sub    $0x8,%esp
   10efb:	68 47 00 01 00       	push   $0x10047
   10f00:	6a 00                	push   $0x0
   10f02:	e8 65 01 00 00       	call   1106c <irq_install>
   10f07:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10f0a:	83 ec 08             	sub    $0x8,%esp
   10f0d:	68 66 00 01 00       	push   $0x10066
   10f12:	6a 01                	push   $0x1
   10f14:	e8 53 01 00 00       	call   1106c <irq_install>
   10f19:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10f1c:	83 ec 08             	sub    $0x8,%esp
   10f1f:	68 85 00 01 00       	push   $0x10085
   10f24:	6a 02                	push   $0x2
   10f26:	e8 41 01 00 00       	call   1106c <irq_install>
   10f2b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10f2e:	83 ec 08             	sub    $0x8,%esp
   10f31:	68 a4 00 01 00       	push   $0x100a4
   10f36:	6a 03                	push   $0x3
   10f38:	e8 2f 01 00 00       	call   1106c <irq_install>
   10f3d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10f40:	83 ec 08             	sub    $0x8,%esp
   10f43:	68 c3 00 01 00       	push   $0x100c3
   10f48:	6a 04                	push   $0x4
   10f4a:	e8 1d 01 00 00       	call   1106c <irq_install>
   10f4f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10f52:	83 ec 08             	sub    $0x8,%esp
   10f55:	68 e2 00 01 00       	push   $0x100e2
   10f5a:	6a 05                	push   $0x5
   10f5c:	e8 0b 01 00 00       	call   1106c <irq_install>
   10f61:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10f64:	83 ec 08             	sub    $0x8,%esp
   10f67:	68 01 01 01 00       	push   $0x10101
   10f6c:	6a 06                	push   $0x6
   10f6e:	e8 f9 00 00 00       	call   1106c <irq_install>
   10f73:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10f76:	83 ec 08             	sub    $0x8,%esp
   10f79:	68 20 01 01 00       	push   $0x10120
   10f7e:	6a 07                	push   $0x7
   10f80:	e8 e7 00 00 00       	call   1106c <irq_install>
   10f85:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10f88:	83 ec 08             	sub    $0x8,%esp
   10f8b:	68 3f 01 01 00       	push   $0x1013f
   10f90:	6a 08                	push   $0x8
   10f92:	e8 d5 00 00 00       	call   1106c <irq_install>
   10f97:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10f9a:	83 ec 08             	sub    $0x8,%esp
   10f9d:	68 5c 01 01 00       	push   $0x1015c
   10fa2:	6a 0a                	push   $0xa
   10fa4:	e8 c3 00 00 00       	call   1106c <irq_install>
   10fa9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10fac:	83 ec 08             	sub    $0x8,%esp
   10faf:	68 79 01 01 00       	push   $0x10179
   10fb4:	6a 0b                	push   $0xb
   10fb6:	e8 b1 00 00 00       	call   1106c <irq_install>
   10fbb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10fbe:	83 ec 08             	sub    $0x8,%esp
   10fc1:	68 96 01 01 00       	push   $0x10196
   10fc6:	6a 0c                	push   $0xc
   10fc8:	e8 9f 00 00 00       	call   1106c <irq_install>
   10fcd:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10fd0:	83 ec 08             	sub    $0x8,%esp
   10fd3:	68 b3 01 01 00       	push   $0x101b3
   10fd8:	6a 0d                	push   $0xd
   10fda:	e8 8d 00 00 00       	call   1106c <irq_install>
   10fdf:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10fe2:	83 ec 08             	sub    $0x8,%esp
   10fe5:	68 d0 01 01 00       	push   $0x101d0
   10fea:	6a 0e                	push   $0xe
   10fec:	e8 7b 00 00 00       	call   1106c <irq_install>
   10ff1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10ff4:	83 ec 08             	sub    $0x8,%esp
   10ff7:	68 ed 01 01 00       	push   $0x101ed
   10ffc:	6a 10                	push   $0x10
   10ffe:	e8 69 00 00 00       	call   1106c <irq_install>
   11003:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   11006:	83 ec 08             	sub    $0x8,%esp
   11009:	68 0c 02 01 00       	push   $0x1020c
   1100e:	6a 11                	push   $0x11
   11010:	e8 57 00 00 00       	call   1106c <irq_install>
   11015:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   11018:	83 ec 08             	sub    $0x8,%esp
   1101b:	68 29 02 01 00       	push   $0x10229
   11020:	6a 12                	push   $0x12
   11022:	e8 45 00 00 00       	call   1106c <irq_install>
   11027:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   1102a:	83 ec 08             	sub    $0x8,%esp
   1102d:	68 48 02 01 00       	push   $0x10248
   11032:	6a 13                	push   $0x13
   11034:	e8 33 00 00 00       	call   1106c <irq_install>
   11039:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   1103c:	83 ec 08             	sub    $0x8,%esp
   1103f:	68 67 02 01 00       	push   $0x10267
   11044:	6a 14                	push   $0x14
   11046:	e8 21 00 00 00       	call   1106c <irq_install>
   1104b:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   1104e:	b8 c0 28 01 00       	mov    $0x128c0,%eax
   11053:	83 ec 08             	sub    $0x8,%esp
   11056:	68 00 04 00 00       	push   $0x400
   1105b:	50                   	push   %eax
   1105c:	e8 39 fa ff ff       	call   10a9a <lidt>
   11061:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   11064:	e8 c2 fd ff ff       	call   10e2b <init_pic>
}
   11069:	90                   	nop
   1106a:	c9                   	leave  
   1106b:	c3                   	ret    

0001106c <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   1106c:	55                   	push   %ebp
   1106d:	89 e5                	mov    %esp,%ebp
   1106f:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   11072:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11076:	7e 07                	jle    1107f <irq_install+0x13>
        return -1;
   11078:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1107d:	eb 25                	jmp    110a4 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   1107f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11082:	8b 55 08             	mov    0x8(%ebp),%edx
   11085:	c1 e2 03             	shl    $0x3,%edx
   11088:	81 c2 c0 28 01 00    	add    $0x128c0,%edx
   1108e:	68 00 8e 00 00       	push   $0x8e00
   11093:	50                   	push   %eax
   11094:	6a 08                	push   $0x8
   11096:	52                   	push   %edx
   11097:	e8 e5 f8 ff ff       	call   10981 <gate_desc_set>
   1109c:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   1109f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110a4:	c9                   	leave  
   110a5:	c3                   	ret    

000110a6 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   110a6:	55                   	push   %ebp
   110a7:	89 e5                	mov    %esp,%ebp
   110a9:	53                   	push   %ebx
   110aa:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   110ad:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   110b1:	7e 78                	jle    1112b <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   110b3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   110b7:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   110bb:	7f 32                	jg     110ef <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   110bd:	6a 21                	push   $0x21
   110bf:	e8 8c f9 ff ff       	call   10a50 <inb>
   110c4:	83 c4 04             	add    $0x4,%esp
   110c7:	89 c2                	mov    %eax,%edx
   110c9:	8b 45 08             	mov    0x8(%ebp),%eax
   110cc:	bb 01 00 00 00       	mov    $0x1,%ebx
   110d1:	89 c1                	mov    %eax,%ecx
   110d3:	d3 e3                	shl    %cl,%ebx
   110d5:	89 d8                	mov    %ebx,%eax
   110d7:	f7 d0                	not    %eax
   110d9:	21 d0                	and    %edx,%eax
   110db:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   110de:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   110e2:	50                   	push   %eax
   110e3:	6a 21                	push   $0x21
   110e5:	e8 83 f9 ff ff       	call   10a6d <outb>
   110ea:	83 c4 08             	add    $0x8,%esp
   110ed:	eb 3d                	jmp    1112c <irq_enable+0x86>
    }else{
        irq_num -= 8;
   110ef:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   110f3:	68 a1 00 00 00       	push   $0xa1
   110f8:	e8 53 f9 ff ff       	call   10a50 <inb>
   110fd:	83 c4 04             	add    $0x4,%esp
   11100:	89 c2                	mov    %eax,%edx
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	bb 01 00 00 00       	mov    $0x1,%ebx
   1110a:	89 c1                	mov    %eax,%ecx
   1110c:	d3 e3                	shl    %cl,%ebx
   1110e:	89 d8                	mov    %ebx,%eax
   11110:	f7 d0                	not    %eax
   11112:	21 d0                	and    %edx,%eax
   11114:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11117:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1111b:	50                   	push   %eax
   1111c:	68 a1 00 00 00       	push   $0xa1
   11121:	e8 47 f9 ff ff       	call   10a6d <outb>
   11126:	83 c4 08             	add    $0x8,%esp
   11129:	eb 01                	jmp    1112c <irq_enable+0x86>
        return;
   1112b:	90                   	nop
    }
}
   1112c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1112f:	c9                   	leave  
   11130:	c3                   	ret    

00011131 <irq_disable>:
void irq_disable (int irq_num) {
   11131:	55                   	push   %ebp
   11132:	89 e5                	mov    %esp,%ebp
   11134:	53                   	push   %ebx
   11135:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   11138:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1113c:	7e 74                	jle    111b2 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   1113e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11142:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11146:	7f 30                	jg     11178 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11148:	6a 21                	push   $0x21
   1114a:	e8 01 f9 ff ff       	call   10a50 <inb>
   1114f:	83 c4 04             	add    $0x4,%esp
   11152:	89 c3                	mov    %eax,%ebx
   11154:	8b 45 08             	mov    0x8(%ebp),%eax
   11157:	ba 01 00 00 00       	mov    $0x1,%edx
   1115c:	89 c1                	mov    %eax,%ecx
   1115e:	d3 e2                	shl    %cl,%edx
   11160:	89 d0                	mov    %edx,%eax
   11162:	09 d8                	or     %ebx,%eax
   11164:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   11167:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1116b:	50                   	push   %eax
   1116c:	6a 21                	push   $0x21
   1116e:	e8 fa f8 ff ff       	call   10a6d <outb>
   11173:	83 c4 08             	add    $0x8,%esp
   11176:	eb 3b                	jmp    111b3 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   11178:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   1117c:	68 a1 00 00 00       	push   $0xa1
   11181:	e8 ca f8 ff ff       	call   10a50 <inb>
   11186:	83 c4 04             	add    $0x4,%esp
   11189:	89 c3                	mov    %eax,%ebx
   1118b:	8b 45 08             	mov    0x8(%ebp),%eax
   1118e:	ba 01 00 00 00       	mov    $0x1,%edx
   11193:	89 c1                	mov    %eax,%ecx
   11195:	d3 e2                	shl    %cl,%edx
   11197:	89 d0                	mov    %edx,%eax
   11199:	09 d8                	or     %ebx,%eax
   1119b:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   1119e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   111a2:	50                   	push   %eax
   111a3:	68 a1 00 00 00       	push   $0xa1
   111a8:	e8 c0 f8 ff ff       	call   10a6d <outb>
   111ad:	83 c4 08             	add    $0x8,%esp
   111b0:	eb 01                	jmp    111b3 <irq_disable+0x82>
        return;
   111b2:	90                   	nop
    }
}
   111b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   111b6:	c9                   	leave  
   111b7:	c3                   	ret    

000111b8 <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   111b8:	55                   	push   %ebp
   111b9:	89 e5                	mov    %esp,%ebp
    cli();
   111bb:	e8 cc f8 ff ff       	call   10a8c <cli>
}
   111c0:	90                   	nop
   111c1:	5d                   	pop    %ebp
   111c2:	c3                   	ret    

000111c3 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   111c3:	55                   	push   %ebp
   111c4:	89 e5                	mov    %esp,%ebp
    sti();
   111c6:	e8 c8 f8 ff ff       	call   10a93 <sti>
}
   111cb:	90                   	nop
   111cc:	5d                   	pop    %ebp
   111cd:	c3                   	ret    

000111ce <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   111ce:	55                   	push   %ebp
   111cf:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   111d1:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   111d5:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   111d9:	7e 0f                	jle    111ea <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   111db:	6a 20                	push   $0x20
   111dd:	68 a0 00 00 00       	push   $0xa0
   111e2:	e8 86 f8 ff ff       	call   10a6d <outb>
   111e7:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   111ea:	6a 20                	push   $0x20
   111ec:	6a 20                	push   $0x20
   111ee:	e8 7a f8 ff ff       	call   10a6d <outb>
   111f3:	83 c4 08             	add    $0x8,%esp

}
   111f6:	90                   	nop
   111f7:	c9                   	leave  
   111f8:	c3                   	ret    

000111f9 <irq_enter_protection>:
/**
 * @brief 进入临界区
 * 
 * @return irq_state_t 
 */
irq_state_t irq_enter_protection (void) {
   111f9:	55                   	push   %ebp
   111fa:	89 e5                	mov    %esp,%ebp
   111fc:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   111ff:	e8 c5 f8 ff ff       	call   10ac9 <read_eflags>
   11204:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11207:	e8 ac ff ff ff       	call   111b8 <irq_disable_global>
    return state;
   1120c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1120f:	c9                   	leave  
   11210:	c3                   	ret    

00011211 <irq_leave_protection>:
/**
 * @brief 退出临界区
 * 
 * @param state eflags寄存器的值
 */
void irq_leave_protection (irq_state_t state) {
   11211:	55                   	push   %ebp
   11212:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11214:	ff 75 08             	pushl  0x8(%ebp)
   11217:	e8 bd f8 ff ff       	call   10ad9 <write_eflags>
   1121c:	83 c4 04             	add    $0x4,%esp
}
   1121f:	90                   	nop
   11220:	c9                   	leave  
   11221:	c3                   	ret    

00011222 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11222:	55                   	push   %ebp
   11223:	89 e5                	mov    %esp,%ebp
   11225:	83 ec 08             	sub    $0x8,%esp
   11228:	8b 55 08             	mov    0x8(%ebp),%edx
   1122b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1122e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11232:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11235:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11239:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1123d:	ee                   	out    %al,(%dx)
}
   1123e:	90                   	nop
   1123f:	c9                   	leave  
   11240:	c3                   	ret    

00011241 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   11241:	55                   	push   %ebp
   11242:	89 e5                	mov    %esp,%ebp
   11244:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11247:	a1 c0 2c 01 00       	mov    0x12cc0,%eax
   1124c:	83 c0 01             	add    $0x1,%eax
   1124f:	a3 c0 2c 01 00       	mov    %eax,0x12cc0
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   11254:	83 ec 0c             	sub    $0xc,%esp
   11257:	6a 20                	push   $0x20
   11259:	e8 70 ff ff ff       	call   111ce <pic_send_eoi>
   1125e:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11261:	e8 5f f4 ff ff       	call   106c5 <task_time_tick>
}
   11266:	90                   	nop
   11267:	c9                   	leave  
   11268:	c3                   	ret    

00011269 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   11269:	55                   	push   %ebp
   1126a:	89 e5                	mov    %esp,%ebp
   1126c:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   1126f:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   11276:	6a 36                	push   $0x36
   11278:	6a 43                	push   $0x43
   1127a:	e8 a3 ff ff ff       	call   11222 <outb>
   1127f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   11282:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11285:	0f b6 c0             	movzbl %al,%eax
   11288:	50                   	push   %eax
   11289:	6a 40                	push   $0x40
   1128b:	e8 92 ff ff ff       	call   11222 <outb>
   11290:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   11293:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11296:	c1 e8 08             	shr    $0x8,%eax
   11299:	0f b6 c0             	movzbl %al,%eax
   1129c:	50                   	push   %eax
   1129d:	6a 40                	push   $0x40
   1129f:	e8 7e ff ff ff       	call   11222 <outb>
   112a4:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   112a7:	83 ec 08             	sub    $0x8,%esp
   112aa:	68 86 02 01 00       	push   $0x10286
   112af:	6a 20                	push   $0x20
   112b1:	e8 b6 fd ff ff       	call   1106c <irq_install>
   112b6:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   112b9:	83 ec 0c             	sub    $0xc,%esp
   112bc:	6a 20                	push   $0x20
   112be:	e8 e3 fd ff ff       	call   110a6 <irq_enable>
   112c3:	83 c4 10             	add    $0x10,%esp
}
   112c6:	90                   	nop
   112c7:	c9                   	leave  
   112c8:	c3                   	ret    

000112c9 <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   112c9:	55                   	push   %ebp
   112ca:	89 e5                	mov    %esp,%ebp
   112cc:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   112cf:	c7 05 c0 2c 01 00 00 	movl   $0x0,0x12cc0
   112d6:	00 00 00 

    init_pit();
   112d9:	e8 8b ff ff ff       	call   11269 <init_pit>
   112de:	90                   	nop
   112df:	c9                   	leave  
   112e0:	c3                   	ret    

000112e1 <kernel_init>:
#include "tools/list.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   112e1:	55                   	push   %ebp
   112e2:	89 e5                	mov    %esp,%ebp
   112e4:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   112e7:	e8 dc f6 ff ff       	call   109c8 <cpu_init>
    log_init();
   112ec:	e8 4b 08 00 00       	call   11b3c <log_init>
    irq_init();
   112f1:	e8 c8 fb ff ff       	call   10ebe <irq_init>
    time_init();
   112f6:	e8 ce ff ff ff       	call   112c9 <time_init>

    task_manager_init();
   112fb:	e8 48 f2 ff ff       	call   10548 <task_manager_init>

}
   11300:	90                   	nop
   11301:	c9                   	leave  
   11302:	c3                   	ret    

00011303 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   11303:	55                   	push   %ebp
   11304:	89 e5                	mov    %esp,%ebp
   11306:	83 ec 10             	sub    $0x10,%esp
    
    int count = 0;
   11309:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(;;){
   11310:	eb fe                	jmp    11310 <init_task_entry+0xd>

00011312 <init_main>:
        // sys_sched_yield();
    }    

}

void init_main(void) {
   11312:	55                   	push   %ebp
   11313:	89 e5                	mov    %esp,%ebp
   11315:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   11318:	83 ec 0c             	sub    $0xc,%esp
   1131b:	68 31 1f 01 00       	push   $0x11f31
   11320:	e8 8c 08 00 00       	call   11bb1 <log_printf>
   11325:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   11328:	83 ec 04             	sub    $0x4,%esp
   1132b:	68 47 1f 01 00       	push   $0x11f47
   11330:	68 50 1f 01 00       	push   $0x11f50
   11335:	68 56 1f 01 00       	push   $0x11f56
   1133a:	e8 72 08 00 00       	call   11bb1 <log_printf>
   1133f:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   11342:	83 ec 0c             	sub    $0xc,%esp
   11345:	6a 61                	push   $0x61
   11347:	68 45 23 01 00       	push   $0x12345
   1134c:	6a 85                	push   $0xffffff85
   1134e:	68 40 e2 01 00       	push   $0x1e240
   11353:	68 65 1f 01 00       	push   $0x11f65
   11358:	e8 54 08 00 00       	call   11bb1 <log_printf>
   1135d:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task,"init task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   11360:	ba e0 3c 01 00       	mov    $0x13ce0,%edx
   11365:	b8 03 13 01 00       	mov    $0x11303,%eax
   1136a:	52                   	push   %edx
   1136b:	50                   	push   %eax
   1136c:	68 71 1f 01 00       	push   $0x11f71
   11371:	68 e0 3c 01 00       	push   $0x13ce0
   11376:	e8 ab f0 ff ff       	call   10426 <task_init>
   1137b:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   1137e:	e8 7e f1 ff ff       	call   10501 <task_first_init>

    irq_enable_global();
   11383:	e8 3b fe ff ff       	call   111c3 <irq_enable_global>
    int count = 0; 
   11388:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("first main: %d",count++);
   1138f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11392:	8d 50 01             	lea    0x1(%eax),%edx
   11395:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11398:	83 ec 08             	sub    $0x8,%esp
   1139b:	50                   	push   %eax
   1139c:	68 7b 1f 01 00       	push   $0x11f7b
   113a1:	e8 0b 08 00 00       	call   11bb1 <log_printf>
   113a6:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   113a9:	83 ec 0c             	sub    $0xc,%esp
   113ac:	68 e8 03 00 00       	push   $0x3e8
   113b1:	e8 42 f4 ff ff       	call   107f8 <sys_sleep>
   113b6:	83 c4 10             	add    $0x10,%esp
        log_printf("first main: %d",count++);
   113b9:	eb d4                	jmp    1138f <init_main+0x7d>

000113bb <hlt>:
static inline void hlt (void) {
   113bb:	55                   	push   %ebp
   113bc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   113be:	f4                   	hlt    
}
   113bf:	90                   	nop
   113c0:	5d                   	pop    %ebp
   113c1:	c3                   	ret    

000113c2 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   113c2:	55                   	push   %ebp
   113c3:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   113c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113c9:	74 3b                	je     11406 <kernel_strcpy+0x44>
   113cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113cf:	74 35                	je     11406 <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   113d1:	eb 17                	jmp    113ea <kernel_strcpy+0x28>
        *dest++ = *src++;
   113d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   113d6:	8d 42 01             	lea    0x1(%edx),%eax
   113d9:	89 45 0c             	mov    %eax,0xc(%ebp)
   113dc:	8b 45 08             	mov    0x8(%ebp),%eax
   113df:	8d 48 01             	lea    0x1(%eax),%ecx
   113e2:	89 4d 08             	mov    %ecx,0x8(%ebp)
   113e5:	0f b6 12             	movzbl (%edx),%edx
   113e8:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   113ea:	8b 45 08             	mov    0x8(%ebp),%eax
   113ed:	0f b6 00             	movzbl (%eax),%eax
   113f0:	84 c0                	test   %al,%al
   113f2:	74 0a                	je     113fe <kernel_strcpy+0x3c>
   113f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   113f7:	0f b6 00             	movzbl (%eax),%eax
   113fa:	84 c0                	test   %al,%al
   113fc:	75 d5                	jne    113d3 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   113fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11401:	c6 00 00             	movb   $0x0,(%eax)
   11404:	eb 01                	jmp    11407 <kernel_strcpy+0x45>
        return;
   11406:	90                   	nop
}
   11407:	5d                   	pop    %ebp
   11408:	c3                   	ret    

00011409 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   11409:	55                   	push   %ebp
   1140a:	89 e5                	mov    %esp,%ebp
   1140c:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   1140f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11413:	74 61                	je     11476 <kernel_strncpy+0x6d>
   11415:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11419:	74 5b                	je     11476 <kernel_strncpy+0x6d>
   1141b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1141f:	74 55                	je     11476 <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   11421:	8b 45 08             	mov    0x8(%ebp),%eax
   11424:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   11427:	8b 45 0c             	mov    0xc(%ebp),%eax
   1142a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   1142d:	eb 17                	jmp    11446 <kernel_strncpy+0x3d>
        *d++ = *s++;
   1142f:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11432:	8d 42 01             	lea    0x1(%edx),%eax
   11435:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11438:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1143b:	8d 48 01             	lea    0x1(%eax),%ecx
   1143e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11441:	0f b6 12             	movzbl (%edx),%edx
   11444:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   11446:	8b 45 10             	mov    0x10(%ebp),%eax
   11449:	8d 50 ff             	lea    -0x1(%eax),%edx
   1144c:	89 55 10             	mov    %edx,0x10(%ebp)
   1144f:	85 c0                	test   %eax,%eax
   11451:	7e 0a                	jle    1145d <kernel_strncpy+0x54>
   11453:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11456:	0f b6 00             	movzbl (%eax),%eax
   11459:	84 c0                	test   %al,%al
   1145b:	75 d2                	jne    1142f <kernel_strncpy+0x26>
    }
    if (size == 0) {
   1145d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11461:	75 0b                	jne    1146e <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11463:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11466:	83 e8 01             	sub    $0x1,%eax
   11469:	c6 00 00             	movb   $0x0,(%eax)
   1146c:	eb 09                	jmp    11477 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   1146e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11471:	c6 00 00             	movb   $0x0,(%eax)
   11474:	eb 01                	jmp    11477 <kernel_strncpy+0x6e>
        return;
   11476:	90                   	nop
    }
}
   11477:	c9                   	leave  
   11478:	c3                   	ret    

00011479 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   11479:	55                   	push   %ebp
   1147a:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   1147c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11480:	74 06                	je     11488 <kernel_strncmp+0xf>
   11482:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11486:	75 0f                	jne    11497 <kernel_strncmp+0x1e>
        return -1;
   11488:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1148d:	eb 62                	jmp    114f1 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   1148f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11493:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   11497:	8b 45 08             	mov    0x8(%ebp),%eax
   1149a:	0f b6 00             	movzbl (%eax),%eax
   1149d:	84 c0                	test   %al,%al
   1149f:	74 20                	je     114c1 <kernel_strncmp+0x48>
   114a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   114a4:	0f b6 00             	movzbl (%eax),%eax
   114a7:	84 c0                	test   %al,%al
   114a9:	74 16                	je     114c1 <kernel_strncmp+0x48>
   114ab:	8b 45 08             	mov    0x8(%ebp),%eax
   114ae:	0f b6 10             	movzbl (%eax),%edx
   114b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   114b4:	0f b6 00             	movzbl (%eax),%eax
   114b7:	38 c2                	cmp    %al,%dl
   114b9:	75 06                	jne    114c1 <kernel_strncmp+0x48>
   114bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   114bf:	75 ce                	jne    1148f <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   114c1:	8b 45 08             	mov    0x8(%ebp),%eax
   114c4:	0f b6 00             	movzbl (%eax),%eax
   114c7:	84 c0                	test   %al,%al
   114c9:	74 21                	je     114ec <kernel_strncmp+0x73>
   114cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   114ce:	0f b6 00             	movzbl (%eax),%eax
   114d1:	84 c0                	test   %al,%al
   114d3:	74 17                	je     114ec <kernel_strncmp+0x73>
   114d5:	8b 45 08             	mov    0x8(%ebp),%eax
   114d8:	0f b6 10             	movzbl (%eax),%edx
   114db:	8b 45 0c             	mov    0xc(%ebp),%eax
   114de:	0f b6 00             	movzbl (%eax),%eax
   114e1:	38 c2                	cmp    %al,%dl
   114e3:	74 07                	je     114ec <kernel_strncmp+0x73>
   114e5:	b8 01 00 00 00       	mov    $0x1,%eax
   114ea:	eb 05                	jmp    114f1 <kernel_strncmp+0x78>
   114ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
   114f1:	5d                   	pop    %ebp
   114f2:	c3                   	ret    

000114f3 <kernel_strlen>:
int kernel_strlen(const char * str){
   114f3:	55                   	push   %ebp
   114f4:	89 e5                	mov    %esp,%ebp
   114f6:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   114f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   114fd:	75 07                	jne    11506 <kernel_strlen+0x13>
        return 0;
   114ff:	b8 00 00 00 00       	mov    $0x0,%eax
   11504:	eb 26                	jmp    1152c <kernel_strlen+0x39>
    }

    const char * c = str;
   11506:	8b 45 08             	mov    0x8(%ebp),%eax
   11509:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   1150c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11513:	eb 04                	jmp    11519 <kernel_strlen+0x26>
        len++;
   11515:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   11519:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1151c:	8d 50 01             	lea    0x1(%eax),%edx
   1151f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11522:	0f b6 00             	movzbl (%eax),%eax
   11525:	84 c0                	test   %al,%al
   11527:	75 ec                	jne    11515 <kernel_strlen+0x22>
    }
    return len;
   11529:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1152c:	c9                   	leave  
   1152d:	c3                   	ret    

0001152e <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   1152e:	55                   	push   %ebp
   1152f:	89 e5                	mov    %esp,%ebp
   11531:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11538:	74 40                	je     1157a <kernel_memcpy+0x4c>
   1153a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1153e:	74 3a                	je     1157a <kernel_memcpy+0x4c>
   11540:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11544:	74 34                	je     1157a <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   11546:	8b 45 0c             	mov    0xc(%ebp),%eax
   11549:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   1154c:	8b 45 08             	mov    0x8(%ebp),%eax
   1154f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11552:	eb 17                	jmp    1156b <kernel_memcpy+0x3d>
        *d++ = *s++;
   11554:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11557:	8d 42 01             	lea    0x1(%edx),%eax
   1155a:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1155d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11560:	8d 48 01             	lea    0x1(%eax),%ecx
   11563:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11566:	0f b6 12             	movzbl (%edx),%edx
   11569:	88 10                	mov    %dl,(%eax)
    while(size--){
   1156b:	8b 45 10             	mov    0x10(%ebp),%eax
   1156e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11571:	89 55 10             	mov    %edx,0x10(%ebp)
   11574:	85 c0                	test   %eax,%eax
   11576:	75 dc                	jne    11554 <kernel_memcpy+0x26>
   11578:	eb 01                	jmp    1157b <kernel_memcpy+0x4d>
        return;
   1157a:	90                   	nop
    }

}
   1157b:	c9                   	leave  
   1157c:	c3                   	ret    

0001157d <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   1157d:	55                   	push   %ebp
   1157e:	89 e5                	mov    %esp,%ebp
   11580:	83 ec 14             	sub    $0x14,%esp
   11583:	8b 45 0c             	mov    0xc(%ebp),%eax
   11586:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   11589:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1158d:	74 2c                	je     115bb <kernel_memset+0x3e>
   1158f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11593:	74 26                	je     115bb <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11595:	8b 45 08             	mov    0x8(%ebp),%eax
   11598:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   1159b:	eb 0f                	jmp    115ac <kernel_memset+0x2f>
       *d++ = v; 
   1159d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115a0:	8d 50 01             	lea    0x1(%eax),%edx
   115a3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   115a6:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   115aa:	88 10                	mov    %dl,(%eax)
    while(size--){
   115ac:	8b 45 10             	mov    0x10(%ebp),%eax
   115af:	8d 50 ff             	lea    -0x1(%eax),%edx
   115b2:	89 55 10             	mov    %edx,0x10(%ebp)
   115b5:	85 c0                	test   %eax,%eax
   115b7:	75 e4                	jne    1159d <kernel_memset+0x20>
   115b9:	eb 01                	jmp    115bc <kernel_memset+0x3f>
        return;
   115bb:	90                   	nop
    }
}
   115bc:	c9                   	leave  
   115bd:	c3                   	ret    

000115be <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   115be:	55                   	push   %ebp
   115bf:	89 e5                	mov    %esp,%ebp
   115c1:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   115c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   115c8:	74 0c                	je     115d6 <kernel_memcmp+0x18>
   115ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   115ce:	74 06                	je     115d6 <kernel_memcmp+0x18>
   115d0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   115d4:	75 07                	jne    115dd <kernel_memcmp+0x1f>
        return -1;
   115d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   115db:	eb 43                	jmp    11620 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   115dd:	8b 45 08             	mov    0x8(%ebp),%eax
   115e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   115e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   115e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   115e9:	eb 23                	jmp    1160e <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   115eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115ee:	8d 50 01             	lea    0x1(%eax),%edx
   115f1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   115f4:	0f b6 08             	movzbl (%eax),%ecx
   115f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115fa:	8d 50 01             	lea    0x1(%eax),%edx
   115fd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11600:	0f b6 00             	movzbl (%eax),%eax
   11603:	38 c1                	cmp    %al,%cl
   11605:	74 07                	je     1160e <kernel_memcmp+0x50>
            return -1;
   11607:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1160c:	eb 12                	jmp    11620 <kernel_memcmp+0x62>
    while(size--){
   1160e:	8b 45 10             	mov    0x10(%ebp),%eax
   11611:	8d 50 ff             	lea    -0x1(%eax),%edx
   11614:	89 55 10             	mov    %edx,0x10(%ebp)
   11617:	85 c0                	test   %eax,%eax
   11619:	75 d0                	jne    115eb <kernel_memcmp+0x2d>
        }
    }
    return 0;
   1161b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11620:	c9                   	leave  
   11621:	c3                   	ret    

00011622 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   11622:	55                   	push   %ebp
   11623:	89 e5                	mov    %esp,%ebp
   11625:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   11628:	8d 45 10             	lea    0x10(%ebp),%eax
   1162b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   1162e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11631:	83 ec 04             	sub    $0x4,%esp
   11634:	50                   	push   %eax
   11635:	ff 75 0c             	pushl  0xc(%ebp)
   11638:	ff 75 08             	pushl  0x8(%ebp)
   1163b:	e8 45 01 00 00       	call   11785 <kernel_vsprintf>
   11640:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11643:	90                   	nop
   11644:	c9                   	leave  
   11645:	c3                   	ret    

00011646 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   11646:	55                   	push   %ebp
   11647:	89 e5                	mov    %esp,%ebp
   11649:	53                   	push   %ebx
   1164a:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   1164d:	8b 45 08             	mov    0x8(%ebp),%eax
   11650:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11653:	8b 45 0c             	mov    0xc(%ebp),%eax
   11656:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   11659:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1165d:	74 1d                	je     1167c <kernel_itoa+0x36>
   1165f:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11663:	74 17                	je     1167c <kernel_itoa+0x36>
   11665:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11669:	74 11                	je     1167c <kernel_itoa+0x36>
   1166b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1166f:	74 0b                	je     1167c <kernel_itoa+0x36>
        *p = '\0';
   11671:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11674:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11677:	e9 03 01 00 00       	jmp    1177f <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1167c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11683:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11687:	79 19                	jns    116a2 <kernel_itoa+0x5c>
   11689:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1168d:	75 13                	jne    116a2 <kernel_itoa+0x5c>
        *p++ = '-';
   1168f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11692:	8d 50 01             	lea    0x1(%eax),%edx
   11695:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11698:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   1169b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   116a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   116a6:	74 3b                	je     116e3 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   116a8:	8b 0d dc 1f 01 00    	mov    0x11fdc,%ecx
   116ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   116b1:	99                   	cltd   
   116b2:	f7 7d 10             	idivl  0x10(%ebp)
   116b5:	89 d0                	mov    %edx,%eax
   116b7:	83 c0 0f             	add    $0xf,%eax
   116ba:	01 c8                	add    %ecx,%eax
   116bc:	0f b6 00             	movzbl (%eax),%eax
   116bf:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   116c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   116c5:	8d 50 01             	lea    0x1(%eax),%edx
   116c8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   116cb:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   116cf:	88 10                	mov    %dl,(%eax)
            num /= base;
   116d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d4:	99                   	cltd   
   116d5:	f7 7d 10             	idivl  0x10(%ebp)
   116d8:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   116db:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116df:	75 c7                	jne    116a8 <kernel_itoa+0x62>
   116e1:	eb 4b                	jmp    1172e <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   116e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   116e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   116e9:	8b 0d dc 1f 01 00    	mov    0x11fdc,%ecx
   116ef:	8b 5d 10             	mov    0x10(%ebp),%ebx
   116f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116f5:	ba 00 00 00 00       	mov    $0x0,%edx
   116fa:	f7 f3                	div    %ebx
   116fc:	89 d0                	mov    %edx,%eax
   116fe:	83 c0 0f             	add    $0xf,%eax
   11701:	01 c8                	add    %ecx,%eax
   11703:	0f b6 00             	movzbl (%eax),%eax
   11706:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11709:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1170c:	8d 50 01             	lea    0x1(%eax),%edx
   1170f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11712:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11716:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11718:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1171b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1171e:	ba 00 00 00 00       	mov    $0x0,%edx
   11723:	f7 f3                	div    %ebx
   11725:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11728:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1172c:	75 bb                	jne    116e9 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   1172e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11731:	8d 50 ff             	lea    -0x1(%eax),%edx
   11734:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11737:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   1173a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1173e:	74 08                	je     11748 <kernel_itoa+0x102>
   11740:	8b 45 08             	mov    0x8(%ebp),%eax
   11743:	83 c0 01             	add    $0x1,%eax
   11746:	eb 03                	jmp    1174b <kernel_itoa+0x105>
   11748:	8b 45 08             	mov    0x8(%ebp),%eax
   1174b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   1174e:	eb 27                	jmp    11777 <kernel_itoa+0x131>
        char ch = *start;
   11750:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11753:	0f b6 00             	movzbl (%eax),%eax
   11756:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11759:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1175c:	0f b6 10             	movzbl (%eax),%edx
   1175f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11762:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11764:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11767:	8d 50 ff             	lea    -0x1(%eax),%edx
   1176a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1176d:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11771:	88 10                	mov    %dl,(%eax)
        start++;
   11773:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   11777:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1177a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1177d:	72 d1                	jb     11750 <kernel_itoa+0x10a>
    }
}
   1177f:	83 c4 20             	add    $0x20,%esp
   11782:	5b                   	pop    %ebx
   11783:	5d                   	pop    %ebp
   11784:	c3                   	ret    

00011785 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   11785:	55                   	push   %ebp
   11786:	89 e5                	mov    %esp,%ebp
   11788:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   1178b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11792:	8b 45 08             	mov    0x8(%ebp),%eax
   11795:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   11798:	e9 17 01 00 00       	jmp    118b4 <kernel_vsprintf+0x12f>
        switch(state) {
   1179d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117a0:	85 c0                	test   %eax,%eax
   117a2:	74 0a                	je     117ae <kernel_vsprintf+0x29>
   117a4:	83 f8 01             	cmp    $0x1,%eax
   117a7:	74 2b                	je     117d4 <kernel_vsprintf+0x4f>
   117a9:	e9 06 01 00 00       	jmp    118b4 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   117ae:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   117b2:	75 0c                	jne    117c0 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   117b4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   117bb:	e9 f4 00 00 00       	jmp    118b4 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   117c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   117c3:	8d 50 01             	lea    0x1(%eax),%edx
   117c6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   117c9:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   117cd:	88 10                	mov    %dl,(%eax)
                }
                break;
   117cf:	e9 e0 00 00 00       	jmp    118b4 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   117d4:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   117d8:	75 47                	jne    11821 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   117da:	8b 45 10             	mov    0x10(%ebp),%eax
   117dd:	8d 50 04             	lea    0x4(%eax),%edx
   117e0:	89 55 10             	mov    %edx,0x10(%ebp)
   117e3:	8b 00                	mov    (%eax),%eax
   117e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   117e8:	ff 75 f4             	pushl  -0xc(%ebp)
   117eb:	e8 03 fd ff ff       	call   114f3 <kernel_strlen>
   117f0:	83 c4 04             	add    $0x4,%esp
   117f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   117f6:	eb 17                	jmp    1180f <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   117f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   117fb:	8d 42 01             	lea    0x1(%edx),%eax
   117fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11801:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11804:	8d 48 01             	lea    0x1(%eax),%ecx
   11807:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1180a:	0f b6 12             	movzbl (%edx),%edx
   1180d:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   1180f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11812:	8d 50 ff             	lea    -0x1(%eax),%edx
   11815:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11818:	85 c0                	test   %eax,%eax
   1181a:	75 dc                	jne    117f8 <kernel_vsprintf+0x73>
   1181c:	e9 8b 00 00 00       	jmp    118ac <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   11821:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11825:	75 2e                	jne    11855 <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   11827:	8b 45 10             	mov    0x10(%ebp),%eax
   1182a:	8d 50 04             	lea    0x4(%eax),%edx
   1182d:	89 55 10             	mov    %edx,0x10(%ebp)
   11830:	8b 00                	mov    (%eax),%eax
   11832:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   11835:	6a 0a                	push   $0xa
   11837:	ff 75 e4             	pushl  -0x1c(%ebp)
   1183a:	ff 75 f8             	pushl  -0x8(%ebp)
   1183d:	e8 04 fe ff ff       	call   11646 <kernel_itoa>
   11842:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   11845:	ff 75 f8             	pushl  -0x8(%ebp)
   11848:	e8 a6 fc ff ff       	call   114f3 <kernel_strlen>
   1184d:	83 c4 04             	add    $0x4,%esp
   11850:	01 45 f8             	add    %eax,-0x8(%ebp)
   11853:	eb 57                	jmp    118ac <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   11855:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11859:	75 2e                	jne    11889 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   1185b:	8b 45 10             	mov    0x10(%ebp),%eax
   1185e:	8d 50 04             	lea    0x4(%eax),%edx
   11861:	89 55 10             	mov    %edx,0x10(%ebp)
   11864:	8b 00                	mov    (%eax),%eax
   11866:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   11869:	6a 10                	push   $0x10
   1186b:	ff 75 e8             	pushl  -0x18(%ebp)
   1186e:	ff 75 f8             	pushl  -0x8(%ebp)
   11871:	e8 d0 fd ff ff       	call   11646 <kernel_itoa>
   11876:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   11879:	ff 75 f8             	pushl  -0x8(%ebp)
   1187c:	e8 72 fc ff ff       	call   114f3 <kernel_strlen>
   11881:	83 c4 04             	add    $0x4,%esp
   11884:	01 45 f8             	add    %eax,-0x8(%ebp)
   11887:	eb 23                	jmp    118ac <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   11889:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1188d:	75 1d                	jne    118ac <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   1188f:	8b 45 10             	mov    0x10(%ebp),%eax
   11892:	8d 50 04             	lea    0x4(%eax),%edx
   11895:	89 55 10             	mov    %edx,0x10(%ebp)
   11898:	8b 00                	mov    (%eax),%eax
   1189a:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   1189d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   118a0:	8d 50 01             	lea    0x1(%eax),%edx
   118a3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   118a6:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   118aa:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   118ac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   118b3:	90                   	nop
    while ((ch = *fmt++)) {
   118b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   118b7:	8d 50 01             	lea    0x1(%eax),%edx
   118ba:	89 55 0c             	mov    %edx,0xc(%ebp)
   118bd:	0f b6 00             	movzbl (%eax),%eax
   118c0:	88 45 ef             	mov    %al,-0x11(%ebp)
   118c3:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   118c7:	0f 85 d0 fe ff ff    	jne    1179d <kernel_vsprintf+0x18>
        }
    }
}
   118cd:	90                   	nop
   118ce:	c9                   	leave  
   118cf:	c3                   	ret    

000118d0 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   118d0:	55                   	push   %ebp
   118d1:	89 e5                	mov    %esp,%ebp
   118d3:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   118d6:	83 ec 08             	sub    $0x8,%esp
   118d9:	ff 75 14             	pushl  0x14(%ebp)
   118dc:	68 8c 1f 01 00       	push   $0x11f8c
   118e1:	e8 cb 02 00 00       	call   11bb1 <log_printf>
   118e6:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   118e9:	ff 75 10             	pushl  0x10(%ebp)
   118ec:	ff 75 0c             	pushl  0xc(%ebp)
   118ef:	ff 75 08             	pushl  0x8(%ebp)
   118f2:	68 9e 1f 01 00       	push   $0x11f9e
   118f7:	e8 b5 02 00 00       	call   11bb1 <log_printf>
   118fc:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   118ff:	e8 b7 fa ff ff       	call   113bb <hlt>
   11904:	eb f9                	jmp    118ff <panic+0x2f>

00011906 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11906:	55                   	push   %ebp
   11907:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11909:	8b 45 08             	mov    0x8(%ebp),%eax
   1190c:	8b 40 08             	mov    0x8(%eax),%eax
   1190f:	85 c0                	test   %eax,%eax
   11911:	0f 94 c0             	sete   %al
   11914:	0f b6 c0             	movzbl %al,%eax
}
   11917:	5d                   	pop    %ebp
   11918:	c3                   	ret    

00011919 <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   11919:	55                   	push   %ebp
   1191a:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   1191c:	8b 45 08             	mov    0x8(%ebp),%eax
   1191f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11926:	8b 45 08             	mov    0x8(%ebp),%eax
   11929:	8b 50 04             	mov    0x4(%eax),%edx
   1192c:	8b 45 08             	mov    0x8(%ebp),%eax
   1192f:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11931:	8b 45 08             	mov    0x8(%ebp),%eax
   11934:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1193b:	90                   	nop
   1193c:	5d                   	pop    %ebp
   1193d:	c3                   	ret    

0001193e <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   1193e:	55                   	push   %ebp
   1193f:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   11941:	8b 45 08             	mov    0x8(%ebp),%eax
   11944:	8b 10                	mov    (%eax),%edx
   11946:	8b 45 0c             	mov    0xc(%ebp),%eax
   11949:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   1194c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1194f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   11955:	ff 75 08             	pushl  0x8(%ebp)
   11958:	e8 a9 ff ff ff       	call   11906 <list_is_empty>
   1195d:	83 c4 04             	add    $0x4,%esp
   11960:	85 c0                	test   %eax,%eax
   11962:	74 16                	je     1197a <list_insert_first+0x3c>
        list->first = list->last = node;
   11964:	8b 45 08             	mov    0x8(%ebp),%eax
   11967:	8b 55 0c             	mov    0xc(%ebp),%edx
   1196a:	89 50 04             	mov    %edx,0x4(%eax)
   1196d:	8b 45 08             	mov    0x8(%ebp),%eax
   11970:	8b 50 04             	mov    0x4(%eax),%edx
   11973:	8b 45 08             	mov    0x8(%ebp),%eax
   11976:	89 10                	mov    %edx,(%eax)
   11978:	eb 12                	jmp    1198c <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   1197a:	8b 45 08             	mov    0x8(%ebp),%eax
   1197d:	8b 00                	mov    (%eax),%eax
   1197f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11982:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11984:	8b 45 08             	mov    0x8(%ebp),%eax
   11987:	8b 55 0c             	mov    0xc(%ebp),%edx
   1198a:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   1198c:	8b 45 08             	mov    0x8(%ebp),%eax
   1198f:	8b 40 08             	mov    0x8(%eax),%eax
   11992:	8d 50 01             	lea    0x1(%eax),%edx
   11995:	8b 45 08             	mov    0x8(%ebp),%eax
   11998:	89 50 08             	mov    %edx,0x8(%eax)
}
   1199b:	90                   	nop
   1199c:	c9                   	leave  
   1199d:	c3                   	ret    

0001199e <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1199e:	55                   	push   %ebp
   1199f:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   119a1:	8b 45 08             	mov    0x8(%ebp),%eax
   119a4:	8b 50 04             	mov    0x4(%eax),%edx
   119a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   119aa:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   119ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   119af:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   119b6:	ff 75 08             	pushl  0x8(%ebp)
   119b9:	e8 48 ff ff ff       	call   11906 <list_is_empty>
   119be:	83 c4 04             	add    $0x4,%esp
   119c1:	85 c0                	test   %eax,%eax
   119c3:	74 16                	je     119db <list_insert_last+0x3d>
        list->first = list->last = node;
   119c5:	8b 45 08             	mov    0x8(%ebp),%eax
   119c8:	8b 55 0c             	mov    0xc(%ebp),%edx
   119cb:	89 50 04             	mov    %edx,0x4(%eax)
   119ce:	8b 45 08             	mov    0x8(%ebp),%eax
   119d1:	8b 50 04             	mov    0x4(%eax),%edx
   119d4:	8b 45 08             	mov    0x8(%ebp),%eax
   119d7:	89 10                	mov    %edx,(%eax)
   119d9:	eb 15                	jmp    119f0 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   119db:	8b 45 08             	mov    0x8(%ebp),%eax
   119de:	8b 40 04             	mov    0x4(%eax),%eax
   119e1:	8b 55 0c             	mov    0xc(%ebp),%edx
   119e4:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   119e7:	8b 45 08             	mov    0x8(%ebp),%eax
   119ea:	8b 55 0c             	mov    0xc(%ebp),%edx
   119ed:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   119f0:	8b 45 08             	mov    0x8(%ebp),%eax
   119f3:	8b 40 08             	mov    0x8(%eax),%eax
   119f6:	8d 50 01             	lea    0x1(%eax),%edx
   119f9:	8b 45 08             	mov    0x8(%ebp),%eax
   119fc:	89 50 08             	mov    %edx,0x8(%eax)
}
   119ff:	90                   	nop
   11a00:	c9                   	leave  
   11a01:	c3                   	ret    

00011a02 <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   11a02:	55                   	push   %ebp
   11a03:	89 e5                	mov    %esp,%ebp
   11a05:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   11a08:	ff 75 08             	pushl  0x8(%ebp)
   11a0b:	e8 f6 fe ff ff       	call   11906 <list_is_empty>
   11a10:	83 c4 04             	add    $0x4,%esp
   11a13:	85 c0                	test   %eax,%eax
   11a15:	74 07                	je     11a1e <list_remove_first+0x1c>
        return (list_node_t *)0;
   11a17:	b8 00 00 00 00       	mov    $0x0,%eax
   11a1c:	eb 5b                	jmp    11a79 <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   11a1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a21:	8b 00                	mov    (%eax),%eax
   11a23:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   11a26:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a29:	8b 50 04             	mov    0x4(%eax),%edx
   11a2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a2f:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   11a31:	8b 45 08             	mov    0x8(%ebp),%eax
   11a34:	8b 00                	mov    (%eax),%eax
   11a36:	85 c0                	test   %eax,%eax
   11a38:	75 0c                	jne    11a46 <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   11a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11a44:	eb 0c                	jmp    11a52 <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   11a46:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a49:	8b 40 04             	mov    0x4(%eax),%eax
   11a4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   11a52:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a55:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11a5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a5f:	8b 50 04             	mov    0x4(%eax),%edx
   11a62:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a65:	89 10                	mov    %edx,(%eax)
    list->count--;
   11a67:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6a:	8b 40 08             	mov    0x8(%eax),%eax
   11a6d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a70:	8b 45 08             	mov    0x8(%ebp),%eax
   11a73:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11a76:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11a79:	c9                   	leave  
   11a7a:	c3                   	ret    

00011a7b <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   11a7b:	55                   	push   %ebp
   11a7c:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   11a7e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a81:	8b 00                	mov    (%eax),%eax
   11a83:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11a86:	75 0b                	jne    11a93 <list_remove+0x18>
        list->first = node->next;
   11a88:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a8b:	8b 50 04             	mov    0x4(%eax),%edx
   11a8e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a91:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   11a93:	8b 45 08             	mov    0x8(%ebp),%eax
   11a96:	8b 40 04             	mov    0x4(%eax),%eax
   11a99:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11a9c:	75 0b                	jne    11aa9 <list_remove+0x2e>
        list->last = node->pre;
   11a9e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aa1:	8b 10                	mov    (%eax),%edx
   11aa3:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa6:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   11aa9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aac:	8b 00                	mov    (%eax),%eax
   11aae:	85 c0                	test   %eax,%eax
   11ab0:	74 0e                	je     11ac0 <list_remove+0x45>
        node->pre->next = node->next;
   11ab2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ab5:	8b 00                	mov    (%eax),%eax
   11ab7:	8b 55 0c             	mov    0xc(%ebp),%edx
   11aba:	8b 52 04             	mov    0x4(%edx),%edx
   11abd:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   11ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ac3:	8b 40 04             	mov    0x4(%eax),%eax
   11ac6:	85 c0                	test   %eax,%eax
   11ac8:	74 0d                	je     11ad7 <list_remove+0x5c>
        node->next->pre = node->pre;
   11aca:	8b 45 0c             	mov    0xc(%ebp),%eax
   11acd:	8b 40 04             	mov    0x4(%eax),%eax
   11ad0:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ad3:	8b 12                	mov    (%edx),%edx
   11ad5:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   11ad7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ada:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ae1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ae4:	8b 50 04             	mov    0x4(%eax),%edx
   11ae7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aea:	89 10                	mov    %edx,(%eax)

    list->count--;
   11aec:	8b 45 08             	mov    0x8(%ebp),%eax
   11aef:	8b 40 08             	mov    0x8(%eax),%eax
   11af2:	8d 50 ff             	lea    -0x1(%eax),%edx
   11af5:	8b 45 08             	mov    0x8(%ebp),%eax
   11af8:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11afb:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11afe:	5d                   	pop    %ebp
   11aff:	c3                   	ret    

00011b00 <inb>:
static inline uint8_t inb(uint16_t port) {
   11b00:	55                   	push   %ebp
   11b01:	89 e5                	mov    %esp,%ebp
   11b03:	83 ec 14             	sub    $0x14,%esp
   11b06:	8b 45 08             	mov    0x8(%ebp),%eax
   11b09:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   11b0d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11b11:	89 c2                	mov    %eax,%edx
   11b13:	ec                   	in     (%dx),%al
   11b14:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11b17:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11b1b:	c9                   	leave  
   11b1c:	c3                   	ret    

00011b1d <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11b1d:	55                   	push   %ebp
   11b1e:	89 e5                	mov    %esp,%ebp
   11b20:	83 ec 08             	sub    $0x8,%esp
   11b23:	8b 55 08             	mov    0x8(%ebp),%edx
   11b26:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b29:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11b2d:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11b30:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11b34:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11b38:	ee                   	out    %al,(%dx)
}
   11b39:	90                   	nop
   11b3a:	c9                   	leave  
   11b3b:	c3                   	ret    

00011b3c <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值
#include "cpu/irq.h"
#define COM1_PORT 0x3f8

void log_init(void) {
   11b3c:	55                   	push   %ebp
   11b3d:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   11b3f:	6a 00                	push   $0x0
   11b41:	68 f9 03 00 00       	push   $0x3f9
   11b46:	e8 d2 ff ff ff       	call   11b1d <outb>
   11b4b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11b4e:	68 80 00 00 00       	push   $0x80
   11b53:	68 fb 03 00 00       	push   $0x3fb
   11b58:	e8 c0 ff ff ff       	call   11b1d <outb>
   11b5d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11b60:	6a 03                	push   $0x3
   11b62:	68 f8 03 00 00       	push   $0x3f8
   11b67:	e8 b1 ff ff ff       	call   11b1d <outb>
   11b6c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11b6f:	6a 00                	push   $0x0
   11b71:	68 f9 03 00 00       	push   $0x3f9
   11b76:	e8 a2 ff ff ff       	call   11b1d <outb>
   11b7b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11b7e:	6a 03                	push   $0x3
   11b80:	68 fb 03 00 00       	push   $0x3fb
   11b85:	e8 93 ff ff ff       	call   11b1d <outb>
   11b8a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11b8d:	68 c7 00 00 00       	push   $0xc7
   11b92:	68 fa 03 00 00       	push   $0x3fa
   11b97:	e8 81 ff ff ff       	call   11b1d <outb>
   11b9c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11b9f:	6a 0f                	push   $0xf
   11ba1:	68 fc 03 00 00       	push   $0x3fc
   11ba6:	e8 72 ff ff ff       	call   11b1d <outb>
   11bab:	83 c4 08             	add    $0x8,%esp

}
   11bae:	90                   	nop
   11baf:	c9                   	leave  
   11bb0:	c3                   	ret    

00011bb1 <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   11bb1:	55                   	push   %ebp
   11bb2:	89 e5                	mov    %esp,%ebp
   11bb4:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   11bba:	83 ec 04             	sub    $0x4,%esp
   11bbd:	68 80 00 00 00       	push   $0x80
   11bc2:	6a 00                	push   $0x0
   11bc4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11bca:	50                   	push   %eax
   11bcb:	e8 ad f9 ff ff       	call   1157d <kernel_memset>
   11bd0:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   11bd3:	8d 45 0c             	lea    0xc(%ebp),%eax
   11bd6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf,fmt,args);
   11bdc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   11be2:	83 ec 04             	sub    $0x4,%esp
   11be5:	50                   	push   %eax
   11be6:	ff 75 08             	pushl  0x8(%ebp)
   11be9:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11bef:	50                   	push   %eax
   11bf0:	e8 90 fb ff ff       	call   11785 <kernel_vsprintf>
   11bf5:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    irq_state_t state = irq_enter_protection();
   11bf8:	e8 fc f5 ff ff       	call   111f9 <irq_enter_protection>
   11bfd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    const char * p = str_buf;
   11c00:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11c06:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11c09:	eb 31                	jmp    11c3c <log_printf+0x8b>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   11c0b:	90                   	nop
   11c0c:	83 ec 0c             	sub    $0xc,%esp
   11c0f:	68 fd 03 00 00       	push   $0x3fd
   11c14:	e8 e7 fe ff ff       	call   11b00 <inb>
   11c19:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   11c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c1f:	8d 50 01             	lea    0x1(%eax),%edx
   11c22:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11c25:	0f b6 00             	movzbl (%eax),%eax
   11c28:	0f b6 c0             	movzbl %al,%eax
   11c2b:	83 ec 08             	sub    $0x8,%esp
   11c2e:	50                   	push   %eax
   11c2f:	68 f8 03 00 00       	push   $0x3f8
   11c34:	e8 e4 fe ff ff       	call   11b1d <outb>
   11c39:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11c3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c3f:	0f b6 00             	movzbl (%eax),%eax
   11c42:	84 c0                	test   %al,%al
   11c44:	75 c5                	jne    11c0b <log_printf+0x5a>
    }
// 变列
    outb(COM1_PORT,'\r');
   11c46:	83 ec 08             	sub    $0x8,%esp
   11c49:	6a 0d                	push   $0xd
   11c4b:	68 f8 03 00 00       	push   $0x3f8
   11c50:	e8 c8 fe ff ff       	call   11b1d <outb>
   11c55:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   11c58:	83 ec 08             	sub    $0x8,%esp
   11c5b:	6a 0a                	push   $0xa
   11c5d:	68 f8 03 00 00       	push   $0x3f8
   11c62:	e8 b6 fe ff ff       	call   11b1d <outb>
   11c67:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   11c6a:	83 ec 0c             	sub    $0xc,%esp
   11c6d:	ff 75 f0             	pushl  -0x10(%ebp)
   11c70:	e8 9c f5 ff ff       	call   11211 <irq_leave_protection>
   11c75:	83 c4 10             	add    $0x10,%esp
}
   11c78:	90                   	nop
   11c79:	c9                   	leave  
   11c7a:	c3                   	ret    
