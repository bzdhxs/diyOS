
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000000d8 memsz 0x00000ae0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000a00  000100e0  000100e0  000010d8  2**5
                  ALLOC
  2 .debug_line   000001d3  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002d8  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001ac  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00001730  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    00000214  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY
  8 .debug_frame  000000a0  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000100e0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cpu.c
000100e0 l     O .bss	00000a00 gdt_table
00000000 l    df *ABS*	00000000 init.c
000100c0 g     F .text	0000000b cpu_init
000100cb g     F .text	0000000d kernel_init
00010000 g       .text	00000000 _start
00010086 g     F .text	0000003a init_gdt
0001000b g     F .text	0000007b segment_desc_set



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 c2 00 00 00       	call   100cb <kernel_init>
   10009:	eb fe                	jmp    10009 <_start+0x9>

0001000b <segment_desc_set>:
#include "os_cfg.h"

static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   1000b:	55                   	push   %ebp
   1000c:	89 e5                	mov    %esp,%ebp
   1000e:	83 ec 14             	sub    $0x14,%esp
   10011:	8b 45 14             	mov    0x14(%ebp),%eax
   10014:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   10018:	8b 45 08             	mov    0x8(%ebp),%eax
   1001b:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10020:	f7 e2                	mul    %edx
   10022:	c1 ea 03             	shr    $0x3,%edx
   10025:	89 d0                	mov    %edx,%eax
   10027:	c1 e0 02             	shl    $0x2,%eax
   1002a:	01 d0                	add    %edx,%eax
   1002c:	01 c0                	add    %eax,%eax
   1002e:	05 e0 00 01 00       	add    $0x100e0,%eax
   10033:	89 45 fc             	mov    %eax,-0x4(%ebp)
    desc->limit15_0 = limit & 0xffff;
   10036:	8b 45 10             	mov    0x10(%ebp),%eax
   10039:	89 c2                	mov    %eax,%edx
   1003b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1003e:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10041:	8b 45 0c             	mov    0xc(%ebp),%eax
   10044:	89 c2                	mov    %eax,%edx
   10046:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10049:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1004d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10050:	c1 e8 10             	shr    $0x10,%eax
   10053:	89 c2                	mov    %eax,%edx
   10055:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10058:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1005b:	8b 45 10             	mov    0x10(%ebp),%eax
   1005e:	c1 e8 10             	shr    $0x10,%eax
   10061:	c1 e0 08             	shl    $0x8,%eax
   10064:	66 25 00 0f          	and    $0xf00,%ax
   10068:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1006c:	89 c2                	mov    %eax,%edx
   1006e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10071:	66 89 50 06          	mov    %dx,0x6(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10075:	8b 45 0c             	mov    0xc(%ebp),%eax
   10078:	c1 e8 18             	shr    $0x18,%eax
   1007b:	89 c2                	mov    %eax,%edx
   1007d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10080:	88 50 08             	mov    %dl,0x8(%eax)

}
   10083:	90                   	nop
   10084:	c9                   	leave  
   10085:	c3                   	ret    

00010086 <init_gdt>:

void init_gdt(void){
   10086:	55                   	push   %ebp
   10087:	89 e5                	mov    %esp,%ebp
   10089:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1008c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10093:	eb 1f                	jmp    100b4 <init_gdt+0x2e>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10095:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10098:	89 d0                	mov    %edx,%eax
   1009a:	c1 e0 02             	shl    $0x2,%eax
   1009d:	01 d0                	add    %edx,%eax
   1009f:	01 c0                	add    %eax,%eax
   100a1:	6a 00                	push   $0x0
   100a3:	6a 00                	push   $0x0
   100a5:	6a 00                	push   $0x0
   100a7:	50                   	push   %eax
   100a8:	e8 5e ff ff ff       	call   1000b <segment_desc_set>
   100ad:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   100b0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   100b4:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   100bb:	7e d8                	jle    10095 <init_gdt+0xf>
    }

}
   100bd:	90                   	nop
   100be:	c9                   	leave  
   100bf:	c3                   	ret    

000100c0 <cpu_init>:

void cpu_init (void){
   100c0:	55                   	push   %ebp
   100c1:	89 e5                	mov    %esp,%ebp

    // 初始化GDT表
    init_gdt();
   100c3:	e8 be ff ff ff       	call   10086 <init_gdt>

    
   100c8:	90                   	nop
   100c9:	5d                   	pop    %ebp
   100ca:	c3                   	ret    

000100cb <kernel_init>:


/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   100cb:	55                   	push   %ebp
   100cc:	89 e5                	mov    %esp,%ebp
   100ce:	83 ec 08             	sub    $0x8,%esp
    cpu_init();    
   100d1:	e8 ea ff ff ff       	call   100c0 <cpu_init>
    for (;;) {}
   100d6:	eb fe                	jmp    100d6 <kernel_init+0xb>
