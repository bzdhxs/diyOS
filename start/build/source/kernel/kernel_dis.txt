
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002950 memsz 0x00007860 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002527  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000424  00012528  00012528  00003528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  0001294c  0001294c  0000394c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004f00  00012960  00012960  00003950  2**5
                  ALLOC
  4 .debug_line   000014ad  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003963  00000000  00000000  00004dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fd5  00000000  00000000  00008760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  00009738  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000dd5  00000000  00000000  000098d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000a6ad  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00001030  00000000  00000000  0000a6c0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012528 l    d  .rodata	00000000 .rodata
0001294c l    d  .data	00000000 .data
00012960 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102a5 l     F .text	0000000d down2
00012960 l     O .bss	00000028 paddr_alloc
000102b2 l     F .text	00000058 addr_alloc_init
0001030a l     F .text	00000067 addr_alloc_page
00010371 l     F .text	00000055 addr_free_page
0001042c l     F .text	00000037 total_mem_size
000125c8 l     O .rodata	0000000c __func__.2034
00000000 l    df *ABS*	00000000 task.c
0001052e l     F .text	0000001b list_node_init
00010549 l     F .text	0000000b list_node_next
00010554 l     F .text	0000000b list_count
0001055f l     F .text	0000000a list_first
00010569 l     F .text	00000007 hlt
00010570 l     F .text	00000017 write_tr
000129a0 l     O .bss	00000190 task_manager
00010587 l     F .text	00000114 tss_init
00012640 l     O .rodata	0000000a __func__.2116
000107ed l     F .text	0000000a idle_task_entry
00012b40 l     O .bss	00001000 idle_task_stack
00000000 l    df *ABS*	00000000 cpu.c
00010b4c l     F .text	00000028 lgdt
00010b74 l     F .text	0000001a far_jump
00013b40 l     O .bss	00000800 gdt_table
00014340 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00010d6c l     F .text	0000001d inb
00010d89 l     F .text	0000001f outb
00010da8 l     F .text	00000007 cli
00010daf l     F .text	00000007 sti
00010db6 l     F .text	00000028 lidt
00010dde l     F .text	00000007 hlt
00010de5 l     F .text	00000010 read_eflags
00010df5 l     F .text	0000000b write_eflags
00010e00 l     F .text	000000d9 dump_core_regs
00010ed9 l     F .text	0000003e do_default_handler
00014360 l     O .bss	00000400 idt_table
00011147 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
0001153e l     F .text	0000001f outb
00014760 l     O .bss	00000004 sys_tick
00011585 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00014780 l     O .bss	00001000 init_task_stack
00015780 l     O .bss	000000b4 init_task
00015834 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011721 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000118a8 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00011c35 l     F .text	00000007 hlt
0001294c l     O .data	00000004 num2ch.1929
00000000 l    df *ABS*	00000000 list.c
00012180 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001237a l     F .text	0000001d inb
00012397 l     F .text	0000001f outb
00015844 l     O .bss	00000014 mutex
00011a55 g     F .text	0000003e bitmap_get_bit
00011da8 g     F .text	0000004f kernel_memcpy
000108fc g     F .text	0000000a task_current
000114df g     F .text	0000000b irq_enable_global
00012218 g     F .text	00000064 list_insert_last
0001104b g     F .text	0000001c do_handler_segment_not_present
0001085a g     F .text	00000034 task_set_ready
00011b67 g     F .text	0000001b bitmap_is_set
00011df7 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
00010cc5 g     F .text	0000001e cpu_init
000123b6 g     F .text	0000009d log_init
00011666 g     F .text	000000bb init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00011c3c g     F .text	00000047 kernel_strcpy
000113c2 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010fa3 g     F .text	0000001c do_handler_overflow
000110d7 g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00011083 g     F .text	0000001c do_handler_general_protection
000119c3 g     F .text	00000029 sem_count
00010f33 g     F .text	0000001c do_handler_divider
00011a93 g     F .text	000000d4 bitmap_set_bit
00011013 g     F .text	0000001c do_handler_double_fault
0001162d g     F .text	00000039 init_task_entry
0001109f g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
000114ea g     F .text	0000002b pic_send_eoi
000107e3 g     F .text	0000000a task_first_task
000118d6 g     F .text	0000006b sem_wait
0001155d g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
0001112b g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00015860 g     O .bss	00002000 stack
00010af5 g     F .text	00000057 sys_sleep
000100e2 g       .text	00000000 exception_handler_bound_range
00011941 g     F .text	00000082 sem_notify
00010fdb g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
000110bb g     F .text	0000001c do_handler_fpu_error
000107a6 g     F .text	0000003d task_first_init
000110f3 g     F .text	0000001c do_handler_machine_check
00010f4f g     F .text	0000001c do_handler_Debug
000103c6 g     F .text	00000066 show_mem_info
000121b8 g     F .text	00000060 list_insert_first
00010ad5 g     F .text	00000020 task_set_wakeup
00010f6b g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00011c83 g     F .text	00000070 kernel_strncpy
000114d4 g     F .text	0000000b irq_disable_global
00010961 g     F .text	00000061 sys_sched_yield
00017860 g       .bss	00000000 mem_free_start
000115fd g     F .text	00000030 kernel_init
000118b3 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00011fff g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
0001175a g     F .text	00000091 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
0001102f g     F .text	0000001c do_handler_invalid_tss
00010a9b g     F .text	0000003a task_set_sleep
0001214a g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00011388 g     F .text	0000003a irq_install
00010c11 g     F .text	0000006d init_gdt
00011515 g     F .text	00000018 irq_enter_protection
0001172c g     F .text	0000002e mutex_init
0001144d g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
000119ec g     F .text	00000016 bitmap_byte_count
00010ff7 g     F .text	0000001c do_handler_device_unavailable
00010906 g     F .text	0000005b task_dispatch
00010d58 g     F .text	00000014 switch_to_tss
000108b9 g     F .text	00000043 task_next_run
00011e38 g     F .text	00000064 kernel_memcmp
00012193 g     F .text	00000025 list_init
0001110f g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
0001088e g     F .text	0000002b task_set_block
00010f17 g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
0001069b g     F .text	0000001e task_switch_from_to
000111da g     F .text	000001ae irq_init
000117eb g     F .text	000000bd mutex_unlock
0001152d g     F .text	00000011 irq_leave_protection
00011d6d g     F .text	0000003b kernel_strlen
00010b8e g     F .text	00000083 segment_desc_set
00010fbf g     F .text	0000001c do_handler_bound_range
0001227c g     F .text	00000079 list_remove_first
00011cf3 g     F .text	0000007a kernel_strncmp
00011a02 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00011b82 g     F .text	000000b3 bitmap_alloc_nbits
000107f7 g     F .text	00000063 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
000109c2 g     F .text	000000d9 task_time_tick
00010463 g     F .text	000000cb memory_init
00011067 g     F .text	0000001c do_handler_stack_segment_fault
00010f87 g     F .text	0000001c do_handler_breakpoint
00012453 g     F .text	000000d4 log_printf
000106b9 g     F .text	000000ed task_init
00011e9c g     F .text	00000024 kernel_sprintf
00010ce3 g     F .text	00000075 gdt_alloc_desc
00011ec0 g     F .text	0000013f kernel_itoa
000122f5 g     F .text	00000085 list_remove
00010c7e g     F .text	00000047 gate_desc_set
000115e5 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 f4 15 00 00       	call   115fd <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 60 78 01 00       	mov    $0x17860,%esp
    jmp init_main
   10023:	e9 3e 16 00 00       	jmp    11666 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 de 0e 00 00       	call   10f17 <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 db 0e 00 00       	call   10f33 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 d8 0e 00 00       	call   10f4f <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 d5 0e 00 00       	call   10f6b <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 d2 0e 00 00       	call   10f87 <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 cf 0e 00 00       	call   10fa3 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 cc 0e 00 00       	call   10fbf <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 c9 0e 00 00       	call   10fdb <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 c6 0e 00 00       	call   10ff7 <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 c5 0e 00 00       	call   11013 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 c4 0e 00 00       	call   1102f <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 c3 0e 00 00       	call   1104b <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 c2 0e 00 00       	call   11067 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 c1 0e 00 00       	call   11083 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 c0 0e 00 00       	call   1109f <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 bd 0e 00 00       	call   110bb <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 bc 0e 00 00       	call   110d7 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 b9 0e 00 00       	call   110f3 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 b6 0e 00 00       	call   1110f <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 b3 0e 00 00       	call   1112b <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 c6 12 00 00       	call   1155d <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <down2>:
#define KLIB_H
#include "comm/types.h"
#include "stdarg.h"

static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ab:	f7 d8                	neg    %eax
   102ad:	23 45 08             	and    0x8(%ebp),%eax
}
   102b0:	5d                   	pop    %ebp
   102b1:	c3                   	ret    

000102b2 <addr_alloc_init>:
#include "tools/log.h"
#include "tools/klib.h"

static addr_alloc_t paddr_alloc;
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start, uint32_t size, uint32_t page_size)
{
   102b2:	55                   	push   %ebp
   102b3:	89 e5                	mov    %esp,%ebp
   102b5:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	83 ec 0c             	sub    $0xc,%esp
   102be:	50                   	push   %eax
   102bf:	e8 68 14 00 00       	call   1172c <mutex_init>
   102c4:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   102c7:	8b 45 08             	mov    0x8(%ebp),%eax
   102ca:	8b 55 10             	mov    0x10(%ebp),%edx
   102cd:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   102d0:	8b 45 08             	mov    0x8(%ebp),%eax
   102d3:	8b 55 14             	mov    0x14(%ebp),%edx
   102d6:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   102d9:	8b 45 08             	mov    0x8(%ebp),%eax
   102dc:	8b 55 18             	mov    0x18(%ebp),%edx
   102df:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   102e2:	8b 45 08             	mov    0x8(%ebp),%eax
   102e5:	8b 40 20             	mov    0x20(%eax),%eax
   102e8:	ba 00 00 00 00       	mov    $0x0,%edx
   102ed:	f7 75 18             	divl   0x18(%ebp)
   102f0:	89 c2                	mov    %eax,%edx
   102f2:	8b 45 08             	mov    0x8(%ebp),%eax
   102f5:	83 c0 14             	add    $0x14,%eax
   102f8:	6a 00                	push   $0x0
   102fa:	52                   	push   %edx
   102fb:	ff 75 0c             	pushl  0xc(%ebp)
   102fe:	50                   	push   %eax
   102ff:	e8 fe 16 00 00       	call   11a02 <bitmap_init>
   10304:	83 c4 10             	add    $0x10,%esp
}
   10307:	90                   	nop
   10308:	c9                   	leave  
   10309:	c3                   	ret    

0001030a <addr_alloc_page>:

static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   1030a:	55                   	push   %ebp
   1030b:	89 e5                	mov    %esp,%ebp
   1030d:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10310:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&alloc->mutex);
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	83 ec 0c             	sub    $0xc,%esp
   1031d:	50                   	push   %eax
   1031e:	e8 37 14 00 00       	call   1175a <mutex_lock>
   10323:	83 c4 10             	add    $0x10,%esp
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10326:	8b 45 08             	mov    0x8(%ebp),%eax
   10329:	83 c0 14             	add    $0x14,%eax
   1032c:	83 ec 04             	sub    $0x4,%esp
   1032f:	ff 75 0c             	pushl  0xc(%ebp)
   10332:	6a 00                	push   $0x0
   10334:	50                   	push   %eax
   10335:	e8 48 18 00 00       	call   11b82 <bitmap_alloc_nbits>
   1033a:	83 c4 10             	add    $0x10,%esp
   1033d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10340:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10344:	78 17                	js     1035d <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 50 1c             	mov    0x1c(%eax),%edx
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	8b 48 24             	mov    0x24(%eax),%ecx
   10352:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10355:	0f af c1             	imul   %ecx,%eax
   10358:	01 d0                	add    %edx,%eax
   1035a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&alloc->mutex);
   1035d:	8b 45 08             	mov    0x8(%ebp),%eax
   10360:	83 ec 0c             	sub    $0xc,%esp
   10363:	50                   	push   %eax
   10364:	e8 82 14 00 00       	call   117eb <mutex_unlock>
   10369:	83 c4 10             	add    $0x10,%esp
    return addr;
   1036c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1036f:	c9                   	leave  
   10370:	c3                   	ret    

00010371 <addr_free_page>:
static uint32_t addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   10371:	55                   	push   %ebp
   10372:	89 e5                	mov    %esp,%ebp
   10374:	53                   	push   %ebx
   10375:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   10378:	8b 45 08             	mov    0x8(%ebp),%eax
   1037b:	83 ec 0c             	sub    $0xc,%esp
   1037e:	50                   	push   %eax
   1037f:	e8 d6 13 00 00       	call   1175a <mutex_lock>
   10384:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10387:	8b 45 08             	mov    0x8(%ebp),%eax
   1038a:	8b 40 1c             	mov    0x1c(%eax),%eax
   1038d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10390:	89 d1                	mov    %edx,%ecx
   10392:	29 c1                	sub    %eax,%ecx
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 58 24             	mov    0x24(%eax),%ebx
   1039a:	89 c8                	mov    %ecx,%eax
   1039c:	ba 00 00 00 00       	mov    $0x0,%edx
   103a1:	f7 f3                	div    %ebx
   103a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   103a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103a9:	8b 55 08             	mov    0x8(%ebp),%edx
   103ac:	83 c2 14             	add    $0x14,%edx
   103af:	6a 00                	push   $0x0
   103b1:	ff 75 10             	pushl  0x10(%ebp)
   103b4:	50                   	push   %eax
   103b5:	52                   	push   %edx
   103b6:	e8 d8 16 00 00       	call   11a93 <bitmap_set_bit>
   103bb:	83 c4 10             	add    $0x10,%esp
    return addr;
   103be:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   103c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103c4:	c9                   	leave  
   103c5:	c3                   	ret    

000103c6 <show_mem_info>:

void show_mem_info(boot_info_t *boot_info)
{
   103c6:	55                   	push   %ebp
   103c7:	89 e5                	mov    %esp,%ebp
   103c9:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   103cc:	83 ec 0c             	sub    $0xc,%esp
   103cf:	68 28 25 01 00       	push   $0x12528
   103d4:	e8 7a 20 00 00       	call   12453 <log_printf>
   103d9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   103dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   103e3:	eb 29                	jmp    1040e <show_mem_info+0x48>
    {
        log_printf("[%d]: 0x%x - 0x%x", i,
   103e5:	8b 45 08             	mov    0x8(%ebp),%eax
   103e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103eb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   103ef:	8b 45 08             	mov    0x8(%ebp),%eax
   103f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   103f5:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   103f8:	52                   	push   %edx
   103f9:	50                   	push   %eax
   103fa:	ff 75 f4             	pushl  -0xc(%ebp)
   103fd:	68 34 25 01 00       	push   $0x12534
   10402:	e8 4c 20 00 00       	call   12453 <log_printf>
   10407:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1040a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1040e:	8b 45 08             	mov    0x8(%ebp),%eax
   10411:	8b 40 50             	mov    0x50(%eax),%eax
   10414:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10417:	7c cc                	jl     103e5 <show_mem_info+0x1f>
                   boot_info->ram_region_cfg[i].start,
                   boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   10419:	83 ec 0c             	sub    $0xc,%esp
   1041c:	68 46 25 01 00       	push   $0x12546
   10421:	e8 2d 20 00 00       	call   12453 <log_printf>
   10426:	83 c4 10             	add    $0x10,%esp
}
   10429:	90                   	nop
   1042a:	c9                   	leave  
   1042b:	c3                   	ret    

0001042c <total_mem_size>:

static uint32_t total_mem_size(boot_info_t *boot_info)
{
   1042c:	55                   	push   %ebp
   1042d:	89 e5                	mov    %esp,%ebp
   1042f:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10432:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10439:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10440:	eb 11                	jmp    10453 <total_mem_size+0x27>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   10442:	8b 45 08             	mov    0x8(%ebp),%eax
   10445:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10448:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1044c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1044f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10453:	8b 45 08             	mov    0x8(%ebp),%eax
   10456:	8b 40 50             	mov    0x50(%eax),%eax
   10459:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1045c:	7c e4                	jl     10442 <total_mem_size+0x16>
    }
    return mem_size;
   1045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10461:	c9                   	leave  
   10462:	c3                   	ret    

00010463 <memory_init>:

void memory_init(boot_info_t *boot_info)
{
   10463:	55                   	push   %ebp
   10464:	89 e5                	mov    %esp,%ebp
   10466:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    log_printf("mem init");
   10469:	83 ec 0c             	sub    $0xc,%esp
   1046c:	68 48 25 01 00       	push   $0x12548
   10471:	e8 dd 1f 00 00       	call   12453 <log_printf>
   10476:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10479:	83 ec 0c             	sub    $0xc,%esp
   1047c:	ff 75 08             	pushl  0x8(%ebp)
   1047f:	e8 42 ff ff ff       	call   103c6 <show_mem_info>
   10484:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10487:	c7 45 f4 60 78 01 00 	movl   $0x17860,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   1048e:	83 ec 0c             	sub    $0xc,%esp
   10491:	ff 75 08             	pushl  0x8(%ebp)
   10494:	e8 93 ff ff ff       	call   1042c <total_mem_size>
   10499:	83 c4 10             	add    $0x10,%esp
   1049c:	2d 00 00 10 00       	sub    $0x100000,%eax
   104a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   104a4:	83 ec 08             	sub    $0x8,%esp
   104a7:	68 00 10 00 00       	push   $0x1000
   104ac:	ff 75 f0             	pushl  -0x10(%ebp)
   104af:	e8 f1 fd ff ff       	call   102a5 <down2>
   104b4:	83 c4 10             	add    $0x10,%esp
   104b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory: 0x%x,size:0x%x", MEM_EXT_START, mem_up1MB_free);
   104ba:	83 ec 04             	sub    $0x4,%esp
   104bd:	ff 75 f0             	pushl  -0x10(%ebp)
   104c0:	68 00 00 10 00       	push   $0x100000
   104c5:	68 51 25 01 00       	push   $0x12551
   104ca:	e8 84 1f 00 00       	call   12453 <log_printf>
   104cf:	83 c4 10             	add    $0x10,%esp

    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   104d2:	83 ec 0c             	sub    $0xc,%esp
   104d5:	68 00 10 00 00       	push   $0x1000
   104da:	ff 75 f0             	pushl  -0x10(%ebp)
   104dd:	68 00 00 10 00       	push   $0x100000
   104e2:	ff 75 f4             	pushl  -0xc(%ebp)
   104e5:	68 60 29 01 00       	push   $0x12960
   104ea:	e8 c3 fd ff ff       	call   102b2 <addr_alloc_init>
   104ef:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   104f2:	a1 80 29 01 00       	mov    0x12980,%eax
   104f7:	c1 e8 0c             	shr    $0xc,%eax
   104fa:	83 ec 0c             	sub    $0xc,%esp
   104fd:	50                   	push   %eax
   104fe:	e8 e9 14 00 00       	call   119ec <bitmap_byte_count>
   10503:	83 c4 10             	add    $0x10,%esp
   10506:	01 45 f4             	add    %eax,-0xc(%ebp)
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10509:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10510:	76 19                	jbe    1052b <memory_init+0xc8>
   10512:	68 70 25 01 00       	push   $0x12570
   10517:	68 c8 25 01 00       	push   $0x125c8
   1051c:	6a 49                	push   $0x49
   1051e:	68 98 25 01 00       	push   $0x12598
   10523:	e8 22 1c 00 00       	call   1214a <panic>
   10528:	83 c4 10             	add    $0x10,%esp
   1052b:	90                   	nop
   1052c:	c9                   	leave  
   1052d:	c3                   	ret    

0001052e <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   1052e:	55                   	push   %ebp
   1052f:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10531:	8b 45 08             	mov    0x8(%ebp),%eax
   10534:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1053b:	8b 45 08             	mov    0x8(%ebp),%eax
   1053e:	8b 50 04             	mov    0x4(%eax),%edx
   10541:	8b 45 08             	mov    0x8(%ebp),%eax
   10544:	89 10                	mov    %edx,(%eax)
}
   10546:	90                   	nop
   10547:	5d                   	pop    %ebp
   10548:	c3                   	ret    

00010549 <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   10549:	55                   	push   %ebp
   1054a:	89 e5                	mov    %esp,%ebp
    return node->next;
   1054c:	8b 45 08             	mov    0x8(%ebp),%eax
   1054f:	8b 40 04             	mov    0x4(%eax),%eax
}
   10552:	5d                   	pop    %ebp
   10553:	c3                   	ret    

00010554 <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   10554:	55                   	push   %ebp
   10555:	89 e5                	mov    %esp,%ebp
    return list->count;
   10557:	8b 45 08             	mov    0x8(%ebp),%eax
   1055a:	8b 40 08             	mov    0x8(%eax),%eax
}
   1055d:	5d                   	pop    %ebp
   1055e:	c3                   	ret    

0001055f <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   1055f:	55                   	push   %ebp
   10560:	89 e5                	mov    %esp,%ebp
    return list->first;
   10562:	8b 45 08             	mov    0x8(%ebp),%eax
   10565:	8b 00                	mov    (%eax),%eax
}
   10567:	5d                   	pop    %ebp
   10568:	c3                   	ret    

00010569 <hlt>:
/**
 * @brief 当处理器执行到HLT指令时，它会停止执行并进入一个低功耗状态，直到外部事件唤醒处理器继续执行。
 *
 */
static inline void hlt(void)
{
   10569:	55                   	push   %ebp
   1056a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1056c:	f4                   	hlt    
}
   1056d:	90                   	nop
   1056e:	5d                   	pop    %ebp
   1056f:	c3                   	ret    

00010570 <write_tr>:

static inline void write_tr(uint16_t tss_sel)
{
   10570:	55                   	push   %ebp
   10571:	89 e5                	mov    %esp,%ebp
   10573:	83 ec 04             	sub    $0x4,%esp
   10576:	8b 45 08             	mov    0x8(%ebp),%eax
   10579:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_sel));
   1057d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10581:	0f 00 d8             	ltr    %ax
}
   10584:	90                   	nop
   10585:	c9                   	leave  
   10586:	c3                   	ret    

00010587 <tss_init>:
#include "comm/cpu_instr.h"
#include "cpu/irq.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   10587:	55                   	push   %ebp
   10588:	89 e5                	mov    %esp,%ebp
   1058a:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   1058d:	e8 51 07 00 00       	call   10ce3 <gdt_alloc_desc>
   10592:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   10595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10599:	79 1a                	jns    105b5 <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   1059b:	83 ec 0c             	sub    $0xc,%esp
   1059e:	68 d4 25 01 00       	push   $0x125d4
   105a3:	e8 ab 1e 00 00       	call   12453 <log_printf>
   105a8:	83 c4 10             	add    $0x10,%esp
        return -1;
   105ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   105b0:	e9 e4 00 00 00       	jmp    10699 <tss_init+0x112>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   105b5:	8b 45 08             	mov    0x8(%ebp),%eax
   105b8:	83 c0 48             	add    $0x48,%eax
   105bb:	68 89 00 00 00       	push   $0x89
   105c0:	6a 68                	push   $0x68
   105c2:	50                   	push   %eax
   105c3:	ff 75 f4             	pushl  -0xc(%ebp)
   105c6:	e8 c3 05 00 00       	call   10b8e <segment_desc_set>
   105cb:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   105ce:	8b 45 08             	mov    0x8(%ebp),%eax
   105d1:	83 c0 48             	add    $0x48,%eax
   105d4:	83 ec 04             	sub    $0x4,%esp
   105d7:	6a 68                	push   $0x68
   105d9:	6a 00                	push   $0x0
   105db:	50                   	push   %eax
   105dc:	e8 16 18 00 00       	call   11df7 <kernel_memset>
   105e1:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   105e4:	8b 45 08             	mov    0x8(%ebp),%eax
   105e7:	8b 55 0c             	mov    0xc(%ebp),%edx
   105ea:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   105ed:	8b 45 08             	mov    0x8(%ebp),%eax
   105f0:	8b 55 10             	mov    0x10(%ebp),%edx
   105f3:	89 50 4c             	mov    %edx,0x4c(%eax)
   105f6:	8b 45 08             	mov    0x8(%ebp),%eax
   105f9:	8b 50 4c             	mov    0x4c(%eax),%edx
   105fc:	8b 45 08             	mov    0x8(%ebp),%eax
   105ff:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10605:	8b 45 08             	mov    0x8(%ebp),%eax
   10608:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   1060f:	8b 45 08             	mov    0x8(%ebp),%eax
   10612:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   10619:	8b 45 08             	mov    0x8(%ebp),%eax
   1061c:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   10623:	00 00 00 
   10626:	8b 45 08             	mov    0x8(%ebp),%eax
   10629:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   1062f:	8b 45 08             	mov    0x8(%ebp),%eax
   10632:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10638:	8b 45 08             	mov    0x8(%ebp),%eax
   1063b:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10641:	8b 45 08             	mov    0x8(%ebp),%eax
   10644:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   1064a:	8b 45 08             	mov    0x8(%ebp),%eax
   1064d:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10653:	8b 45 08             	mov    0x8(%ebp),%eax
   10656:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   1065c:	8b 45 08             	mov    0x8(%ebp),%eax
   1065f:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   10665:	8b 45 08             	mov    0x8(%ebp),%eax
   10668:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   1066e:	8b 45 08             	mov    0x8(%ebp),%eax
   10671:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10678:	00 00 00 
    task->tss.iomap = 0;
   1067b:	8b 45 08             	mov    0x8(%ebp),%eax
   1067e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
   10685:	00 00 00 

    task->tss_sel = tss_sel;
   10688:	8b 45 08             	mov    0x8(%ebp),%eax
   1068b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1068e:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10694:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10699:	c9                   	leave  
   1069a:	c3                   	ret    

0001069b <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   1069b:	55                   	push   %ebp
   1069c:	89 e5                	mov    %esp,%ebp
   1069e:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   106a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   106a4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   106aa:	83 ec 0c             	sub    $0xc,%esp
   106ad:	50                   	push   %eax
   106ae:	e8 a5 06 00 00       	call   10d58 <switch_to_tss>
   106b3:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   106b6:	90                   	nop
   106b7:	c9                   	leave  
   106b8:	c3                   	ret    

000106b9 <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   106b9:	55                   	push   %ebp
   106ba:	89 e5                	mov    %esp,%ebp
   106bc:	83 ec 18             	sub    $0x18,%esp

    ASSERT(task != (task_t*)0);
   106bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   106c3:	75 19                	jne    106de <task_init+0x25>
   106c5:	68 e7 25 01 00       	push   $0x125e7
   106ca:	68 40 26 01 00       	push   $0x12640
   106cf:	6a 38                	push   $0x38
   106d1:	68 fc 25 01 00       	push   $0x125fc
   106d6:	e8 6f 1a 00 00       	call   1214a <panic>
   106db:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   106de:	83 ec 04             	sub    $0x4,%esp
   106e1:	ff 75 14             	pushl  0x14(%ebp)
   106e4:	ff 75 10             	pushl  0x10(%ebp)
   106e7:	ff 75 08             	pushl  0x8(%ebp)
   106ea:	e8 98 fe ff ff       	call   10587 <tss_init>
   106ef:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   106f2:	8b 45 08             	mov    0x8(%ebp),%eax
   106f5:	83 c0 10             	add    $0x10,%eax
   106f8:	83 ec 04             	sub    $0x4,%esp
   106fb:	6a 20                	push   $0x20
   106fd:	ff 75 0c             	pushl  0xc(%ebp)
   10700:	50                   	push   %eax
   10701:	e8 7d 15 00 00       	call   11c83 <kernel_strncpy>
   10706:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10709:	8b 45 08             	mov    0x8(%ebp),%eax
   1070c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   10712:	8b 45 08             	mov    0x8(%ebp),%eax
   10715:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1071c:	8b 45 08             	mov    0x8(%ebp),%eax
   1071f:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   10726:	8b 45 08             	mov    0x8(%ebp),%eax
   10729:	8b 50 08             	mov    0x8(%eax),%edx
   1072c:	8b 45 08             	mov    0x8(%ebp),%eax
   1072f:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   10732:	8b 45 08             	mov    0x8(%ebp),%eax
   10735:	83 c0 40             	add    $0x40,%eax
   10738:	83 ec 0c             	sub    $0xc,%esp
   1073b:	50                   	push   %eax
   1073c:	e8 ed fd ff ff       	call   1052e <list_node_init>
   10741:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10744:	8b 45 08             	mov    0x8(%ebp),%eax
   10747:	83 c0 30             	add    $0x30,%eax
   1074a:	83 ec 0c             	sub    $0xc,%esp
   1074d:	50                   	push   %eax
   1074e:	e8 db fd ff ff       	call   1052e <list_node_init>
   10753:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10756:	8b 45 08             	mov    0x8(%ebp),%eax
   10759:	83 c0 38             	add    $0x38,%eax
   1075c:	83 ec 0c             	sub    $0xc,%esp
   1075f:	50                   	push   %eax
   10760:	e8 c9 fd ff ff       	call   1052e <list_node_init>
   10765:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10768:	e8 a8 0d 00 00       	call   11515 <irq_enter_protection>
   1076d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10770:	83 ec 0c             	sub    $0xc,%esp
   10773:	ff 75 08             	pushl  0x8(%ebp)
   10776:	e8 df 00 00 00       	call   1085a <task_set_ready>
   1077b:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   1077e:	8b 45 08             	mov    0x8(%ebp),%eax
   10781:	83 c0 40             	add    $0x40,%eax
   10784:	83 ec 08             	sub    $0x8,%esp
   10787:	50                   	push   %eax
   10788:	68 b0 29 01 00       	push   $0x129b0
   1078d:	e8 86 1a 00 00       	call   12218 <list_insert_last>
   10792:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10795:	83 ec 0c             	sub    $0xc,%esp
   10798:	ff 75 f4             	pushl  -0xc(%ebp)
   1079b:	e8 8d 0d 00 00       	call   1152d <irq_leave_protection>
   107a0:	83 c4 10             	add    $0x10,%esp
}
   107a3:	90                   	nop
   107a4:	c9                   	leave  
   107a5:	c3                   	ret    

000107a6 <task_first_init>:

void task_first_init (void) {
   107a6:	55                   	push   %ebp
   107a7:	89 e5                	mov    %esp,%ebp
   107a9:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   107ac:	6a 00                	push   $0x0
   107ae:	6a 00                	push   $0x0
   107b0:	68 29 26 01 00       	push   $0x12629
   107b5:	68 c8 29 01 00       	push   $0x129c8
   107ba:	e8 fa fe ff ff       	call   106b9 <task_init>
   107bf:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   107c2:	a1 78 2a 01 00       	mov    0x12a78,%eax
   107c7:	0f b7 c0             	movzwl %ax,%eax
   107ca:	83 ec 0c             	sub    $0xc,%esp
   107cd:	50                   	push   %eax
   107ce:	e8 9d fd ff ff       	call   10570 <write_tr>
   107d3:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   107d6:	c7 05 a0 29 01 00 c8 	movl   $0x129c8,0x129a0
   107dd:	29 01 00 
}
   107e0:	90                   	nop
   107e1:	c9                   	leave  
   107e2:	c3                   	ret    

000107e3 <task_first_task>:

task_t * task_first_task (void) {
   107e3:	55                   	push   %ebp
   107e4:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   107e6:	b8 c8 29 01 00       	mov    $0x129c8,%eax
}
   107eb:	5d                   	pop    %ebp
   107ec:	c3                   	ret    

000107ed <idle_task_entry>:

static void idle_task_entry (void) {
   107ed:	55                   	push   %ebp
   107ee:	89 e5                	mov    %esp,%ebp
    for(;;) {
        hlt();
   107f0:	e8 74 fd ff ff       	call   10569 <hlt>
   107f5:	eb f9                	jmp    107f0 <idle_task_entry+0x3>

000107f7 <task_manager_init>:
    }
}
static uint32_t idle_task_stack[IDLE_TASK_SIZE];

void task_manager_init (void) {
   107f7:	55                   	push   %ebp
   107f8:	89 e5                	mov    %esp,%ebp
   107fa:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   107fd:	83 ec 0c             	sub    $0xc,%esp
   10800:	68 a4 29 01 00       	push   $0x129a4
   10805:	e8 89 19 00 00       	call   12193 <list_init>
   1080a:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1080d:	83 ec 0c             	sub    $0xc,%esp
   10810:	68 b0 29 01 00       	push   $0x129b0
   10815:	e8 79 19 00 00       	call   12193 <list_init>
   1081a:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1081d:	83 ec 0c             	sub    $0xc,%esp
   10820:	68 bc 29 01 00       	push   $0x129bc
   10825:	e8 69 19 00 00       	call   12193 <list_init>
   1082a:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   1082d:	c7 05 a0 29 01 00 00 	movl   $0x0,0x129a0
   10834:	00 00 00 

    task_init(&task_manager.idle_task,
        "idle_task",
        (uint32_t)idle_task_entry,
        (uint32_t)(idle_task_stack + IDLE_TASK_SIZE)
   10837:	b8 40 3b 01 00       	mov    $0x13b40,%eax
    task_init(&task_manager.idle_task,
   1083c:	89 c2                	mov    %eax,%edx
   1083e:	b8 ed 07 01 00       	mov    $0x107ed,%eax
   10843:	52                   	push   %edx
   10844:	50                   	push   %eax
   10845:	68 34 26 01 00       	push   $0x12634
   1084a:	68 7c 2a 01 00       	push   $0x12a7c
   1084f:	e8 65 fe ff ff       	call   106b9 <task_init>
   10854:	83 c4 10             	add    $0x10,%esp
    );


}
   10857:	90                   	nop
   10858:	c9                   	leave  
   10859:	c3                   	ret    

0001085a <task_set_ready>:

void task_set_ready(task_t * task) {
   1085a:	55                   	push   %ebp
   1085b:	89 e5                	mov    %esp,%ebp
   1085d:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10860:	81 7d 08 7c 2a 01 00 	cmpl   $0x12a7c,0x8(%ebp)
   10867:	74 22                	je     1088b <task_set_ready+0x31>
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   10869:	8b 45 08             	mov    0x8(%ebp),%eax
   1086c:	83 c0 30             	add    $0x30,%eax
   1086f:	83 ec 08             	sub    $0x8,%esp
   10872:	50                   	push   %eax
   10873:	68 a4 29 01 00       	push   $0x129a4
   10878:	e8 9b 19 00 00       	call   12218 <list_insert_last>
   1087d:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10880:	8b 45 08             	mov    0x8(%ebp),%eax
   10883:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10889:	eb 01                	jmp    1088c <task_set_ready+0x32>
        return;
   1088b:	90                   	nop
}
   1088c:	c9                   	leave  
   1088d:	c3                   	ret    

0001088e <task_set_block>:

void task_set_block(task_t * task) {
   1088e:	55                   	push   %ebp
   1088f:	89 e5                	mov    %esp,%ebp
   10891:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10894:	81 7d 08 7c 2a 01 00 	cmpl   $0x12a7c,0x8(%ebp)
   1089b:	74 19                	je     108b6 <task_set_block+0x28>
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   1089d:	8b 45 08             	mov    0x8(%ebp),%eax
   108a0:	83 c0 30             	add    $0x30,%eax
   108a3:	83 ec 08             	sub    $0x8,%esp
   108a6:	50                   	push   %eax
   108a7:	68 a4 29 01 00       	push   $0x129a4
   108ac:	e8 44 1a 00 00       	call   122f5 <list_remove>
   108b1:	83 c4 10             	add    $0x10,%esp
   108b4:	eb 01                	jmp    108b7 <task_set_block+0x29>
        return;
   108b6:	90                   	nop
}
   108b7:	c9                   	leave  
   108b8:	c3                   	ret    

000108b9 <task_next_run>:


task_t * task_next_run(void) {
   108b9:	55                   	push   %ebp
   108ba:	89 e5                	mov    %esp,%ebp
   108bc:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   108bf:	68 a4 29 01 00       	push   $0x129a4
   108c4:	e8 8b fc ff ff       	call   10554 <list_count>
   108c9:	83 c4 04             	add    $0x4,%esp
   108cc:	85 c0                	test   %eax,%eax
   108ce:	75 07                	jne    108d7 <task_next_run+0x1e>
        return &task_manager.idle_task;
   108d0:	b8 7c 2a 01 00       	mov    $0x12a7c,%eax
   108d5:	eb 23                	jmp    108fa <task_next_run+0x41>
    }
    list_node_t * task_node = list_first(&task_manager.ready_list);
   108d7:	68 a4 29 01 00       	push   $0x129a4
   108dc:	e8 7e fc ff ff       	call   1055f <list_first>
   108e1:	83 c4 04             	add    $0x4,%esp
   108e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   108e7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   108eb:	74 08                	je     108f5 <task_next_run+0x3c>
   108ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108f0:	83 e8 30             	sub    $0x30,%eax
   108f3:	eb 05                	jmp    108fa <task_next_run+0x41>
   108f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   108fa:	c9                   	leave  
   108fb:	c3                   	ret    

000108fc <task_current>:

task_t * task_current (void) {
   108fc:	55                   	push   %ebp
   108fd:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   108ff:	a1 a0 29 01 00       	mov    0x129a0,%eax
}
   10904:	5d                   	pop    %ebp
   10905:	c3                   	ret    

00010906 <task_dispatch>:


void task_dispatch(void) {
   10906:	55                   	push   %ebp
   10907:	89 e5                	mov    %esp,%ebp
   10909:	83 ec 18             	sub    $0x18,%esp


    irq_state_t state = irq_enter_protection();
   1090c:	e8 04 0c 00 00       	call   11515 <irq_enter_protection>
   10911:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * to = task_next_run();
   10914:	e8 a0 ff ff ff       	call   108b9 <task_next_run>
   10919:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( to != task_manager.curr_task) {
   1091c:	a1 a0 29 01 00       	mov    0x129a0,%eax
   10921:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10924:	74 2a                	je     10950 <task_dispatch+0x4a>
        task_t * from = task_current();
   10926:	e8 d1 ff ff ff       	call   108fc <task_current>
   1092b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   1092e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10931:	a3 a0 29 01 00       	mov    %eax,0x129a0
        to->state = TASK_RUNNING;
   10936:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10939:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from,to);
   1093f:	83 ec 08             	sub    $0x8,%esp
   10942:	ff 75 f0             	pushl  -0x10(%ebp)
   10945:	ff 75 ec             	pushl  -0x14(%ebp)
   10948:	e8 4e fd ff ff       	call   1069b <task_switch_from_to>
   1094d:	83 c4 10             	add    $0x10,%esp
    }


    irq_leave_protection(state);
   10950:	83 ec 0c             	sub    $0xc,%esp
   10953:	ff 75 f4             	pushl  -0xc(%ebp)
   10956:	e8 d2 0b 00 00       	call   1152d <irq_leave_protection>
   1095b:	83 c4 10             	add    $0x10,%esp

}
   1095e:	90                   	nop
   1095f:	c9                   	leave  
   10960:	c3                   	ret    

00010961 <sys_sched_yield>:

int sys_sched_yield(void) {
   10961:	55                   	push   %ebp
   10962:	89 e5                	mov    %esp,%ebp
   10964:	83 ec 18             	sub    $0x18,%esp
    
    irq_state_t state = irq_enter_protection();
   10967:	e8 a9 0b 00 00       	call   11515 <irq_enter_protection>
   1096c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&task_manager.ready_list) > 1) {
   1096f:	83 ec 0c             	sub    $0xc,%esp
   10972:	68 a4 29 01 00       	push   $0x129a4
   10977:	e8 d8 fb ff ff       	call   10554 <list_count>
   1097c:	83 c4 10             	add    $0x10,%esp
   1097f:	83 f8 01             	cmp    $0x1,%eax
   10982:	7e 29                	jle    109ad <sys_sched_yield+0x4c>
        task_t * curr_task = task_current();
   10984:	e8 73 ff ff ff       	call   108fc <task_current>
   10989:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   1098c:	83 ec 0c             	sub    $0xc,%esp
   1098f:	ff 75 f0             	pushl  -0x10(%ebp)
   10992:	e8 f7 fe ff ff       	call   1088e <task_set_block>
   10997:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1099a:	83 ec 0c             	sub    $0xc,%esp
   1099d:	ff 75 f0             	pushl  -0x10(%ebp)
   109a0:	e8 b5 fe ff ff       	call   1085a <task_set_ready>
   109a5:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   109a8:	e8 59 ff ff ff       	call   10906 <task_dispatch>
    }

    irq_leave_protection(state);
   109ad:	83 ec 0c             	sub    $0xc,%esp
   109b0:	ff 75 f4             	pushl  -0xc(%ebp)
   109b3:	e8 75 0b 00 00       	call   1152d <irq_leave_protection>
   109b8:	83 c4 10             	add    $0x10,%esp
    return 0;
   109bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   109c0:	c9                   	leave  
   109c1:	c3                   	ret    

000109c2 <task_time_tick>:

void task_time_tick(void) {
   109c2:	55                   	push   %ebp
   109c3:	89 e5                	mov    %esp,%ebp
   109c5:	83 ec 18             	sub    $0x18,%esp
    
    task_t * curr_task = task_current();
   109c8:	e8 2f ff ff ff       	call   108fc <task_current>
   109cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--curr_task->slice_ticks == 0) {
   109d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109d3:	8b 40 0c             	mov    0xc(%eax),%eax
   109d6:	8d 50 ff             	lea    -0x1(%eax),%edx
   109d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109dc:	89 50 0c             	mov    %edx,0xc(%eax)
   109df:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109e2:	8b 40 0c             	mov    0xc(%eax),%eax
   109e5:	85 c0                	test   %eax,%eax
   109e7:	75 2d                	jne    10a16 <task_time_tick+0x54>
        
        curr_task->slice_ticks = curr_task->time_ticks;
   109e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109ec:	8b 50 08             	mov    0x8(%eax),%edx
   109ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109f2:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(curr_task);
   109f5:	83 ec 0c             	sub    $0xc,%esp
   109f8:	ff 75 f0             	pushl  -0x10(%ebp)
   109fb:	e8 8e fe ff ff       	call   1088e <task_set_block>
   10a00:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);      
   10a03:	83 ec 0c             	sub    $0xc,%esp
   10a06:	ff 75 f0             	pushl  -0x10(%ebp)
   10a09:	e8 4c fe ff ff       	call   1085a <task_set_ready>
   10a0e:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10a11:	e8 f0 fe ff ff       	call   10906 <task_dispatch>
    }

    list_node_t * curr = list_first(&task_manager.sleep_list);
   10a16:	83 ec 0c             	sub    $0xc,%esp
   10a19:	68 bc 29 01 00       	push   $0x129bc
   10a1e:	e8 3c fb ff ff       	call   1055f <list_first>
   10a23:	83 c4 10             	add    $0x10,%esp
   10a26:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (curr) {
   10a29:	eb 62                	jmp    10a8d <task_time_tick+0xcb>
        list_node_t * next = list_node_next(curr);
   10a2b:	83 ec 0c             	sub    $0xc,%esp
   10a2e:	ff 75 f4             	pushl  -0xc(%ebp)
   10a31:	e8 13 fb ff ff       	call   10549 <list_node_next>
   10a36:	83 c4 10             	add    $0x10,%esp
   10a39:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   10a3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a40:	74 08                	je     10a4a <task_time_tick+0x88>
   10a42:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a45:	83 e8 30             	sub    $0x30,%eax
   10a48:	eb 05                	jmp    10a4f <task_time_tick+0x8d>
   10a4a:	b8 00 00 00 00       	mov    $0x0,%eax
   10a4f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) {
   10a52:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a55:	8b 40 04             	mov    0x4(%eax),%eax
   10a58:	8d 50 ff             	lea    -0x1(%eax),%edx
   10a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a5e:	89 50 04             	mov    %edx,0x4(%eax)
   10a61:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a64:	8b 40 04             	mov    0x4(%eax),%eax
   10a67:	85 c0                	test   %eax,%eax
   10a69:	75 1c                	jne    10a87 <task_time_tick+0xc5>
            task_set_wakeup(task);
   10a6b:	83 ec 0c             	sub    $0xc,%esp
   10a6e:	ff 75 e8             	pushl  -0x18(%ebp)
   10a71:	e8 5f 00 00 00       	call   10ad5 <task_set_wakeup>
   10a76:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10a79:	83 ec 0c             	sub    $0xc,%esp
   10a7c:	ff 75 e8             	pushl  -0x18(%ebp)
   10a7f:	e8 d6 fd ff ff       	call   1085a <task_set_ready>
   10a84:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   10a87:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10a8d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a91:	75 98                	jne    10a2b <task_time_tick+0x69>
    }

    task_dispatch();
   10a93:	e8 6e fe ff ff       	call   10906 <task_dispatch>
}
   10a98:	90                   	nop
   10a99:	c9                   	leave  
   10a9a:	c3                   	ret    

00010a9b <task_set_sleep>:




void task_set_sleep (task_t * task, uint32_t ticks) {
   10a9b:	55                   	push   %ebp
   10a9c:	89 e5                	mov    %esp,%ebp
   10a9e:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10aa1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10aa5:	74 2b                	je     10ad2 <task_set_sleep+0x37>
        return;
    }

    task->sleep_ticks = ticks;
   10aa7:	8b 55 0c             	mov    0xc(%ebp),%edx
   10aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   10aad:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   10ab0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab3:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last (&task_manager.sleep_list,&task->run_node);
   10ab9:	8b 45 08             	mov    0x8(%ebp),%eax
   10abc:	83 c0 30             	add    $0x30,%eax
   10abf:	83 ec 08             	sub    $0x8,%esp
   10ac2:	50                   	push   %eax
   10ac3:	68 bc 29 01 00       	push   $0x129bc
   10ac8:	e8 4b 17 00 00       	call   12218 <list_insert_last>
   10acd:	83 c4 10             	add    $0x10,%esp
   10ad0:	eb 01                	jmp    10ad3 <task_set_sleep+0x38>
        return;
   10ad2:	90                   	nop
}
   10ad3:	c9                   	leave  
   10ad4:	c3                   	ret    

00010ad5 <task_set_wakeup>:
void task_set_wakeup (task_t * task) {
   10ad5:	55                   	push   %ebp
   10ad6:	89 e5                	mov    %esp,%ebp
   10ad8:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   10adb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ade:	83 c0 30             	add    $0x30,%eax
   10ae1:	83 ec 08             	sub    $0x8,%esp
   10ae4:	50                   	push   %eax
   10ae5:	68 bc 29 01 00       	push   $0x129bc
   10aea:	e8 06 18 00 00       	call   122f5 <list_remove>
   10aef:	83 c4 10             	add    $0x10,%esp
}
   10af2:	90                   	nop
   10af3:	c9                   	leave  
   10af4:	c3                   	ret    

00010af5 <sys_sleep>:
void sys_sleep (uint32_t ms) {
   10af5:	55                   	push   %ebp
   10af6:	89 e5                	mov    %esp,%ebp
   10af8:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10afb:	e8 15 0a 00 00       	call   11515 <irq_enter_protection>
   10b00:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_set_block(task_manager.curr_task);
   10b03:	a1 a0 29 01 00       	mov    0x129a0,%eax
   10b08:	83 ec 0c             	sub    $0xc,%esp
   10b0b:	50                   	push   %eax
   10b0c:	e8 7d fd ff ff       	call   1088e <task_set_block>
   10b11:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task,(ms + OS_TICK_MS - 1)/OS_TICK_MS);
   10b14:	8b 45 08             	mov    0x8(%ebp),%eax
   10b17:	83 c0 09             	add    $0x9,%eax
   10b1a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10b1f:	f7 e2                	mul    %edx
   10b21:	c1 ea 03             	shr    $0x3,%edx
   10b24:	a1 a0 29 01 00       	mov    0x129a0,%eax
   10b29:	83 ec 08             	sub    $0x8,%esp
   10b2c:	52                   	push   %edx
   10b2d:	50                   	push   %eax
   10b2e:	e8 68 ff ff ff       	call   10a9b <task_set_sleep>
   10b33:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   10b36:	e8 cb fd ff ff       	call   10906 <task_dispatch>

    irq_leave_protection(state);
   10b3b:	83 ec 0c             	sub    $0xc,%esp
   10b3e:	ff 75 f4             	pushl  -0xc(%ebp)
   10b41:	e8 e7 09 00 00       	call   1152d <irq_leave_protection>
   10b46:	83 c4 10             	add    $0x10,%esp
}
   10b49:	90                   	nop
   10b4a:	c9                   	leave  
   10b4b:	c3                   	ret    

00010b4c <lgdt>:
{
   10b4c:	55                   	push   %ebp
   10b4d:	89 e5                	mov    %esp,%ebp
   10b4f:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   10b52:	8b 45 08             	mov    0x8(%ebp),%eax
   10b55:	c1 e8 10             	shr    $0x10,%eax
   10b58:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   10b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10b63:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b66:	83 e8 01             	sub    $0x1,%eax
   10b69:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   10b6d:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10b71:	90                   	nop
   10b72:	c9                   	leave  
   10b73:	c3                   	ret    

00010b74 <far_jump>:
{
   10b74:	55                   	push   %ebp
   10b75:	89 e5                	mov    %esp,%ebp
   10b77:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   10b7a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b7d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10b80:	8b 45 08             	mov    0x8(%ebp),%eax
   10b83:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   10b86:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10b89:	ff 28                	ljmp   *(%eax)
}
   10b8b:	90                   	nop
   10b8c:	c9                   	leave  
   10b8d:	c3                   	ret    

00010b8e <segment_desc_set>:
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

//  设置GDT表函数
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   10b8e:	55                   	push   %ebp
   10b8f:	89 e5                	mov    %esp,%ebp
   10b91:	83 ec 14             	sub    $0x14,%esp
   10b94:	8b 45 14             	mov    0x14(%ebp),%eax
   10b97:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10b9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9e:	83 e0 f8             	and    $0xfffffff8,%eax
   10ba1:	05 40 3b 01 00       	add    $0x13b40,%eax
   10ba6:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
    if (limit > 0xfffff)
   10ba9:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10bb0:	76 0f                	jbe    10bc1 <segment_desc_set+0x33>
    {
        attr |= SEG_G;
   10bb2:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10bb8:	8b 45 10             	mov    0x10(%ebp),%eax
   10bbb:	c1 e8 0c             	shr    $0xc,%eax
   10bbe:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   10bc1:	8b 45 10             	mov    0x10(%ebp),%eax
   10bc4:	89 c2                	mov    %eax,%edx
   10bc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10bc9:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10bcc:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bcf:	89 c2                	mov    %eax,%edx
   10bd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10bd4:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10bd8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bdb:	c1 e8 10             	shr    $0x10,%eax
   10bde:	89 c2                	mov    %eax,%edx
   10be0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10be3:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   10be6:	8b 45 10             	mov    0x10(%ebp),%eax
   10be9:	c1 e8 10             	shr    $0x10,%eax
   10bec:	c1 e0 08             	shl    $0x8,%eax
   10bef:	66 25 00 0f          	and    $0xf00,%ax
   10bf3:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10bf7:	89 c2                	mov    %eax,%edx
   10bf9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10bfc:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10c00:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c03:	c1 e8 18             	shr    $0x18,%eax
   10c06:	89 c2                	mov    %eax,%edx
   10c08:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c0b:	88 50 07             	mov    %dl,0x7(%eax)
}
   10c0e:	90                   	nop
   10c0f:	c9                   	leave  
   10c10:	c3                   	ret    

00010c11 <init_gdt>:

void init_gdt(void)
{
   10c11:	55                   	push   %ebp
   10c12:	89 e5                	mov    %esp,%ebp
   10c14:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10c17:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10c1e:	eb 19                	jmp    10c39 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10c20:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c23:	c1 e0 03             	shl    $0x3,%eax
   10c26:	6a 00                	push   $0x0
   10c28:	6a 00                	push   $0x0
   10c2a:	6a 00                	push   $0x0
   10c2c:	50                   	push   %eax
   10c2d:	e8 5c ff ff ff       	call   10b8e <segment_desc_set>
   10c32:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10c35:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10c39:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10c40:	7e de                	jle    10c20 <init_gdt+0xf>
    }

    // 设置GDT表中的CS段
    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10c42:	68 9a 40 00 00       	push   $0x409a
   10c47:	6a ff                	push   $0xffffffff
   10c49:	6a 00                	push   $0x0
   10c4b:	6a 08                	push   $0x8
   10c4d:	e8 3c ff ff ff       	call   10b8e <segment_desc_set>
   10c52:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10c55:	68 92 40 00 00       	push   $0x4092
   10c5a:	6a ff                	push   $0xffffffff
   10c5c:	6a 00                	push   $0x0
   10c5e:	6a 10                	push   $0x10
   10c60:	e8 29 ff ff ff       	call   10b8e <segment_desc_set>
   10c65:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10c68:	b8 40 3b 01 00       	mov    $0x13b40,%eax
   10c6d:	68 00 08 00 00       	push   $0x800
   10c72:	50                   	push   %eax
   10c73:	e8 d4 fe ff ff       	call   10b4c <lgdt>
   10c78:	83 c4 08             	add    $0x8,%esp
}
   10c7b:	90                   	nop
   10c7c:	c9                   	leave  
   10c7d:	c3                   	ret    

00010c7e <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   10c7e:	55                   	push   %ebp
   10c7f:	89 e5                	mov    %esp,%ebp
   10c81:	83 ec 08             	sub    $0x8,%esp
   10c84:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c87:	8b 45 14             	mov    0x14(%ebp),%eax
   10c8a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10c8e:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

    desc->offset15_0 = offset & 0xffff;
   10c92:	8b 45 10             	mov    0x10(%ebp),%eax
   10c95:	89 c2                	mov    %eax,%edx
   10c97:	8b 45 08             	mov    0x8(%ebp),%eax
   10c9a:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10c9d:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10ca4:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10ca8:	8b 45 08             	mov    0x8(%ebp),%eax
   10cab:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10caf:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10cb3:	8b 45 10             	mov    0x10(%ebp),%eax
   10cb6:	c1 e8 10             	shr    $0x10,%eax
   10cb9:	89 c2                	mov    %eax,%edx
   10cbb:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbe:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10cc2:	90                   	nop
   10cc3:	c9                   	leave  
   10cc4:	c3                   	ret    

00010cc5 <cpu_init>:

void cpu_init(void)
{
   10cc5:	55                   	push   %ebp
   10cc6:	89 e5                	mov    %esp,%ebp
   10cc8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   10ccb:	83 ec 0c             	sub    $0xc,%esp
   10cce:	68 40 43 01 00       	push   $0x14340
   10cd3:	e8 54 0a 00 00       	call   1172c <mutex_init>
   10cd8:	83 c4 10             	add    $0x10,%esp
    // 初始化GDT表
    init_gdt();
   10cdb:	e8 31 ff ff ff       	call   10c11 <init_gdt>
}
   10ce0:	90                   	nop
   10ce1:	c9                   	leave  
   10ce2:	c3                   	ret    

00010ce3 <gdt_alloc_desc>:

int gdt_alloc_desc()
{
   10ce3:	55                   	push   %ebp
   10ce4:	89 e5                	mov    %esp,%ebp
   10ce6:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);
   10ce9:	83 ec 0c             	sub    $0xc,%esp
   10cec:	68 40 43 01 00       	push   $0x14340
   10cf1:	e8 64 0a 00 00       	call   1175a <mutex_lock>
   10cf6:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10cf9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10d00:	eb 36                	jmp    10d38 <gdt_alloc_desc+0x55>
    {

        segment_desc_t *desc = gdt_table + i;
   10d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d05:	c1 e0 03             	shl    $0x3,%eax
   10d08:	05 40 3b 01 00       	add    $0x13b40,%eax
   10d0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0)
   10d10:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d13:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10d17:	66 85 c0             	test   %ax,%ax
   10d1a:	75 18                	jne    10d34 <gdt_alloc_desc+0x51>
        {
            mutex_unlock(&mutex);
   10d1c:	83 ec 0c             	sub    $0xc,%esp
   10d1f:	68 40 43 01 00       	push   $0x14340
   10d24:	e8 c2 0a 00 00       	call   117eb <mutex_unlock>
   10d29:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10d2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d2f:	c1 e0 03             	shl    $0x3,%eax
   10d32:	eb 22                	jmp    10d56 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10d34:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10d38:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10d3f:	7e c1                	jle    10d02 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);
   10d41:	83 ec 0c             	sub    $0xc,%esp
   10d44:	68 40 43 01 00       	push   $0x14340
   10d49:	e8 9d 0a 00 00       	call   117eb <mutex_unlock>
   10d4e:	83 c4 10             	add    $0x10,%esp
    return -1;
   10d51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d56:	c9                   	leave  
   10d57:	c3                   	ret    

00010d58 <switch_to_tss>:

void switch_to_tss(int tss_sel)
{
   10d58:	55                   	push   %ebp
   10d59:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10d5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d5e:	6a 00                	push   $0x0
   10d60:	50                   	push   %eax
   10d61:	e8 0e fe ff ff       	call   10b74 <far_jump>
   10d66:	83 c4 08             	add    $0x8,%esp
   10d69:	90                   	nop
   10d6a:	c9                   	leave  
   10d6b:	c3                   	ret    

00010d6c <inb>:
{
   10d6c:	55                   	push   %ebp
   10d6d:	89 e5                	mov    %esp,%ebp
   10d6f:	83 ec 14             	sub    $0x14,%esp
   10d72:	8b 45 08             	mov    0x8(%ebp),%eax
   10d75:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]" : [v] "=a"(rv) : [p] "d"(port));
   10d79:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10d7d:	89 c2                	mov    %eax,%edx
   10d7f:	ec                   	in     (%dx),%al
   10d80:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10d83:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10d87:	c9                   	leave  
   10d88:	c3                   	ret    

00010d89 <outb>:
{
   10d89:	55                   	push   %ebp
   10d8a:	89 e5                	mov    %esp,%ebp
   10d8c:	83 ec 08             	sub    $0x8,%esp
   10d8f:	8b 55 08             	mov    0x8(%ebp),%edx
   10d92:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d95:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10d99:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   10d9c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10da0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10da4:	ee                   	out    %al,(%dx)
}
   10da5:	90                   	nop
   10da6:	c9                   	leave  
   10da7:	c3                   	ret    

00010da8 <cli>:
{
   10da8:	55                   	push   %ebp
   10da9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   10dab:	fa                   	cli    
}
   10dac:	90                   	nop
   10dad:	5d                   	pop    %ebp
   10dae:	c3                   	ret    

00010daf <sti>:
{
   10daf:	55                   	push   %ebp
   10db0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   10db2:	fb                   	sti    
}
   10db3:	90                   	nop
   10db4:	5d                   	pop    %ebp
   10db5:	c3                   	ret    

00010db6 <lidt>:
{
   10db6:	55                   	push   %ebp
   10db7:	89 e5                	mov    %esp,%ebp
   10db9:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   10dbc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dbf:	c1 e8 10             	shr    $0x10,%eax
   10dc2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10dc6:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10dcd:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dd0:	83 e8 01             	sub    $0x1,%eax
   10dd3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   10dd7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10ddb:	90                   	nop
   10ddc:	c9                   	leave  
   10ddd:	c3                   	ret    

00010dde <hlt>:
{
   10dde:	55                   	push   %ebp
   10ddf:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10de1:	f4                   	hlt    
}
   10de2:	90                   	nop
   10de3:	5d                   	pop    %ebp
   10de4:	c3                   	ret    

00010de5 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   10de5:	55                   	push   %ebp
   10de6:	89 e5                	mov    %esp,%ebp
   10de8:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax" : "=a"(eflags));
   10deb:	9c                   	pushf  
   10dec:	58                   	pop    %eax
   10ded:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10df3:	c9                   	leave  
   10df4:	c3                   	ret    

00010df5 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   10df5:	55                   	push   %ebp
   10df6:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf" ::"a"(eflags));
   10df8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dfb:	50                   	push   %eax
   10dfc:	9d                   	popf   
}
   10dfd:	90                   	nop
   10dfe:	5d                   	pop    %ebp
   10dff:	c3                   	ret    

00010e00 <dump_core_regs>:

void exception_handler_unknown(void);

// 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t *frame)
{
   10e00:	55                   	push   %ebp
   10e01:	89 e5                	mov    %esp,%ebp
   10e03:	57                   	push   %edi
   10e04:	56                   	push   %esi
   10e05:	53                   	push   %ebx
   10e06:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d", frame->num, frame->error_code);
   10e09:	8b 45 08             	mov    0x8(%ebp),%eax
   10e0c:	8b 50 34             	mov    0x34(%eax),%edx
   10e0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e12:	8b 40 30             	mov    0x30(%eax),%eax
   10e15:	83 ec 04             	sub    $0x4,%esp
   10e18:	52                   	push   %edx
   10e19:	50                   	push   %eax
   10e1a:	68 4c 26 01 00       	push   $0x1264c
   10e1f:	e8 2f 16 00 00       	call   12453 <log_printf>
   10e24:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   10e27:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2a:	8b 38                	mov    (%eax),%edi
   10e2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2f:	8b 70 04             	mov    0x4(%eax),%esi
   10e32:	8b 45 08             	mov    0x8(%ebp),%eax
   10e35:	8b 58 0c             	mov    0xc(%eax),%ebx
   10e38:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3b:	8b 48 08             	mov    0x8(%eax),%ecx
   10e3e:	8b 45 08             	mov    0x8(%ebp),%eax
   10e41:	8b 50 0c             	mov    0xc(%eax),%edx
   10e44:	8b 45 08             	mov    0x8(%ebp),%eax
   10e47:	8b 40 3c             	mov    0x3c(%eax),%eax
   10e4a:	83 ec 04             	sub    $0x4,%esp
   10e4d:	57                   	push   %edi
   10e4e:	56                   	push   %esi
   10e4f:	53                   	push   %ebx
   10e50:	51                   	push   %ecx
   10e51:	52                   	push   %edx
   10e52:	50                   	push   %eax
   10e53:	68 64 26 01 00       	push   $0x12664
   10e58:	e8 f6 15 00 00       	call   12453 <log_printf>
   10e5d:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   10e60:	8b 45 08             	mov    0x8(%ebp),%eax
   10e63:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10e66:	8b 45 08             	mov    0x8(%ebp),%eax
   10e69:	8b 40 18             	mov    0x18(%eax),%eax
   10e6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10e6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e72:	8b 58 14             	mov    0x14(%eax),%ebx
   10e75:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10e78:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7b:	8b 78 10             	mov    0x10(%eax),%edi
   10e7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10e81:	8b 70 24             	mov    0x24(%eax),%esi
   10e84:	8b 45 08             	mov    0x8(%ebp),%eax
   10e87:	8b 58 28             	mov    0x28(%eax),%ebx
   10e8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8d:	8b 50 20             	mov    0x20(%eax),%edx
   10e90:	8b 45 08             	mov    0x8(%ebp),%eax
   10e93:	8b 40 2c             	mov    0x2c(%eax),%eax
   10e96:	83 ec 0c             	sub    $0xc,%esp
   10e99:	51                   	push   %ecx
   10e9a:	ff 75 e4             	pushl  -0x1c(%ebp)
   10e9d:	ff 75 e0             	pushl  -0x20(%ebp)
   10ea0:	57                   	push   %edi
   10ea1:	56                   	push   %esi
   10ea2:	53                   	push   %ebx
   10ea3:	52                   	push   %edx
   10ea4:	50                   	push   %eax
   10ea5:	68 90 26 01 00       	push   $0x12690
   10eaa:	e8 a4 15 00 00       	call   12453 <log_printf>
   10eaf:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10eb2:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb5:	8b 50 40             	mov    0x40(%eax),%edx
   10eb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebb:	8b 40 38             	mov    0x38(%eax),%eax
   10ebe:	83 ec 04             	sub    $0x4,%esp
   10ec1:	52                   	push   %edx
   10ec2:	50                   	push   %eax
   10ec3:	68 d9 26 01 00       	push   $0x126d9
   10ec8:	e8 86 15 00 00       	call   12453 <log_printf>
   10ecd:	83 c4 10             	add    $0x10,%esp
}
   10ed0:	90                   	nop
   10ed1:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10ed4:	5b                   	pop    %ebx
   10ed5:	5e                   	pop    %esi
   10ed6:	5f                   	pop    %edi
   10ed7:	5d                   	pop    %ebp
   10ed8:	c3                   	ret    

00010ed9 <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10ed9:	55                   	push   %ebp
   10eda:	89 e5                	mov    %esp,%ebp
   10edc:	83 ec 08             	sub    $0x8,%esp

    log_printf("----------------------------");
   10edf:	83 ec 0c             	sub    $0xc,%esp
   10ee2:	68 ef 26 01 00       	push   $0x126ef
   10ee7:	e8 67 15 00 00       	call   12453 <log_printf>
   10eec:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s", message);
   10eef:	83 ec 08             	sub    $0x8,%esp
   10ef2:	ff 75 0c             	pushl  0xc(%ebp)
   10ef5:	68 0c 27 01 00       	push   $0x1270c
   10efa:	e8 54 15 00 00       	call   12453 <log_printf>
   10eff:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10f02:	83 ec 0c             	sub    $0xc,%esp
   10f05:	ff 75 08             	pushl  0x8(%ebp)
   10f08:	e8 f3 fe ff ff       	call   10e00 <dump_core_regs>
   10f0d:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   10f10:	e8 c9 fe ff ff       	call   10dde <hlt>
   10f15:	eb f9                	jmp    10f10 <do_default_handler+0x37>

00010f17 <do_handler_unknown>:
    }
}

// 异常处理函数
void do_handler_unknown(exception_frame_t *frame)
{
   10f17:	55                   	push   %ebp
   10f18:	89 e5                	mov    %esp,%ebp
   10f1a:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame, "unknown exception");
   10f1d:	83 ec 08             	sub    $0x8,%esp
   10f20:	68 26 27 01 00       	push   $0x12726
   10f25:	ff 75 08             	pushl  0x8(%ebp)
   10f28:	e8 ac ff ff ff       	call   10ed9 <do_default_handler>
   10f2d:	83 c4 10             	add    $0x10,%esp
}
   10f30:	90                   	nop
   10f31:	c9                   	leave  
   10f32:	c3                   	ret    

00010f33 <do_handler_divider>:
void do_handler_divider(exception_frame_t *frame)
{
   10f33:	55                   	push   %ebp
   10f34:	89 e5                	mov    %esp,%ebp
   10f36:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divder exception");
   10f39:	83 ec 08             	sub    $0x8,%esp
   10f3c:	68 38 27 01 00       	push   $0x12738
   10f41:	ff 75 08             	pushl  0x8(%ebp)
   10f44:	e8 90 ff ff ff       	call   10ed9 <do_default_handler>
   10f49:	83 c4 10             	add    $0x10,%esp
}
   10f4c:	90                   	nop
   10f4d:	c9                   	leave  
   10f4e:	c3                   	ret    

00010f4f <do_handler_Debug>:
void do_handler_Debug(exception_frame_t *frame)
{
   10f4f:	55                   	push   %ebp
   10f50:	89 e5                	mov    %esp,%ebp
   10f52:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10f55:	83 ec 08             	sub    $0x8,%esp
   10f58:	68 49 27 01 00       	push   $0x12749
   10f5d:	ff 75 08             	pushl  0x8(%ebp)
   10f60:	e8 74 ff ff ff       	call   10ed9 <do_default_handler>
   10f65:	83 c4 10             	add    $0x10,%esp
}
   10f68:	90                   	nop
   10f69:	c9                   	leave  
   10f6a:	c3                   	ret    

00010f6b <do_handler_NMI>:
void do_handler_NMI(exception_frame_t *frame)
{
   10f6b:	55                   	push   %ebp
   10f6c:	89 e5                	mov    %esp,%ebp
   10f6e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10f71:	83 ec 08             	sub    $0x8,%esp
   10f74:	68 59 27 01 00       	push   $0x12759
   10f79:	ff 75 08             	pushl  0x8(%ebp)
   10f7c:	e8 58 ff ff ff       	call   10ed9 <do_default_handler>
   10f81:	83 c4 10             	add    $0x10,%esp
}
   10f84:	90                   	nop
   10f85:	c9                   	leave  
   10f86:	c3                   	ret    

00010f87 <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t *frame)
{
   10f87:	55                   	push   %ebp
   10f88:	89 e5                	mov    %esp,%ebp
   10f8a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10f8d:	83 ec 08             	sub    $0x8,%esp
   10f90:	68 68 27 01 00       	push   $0x12768
   10f95:	ff 75 08             	pushl  0x8(%ebp)
   10f98:	e8 3c ff ff ff       	call   10ed9 <do_default_handler>
   10f9d:	83 c4 10             	add    $0x10,%esp
}
   10fa0:	90                   	nop
   10fa1:	c9                   	leave  
   10fa2:	c3                   	ret    

00010fa3 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   10fa3:	55                   	push   %ebp
   10fa4:	89 e5                	mov    %esp,%ebp
   10fa6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10fa9:	83 ec 08             	sub    $0x8,%esp
   10fac:	68 74 27 01 00       	push   $0x12774
   10fb1:	ff 75 08             	pushl  0x8(%ebp)
   10fb4:	e8 20 ff ff ff       	call   10ed9 <do_default_handler>
   10fb9:	83 c4 10             	add    $0x10,%esp
}
   10fbc:	90                   	nop
   10fbd:	c9                   	leave  
   10fbe:	c3                   	ret    

00010fbf <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t *frame)
{
   10fbf:	55                   	push   %ebp
   10fc0:	89 e5                	mov    %esp,%ebp
   10fc2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10fc5:	83 ec 08             	sub    $0x8,%esp
   10fc8:	68 7e 27 01 00       	push   $0x1277e
   10fcd:	ff 75 08             	pushl  0x8(%ebp)
   10fd0:	e8 04 ff ff ff       	call   10ed9 <do_default_handler>
   10fd5:	83 c4 10             	add    $0x10,%esp
}
   10fd8:	90                   	nop
   10fd9:	c9                   	leave  
   10fda:	c3                   	ret    

00010fdb <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t *frame)
{
   10fdb:	55                   	push   %ebp
   10fdc:	89 e5                	mov    %esp,%ebp
   10fde:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10fe1:	83 ec 08             	sub    $0x8,%esp
   10fe4:	68 94 27 01 00       	push   $0x12794
   10fe9:	ff 75 08             	pushl  0x8(%ebp)
   10fec:	e8 e8 fe ff ff       	call   10ed9 <do_default_handler>
   10ff1:	83 c4 10             	add    $0x10,%esp
}
   10ff4:	90                   	nop
   10ff5:	c9                   	leave  
   10ff6:	c3                   	ret    

00010ff7 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t *frame)
{
   10ff7:	55                   	push   %ebp
   10ff8:	89 e5                	mov    %esp,%ebp
   10ffa:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10ffd:	83 ec 08             	sub    $0x8,%esp
   11000:	68 a4 27 01 00       	push   $0x127a4
   11005:	ff 75 08             	pushl  0x8(%ebp)
   11008:	e8 cc fe ff ff       	call   10ed9 <do_default_handler>
   1100d:	83 c4 10             	add    $0x10,%esp
}
   11010:	90                   	nop
   11011:	c9                   	leave  
   11012:	c3                   	ret    

00011013 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   11013:	55                   	push   %ebp
   11014:	89 e5                	mov    %esp,%ebp
   11016:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   11019:	83 ec 08             	sub    $0x8,%esp
   1101c:	68 ba 27 01 00       	push   $0x127ba
   11021:	ff 75 08             	pushl  0x8(%ebp)
   11024:	e8 b0 fe ff ff       	call   10ed9 <do_default_handler>
   11029:	83 c4 10             	add    $0x10,%esp
}
   1102c:	90                   	nop
   1102d:	c9                   	leave  
   1102e:	c3                   	ret    

0001102f <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   1102f:	55                   	push   %ebp
   11030:	89 e5                	mov    %esp,%ebp
   11032:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   11035:	83 ec 08             	sub    $0x8,%esp
   11038:	68 c8 27 01 00       	push   $0x127c8
   1103d:	ff 75 08             	pushl  0x8(%ebp)
   11040:	e8 94 fe ff ff       	call   10ed9 <do_default_handler>
   11045:	83 c4 10             	add    $0x10,%esp
}
   11048:	90                   	nop
   11049:	c9                   	leave  
   1104a:	c3                   	ret    

0001104b <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   1104b:	55                   	push   %ebp
   1104c:	89 e5                	mov    %esp,%ebp
   1104e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   11051:	83 ec 08             	sub    $0x8,%esp
   11054:	68 d4 27 01 00       	push   $0x127d4
   11059:	ff 75 08             	pushl  0x8(%ebp)
   1105c:	e8 78 fe ff ff       	call   10ed9 <do_default_handler>
   11061:	83 c4 10             	add    $0x10,%esp
}
   11064:	90                   	nop
   11065:	c9                   	leave  
   11066:	c3                   	ret    

00011067 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   11067:	55                   	push   %ebp
   11068:	89 e5                	mov    %esp,%ebp
   1106a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   1106d:	83 ec 08             	sub    $0x8,%esp
   11070:	68 e9 27 01 00       	push   $0x127e9
   11075:	ff 75 08             	pushl  0x8(%ebp)
   11078:	e8 5c fe ff ff       	call   10ed9 <do_default_handler>
   1107d:	83 c4 10             	add    $0x10,%esp
}
   11080:	90                   	nop
   11081:	c9                   	leave  
   11082:	c3                   	ret    

00011083 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   11083:	55                   	push   %ebp
   11084:	89 e5                	mov    %esp,%ebp
   11086:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   11089:	83 ec 08             	sub    $0x8,%esp
   1108c:	68 fe 27 01 00       	push   $0x127fe
   11091:	ff 75 08             	pushl  0x8(%ebp)
   11094:	e8 40 fe ff ff       	call   10ed9 <do_default_handler>
   11099:	83 c4 10             	add    $0x10,%esp
}
   1109c:	90                   	nop
   1109d:	c9                   	leave  
   1109e:	c3                   	ret    

0001109f <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   1109f:	55                   	push   %ebp
   110a0:	89 e5                	mov    %esp,%ebp
   110a2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   110a5:	83 ec 08             	sub    $0x8,%esp
   110a8:	68 12 28 01 00       	push   $0x12812
   110ad:	ff 75 08             	pushl  0x8(%ebp)
   110b0:	e8 24 fe ff ff       	call   10ed9 <do_default_handler>
   110b5:	83 c4 10             	add    $0x10,%esp
}
   110b8:	90                   	nop
   110b9:	c9                   	leave  
   110ba:	c3                   	ret    

000110bb <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t *frame)
{
   110bb:	55                   	push   %ebp
   110bc:	89 e5                	mov    %esp,%ebp
   110be:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   110c1:	83 ec 08             	sub    $0x8,%esp
   110c4:	68 1e 28 01 00       	push   $0x1281e
   110c9:	ff 75 08             	pushl  0x8(%ebp)
   110cc:	e8 08 fe ff ff       	call   10ed9 <do_default_handler>
   110d1:	83 c4 10             	add    $0x10,%esp
}
   110d4:	90                   	nop
   110d5:	c9                   	leave  
   110d6:	c3                   	ret    

000110d7 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   110d7:	55                   	push   %ebp
   110d8:	89 e5                	mov    %esp,%ebp
   110da:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   110dd:	83 ec 08             	sub    $0x8,%esp
   110e0:	68 3c 28 01 00       	push   $0x1283c
   110e5:	ff 75 08             	pushl  0x8(%ebp)
   110e8:	e8 ec fd ff ff       	call   10ed9 <do_default_handler>
   110ed:	83 c4 10             	add    $0x10,%esp
}
   110f0:	90                   	nop
   110f1:	c9                   	leave  
   110f2:	c3                   	ret    

000110f3 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   110f3:	55                   	push   %ebp
   110f4:	89 e5                	mov    %esp,%ebp
   110f6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   110f9:	83 ec 08             	sub    $0x8,%esp
   110fc:	68 4d 28 01 00       	push   $0x1284d
   11101:	ff 75 08             	pushl  0x8(%ebp)
   11104:	e8 d0 fd ff ff       	call   10ed9 <do_default_handler>
   11109:	83 c4 10             	add    $0x10,%esp
}
   1110c:	90                   	nop
   1110d:	c9                   	leave  
   1110e:	c3                   	ret    

0001110f <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t *frame)
{
   1110f:	55                   	push   %ebp
   11110:	89 e5                	mov    %esp,%ebp
   11112:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   11115:	83 ec 08             	sub    $0x8,%esp
   11118:	68 5c 28 01 00       	push   $0x1285c
   1111d:	ff 75 08             	pushl  0x8(%ebp)
   11120:	e8 b4 fd ff ff       	call   10ed9 <do_default_handler>
   11125:	83 c4 10             	add    $0x10,%esp
}
   11128:	90                   	nop
   11129:	c9                   	leave  
   1112a:	c3                   	ret    

0001112b <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t *frame)
{
   1112b:	55                   	push   %ebp
   1112c:	89 e5                	mov    %esp,%ebp
   1112e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   11131:	83 ec 08             	sub    $0x8,%esp
   11134:	68 7b 28 01 00       	push   $0x1287b
   11139:	ff 75 08             	pushl  0x8(%ebp)
   1113c:	e8 98 fd ff ff       	call   10ed9 <do_default_handler>
   11141:	83 c4 10             	add    $0x10,%esp
}
   11144:	90                   	nop
   11145:	c9                   	leave  
   11146:	c3                   	ret    

00011147 <init_pic>:
static gate_desc_t idt_table[IDE_TABLE_NR];

// 初始化中断控制器
// 硬件相关 --- 待解决
static void init_pic(void)
{
   11147:	55                   	push   %ebp
   11148:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1114a:	6a 11                	push   $0x11
   1114c:	6a 20                	push   $0x20
   1114e:	e8 36 fc ff ff       	call   10d89 <outb>
   11153:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   11156:	6a 20                	push   $0x20
   11158:	6a 21                	push   $0x21
   1115a:	e8 2a fc ff ff       	call   10d89 <outb>
   1115f:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   11162:	6a 04                	push   $0x4
   11164:	6a 21                	push   $0x21
   11166:	e8 1e fc ff ff       	call   10d89 <outb>
   1116b:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   1116e:	6a 01                	push   $0x1
   11170:	6a 21                	push   $0x21
   11172:	e8 12 fc ff ff       	call   10d89 <outb>
   11177:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   1117a:	6a 11                	push   $0x11
   1117c:	68 a0 00 00 00       	push   $0xa0
   11181:	e8 03 fc ff ff       	call   10d89 <outb>
   11186:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11189:	6a 28                	push   $0x28
   1118b:	68 a1 00 00 00       	push   $0xa1
   11190:	e8 f4 fb ff ff       	call   10d89 <outb>
   11195:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   11198:	6a 02                	push   $0x2
   1119a:	68 a1 00 00 00       	push   $0xa1
   1119f:	e8 e5 fb ff ff       	call   10d89 <outb>
   111a4:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   111a7:	6a 01                	push   $0x1
   111a9:	68 a1 00 00 00       	push   $0xa1
   111ae:	e8 d6 fb ff ff       	call   10d89 <outb>
   111b3:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   111b6:	68 fb 00 00 00       	push   $0xfb
   111bb:	6a 21                	push   $0x21
   111bd:	e8 c7 fb ff ff       	call   10d89 <outb>
   111c2:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   111c5:	68 ff 00 00 00       	push   $0xff
   111ca:	68 a1 00 00 00       	push   $0xa1
   111cf:	e8 b5 fb ff ff       	call   10d89 <outb>
   111d4:	83 c4 08             	add    $0x8,%esp
}
   111d7:	90                   	nop
   111d8:	c9                   	leave  
   111d9:	c3                   	ret    

000111da <irq_init>:

void irq_init(void)
{
   111da:	55                   	push   %ebp
   111db:	89 e5                	mov    %esp,%ebp
   111dd:	83 ec 18             	sub    $0x18,%esp

    for (int i = 0; i < IDE_TABLE_NR; i++)
   111e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   111e7:	eb 25                	jmp    1120e <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   111e9:	ba 28 00 01 00       	mov    $0x10028,%edx
   111ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111f1:	c1 e0 03             	shl    $0x3,%eax
   111f4:	05 60 43 01 00       	add    $0x14360,%eax
   111f9:	68 00 8e 00 00       	push   $0x8e00
   111fe:	52                   	push   %edx
   111ff:	6a 08                	push   $0x8
   11201:	50                   	push   %eax
   11202:	e8 77 fa ff ff       	call   10c7e <gate_desc_set>
   11207:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDE_TABLE_NR; i++)
   1120a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1120e:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11212:	7e d5                	jle    111e9 <irq_init+0xf>
                      GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   11214:	83 ec 08             	sub    $0x8,%esp
   11217:	68 47 00 01 00       	push   $0x10047
   1121c:	6a 00                	push   $0x0
   1121e:	e8 65 01 00 00       	call   11388 <irq_install>
   11223:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, exception_handler_Debug);
   11226:	83 ec 08             	sub    $0x8,%esp
   11229:	68 66 00 01 00       	push   $0x10066
   1122e:	6a 01                	push   $0x1
   11230:	e8 53 01 00 00       	call   11388 <irq_install>
   11235:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, exception_handler_NMI);
   11238:	83 ec 08             	sub    $0x8,%esp
   1123b:	68 85 00 01 00       	push   $0x10085
   11240:	6a 02                	push   $0x2
   11242:	e8 41 01 00 00       	call   11388 <irq_install>
   11247:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, exception_handler_breakpoint);
   1124a:	83 ec 08             	sub    $0x8,%esp
   1124d:	68 a4 00 01 00       	push   $0x100a4
   11252:	6a 03                	push   $0x3
   11254:	e8 2f 01 00 00       	call   11388 <irq_install>
   11259:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, exception_handler_overflow);
   1125c:	83 ec 08             	sub    $0x8,%esp
   1125f:	68 c3 00 01 00       	push   $0x100c3
   11264:	6a 04                	push   $0x4
   11266:	e8 1d 01 00 00       	call   11388 <irq_install>
   1126b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, exception_handler_bound_range);
   1126e:	83 ec 08             	sub    $0x8,%esp
   11271:	68 e2 00 01 00       	push   $0x100e2
   11276:	6a 05                	push   $0x5
   11278:	e8 0b 01 00 00       	call   11388 <irq_install>
   1127d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   11280:	83 ec 08             	sub    $0x8,%esp
   11283:	68 01 01 01 00       	push   $0x10101
   11288:	6a 06                	push   $0x6
   1128a:	e8 f9 00 00 00       	call   11388 <irq_install>
   1128f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, exception_handler_device_unavailable);
   11292:	83 ec 08             	sub    $0x8,%esp
   11295:	68 20 01 01 00       	push   $0x10120
   1129a:	6a 07                	push   $0x7
   1129c:	e8 e7 00 00 00       	call   11388 <irq_install>
   112a1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, exception_handler_double_fault);
   112a4:	83 ec 08             	sub    $0x8,%esp
   112a7:	68 3f 01 01 00       	push   $0x1013f
   112ac:	6a 08                	push   $0x8
   112ae:	e8 d5 00 00 00       	call   11388 <irq_install>
   112b3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, exception_handler_invalid_tss);
   112b6:	83 ec 08             	sub    $0x8,%esp
   112b9:	68 5c 01 01 00       	push   $0x1015c
   112be:	6a 0a                	push   $0xa
   112c0:	e8 c3 00 00 00       	call   11388 <irq_install>
   112c5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, exception_handler_segment_not_present);
   112c8:	83 ec 08             	sub    $0x8,%esp
   112cb:	68 79 01 01 00       	push   $0x10179
   112d0:	6a 0b                	push   $0xb
   112d2:	e8 b1 00 00 00       	call   11388 <irq_install>
   112d7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   112da:	83 ec 08             	sub    $0x8,%esp
   112dd:	68 96 01 01 00       	push   $0x10196
   112e2:	6a 0c                	push   $0xc
   112e4:	e8 9f 00 00 00       	call   11388 <irq_install>
   112e9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, exception_handler_general_protection);
   112ec:	83 ec 08             	sub    $0x8,%esp
   112ef:	68 b3 01 01 00       	push   $0x101b3
   112f4:	6a 0d                	push   $0xd
   112f6:	e8 8d 00 00 00       	call   11388 <irq_install>
   112fb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, exception_handler_page_fault);
   112fe:	83 ec 08             	sub    $0x8,%esp
   11301:	68 d0 01 01 00       	push   $0x101d0
   11306:	6a 0e                	push   $0xe
   11308:	e8 7b 00 00 00       	call   11388 <irq_install>
   1130d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, exception_handler_fpu_error);
   11310:	83 ec 08             	sub    $0x8,%esp
   11313:	68 ed 01 01 00       	push   $0x101ed
   11318:	6a 10                	push   $0x10
   1131a:	e8 69 00 00 00       	call   11388 <irq_install>
   1131f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, exception_handler_alignment_check);
   11322:	83 ec 08             	sub    $0x8,%esp
   11325:	68 0c 02 01 00       	push   $0x1020c
   1132a:	6a 11                	push   $0x11
   1132c:	e8 57 00 00 00       	call   11388 <irq_install>
   11331:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, exception_handler_machine_check);
   11334:	83 ec 08             	sub    $0x8,%esp
   11337:	68 29 02 01 00       	push   $0x10229
   1133c:	6a 12                	push   $0x12
   1133e:	e8 45 00 00 00       	call   11388 <irq_install>
   11343:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, exception_handler_smd_exception);
   11346:	83 ec 08             	sub    $0x8,%esp
   11349:	68 48 02 01 00       	push   $0x10248
   1134e:	6a 13                	push   $0x13
   11350:	e8 33 00 00 00       	call   11388 <irq_install>
   11355:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, exception_handler_virtual_exception);
   11358:	83 ec 08             	sub    $0x8,%esp
   1135b:	68 67 02 01 00       	push   $0x10267
   11360:	6a 14                	push   $0x14
   11362:	e8 21 00 00 00       	call   11388 <irq_install>
   11367:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   1136a:	b8 60 43 01 00       	mov    $0x14360,%eax
   1136f:	83 ec 08             	sub    $0x8,%esp
   11372:	68 00 04 00 00       	push   $0x400
   11377:	50                   	push   %eax
   11378:	e8 39 fa ff ff       	call   10db6 <lidt>
   1137d:	83 c4 10             	add    $0x10,%esp

    // 初始化中断控制器
    init_pic();
   11380:	e8 c2 fd ff ff       	call   11147 <init_pic>
}
   11385:	90                   	nop
   11386:	c9                   	leave  
   11387:	c3                   	ret    

00011388 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   11388:	55                   	push   %ebp
   11389:	89 e5                	mov    %esp,%ebp
   1138b:	83 ec 08             	sub    $0x8,%esp

    if (irq_num >= IDE_TABLE_NR)
   1138e:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11392:	7e 07                	jle    1139b <irq_install+0x13>
    {
        return -1;
   11394:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11399:	eb 25                	jmp    113c0 <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS,
   1139b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1139e:	8b 55 08             	mov    0x8(%ebp),%edx
   113a1:	c1 e2 03             	shl    $0x3,%edx
   113a4:	81 c2 60 43 01 00    	add    $0x14360,%edx
   113aa:	68 00 8e 00 00       	push   $0x8e00
   113af:	50                   	push   %eax
   113b0:	6a 08                	push   $0x8
   113b2:	52                   	push   %edx
   113b3:	e8 c6 f8 ff ff       	call   10c7e <gate_desc_set>
   113b8:	83 c4 10             	add    $0x10,%esp
                  (uint32_t)handler, GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   113bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   113c0:	c9                   	leave  
   113c1:	c3                   	ret    

000113c2 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable(int irq_num)
{
   113c2:	55                   	push   %ebp
   113c3:	89 e5                	mov    %esp,%ebp
   113c5:	53                   	push   %ebx
   113c6:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   113c9:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   113cd:	7e 78                	jle    11447 <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   113cf:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   113d3:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   113d7:	7f 32                	jg     1140b <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   113d9:	6a 21                	push   $0x21
   113db:	e8 8c f9 ff ff       	call   10d6c <inb>
   113e0:	83 c4 04             	add    $0x4,%esp
   113e3:	89 c2                	mov    %eax,%edx
   113e5:	8b 45 08             	mov    0x8(%ebp),%eax
   113e8:	bb 01 00 00 00       	mov    $0x1,%ebx
   113ed:	89 c1                	mov    %eax,%ecx
   113ef:	d3 e3                	shl    %cl,%ebx
   113f1:	89 d8                	mov    %ebx,%eax
   113f3:	f7 d0                	not    %eax
   113f5:	21 d0                	and    %edx,%eax
   113f7:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   113fa:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   113fe:	50                   	push   %eax
   113ff:	6a 21                	push   $0x21
   11401:	e8 83 f9 ff ff       	call   10d89 <outb>
   11406:	83 c4 08             	add    $0x8,%esp
   11409:	eb 3d                	jmp    11448 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   1140b:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   1140f:	68 a1 00 00 00       	push   $0xa1
   11414:	e8 53 f9 ff ff       	call   10d6c <inb>
   11419:	83 c4 04             	add    $0x4,%esp
   1141c:	89 c2                	mov    %eax,%edx
   1141e:	8b 45 08             	mov    0x8(%ebp),%eax
   11421:	bb 01 00 00 00       	mov    $0x1,%ebx
   11426:	89 c1                	mov    %eax,%ecx
   11428:	d3 e3                	shl    %cl,%ebx
   1142a:	89 d8                	mov    %ebx,%eax
   1142c:	f7 d0                	not    %eax
   1142e:	21 d0                	and    %edx,%eax
   11430:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11433:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11437:	50                   	push   %eax
   11438:	68 a1 00 00 00       	push   $0xa1
   1143d:	e8 47 f9 ff ff       	call   10d89 <outb>
   11442:	83 c4 08             	add    $0x8,%esp
   11445:	eb 01                	jmp    11448 <irq_enable+0x86>
        return;
   11447:	90                   	nop
    }
}
   11448:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1144b:	c9                   	leave  
   1144c:	c3                   	ret    

0001144d <irq_disable>:
void irq_disable(int irq_num)
{
   1144d:	55                   	push   %ebp
   1144e:	89 e5                	mov    %esp,%ebp
   11450:	53                   	push   %ebx
   11451:	83 ec 10             	sub    $0x10,%esp

    if (irq_num < IRQ_PIC_START)
   11454:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11458:	7e 74                	jle    114ce <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   1145a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   1145e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11462:	7f 30                	jg     11494 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11464:	6a 21                	push   $0x21
   11466:	e8 01 f9 ff ff       	call   10d6c <inb>
   1146b:	83 c4 04             	add    $0x4,%esp
   1146e:	89 c3                	mov    %eax,%ebx
   11470:	8b 45 08             	mov    0x8(%ebp),%eax
   11473:	ba 01 00 00 00       	mov    $0x1,%edx
   11478:	89 c1                	mov    %eax,%ecx
   1147a:	d3 e2                	shl    %cl,%edx
   1147c:	89 d0                	mov    %edx,%eax
   1147e:	09 d8                	or     %ebx,%eax
   11480:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11483:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11487:	50                   	push   %eax
   11488:	6a 21                	push   $0x21
   1148a:	e8 fa f8 ff ff       	call   10d89 <outb>
   1148f:	83 c4 08             	add    $0x8,%esp
   11492:	eb 3b                	jmp    114cf <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   11494:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   11498:	68 a1 00 00 00       	push   $0xa1
   1149d:	e8 ca f8 ff ff       	call   10d6c <inb>
   114a2:	83 c4 04             	add    $0x4,%esp
   114a5:	89 c3                	mov    %eax,%ebx
   114a7:	8b 45 08             	mov    0x8(%ebp),%eax
   114aa:	ba 01 00 00 00       	mov    $0x1,%edx
   114af:	89 c1                	mov    %eax,%ecx
   114b1:	d3 e2                	shl    %cl,%edx
   114b3:	89 d0                	mov    %edx,%eax
   114b5:	09 d8                	or     %ebx,%eax
   114b7:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   114ba:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   114be:	50                   	push   %eax
   114bf:	68 a1 00 00 00       	push   $0xa1
   114c4:	e8 c0 f8 ff ff       	call   10d89 <outb>
   114c9:	83 c4 08             	add    $0x8,%esp
   114cc:	eb 01                	jmp    114cf <irq_disable+0x82>
        return;
   114ce:	90                   	nop
    }
}
   114cf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   114d2:	c9                   	leave  
   114d3:	c3                   	ret    

000114d4 <irq_disable_global>:

// 将eflags中的IF位设置为0
void irq_disable_global(void)
{
   114d4:	55                   	push   %ebp
   114d5:	89 e5                	mov    %esp,%ebp
    cli();
   114d7:	e8 cc f8 ff ff       	call   10da8 <cli>
}
   114dc:	90                   	nop
   114dd:	5d                   	pop    %ebp
   114de:	c3                   	ret    

000114df <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global(void)
{
   114df:	55                   	push   %ebp
   114e0:	89 e5                	mov    %esp,%ebp
    sti();
   114e2:	e8 c8 f8 ff ff       	call   10daf <sti>
}
   114e7:	90                   	nop
   114e8:	5d                   	pop    %ebp
   114e9:	c3                   	ret    

000114ea <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   114ea:	55                   	push   %ebp
   114eb:	89 e5                	mov    %esp,%ebp

    irq_num -= IRQ_PIC_START;
   114ed:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if (irq_num >= 8)
   114f1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   114f5:	7e 0f                	jle    11506 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   114f7:	6a 20                	push   $0x20
   114f9:	68 a0 00 00 00       	push   $0xa0
   114fe:	e8 86 f8 ff ff       	call   10d89 <outb>
   11503:	83 c4 08             	add    $0x8,%esp
    }
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11506:	6a 20                	push   $0x20
   11508:	6a 20                	push   $0x20
   1150a:	e8 7a f8 ff ff       	call   10d89 <outb>
   1150f:	83 c4 08             	add    $0x8,%esp
}
   11512:	90                   	nop
   11513:	c9                   	leave  
   11514:	c3                   	ret    

00011515 <irq_enter_protection>:
 * @brief 进入临界区
 *
 * @return irq_state_t
 */
irq_state_t irq_enter_protection(void)
{
   11515:	55                   	push   %ebp
   11516:	89 e5                	mov    %esp,%ebp
   11518:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   1151b:	e8 c5 f8 ff ff       	call   10de5 <read_eflags>
   11520:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11523:	e8 ac ff ff ff       	call   114d4 <irq_disable_global>
    return state;
   11528:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1152b:	c9                   	leave  
   1152c:	c3                   	ret    

0001152d <irq_leave_protection>:
 * @brief 退出临界区
 *
 * @param state eflags寄存器的值
 */
void irq_leave_protection(irq_state_t state)
{
   1152d:	55                   	push   %ebp
   1152e:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11530:	ff 75 08             	pushl  0x8(%ebp)
   11533:	e8 bd f8 ff ff       	call   10df5 <write_eflags>
   11538:	83 c4 04             	add    $0x4,%esp
}
   1153b:	90                   	nop
   1153c:	c9                   	leave  
   1153d:	c3                   	ret    

0001153e <outb>:
{
   1153e:	55                   	push   %ebp
   1153f:	89 e5                	mov    %esp,%ebp
   11541:	83 ec 08             	sub    $0x8,%esp
   11544:	8b 55 08             	mov    0x8(%ebp),%edx
   11547:	8b 45 0c             	mov    0xc(%ebp),%eax
   1154a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1154e:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   11551:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11555:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11559:	ee                   	out    %al,(%dx)
}
   1155a:	90                   	nop
   1155b:	c9                   	leave  
   1155c:	c3                   	ret    

0001155d <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   1155d:	55                   	push   %ebp
   1155e:	89 e5                	mov    %esp,%ebp
   11560:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11563:	a1 60 47 01 00       	mov    0x14760,%eax
   11568:	83 c0 01             	add    $0x1,%eax
   1156b:	a3 60 47 01 00       	mov    %eax,0x14760
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   11570:	83 ec 0c             	sub    $0xc,%esp
   11573:	6a 20                	push   $0x20
   11575:	e8 70 ff ff ff       	call   114ea <pic_send_eoi>
   1157a:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   1157d:	e8 40 f4 ff ff       	call   109c2 <task_time_tick>
}
   11582:	90                   	nop
   11583:	c9                   	leave  
   11584:	c3                   	ret    

00011585 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   11585:	55                   	push   %ebp
   11586:	89 e5                	mov    %esp,%ebp
   11588:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   1158b:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   11592:	6a 36                	push   $0x36
   11594:	6a 43                	push   $0x43
   11596:	e8 a3 ff ff ff       	call   1153e <outb>
   1159b:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   1159e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115a1:	0f b6 c0             	movzbl %al,%eax
   115a4:	50                   	push   %eax
   115a5:	6a 40                	push   $0x40
   115a7:	e8 92 ff ff ff       	call   1153e <outb>
   115ac:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   115af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115b2:	c1 e8 08             	shr    $0x8,%eax
   115b5:	0f b6 c0             	movzbl %al,%eax
   115b8:	50                   	push   %eax
   115b9:	6a 40                	push   $0x40
   115bb:	e8 7e ff ff ff       	call   1153e <outb>
   115c0:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   115c3:	83 ec 08             	sub    $0x8,%esp
   115c6:	68 86 02 01 00       	push   $0x10286
   115cb:	6a 20                	push   $0x20
   115cd:	e8 b6 fd ff ff       	call   11388 <irq_install>
   115d2:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   115d5:	83 ec 0c             	sub    $0xc,%esp
   115d8:	6a 20                	push   $0x20
   115da:	e8 e3 fd ff ff       	call   113c2 <irq_enable>
   115df:	83 c4 10             	add    $0x10,%esp
}
   115e2:	90                   	nop
   115e3:	c9                   	leave  
   115e4:	c3                   	ret    

000115e5 <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   115e5:	55                   	push   %ebp
   115e6:	89 e5                	mov    %esp,%ebp
   115e8:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   115eb:	c7 05 60 47 01 00 00 	movl   $0x0,0x14760
   115f2:	00 00 00 

    init_pit();
   115f5:	e8 8b ff ff ff       	call   11585 <init_pit>
   115fa:	90                   	nop
   115fb:	c9                   	leave  
   115fc:	c3                   	ret    

000115fd <kernel_init>:
#include "core/memory.h"
/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   115fd:	55                   	push   %ebp
   115fe:	89 e5                	mov    %esp,%ebp
   11600:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   11603:	e8 bd f6 ff ff       	call   10cc5 <cpu_init>
    memory_init(boot_info);
   11608:	83 ec 0c             	sub    $0xc,%esp
   1160b:	ff 75 08             	pushl  0x8(%ebp)
   1160e:	e8 50 ee ff ff       	call   10463 <memory_init>
   11613:	83 c4 10             	add    $0x10,%esp

    log_init();
   11616:	e8 9b 0d 00 00       	call   123b6 <log_init>
    irq_init();
   1161b:	e8 ba fb ff ff       	call   111da <irq_init>
    time_init();
   11620:	e8 c0 ff ff ff       	call   115e5 <time_init>

    task_manager_init();
   11625:	e8 cd f1 ff ff       	call   107f7 <task_manager_init>
}
   1162a:	90                   	nop
   1162b:	c9                   	leave  
   1162c:	c3                   	ret    

0001162d <init_task_entry>:
static uint32_t init_task_stack[1024];
static task_t init_task;
static sem_t sem;

void init_task_entry(void)
{
   1162d:	55                   	push   %ebp
   1162e:	89 e5                	mov    %esp,%ebp
   11630:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11633:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        sem_wait(&sem);
   1163a:	83 ec 0c             	sub    $0xc,%esp
   1163d:	68 34 58 01 00       	push   $0x15834
   11642:	e8 8f 02 00 00       	call   118d6 <sem_wait>
   11647:	83 c4 10             	add    $0x10,%esp

        log_printf("int task: %d", count++);
   1164a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1164d:	8d 50 01             	lea    0x1(%eax),%edx
   11650:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11653:	83 ec 08             	sub    $0x8,%esp
   11656:	50                   	push   %eax
   11657:	68 95 28 01 00       	push   $0x12895
   1165c:	e8 f2 0d 00 00       	call   12453 <log_printf>
   11661:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem);
   11664:	eb d4                	jmp    1163a <init_task_entry+0xd>

00011666 <init_main>:
    }
}

void init_main(void)
{
   11666:	55                   	push   %ebp
   11667:	89 e5                	mov    %esp,%ebp
   11669:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   1166c:	83 ec 0c             	sub    $0xc,%esp
   1166f:	68 a2 28 01 00       	push   $0x128a2
   11674:	e8 da 0d 00 00       	call   12453 <log_printf>
   11679:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s", OS_VERSION, "diyx86os");
   1167c:	83 ec 04             	sub    $0x4,%esp
   1167f:	68 b8 28 01 00       	push   $0x128b8
   11684:	68 c1 28 01 00       	push   $0x128c1
   11689:	68 c7 28 01 00       	push   $0x128c7
   1168e:	e8 c0 0d 00 00       	call   12453 <log_printf>
   11693:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 123456, -123, 0x12345, 'a');
   11696:	83 ec 0c             	sub    $0xc,%esp
   11699:	6a 61                	push   $0x61
   1169b:	68 45 23 01 00       	push   $0x12345
   116a0:	6a 85                	push   $0xffffff85
   116a2:	68 40 e2 01 00       	push   $0x1e240
   116a7:	68 d6 28 01 00       	push   $0x128d6
   116ac:	e8 a2 0d 00 00       	call   12453 <log_printf>
   116b1:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   116b4:	ba 80 57 01 00       	mov    $0x15780,%edx
   116b9:	b8 2d 16 01 00       	mov    $0x1162d,%eax
   116be:	52                   	push   %edx
   116bf:	50                   	push   %eax
   116c0:	68 e2 28 01 00       	push   $0x128e2
   116c5:	68 80 57 01 00       	push   $0x15780
   116ca:	e8 ea ef ff ff       	call   106b9 <task_init>
   116cf:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   116d2:	e8 cf f0 ff ff       	call   107a6 <task_first_init>
    sem_init(&sem, 0);
   116d7:	83 ec 08             	sub    $0x8,%esp
   116da:	6a 00                	push   $0x0
   116dc:	68 34 58 01 00       	push   $0x15834
   116e1:	e8 cd 01 00 00       	call   118b3 <sem_init>
   116e6:	83 c4 10             	add    $0x10,%esp

    irq_enable_global();
   116e9:	e8 f1 fd ff ff       	call   114df <irq_enable_global>
    int count = 0;
   116ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_printf("first main: %d", count++);
   116f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116f8:	8d 50 01             	lea    0x1(%eax),%edx
   116fb:	89 55 f4             	mov    %edx,-0xc(%ebp)
   116fe:	83 ec 08             	sub    $0x8,%esp
   11701:	50                   	push   %eax
   11702:	68 ec 28 01 00       	push   $0x128ec
   11707:	e8 47 0d 00 00       	call   12453 <log_printf>
   1170c:	83 c4 10             	add    $0x10,%esp
        sem_notify(&sem);
   1170f:	83 ec 0c             	sub    $0xc,%esp
   11712:	68 34 58 01 00       	push   $0x15834
   11717:	e8 25 02 00 00       	call   11941 <sem_notify>
   1171c:	83 c4 10             	add    $0x10,%esp
        log_printf("first main: %d", count++);
   1171f:	eb d4                	jmp    116f5 <init_main+0x8f>

00011721 <list_count>:
static inline int list_count(list_t *list) {
   11721:	55                   	push   %ebp
   11722:	89 e5                	mov    %esp,%ebp
    return list->count;
   11724:	8b 45 08             	mov    0x8(%ebp),%eax
   11727:	8b 40 08             	mov    0x8(%eax),%eax
}
   1172a:	5d                   	pop    %ebp
   1172b:	c3                   	ret    

0001172c <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/list.h"

void mutex_init (mutex_t *mutex) {
   1172c:	55                   	push   %ebp
   1172d:	89 e5                	mov    %esp,%ebp
   1172f:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11732:	8b 45 08             	mov    0x8(%ebp),%eax
   11735:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   1173c:	8b 45 08             	mov    0x8(%ebp),%eax
   1173f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11745:	8b 45 08             	mov    0x8(%ebp),%eax
   11748:	83 c0 08             	add    $0x8,%eax
   1174b:	83 ec 0c             	sub    $0xc,%esp
   1174e:	50                   	push   %eax
   1174f:	e8 3f 0a 00 00       	call   12193 <list_init>
   11754:	83 c4 10             	add    $0x10,%esp
}
   11757:	90                   	nop
   11758:	c9                   	leave  
   11759:	c3                   	ret    

0001175a <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   1175a:	55                   	push   %ebp
   1175b:	89 e5                	mov    %esp,%ebp
   1175d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11760:	e8 b0 fd ff ff       	call   11515 <irq_enter_protection>
   11765:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11768:	e8 8f f1 ff ff       	call   108fc <task_current>
   1176d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11770:	8b 45 08             	mov    0x8(%ebp),%eax
   11773:	8b 40 04             	mov    0x4(%eax),%eax
   11776:	85 c0                	test   %eax,%eax
   11778:	75 19                	jne    11793 <mutex_lock+0x39>
        mutex->locked_count++;
   1177a:	8b 45 08             	mov    0x8(%ebp),%eax
   1177d:	8b 40 04             	mov    0x4(%eax),%eax
   11780:	8d 50 01             	lea    0x1(%eax),%edx
   11783:	8b 45 08             	mov    0x8(%ebp),%eax
   11786:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   11789:	8b 45 08             	mov    0x8(%ebp),%eax
   1178c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1178f:	89 10                	mov    %edx,(%eax)
   11791:	eb 47                	jmp    117da <mutex_lock+0x80>
    } else if (mutex->owner == curr){
   11793:	8b 45 08             	mov    0x8(%ebp),%eax
   11796:	8b 00                	mov    (%eax),%eax
   11798:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1179b:	75 11                	jne    117ae <mutex_lock+0x54>
        mutex->locked_count++;
   1179d:	8b 45 08             	mov    0x8(%ebp),%eax
   117a0:	8b 40 04             	mov    0x4(%eax),%eax
   117a3:	8d 50 01             	lea    0x1(%eax),%edx
   117a6:	8b 45 08             	mov    0x8(%ebp),%eax
   117a9:	89 50 04             	mov    %edx,0x4(%eax)
   117ac:	eb 2c                	jmp    117da <mutex_lock+0x80>
    } else {
        task_set_block(curr);
   117ae:	83 ec 0c             	sub    $0xc,%esp
   117b1:	ff 75 f0             	pushl  -0x10(%ebp)
   117b4:	e8 d5 f0 ff ff       	call   1088e <task_set_block>
   117b9:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list,&curr->wait_node);
   117bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117bf:	8d 50 38             	lea    0x38(%eax),%edx
   117c2:	8b 45 08             	mov    0x8(%ebp),%eax
   117c5:	83 c0 08             	add    $0x8,%eax
   117c8:	83 ec 08             	sub    $0x8,%esp
   117cb:	52                   	push   %edx
   117cc:	50                   	push   %eax
   117cd:	e8 46 0a 00 00       	call   12218 <list_insert_last>
   117d2:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   117d5:	e8 2c f1 ff ff       	call   10906 <task_dispatch>
    }

    irq_leave_protection(state);
   117da:	83 ec 0c             	sub    $0xc,%esp
   117dd:	ff 75 f4             	pushl  -0xc(%ebp)
   117e0:	e8 48 fd ff ff       	call   1152d <irq_leave_protection>
   117e5:	83 c4 10             	add    $0x10,%esp
}
   117e8:	90                   	nop
   117e9:	c9                   	leave  
   117ea:	c3                   	ret    

000117eb <mutex_unlock>:


void mutex_unlock (mutex_t * mutex) {
   117eb:	55                   	push   %ebp
   117ec:	89 e5                	mov    %esp,%ebp
   117ee:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   117f1:	e8 1f fd ff ff       	call   11515 <irq_enter_protection>
   117f6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   117f9:	e8 fe f0 ff ff       	call   108fc <task_current>
   117fe:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (mutex->owner == curr) {
   11801:	8b 45 08             	mov    0x8(%ebp),%eax
   11804:	8b 00                	mov    (%eax),%eax
   11806:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11809:	0f 85 88 00 00 00    	jne    11897 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   1180f:	8b 45 08             	mov    0x8(%ebp),%eax
   11812:	8b 40 04             	mov    0x4(%eax),%eax
   11815:	8d 50 ff             	lea    -0x1(%eax),%edx
   11818:	8b 45 08             	mov    0x8(%ebp),%eax
   1181b:	89 50 04             	mov    %edx,0x4(%eax)
   1181e:	8b 45 08             	mov    0x8(%ebp),%eax
   11821:	8b 40 04             	mov    0x4(%eax),%eax
   11824:	85 c0                	test   %eax,%eax
   11826:	75 6f                	jne    11897 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   11828:	8b 45 08             	mov    0x8(%ebp),%eax
   1182b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   11831:	8b 45 08             	mov    0x8(%ebp),%eax
   11834:	83 c0 08             	add    $0x8,%eax
   11837:	83 ec 0c             	sub    $0xc,%esp
   1183a:	50                   	push   %eax
   1183b:	e8 e1 fe ff ff       	call   11721 <list_count>
   11840:	83 c4 10             	add    $0x10,%esp
   11843:	85 c0                	test   %eax,%eax
   11845:	74 50                	je     11897 <mutex_unlock+0xac>

                list_node_t * node = list_remove_first(&mutex->wait_list);
   11847:	8b 45 08             	mov    0x8(%ebp),%eax
   1184a:	83 c0 08             	add    $0x8,%eax
   1184d:	83 ec 0c             	sub    $0xc,%esp
   11850:	50                   	push   %eax
   11851:	e8 26 0a 00 00       	call   1227c <list_remove_first>
   11856:	83 c4 10             	add    $0x10,%esp
   11859:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node,task_t,wait_node);
   1185c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11860:	74 08                	je     1186a <mutex_unlock+0x7f>
   11862:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11865:	83 e8 38             	sub    $0x38,%eax
   11868:	eb 05                	jmp    1186f <mutex_unlock+0x84>
   1186a:	b8 00 00 00 00       	mov    $0x0,%eax
   1186f:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11872:	83 ec 0c             	sub    $0xc,%esp
   11875:	ff 75 e8             	pushl  -0x18(%ebp)
   11878:	e8 dd ef ff ff       	call   1085a <task_set_ready>
   1187d:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   11880:	8b 45 08             	mov    0x8(%ebp),%eax
   11883:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   1188a:	8b 45 08             	mov    0x8(%ebp),%eax
   1188d:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11890:	89 10                	mov    %edx,(%eax)
                task_dispatch();
   11892:	e8 6f f0 ff ff       	call   10906 <task_dispatch>
            }

        }
    }
    irq_leave_protection(state);    
   11897:	83 ec 0c             	sub    $0xc,%esp
   1189a:	ff 75 f4             	pushl  -0xc(%ebp)
   1189d:	e8 8b fc ff ff       	call   1152d <irq_leave_protection>
   118a2:	83 c4 10             	add    $0x10,%esp
   118a5:	90                   	nop
   118a6:	c9                   	leave  
   118a7:	c3                   	ret    

000118a8 <list_count>:
static inline int list_count(list_t *list) {
   118a8:	55                   	push   %ebp
   118a9:	89 e5                	mov    %esp,%ebp
    return list->count;
   118ab:	8b 45 08             	mov    0x8(%ebp),%eax
   118ae:	8b 40 08             	mov    0x8(%eax),%eax
}
   118b1:	5d                   	pop    %ebp
   118b2:	c3                   	ret    

000118b3 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init (sem_t *sem, int init_count) {
   118b3:	55                   	push   %ebp
   118b4:	89 e5                	mov    %esp,%ebp
   118b6:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   118b9:	8b 45 08             	mov    0x8(%ebp),%eax
   118bc:	8b 55 0c             	mov    0xc(%ebp),%edx
   118bf:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   118c1:	8b 45 08             	mov    0x8(%ebp),%eax
   118c4:	83 c0 04             	add    $0x4,%eax
   118c7:	83 ec 0c             	sub    $0xc,%esp
   118ca:	50                   	push   %eax
   118cb:	e8 c3 08 00 00       	call   12193 <list_init>
   118d0:	83 c4 10             	add    $0x10,%esp
}
   118d3:	90                   	nop
   118d4:	c9                   	leave  
   118d5:	c3                   	ret    

000118d6 <sem_wait>:

void sem_wait (sem_t *sem) {
   118d6:	55                   	push   %ebp
   118d7:	89 e5                	mov    %esp,%ebp
   118d9:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   118dc:	e8 34 fc ff ff       	call   11515 <irq_enter_protection>
   118e1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   118e4:	8b 45 08             	mov    0x8(%ebp),%eax
   118e7:	8b 00                	mov    (%eax),%eax
   118e9:	85 c0                	test   %eax,%eax
   118eb:	7e 0f                	jle    118fc <sem_wait+0x26>
        sem->count--;
   118ed:	8b 45 08             	mov    0x8(%ebp),%eax
   118f0:	8b 00                	mov    (%eax),%eax
   118f2:	8d 50 ff             	lea    -0x1(%eax),%edx
   118f5:	8b 45 08             	mov    0x8(%ebp),%eax
   118f8:	89 10                	mov    %edx,(%eax)
   118fa:	eb 34                	jmp    11930 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   118fc:	e8 fb ef ff ff       	call   108fc <task_current>
   11901:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11904:	83 ec 0c             	sub    $0xc,%esp
   11907:	ff 75 f0             	pushl  -0x10(%ebp)
   1190a:	e8 7f ef ff ff       	call   1088e <task_set_block>
   1190f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   11912:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11915:	8d 50 38             	lea    0x38(%eax),%edx
   11918:	8b 45 08             	mov    0x8(%ebp),%eax
   1191b:	83 c0 04             	add    $0x4,%eax
   1191e:	83 ec 08             	sub    $0x8,%esp
   11921:	52                   	push   %edx
   11922:	50                   	push   %eax
   11923:	e8 f0 08 00 00       	call   12218 <list_insert_last>
   11928:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1192b:	e8 d6 ef ff ff       	call   10906 <task_dispatch>
    }

    irq_leave_protection(state);
   11930:	83 ec 0c             	sub    $0xc,%esp
   11933:	ff 75 f4             	pushl  -0xc(%ebp)
   11936:	e8 f2 fb ff ff       	call   1152d <irq_leave_protection>
   1193b:	83 c4 10             	add    $0x10,%esp

}
   1193e:	90                   	nop
   1193f:	c9                   	leave  
   11940:	c3                   	ret    

00011941 <sem_notify>:
void sem_notify (sem_t *sem) {
   11941:	55                   	push   %ebp
   11942:	89 e5                	mov    %esp,%ebp
   11944:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11947:	e8 c9 fb ff ff       	call   11515 <irq_enter_protection>
   1194c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&sem->wait_list)) {
   1194f:	8b 45 08             	mov    0x8(%ebp),%eax
   11952:	83 c0 04             	add    $0x4,%eax
   11955:	83 ec 0c             	sub    $0xc,%esp
   11958:	50                   	push   %eax
   11959:	e8 4a ff ff ff       	call   118a8 <list_count>
   1195e:	83 c4 10             	add    $0x10,%esp
   11961:	85 c0                	test   %eax,%eax
   11963:	74 40                	je     119a5 <sem_notify+0x64>
        list_node_t * node = list_remove_first(&sem->wait_list);
   11965:	8b 45 08             	mov    0x8(%ebp),%eax
   11968:	83 c0 04             	add    $0x4,%eax
   1196b:	83 ec 0c             	sub    $0xc,%esp
   1196e:	50                   	push   %eax
   1196f:	e8 08 09 00 00       	call   1227c <list_remove_first>
   11974:	83 c4 10             	add    $0x10,%esp
   11977:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node,task_t,wait_node);
   1197a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1197e:	74 08                	je     11988 <sem_notify+0x47>
   11980:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11983:	83 e8 38             	sub    $0x38,%eax
   11986:	eb 05                	jmp    1198d <sem_notify+0x4c>
   11988:	b8 00 00 00 00       	mov    $0x0,%eax
   1198d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11990:	83 ec 0c             	sub    $0xc,%esp
   11993:	ff 75 ec             	pushl  -0x14(%ebp)
   11996:	e8 bf ee ff ff       	call   1085a <task_set_ready>
   1199b:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1199e:	e8 63 ef ff ff       	call   10906 <task_dispatch>
   119a3:	eb 0d                	jmp    119b2 <sem_notify+0x71>
    } else {
        sem->count++;
   119a5:	8b 45 08             	mov    0x8(%ebp),%eax
   119a8:	8b 00                	mov    (%eax),%eax
   119aa:	8d 50 01             	lea    0x1(%eax),%edx
   119ad:	8b 45 08             	mov    0x8(%ebp),%eax
   119b0:	89 10                	mov    %edx,(%eax)
    }
    
    irq_leave_protection(state);
   119b2:	83 ec 0c             	sub    $0xc,%esp
   119b5:	ff 75 f4             	pushl  -0xc(%ebp)
   119b8:	e8 70 fb ff ff       	call   1152d <irq_leave_protection>
   119bd:	83 c4 10             	add    $0x10,%esp
}
   119c0:	90                   	nop
   119c1:	c9                   	leave  
   119c2:	c3                   	ret    

000119c3 <sem_count>:


int sem_count (sem_t *sem) {
   119c3:	55                   	push   %ebp
   119c4:	89 e5                	mov    %esp,%ebp
   119c6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   119c9:	e8 47 fb ff ff       	call   11515 <irq_enter_protection>
   119ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;    
   119d1:	8b 45 08             	mov    0x8(%ebp),%eax
   119d4:	8b 00                	mov    (%eax),%eax
   119d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   119d9:	83 ec 0c             	sub    $0xc,%esp
   119dc:	ff 75 f4             	pushl  -0xc(%ebp)
   119df:	e8 49 fb ff ff       	call   1152d <irq_leave_protection>
   119e4:	83 c4 10             	add    $0x10,%esp

    return count;    
   119e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   119ea:	c9                   	leave  
   119eb:	c3                   	ret    

000119ec <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   119ec:	55                   	push   %ebp
   119ed:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   119ef:	8b 45 08             	mov    0x8(%ebp),%eax
   119f2:	83 c0 07             	add    $0x7,%eax
   119f5:	8d 50 07             	lea    0x7(%eax),%edx
   119f8:	85 c0                	test   %eax,%eax
   119fa:	0f 48 c2             	cmovs  %edx,%eax
   119fd:	c1 f8 03             	sar    $0x3,%eax
}
   11a00:	5d                   	pop    %ebp
   11a01:	c3                   	ret    

00011a02 <bitmap_init>:
 * @param bits  位图
 * @param count 位图大小
 * @param init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   11a02:	55                   	push   %ebp
   11a03:	89 e5                	mov    %esp,%ebp
   11a05:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   11a08:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0b:	8b 55 10             	mov    0x10(%ebp),%edx
   11a0e:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11a10:	8b 45 08             	mov    0x8(%ebp),%eax
   11a13:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a16:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   11a19:	8b 45 08             	mov    0x8(%ebp),%eax
   11a1c:	8b 00                	mov    (%eax),%eax
   11a1e:	50                   	push   %eax
   11a1f:	e8 c8 ff ff ff       	call   119ec <bitmap_byte_count>
   11a24:	83 c4 04             	add    $0x4,%esp
   11a27:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   11a2a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11a2e:	74 07                	je     11a37 <bitmap_init+0x35>
   11a30:	ba ff 00 00 00       	mov    $0xff,%edx
   11a35:	eb 05                	jmp    11a3c <bitmap_init+0x3a>
   11a37:	ba 00 00 00 00       	mov    $0x0,%edx
   11a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3f:	8b 40 04             	mov    0x4(%eax),%eax
   11a42:	83 ec 04             	sub    $0x4,%esp
   11a45:	ff 75 f4             	pushl  -0xc(%ebp)
   11a48:	52                   	push   %edx
   11a49:	50                   	push   %eax
   11a4a:	e8 a8 03 00 00       	call   11df7 <kernel_memset>
   11a4f:	83 c4 10             	add    $0x10,%esp
}
   11a52:	90                   	nop
   11a53:	c9                   	leave  
   11a54:	c3                   	ret    

00011a55 <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   11a55:	55                   	push   %ebp
   11a56:	89 e5                	mov    %esp,%ebp
   11a58:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   11a59:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5c:	8b 50 04             	mov    0x4(%eax),%edx
   11a5f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a62:	8d 48 07             	lea    0x7(%eax),%ecx
   11a65:	85 c0                	test   %eax,%eax
   11a67:	0f 48 c1             	cmovs  %ecx,%eax
   11a6a:	c1 f8 03             	sar    $0x3,%eax
   11a6d:	01 d0                	add    %edx,%eax
   11a6f:	0f b6 00             	movzbl (%eax),%eax
   11a72:	0f b6 d8             	movzbl %al,%ebx
   11a75:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a78:	99                   	cltd   
   11a79:	c1 ea 1d             	shr    $0x1d,%edx
   11a7c:	01 d0                	add    %edx,%eax
   11a7e:	83 e0 07             	and    $0x7,%eax
   11a81:	29 d0                	sub    %edx,%eax
   11a83:	ba 01 00 00 00       	mov    $0x1,%edx
   11a88:	89 c1                	mov    %eax,%ecx
   11a8a:	d3 e2                	shl    %cl,%edx
   11a8c:	89 d0                	mov    %edx,%eax
   11a8e:	21 d8                	and    %ebx,%eax
}
   11a90:	5b                   	pop    %ebx
   11a91:	5d                   	pop    %ebp
   11a92:	c3                   	ret    

00011a93 <bitmap_set_bit>:
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   11a93:	55                   	push   %ebp
   11a94:	89 e5                	mov    %esp,%ebp
   11a96:	56                   	push   %esi
   11a97:	53                   	push   %ebx
   11a98:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   11a9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11aa2:	e9 a2 00 00 00       	jmp    11b49 <bitmap_set_bit+0xb6>
    {
        if (bit)
   11aa7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11aab:	74 4a                	je     11af7 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   11aad:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab0:	8b 50 04             	mov    0x4(%eax),%edx
   11ab3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ab6:	8d 48 07             	lea    0x7(%eax),%ecx
   11ab9:	85 c0                	test   %eax,%eax
   11abb:	0f 48 c1             	cmovs  %ecx,%eax
   11abe:	c1 f8 03             	sar    $0x3,%eax
   11ac1:	89 c3                	mov    %eax,%ebx
   11ac3:	89 d8                	mov    %ebx,%eax
   11ac5:	01 d0                	add    %edx,%eax
   11ac7:	0f b6 00             	movzbl (%eax),%eax
   11aca:	89 c6                	mov    %eax,%esi
   11acc:	8b 45 0c             	mov    0xc(%ebp),%eax
   11acf:	99                   	cltd   
   11ad0:	c1 ea 1d             	shr    $0x1d,%edx
   11ad3:	01 d0                	add    %edx,%eax
   11ad5:	83 e0 07             	and    $0x7,%eax
   11ad8:	29 d0                	sub    %edx,%eax
   11ada:	ba 01 00 00 00       	mov    $0x1,%edx
   11adf:	89 c1                	mov    %eax,%ecx
   11ae1:	d3 e2                	shl    %cl,%edx
   11ae3:	89 d0                	mov    %edx,%eax
   11ae5:	89 f2                	mov    %esi,%edx
   11ae7:	09 c2                	or     %eax,%edx
   11ae9:	8b 45 08             	mov    0x8(%ebp),%eax
   11aec:	8b 40 04             	mov    0x4(%eax),%eax
   11aef:	89 d9                	mov    %ebx,%ecx
   11af1:	01 c8                	add    %ecx,%eax
   11af3:	88 10                	mov    %dl,(%eax)
   11af5:	eb 4a                	jmp    11b41 <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   11af7:	8b 45 08             	mov    0x8(%ebp),%eax
   11afa:	8b 50 04             	mov    0x4(%eax),%edx
   11afd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b00:	8d 48 07             	lea    0x7(%eax),%ecx
   11b03:	85 c0                	test   %eax,%eax
   11b05:	0f 48 c1             	cmovs  %ecx,%eax
   11b08:	c1 f8 03             	sar    $0x3,%eax
   11b0b:	89 c3                	mov    %eax,%ebx
   11b0d:	89 d8                	mov    %ebx,%eax
   11b0f:	01 d0                	add    %edx,%eax
   11b11:	0f b6 00             	movzbl (%eax),%eax
   11b14:	89 c6                	mov    %eax,%esi
   11b16:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b19:	99                   	cltd   
   11b1a:	c1 ea 1d             	shr    $0x1d,%edx
   11b1d:	01 d0                	add    %edx,%eax
   11b1f:	83 e0 07             	and    $0x7,%eax
   11b22:	29 d0                	sub    %edx,%eax
   11b24:	ba 01 00 00 00       	mov    $0x1,%edx
   11b29:	89 c1                	mov    %eax,%ecx
   11b2b:	d3 e2                	shl    %cl,%edx
   11b2d:	89 d0                	mov    %edx,%eax
   11b2f:	f7 d0                	not    %eax
   11b31:	89 f2                	mov    %esi,%edx
   11b33:	21 c2                	and    %eax,%edx
   11b35:	8b 45 08             	mov    0x8(%ebp),%eax
   11b38:	8b 40 04             	mov    0x4(%eax),%eax
   11b3b:	89 d9                	mov    %ebx,%ecx
   11b3d:	01 c8                	add    %ecx,%eax
   11b3f:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   11b41:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11b45:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   11b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b4c:	3b 45 10             	cmp    0x10(%ebp),%eax
   11b4f:	7d 0e                	jge    11b5f <bitmap_set_bit+0xcc>
   11b51:	8b 45 08             	mov    0x8(%ebp),%eax
   11b54:	8b 00                	mov    (%eax),%eax
   11b56:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11b59:	0f 8c 48 ff ff ff    	jl     11aa7 <bitmap_set_bit+0x14>
        }
    }
}
   11b5f:	90                   	nop
   11b60:	83 c4 10             	add    $0x10,%esp
   11b63:	5b                   	pop    %ebx
   11b64:	5e                   	pop    %esi
   11b65:	5d                   	pop    %ebp
   11b66:	c3                   	ret    

00011b67 <bitmap_is_set>:
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   11b67:	55                   	push   %ebp
   11b68:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   11b6a:	ff 75 0c             	pushl  0xc(%ebp)
   11b6d:	ff 75 08             	pushl  0x8(%ebp)
   11b70:	e8 e0 fe ff ff       	call   11a55 <bitmap_get_bit>
   11b75:	83 c4 08             	add    $0x8,%esp
   11b78:	85 c0                	test   %eax,%eax
   11b7a:	0f 95 c0             	setne  %al
   11b7d:	0f b6 c0             	movzbl %al,%eax
}
   11b80:	c9                   	leave  
   11b81:	c3                   	ret    

00011b82 <bitmap_alloc_nbits>:
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   11b82:	55                   	push   %ebp
   11b83:	89 e5                	mov    %esp,%ebp
   11b85:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   11b88:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   11b8f:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while (search_idx < bitmap->bit_count)
   11b96:	e9 85 00 00 00       	jmp    11c20 <bitmap_alloc_nbits+0x9e>
    {
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   11b9b:	ff 75 fc             	pushl  -0x4(%ebp)
   11b9e:	ff 75 08             	pushl  0x8(%ebp)
   11ba1:	e8 af fe ff ff       	call   11a55 <bitmap_get_bit>
   11ba6:	83 c4 08             	add    $0x8,%esp
   11ba9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11bac:	74 06                	je     11bb4 <bitmap_alloc_nbits+0x32>
        {
            search_idx++;
   11bae:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   11bb2:	eb 6c                	jmp    11c20 <bitmap_alloc_nbits+0x9e>
        }

        ok_index = search_idx;
   11bb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11bb7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   11bba:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11bc1:	eb 27                	jmp    11bea <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   11bc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11bc6:	8d 50 01             	lea    0x1(%eax),%edx
   11bc9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11bcc:	50                   	push   %eax
   11bcd:	ff 75 08             	pushl  0x8(%ebp)
   11bd0:	e8 80 fe ff ff       	call   11a55 <bitmap_get_bit>
   11bd5:	83 c4 08             	add    $0x8,%esp
   11bd8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11bdb:	74 09                	je     11be6 <bitmap_alloc_nbits+0x64>
            {
                ok_index = -1;
   11bdd:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   11be4:	eb 16                	jmp    11bfc <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   11be6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11bea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bed:	3b 45 10             	cmp    0x10(%ebp),%eax
   11bf0:	7d 0a                	jge    11bfc <bitmap_alloc_nbits+0x7a>
   11bf2:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf5:	8b 00                	mov    (%eax),%eax
   11bf7:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11bfa:	7c c7                	jl     11bc3 <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count)
   11bfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bff:	3b 45 10             	cmp    0x10(%ebp),%eax
   11c02:	7c 1c                	jl     11c20 <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   11c04:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c07:	f7 d0                	not    %eax
   11c09:	50                   	push   %eax
   11c0a:	ff 75 10             	pushl  0x10(%ebp)
   11c0d:	ff 75 f8             	pushl  -0x8(%ebp)
   11c10:	ff 75 08             	pushl  0x8(%ebp)
   11c13:	e8 7b fe ff ff       	call   11a93 <bitmap_set_bit>
   11c18:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   11c1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11c1e:	eb 13                	jmp    11c33 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   11c20:	8b 45 08             	mov    0x8(%ebp),%eax
   11c23:	8b 00                	mov    (%eax),%eax
   11c25:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11c28:	0f 8c 6d ff ff ff    	jl     11b9b <bitmap_alloc_nbits+0x19>
        }
    }
    return -1;
   11c2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c33:	c9                   	leave  
   11c34:	c3                   	ret    

00011c35 <hlt>:
{
   11c35:	55                   	push   %ebp
   11c36:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11c38:	f4                   	hlt    
}
   11c39:	90                   	nop
   11c3a:	5d                   	pop    %ebp
   11c3b:	c3                   	ret    

00011c3c <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   11c3c:	55                   	push   %ebp
   11c3d:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   11c3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c43:	74 3b                	je     11c80 <kernel_strcpy+0x44>
   11c45:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c49:	74 35                	je     11c80 <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   11c4b:	eb 17                	jmp    11c64 <kernel_strcpy+0x28>
        *dest++ = *src++;
   11c4d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c50:	8d 42 01             	lea    0x1(%edx),%eax
   11c53:	89 45 0c             	mov    %eax,0xc(%ebp)
   11c56:	8b 45 08             	mov    0x8(%ebp),%eax
   11c59:	8d 48 01             	lea    0x1(%eax),%ecx
   11c5c:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11c5f:	0f b6 12             	movzbl (%edx),%edx
   11c62:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   11c64:	8b 45 08             	mov    0x8(%ebp),%eax
   11c67:	0f b6 00             	movzbl (%eax),%eax
   11c6a:	84 c0                	test   %al,%al
   11c6c:	74 0a                	je     11c78 <kernel_strcpy+0x3c>
   11c6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c71:	0f b6 00             	movzbl (%eax),%eax
   11c74:	84 c0                	test   %al,%al
   11c76:	75 d5                	jne    11c4d <kernel_strcpy+0x11>
    }

    *dest = '\0';
   11c78:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7b:	c6 00 00             	movb   $0x0,(%eax)
   11c7e:	eb 01                	jmp    11c81 <kernel_strcpy+0x45>
        return;
   11c80:	90                   	nop
}
   11c81:	5d                   	pop    %ebp
   11c82:	c3                   	ret    

00011c83 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   11c83:	55                   	push   %ebp
   11c84:	89 e5                	mov    %esp,%ebp
   11c86:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   11c89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c8d:	74 61                	je     11cf0 <kernel_strncpy+0x6d>
   11c8f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c93:	74 5b                	je     11cf0 <kernel_strncpy+0x6d>
   11c95:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c99:	74 55                	je     11cf0 <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   11c9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   11ca1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ca4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   11ca7:	eb 17                	jmp    11cc0 <kernel_strncpy+0x3d>
        *d++ = *s++;
   11ca9:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11cac:	8d 42 01             	lea    0x1(%edx),%eax
   11caf:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11cb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11cb5:	8d 48 01             	lea    0x1(%eax),%ecx
   11cb8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11cbb:	0f b6 12             	movzbl (%edx),%edx
   11cbe:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   11cc0:	8b 45 10             	mov    0x10(%ebp),%eax
   11cc3:	8d 50 ff             	lea    -0x1(%eax),%edx
   11cc6:	89 55 10             	mov    %edx,0x10(%ebp)
   11cc9:	85 c0                	test   %eax,%eax
   11ccb:	7e 0a                	jle    11cd7 <kernel_strncpy+0x54>
   11ccd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11cd0:	0f b6 00             	movzbl (%eax),%eax
   11cd3:	84 c0                	test   %al,%al
   11cd5:	75 d2                	jne    11ca9 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   11cd7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11cdb:	75 0b                	jne    11ce8 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11cdd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ce0:	83 e8 01             	sub    $0x1,%eax
   11ce3:	c6 00 00             	movb   $0x0,(%eax)
   11ce6:	eb 09                	jmp    11cf1 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   11ce8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ceb:	c6 00 00             	movb   $0x0,(%eax)
   11cee:	eb 01                	jmp    11cf1 <kernel_strncpy+0x6e>
        return;
   11cf0:	90                   	nop
    }
}
   11cf1:	c9                   	leave  
   11cf2:	c3                   	ret    

00011cf3 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   11cf3:	55                   	push   %ebp
   11cf4:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   11cf6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cfa:	74 06                	je     11d02 <kernel_strncmp+0xf>
   11cfc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11d00:	75 0f                	jne    11d11 <kernel_strncmp+0x1e>
        return -1;
   11d02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d07:	eb 62                	jmp    11d6b <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   11d09:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11d0d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   11d11:	8b 45 08             	mov    0x8(%ebp),%eax
   11d14:	0f b6 00             	movzbl (%eax),%eax
   11d17:	84 c0                	test   %al,%al
   11d19:	74 20                	je     11d3b <kernel_strncmp+0x48>
   11d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d1e:	0f b6 00             	movzbl (%eax),%eax
   11d21:	84 c0                	test   %al,%al
   11d23:	74 16                	je     11d3b <kernel_strncmp+0x48>
   11d25:	8b 45 08             	mov    0x8(%ebp),%eax
   11d28:	0f b6 10             	movzbl (%eax),%edx
   11d2b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d2e:	0f b6 00             	movzbl (%eax),%eax
   11d31:	38 c2                	cmp    %al,%dl
   11d33:	75 06                	jne    11d3b <kernel_strncmp+0x48>
   11d35:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11d39:	75 ce                	jne    11d09 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11d3b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d3e:	0f b6 00             	movzbl (%eax),%eax
   11d41:	84 c0                	test   %al,%al
   11d43:	74 21                	je     11d66 <kernel_strncmp+0x73>
   11d45:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d48:	0f b6 00             	movzbl (%eax),%eax
   11d4b:	84 c0                	test   %al,%al
   11d4d:	74 17                	je     11d66 <kernel_strncmp+0x73>
   11d4f:	8b 45 08             	mov    0x8(%ebp),%eax
   11d52:	0f b6 10             	movzbl (%eax),%edx
   11d55:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d58:	0f b6 00             	movzbl (%eax),%eax
   11d5b:	38 c2                	cmp    %al,%dl
   11d5d:	74 07                	je     11d66 <kernel_strncmp+0x73>
   11d5f:	b8 01 00 00 00       	mov    $0x1,%eax
   11d64:	eb 05                	jmp    11d6b <kernel_strncmp+0x78>
   11d66:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d6b:	5d                   	pop    %ebp
   11d6c:	c3                   	ret    

00011d6d <kernel_strlen>:
int kernel_strlen(const char * str){
   11d6d:	55                   	push   %ebp
   11d6e:	89 e5                	mov    %esp,%ebp
   11d70:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   11d73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d77:	75 07                	jne    11d80 <kernel_strlen+0x13>
        return 0;
   11d79:	b8 00 00 00 00       	mov    $0x0,%eax
   11d7e:	eb 26                	jmp    11da6 <kernel_strlen+0x39>
    }

    const char * c = str;
   11d80:	8b 45 08             	mov    0x8(%ebp),%eax
   11d83:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11d86:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11d8d:	eb 04                	jmp    11d93 <kernel_strlen+0x26>
        len++;
   11d8f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   11d93:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11d96:	8d 50 01             	lea    0x1(%eax),%edx
   11d99:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11d9c:	0f b6 00             	movzbl (%eax),%eax
   11d9f:	84 c0                	test   %al,%al
   11da1:	75 ec                	jne    11d8f <kernel_strlen+0x22>
    }
    return len;
   11da3:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11da6:	c9                   	leave  
   11da7:	c3                   	ret    

00011da8 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   11da8:	55                   	push   %ebp
   11da9:	89 e5                	mov    %esp,%ebp
   11dab:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11dae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11db2:	74 40                	je     11df4 <kernel_memcpy+0x4c>
   11db4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11db8:	74 3a                	je     11df4 <kernel_memcpy+0x4c>
   11dba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11dbe:	74 34                	je     11df4 <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   11dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11dc3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   11dc6:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11dcc:	eb 17                	jmp    11de5 <kernel_memcpy+0x3d>
        *d++ = *s++;
   11dce:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11dd1:	8d 42 01             	lea    0x1(%edx),%eax
   11dd4:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11dd7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11dda:	8d 48 01             	lea    0x1(%eax),%ecx
   11ddd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11de0:	0f b6 12             	movzbl (%edx),%edx
   11de3:	88 10                	mov    %dl,(%eax)
    while(size--){
   11de5:	8b 45 10             	mov    0x10(%ebp),%eax
   11de8:	8d 50 ff             	lea    -0x1(%eax),%edx
   11deb:	89 55 10             	mov    %edx,0x10(%ebp)
   11dee:	85 c0                	test   %eax,%eax
   11df0:	75 dc                	jne    11dce <kernel_memcpy+0x26>
   11df2:	eb 01                	jmp    11df5 <kernel_memcpy+0x4d>
        return;
   11df4:	90                   	nop
    }

}
   11df5:	c9                   	leave  
   11df6:	c3                   	ret    

00011df7 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   11df7:	55                   	push   %ebp
   11df8:	89 e5                	mov    %esp,%ebp
   11dfa:	83 ec 14             	sub    $0x14,%esp
   11dfd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e00:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   11e03:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e07:	74 2c                	je     11e35 <kernel_memset+0x3e>
   11e09:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11e0d:	74 26                	je     11e35 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11e0f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e12:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   11e15:	eb 0f                	jmp    11e26 <kernel_memset+0x2f>
       *d++ = v; 
   11e17:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e1a:	8d 50 01             	lea    0x1(%eax),%edx
   11e1d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e20:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11e24:	88 10                	mov    %dl,(%eax)
    while(size--){
   11e26:	8b 45 10             	mov    0x10(%ebp),%eax
   11e29:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e2c:	89 55 10             	mov    %edx,0x10(%ebp)
   11e2f:	85 c0                	test   %eax,%eax
   11e31:	75 e4                	jne    11e17 <kernel_memset+0x20>
   11e33:	eb 01                	jmp    11e36 <kernel_memset+0x3f>
        return;
   11e35:	90                   	nop
    }
}
   11e36:	c9                   	leave  
   11e37:	c3                   	ret    

00011e38 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   11e38:	55                   	push   %ebp
   11e39:	89 e5                	mov    %esp,%ebp
   11e3b:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   11e3e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e42:	74 0c                	je     11e50 <kernel_memcmp+0x18>
   11e44:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e48:	74 06                	je     11e50 <kernel_memcmp+0x18>
   11e4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11e4e:	75 07                	jne    11e57 <kernel_memcmp+0x1f>
        return -1;
   11e50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e55:	eb 43                	jmp    11e9a <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11e57:	8b 45 08             	mov    0x8(%ebp),%eax
   11e5a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   11e5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e60:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11e63:	eb 23                	jmp    11e88 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   11e65:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e68:	8d 50 01             	lea    0x1(%eax),%edx
   11e6b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e6e:	0f b6 08             	movzbl (%eax),%ecx
   11e71:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e74:	8d 50 01             	lea    0x1(%eax),%edx
   11e77:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11e7a:	0f b6 00             	movzbl (%eax),%eax
   11e7d:	38 c1                	cmp    %al,%cl
   11e7f:	74 07                	je     11e88 <kernel_memcmp+0x50>
            return -1;
   11e81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e86:	eb 12                	jmp    11e9a <kernel_memcmp+0x62>
    while(size--){
   11e88:	8b 45 10             	mov    0x10(%ebp),%eax
   11e8b:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e8e:	89 55 10             	mov    %edx,0x10(%ebp)
   11e91:	85 c0                	test   %eax,%eax
   11e93:	75 d0                	jne    11e65 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11e95:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11e9a:	c9                   	leave  
   11e9b:	c3                   	ret    

00011e9c <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   11e9c:	55                   	push   %ebp
   11e9d:	89 e5                	mov    %esp,%ebp
   11e9f:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   11ea2:	8d 45 10             	lea    0x10(%ebp),%eax
   11ea5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   11ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11eab:	83 ec 04             	sub    $0x4,%esp
   11eae:	50                   	push   %eax
   11eaf:	ff 75 0c             	pushl  0xc(%ebp)
   11eb2:	ff 75 08             	pushl  0x8(%ebp)
   11eb5:	e8 45 01 00 00       	call   11fff <kernel_vsprintf>
   11eba:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11ebd:	90                   	nop
   11ebe:	c9                   	leave  
   11ebf:	c3                   	ret    

00011ec0 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   11ec0:	55                   	push   %ebp
   11ec1:	89 e5                	mov    %esp,%ebp
   11ec3:	53                   	push   %ebx
   11ec4:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11ec7:	8b 45 08             	mov    0x8(%ebp),%eax
   11eca:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ed0:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   11ed3:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11ed7:	74 1d                	je     11ef6 <kernel_itoa+0x36>
   11ed9:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11edd:	74 17                	je     11ef6 <kernel_itoa+0x36>
   11edf:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11ee3:	74 11                	je     11ef6 <kernel_itoa+0x36>
   11ee5:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11ee9:	74 0b                	je     11ef6 <kernel_itoa+0x36>
        *p = '\0';
   11eeb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11eee:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11ef1:	e9 03 01 00 00       	jmp    11ff9 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11ef6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11efd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11f01:	79 19                	jns    11f1c <kernel_itoa+0x5c>
   11f03:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11f07:	75 13                	jne    11f1c <kernel_itoa+0x5c>
        *p++ = '-';
   11f09:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f0c:	8d 50 01             	lea    0x1(%eax),%edx
   11f0f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11f12:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11f15:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11f1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11f20:	74 3b                	je     11f5d <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   11f22:	8b 0d 4c 29 01 00    	mov    0x1294c,%ecx
   11f28:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f2b:	99                   	cltd   
   11f2c:	f7 7d 10             	idivl  0x10(%ebp)
   11f2f:	89 d0                	mov    %edx,%eax
   11f31:	83 c0 0f             	add    $0xf,%eax
   11f34:	01 c8                	add    %ecx,%eax
   11f36:	0f b6 00             	movzbl (%eax),%eax
   11f39:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   11f3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f3f:	8d 50 01             	lea    0x1(%eax),%edx
   11f42:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11f45:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11f49:	88 10                	mov    %dl,(%eax)
            num /= base;
   11f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f4e:	99                   	cltd   
   11f4f:	f7 7d 10             	idivl  0x10(%ebp)
   11f52:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11f55:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11f59:	75 c7                	jne    11f22 <kernel_itoa+0x62>
   11f5b:	eb 4b                	jmp    11fa8 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   11f5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f60:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   11f63:	8b 0d 4c 29 01 00    	mov    0x1294c,%ecx
   11f69:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11f6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f6f:	ba 00 00 00 00       	mov    $0x0,%edx
   11f74:	f7 f3                	div    %ebx
   11f76:	89 d0                	mov    %edx,%eax
   11f78:	83 c0 0f             	add    $0xf,%eax
   11f7b:	01 c8                	add    %ecx,%eax
   11f7d:	0f b6 00             	movzbl (%eax),%eax
   11f80:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11f83:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f86:	8d 50 01             	lea    0x1(%eax),%edx
   11f89:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11f8c:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11f90:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11f92:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f98:	ba 00 00 00 00       	mov    $0x0,%edx
   11f9d:	f7 f3                	div    %ebx
   11f9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11fa2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11fa6:	75 bb                	jne    11f63 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11fa8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11fab:	8d 50 ff             	lea    -0x1(%eax),%edx
   11fae:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11fb1:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   11fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11fb8:	74 08                	je     11fc2 <kernel_itoa+0x102>
   11fba:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbd:	83 c0 01             	add    $0x1,%eax
   11fc0:	eb 03                	jmp    11fc5 <kernel_itoa+0x105>
   11fc2:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   11fc8:	eb 27                	jmp    11ff1 <kernel_itoa+0x131>
        char ch = *start;
   11fca:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fcd:	0f b6 00             	movzbl (%eax),%eax
   11fd0:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11fd3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11fd6:	0f b6 10             	movzbl (%eax),%edx
   11fd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fdc:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11fde:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11fe1:	8d 50 ff             	lea    -0x1(%eax),%edx
   11fe4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11fe7:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11feb:	88 10                	mov    %dl,(%eax)
        start++;
   11fed:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   11ff1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ff4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11ff7:	72 d1                	jb     11fca <kernel_itoa+0x10a>
    }
}
   11ff9:	83 c4 20             	add    $0x20,%esp
   11ffc:	5b                   	pop    %ebx
   11ffd:	5d                   	pop    %ebp
   11ffe:	c3                   	ret    

00011fff <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   11fff:	55                   	push   %ebp
   12000:	89 e5                	mov    %esp,%ebp
   12002:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   12005:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   1200c:	8b 45 08             	mov    0x8(%ebp),%eax
   1200f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   12012:	e9 17 01 00 00       	jmp    1212e <kernel_vsprintf+0x12f>
        switch(state) {
   12017:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1201a:	85 c0                	test   %eax,%eax
   1201c:	74 0a                	je     12028 <kernel_vsprintf+0x29>
   1201e:	83 f8 01             	cmp    $0x1,%eax
   12021:	74 2b                	je     1204e <kernel_vsprintf+0x4f>
   12023:	e9 06 01 00 00       	jmp    1212e <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   12028:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1202c:	75 0c                	jne    1203a <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   1202e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12035:	e9 f4 00 00 00       	jmp    1212e <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   1203a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1203d:	8d 50 01             	lea    0x1(%eax),%edx
   12040:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12043:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12047:	88 10                	mov    %dl,(%eax)
                }
                break;
   12049:	e9 e0 00 00 00       	jmp    1212e <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   1204e:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12052:	75 47                	jne    1209b <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   12054:	8b 45 10             	mov    0x10(%ebp),%eax
   12057:	8d 50 04             	lea    0x4(%eax),%edx
   1205a:	89 55 10             	mov    %edx,0x10(%ebp)
   1205d:	8b 00                	mov    (%eax),%eax
   1205f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   12062:	ff 75 f4             	pushl  -0xc(%ebp)
   12065:	e8 03 fd ff ff       	call   11d6d <kernel_strlen>
   1206a:	83 c4 04             	add    $0x4,%esp
   1206d:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   12070:	eb 17                	jmp    12089 <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   12072:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12075:	8d 42 01             	lea    0x1(%edx),%eax
   12078:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1207b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1207e:	8d 48 01             	lea    0x1(%eax),%ecx
   12081:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12084:	0f b6 12             	movzbl (%edx),%edx
   12087:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   12089:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1208c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1208f:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12092:	85 c0                	test   %eax,%eax
   12094:	75 dc                	jne    12072 <kernel_vsprintf+0x73>
   12096:	e9 8b 00 00 00       	jmp    12126 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   1209b:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1209f:	75 2e                	jne    120cf <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   120a1:	8b 45 10             	mov    0x10(%ebp),%eax
   120a4:	8d 50 04             	lea    0x4(%eax),%edx
   120a7:	89 55 10             	mov    %edx,0x10(%ebp)
   120aa:	8b 00                	mov    (%eax),%eax
   120ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   120af:	6a 0a                	push   $0xa
   120b1:	ff 75 e4             	pushl  -0x1c(%ebp)
   120b4:	ff 75 f8             	pushl  -0x8(%ebp)
   120b7:	e8 04 fe ff ff       	call   11ec0 <kernel_itoa>
   120bc:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   120bf:	ff 75 f8             	pushl  -0x8(%ebp)
   120c2:	e8 a6 fc ff ff       	call   11d6d <kernel_strlen>
   120c7:	83 c4 04             	add    $0x4,%esp
   120ca:	01 45 f8             	add    %eax,-0x8(%ebp)
   120cd:	eb 57                	jmp    12126 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   120cf:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   120d3:	75 2e                	jne    12103 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   120d5:	8b 45 10             	mov    0x10(%ebp),%eax
   120d8:	8d 50 04             	lea    0x4(%eax),%edx
   120db:	89 55 10             	mov    %edx,0x10(%ebp)
   120de:	8b 00                	mov    (%eax),%eax
   120e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   120e3:	6a 10                	push   $0x10
   120e5:	ff 75 e8             	pushl  -0x18(%ebp)
   120e8:	ff 75 f8             	pushl  -0x8(%ebp)
   120eb:	e8 d0 fd ff ff       	call   11ec0 <kernel_itoa>
   120f0:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   120f3:	ff 75 f8             	pushl  -0x8(%ebp)
   120f6:	e8 72 fc ff ff       	call   11d6d <kernel_strlen>
   120fb:	83 c4 04             	add    $0x4,%esp
   120fe:	01 45 f8             	add    %eax,-0x8(%ebp)
   12101:	eb 23                	jmp    12126 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   12103:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12107:	75 1d                	jne    12126 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   12109:	8b 45 10             	mov    0x10(%ebp),%eax
   1210c:	8d 50 04             	lea    0x4(%eax),%edx
   1210f:	89 55 10             	mov    %edx,0x10(%ebp)
   12112:	8b 00                	mov    (%eax),%eax
   12114:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   12117:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1211a:	8d 50 01             	lea    0x1(%eax),%edx
   1211d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12120:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12124:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   12126:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   1212d:	90                   	nop
    while ((ch = *fmt++)) {
   1212e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12131:	8d 50 01             	lea    0x1(%eax),%edx
   12134:	89 55 0c             	mov    %edx,0xc(%ebp)
   12137:	0f b6 00             	movzbl (%eax),%eax
   1213a:	88 45 ef             	mov    %al,-0x11(%ebp)
   1213d:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12141:	0f 85 d0 fe ff ff    	jne    12017 <kernel_vsprintf+0x18>
        }
    }
}
   12147:	90                   	nop
   12148:	c9                   	leave  
   12149:	c3                   	ret    

0001214a <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   1214a:	55                   	push   %ebp
   1214b:	89 e5                	mov    %esp,%ebp
   1214d:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   12150:	83 ec 08             	sub    $0x8,%esp
   12153:	ff 75 14             	pushl  0x14(%ebp)
   12156:	68 fc 28 01 00       	push   $0x128fc
   1215b:	e8 f3 02 00 00       	call   12453 <log_printf>
   12160:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   12163:	ff 75 10             	pushl  0x10(%ebp)
   12166:	ff 75 0c             	pushl  0xc(%ebp)
   12169:	ff 75 08             	pushl  0x8(%ebp)
   1216c:	68 0e 29 01 00       	push   $0x1290e
   12171:	e8 dd 02 00 00       	call   12453 <log_printf>
   12176:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12179:	e8 b7 fa ff ff       	call   11c35 <hlt>
   1217e:	eb f9                	jmp    12179 <panic+0x2f>

00012180 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12180:	55                   	push   %ebp
   12181:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12183:	8b 45 08             	mov    0x8(%ebp),%eax
   12186:	8b 40 08             	mov    0x8(%eax),%eax
   12189:	85 c0                	test   %eax,%eax
   1218b:	0f 94 c0             	sete   %al
   1218e:	0f b6 c0             	movzbl %al,%eax
}
   12191:	5d                   	pop    %ebp
   12192:	c3                   	ret    

00012193 <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   12193:	55                   	push   %ebp
   12194:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12196:	8b 45 08             	mov    0x8(%ebp),%eax
   12199:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   121a0:	8b 45 08             	mov    0x8(%ebp),%eax
   121a3:	8b 50 04             	mov    0x4(%eax),%edx
   121a6:	8b 45 08             	mov    0x8(%ebp),%eax
   121a9:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   121ab:	8b 45 08             	mov    0x8(%ebp),%eax
   121ae:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   121b5:	90                   	nop
   121b6:	5d                   	pop    %ebp
   121b7:	c3                   	ret    

000121b8 <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   121b8:	55                   	push   %ebp
   121b9:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   121bb:	8b 45 08             	mov    0x8(%ebp),%eax
   121be:	8b 10                	mov    (%eax),%edx
   121c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   121c3:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   121c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   121c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   121cf:	ff 75 08             	pushl  0x8(%ebp)
   121d2:	e8 a9 ff ff ff       	call   12180 <list_is_empty>
   121d7:	83 c4 04             	add    $0x4,%esp
   121da:	85 c0                	test   %eax,%eax
   121dc:	74 16                	je     121f4 <list_insert_first+0x3c>
        list->first = list->last = node;
   121de:	8b 45 08             	mov    0x8(%ebp),%eax
   121e1:	8b 55 0c             	mov    0xc(%ebp),%edx
   121e4:	89 50 04             	mov    %edx,0x4(%eax)
   121e7:	8b 45 08             	mov    0x8(%ebp),%eax
   121ea:	8b 50 04             	mov    0x4(%eax),%edx
   121ed:	8b 45 08             	mov    0x8(%ebp),%eax
   121f0:	89 10                	mov    %edx,(%eax)
   121f2:	eb 12                	jmp    12206 <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   121f4:	8b 45 08             	mov    0x8(%ebp),%eax
   121f7:	8b 00                	mov    (%eax),%eax
   121f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   121fc:	89 10                	mov    %edx,(%eax)
        list->first = node;
   121fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12201:	8b 55 0c             	mov    0xc(%ebp),%edx
   12204:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12206:	8b 45 08             	mov    0x8(%ebp),%eax
   12209:	8b 40 08             	mov    0x8(%eax),%eax
   1220c:	8d 50 01             	lea    0x1(%eax),%edx
   1220f:	8b 45 08             	mov    0x8(%ebp),%eax
   12212:	89 50 08             	mov    %edx,0x8(%eax)
}
   12215:	90                   	nop
   12216:	c9                   	leave  
   12217:	c3                   	ret    

00012218 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12218:	55                   	push   %ebp
   12219:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1221b:	8b 45 08             	mov    0x8(%ebp),%eax
   1221e:	8b 50 04             	mov    0x4(%eax),%edx
   12221:	8b 45 0c             	mov    0xc(%ebp),%eax
   12224:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   12226:	8b 45 0c             	mov    0xc(%ebp),%eax
   12229:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   12230:	ff 75 08             	pushl  0x8(%ebp)
   12233:	e8 48 ff ff ff       	call   12180 <list_is_empty>
   12238:	83 c4 04             	add    $0x4,%esp
   1223b:	85 c0                	test   %eax,%eax
   1223d:	74 16                	je     12255 <list_insert_last+0x3d>
        list->first = list->last = node;
   1223f:	8b 45 08             	mov    0x8(%ebp),%eax
   12242:	8b 55 0c             	mov    0xc(%ebp),%edx
   12245:	89 50 04             	mov    %edx,0x4(%eax)
   12248:	8b 45 08             	mov    0x8(%ebp),%eax
   1224b:	8b 50 04             	mov    0x4(%eax),%edx
   1224e:	8b 45 08             	mov    0x8(%ebp),%eax
   12251:	89 10                	mov    %edx,(%eax)
   12253:	eb 15                	jmp    1226a <list_insert_last+0x52>
    } else {
        list->last->next = node;
   12255:	8b 45 08             	mov    0x8(%ebp),%eax
   12258:	8b 40 04             	mov    0x4(%eax),%eax
   1225b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1225e:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12261:	8b 45 08             	mov    0x8(%ebp),%eax
   12264:	8b 55 0c             	mov    0xc(%ebp),%edx
   12267:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   1226a:	8b 45 08             	mov    0x8(%ebp),%eax
   1226d:	8b 40 08             	mov    0x8(%eax),%eax
   12270:	8d 50 01             	lea    0x1(%eax),%edx
   12273:	8b 45 08             	mov    0x8(%ebp),%eax
   12276:	89 50 08             	mov    %edx,0x8(%eax)
}
   12279:	90                   	nop
   1227a:	c9                   	leave  
   1227b:	c3                   	ret    

0001227c <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   1227c:	55                   	push   %ebp
   1227d:	89 e5                	mov    %esp,%ebp
   1227f:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12282:	ff 75 08             	pushl  0x8(%ebp)
   12285:	e8 f6 fe ff ff       	call   12180 <list_is_empty>
   1228a:	83 c4 04             	add    $0x4,%esp
   1228d:	85 c0                	test   %eax,%eax
   1228f:	74 07                	je     12298 <list_remove_first+0x1c>
        return (list_node_t *)0;
   12291:	b8 00 00 00 00       	mov    $0x0,%eax
   12296:	eb 5b                	jmp    122f3 <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   12298:	8b 45 08             	mov    0x8(%ebp),%eax
   1229b:	8b 00                	mov    (%eax),%eax
   1229d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   122a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122a3:	8b 50 04             	mov    0x4(%eax),%edx
   122a6:	8b 45 08             	mov    0x8(%ebp),%eax
   122a9:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   122ab:	8b 45 08             	mov    0x8(%ebp),%eax
   122ae:	8b 00                	mov    (%eax),%eax
   122b0:	85 c0                	test   %eax,%eax
   122b2:	75 0c                	jne    122c0 <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   122b4:	8b 45 08             	mov    0x8(%ebp),%eax
   122b7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   122be:	eb 0c                	jmp    122cc <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   122c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122c3:	8b 40 04             	mov    0x4(%eax),%eax
   122c6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   122cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122cf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   122d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122d9:	8b 50 04             	mov    0x4(%eax),%edx
   122dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122df:	89 10                	mov    %edx,(%eax)
    list->count--;
   122e1:	8b 45 08             	mov    0x8(%ebp),%eax
   122e4:	8b 40 08             	mov    0x8(%eax),%eax
   122e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   122ea:	8b 45 08             	mov    0x8(%ebp),%eax
   122ed:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   122f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   122f3:	c9                   	leave  
   122f4:	c3                   	ret    

000122f5 <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   122f5:	55                   	push   %ebp
   122f6:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   122f8:	8b 45 08             	mov    0x8(%ebp),%eax
   122fb:	8b 00                	mov    (%eax),%eax
   122fd:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12300:	75 0b                	jne    1230d <list_remove+0x18>
        list->first = node->next;
   12302:	8b 45 0c             	mov    0xc(%ebp),%eax
   12305:	8b 50 04             	mov    0x4(%eax),%edx
   12308:	8b 45 08             	mov    0x8(%ebp),%eax
   1230b:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   1230d:	8b 45 08             	mov    0x8(%ebp),%eax
   12310:	8b 40 04             	mov    0x4(%eax),%eax
   12313:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12316:	75 0b                	jne    12323 <list_remove+0x2e>
        list->last = node->pre;
   12318:	8b 45 0c             	mov    0xc(%ebp),%eax
   1231b:	8b 10                	mov    (%eax),%edx
   1231d:	8b 45 08             	mov    0x8(%ebp),%eax
   12320:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12323:	8b 45 0c             	mov    0xc(%ebp),%eax
   12326:	8b 00                	mov    (%eax),%eax
   12328:	85 c0                	test   %eax,%eax
   1232a:	74 0e                	je     1233a <list_remove+0x45>
        node->pre->next = node->next;
   1232c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1232f:	8b 00                	mov    (%eax),%eax
   12331:	8b 55 0c             	mov    0xc(%ebp),%edx
   12334:	8b 52 04             	mov    0x4(%edx),%edx
   12337:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   1233a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1233d:	8b 40 04             	mov    0x4(%eax),%eax
   12340:	85 c0                	test   %eax,%eax
   12342:	74 0d                	je     12351 <list_remove+0x5c>
        node->next->pre = node->pre;
   12344:	8b 45 0c             	mov    0xc(%ebp),%eax
   12347:	8b 40 04             	mov    0x4(%eax),%eax
   1234a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1234d:	8b 12                	mov    (%edx),%edx
   1234f:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   12351:	8b 45 0c             	mov    0xc(%ebp),%eax
   12354:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1235b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1235e:	8b 50 04             	mov    0x4(%eax),%edx
   12361:	8b 45 0c             	mov    0xc(%ebp),%eax
   12364:	89 10                	mov    %edx,(%eax)

    list->count--;
   12366:	8b 45 08             	mov    0x8(%ebp),%eax
   12369:	8b 40 08             	mov    0x8(%eax),%eax
   1236c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1236f:	8b 45 08             	mov    0x8(%ebp),%eax
   12372:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12375:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   12378:	5d                   	pop    %ebp
   12379:	c3                   	ret    

0001237a <inb>:
{
   1237a:	55                   	push   %ebp
   1237b:	89 e5                	mov    %esp,%ebp
   1237d:	83 ec 14             	sub    $0x14,%esp
   12380:	8b 45 08             	mov    0x8(%ebp),%eax
   12383:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]" : [v] "=a"(rv) : [p] "d"(port));
   12387:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1238b:	89 c2                	mov    %eax,%edx
   1238d:	ec                   	in     (%dx),%al
   1238e:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12395:	c9                   	leave  
   12396:	c3                   	ret    

00012397 <outb>:
{
   12397:	55                   	push   %ebp
   12398:	89 e5                	mov    %esp,%ebp
   1239a:	83 ec 08             	sub    $0x8,%esp
   1239d:	8b 55 08             	mov    0x8(%ebp),%edx
   123a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   123a3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   123a7:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   123aa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   123ae:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   123b2:	ee                   	out    %al,(%dx)
}
   123b3:	90                   	nop
   123b4:	c9                   	leave  
   123b5:	c3                   	ret    

000123b6 <log_init>:
static mutex_t mutex;

#define COM1_PORT 0x3f8

void log_init(void)
{
   123b6:	55                   	push   %ebp
   123b7:	89 e5                	mov    %esp,%ebp
   123b9:	83 ec 08             	sub    $0x8,%esp

    mutex_init(&mutex);
   123bc:	83 ec 0c             	sub    $0xc,%esp
   123bf:	68 44 58 01 00       	push   $0x15844
   123c4:	e8 63 f3 ff ff       	call   1172c <mutex_init>
   123c9:	83 c4 10             	add    $0x10,%esp
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   123cc:	83 ec 08             	sub    $0x8,%esp
   123cf:	6a 00                	push   $0x0
   123d1:	68 f9 03 00 00       	push   $0x3f9
   123d6:	e8 bc ff ff ff       	call   12397 <outb>
   123db:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   123de:	83 ec 08             	sub    $0x8,%esp
   123e1:	68 80 00 00 00       	push   $0x80
   123e6:	68 fb 03 00 00       	push   $0x3fb
   123eb:	e8 a7 ff ff ff       	call   12397 <outb>
   123f0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   123f3:	83 ec 08             	sub    $0x8,%esp
   123f6:	6a 03                	push   $0x3
   123f8:	68 f8 03 00 00       	push   $0x3f8
   123fd:	e8 95 ff ff ff       	call   12397 <outb>
   12402:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12405:	83 ec 08             	sub    $0x8,%esp
   12408:	6a 00                	push   $0x0
   1240a:	68 f9 03 00 00       	push   $0x3f9
   1240f:	e8 83 ff ff ff       	call   12397 <outb>
   12414:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12417:	83 ec 08             	sub    $0x8,%esp
   1241a:	6a 03                	push   $0x3
   1241c:	68 fb 03 00 00       	push   $0x3fb
   12421:	e8 71 ff ff ff       	call   12397 <outb>
   12426:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12429:	83 ec 08             	sub    $0x8,%esp
   1242c:	68 c7 00 00 00       	push   $0xc7
   12431:	68 fa 03 00 00       	push   $0x3fa
   12436:	e8 5c ff ff ff       	call   12397 <outb>
   1243b:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   1243e:	83 ec 08             	sub    $0x8,%esp
   12441:	6a 0f                	push   $0xf
   12443:	68 fc 03 00 00       	push   $0x3fc
   12448:	e8 4a ff ff ff       	call   12397 <outb>
   1244d:	83 c4 10             	add    $0x10,%esp
}
   12450:	90                   	nop
   12451:	c9                   	leave  
   12452:	c3                   	ret    

00012453 <log_printf>:
// 支持可变参数
void log_printf(const char *fmt, ...)
{
   12453:	55                   	push   %ebp
   12454:	89 e5                	mov    %esp,%ebp
   12456:	81 ec 98 00 00 00    	sub    $0x98,%esp

    // 缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1245c:	83 ec 04             	sub    $0x4,%esp
   1245f:	68 80 00 00 00       	push   $0x80
   12464:	6a 00                	push   $0x0
   12466:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1246c:	50                   	push   %eax
   1246d:	e8 85 f9 ff ff       	call   11df7 <kernel_memset>
   12472:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12475:	8d 45 0c             	lea    0xc(%ebp),%eax
   12478:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   1247e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12484:	83 ec 04             	sub    $0x4,%esp
   12487:	50                   	push   %eax
   12488:	ff 75 08             	pushl  0x8(%ebp)
   1248b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12491:	50                   	push   %eax
   12492:	e8 68 fb ff ff       	call   11fff <kernel_vsprintf>
   12497:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   1249a:	83 ec 0c             	sub    $0xc,%esp
   1249d:	68 44 58 01 00       	push   $0x15844
   124a2:	e8 b3 f2 ff ff       	call   1175a <mutex_lock>
   124a7:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   124aa:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   124b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   124b3:	eb 31                	jmp    124e6 <log_printf+0x93>
    {
        while (inb(COM1_PORT + 5) & (1 << 6) == 0)
   124b5:	90                   	nop
   124b6:	83 ec 0c             	sub    $0xc,%esp
   124b9:	68 fd 03 00 00       	push   $0x3fd
   124be:	e8 b7 fe ff ff       	call   1237a <inb>
   124c3:	83 c4 10             	add    $0x10,%esp
            ;
        outb(COM1_PORT, *p++);
   124c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124c9:	8d 50 01             	lea    0x1(%eax),%edx
   124cc:	89 55 f4             	mov    %edx,-0xc(%ebp)
   124cf:	0f b6 00             	movzbl (%eax),%eax
   124d2:	0f b6 c0             	movzbl %al,%eax
   124d5:	83 ec 08             	sub    $0x8,%esp
   124d8:	50                   	push   %eax
   124d9:	68 f8 03 00 00       	push   $0x3f8
   124de:	e8 b4 fe ff ff       	call   12397 <outb>
   124e3:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   124e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124e9:	0f b6 00             	movzbl (%eax),%eax
   124ec:	84 c0                	test   %al,%al
   124ee:	75 c5                	jne    124b5 <log_printf+0x62>
    }
    // 变列
    outb(COM1_PORT, '\r');
   124f0:	83 ec 08             	sub    $0x8,%esp
   124f3:	6a 0d                	push   $0xd
   124f5:	68 f8 03 00 00       	push   $0x3f8
   124fa:	e8 98 fe ff ff       	call   12397 <outb>
   124ff:	83 c4 10             	add    $0x10,%esp
    // 变行
    outb(COM1_PORT, '\n');
   12502:	83 ec 08             	sub    $0x8,%esp
   12505:	6a 0a                	push   $0xa
   12507:	68 f8 03 00 00       	push   $0x3f8
   1250c:	e8 86 fe ff ff       	call   12397 <outb>
   12511:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   12514:	83 ec 0c             	sub    $0xc,%esp
   12517:	68 44 58 01 00       	push   $0x15844
   1251c:	e8 ca f2 ff ff       	call   117eb <mutex_unlock>
   12521:	83 c4 10             	add    $0x10,%esp
}
   12524:	90                   	nop
   12525:	c9                   	leave  
   12526:	c3                   	ret    
