
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000027d8 memsz 0x000076a0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000244c  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000388  0001244c  0001244c  0000344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  000127d4  000127d4  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004ec0  000127e0  000127e0  000037d8  2**5
                  ALLOC
  4 .debug_line   00001485  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038ca  00000000  00000000  00004c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f87  00000000  00000000  00008527  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  000094b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000d8a  00000000  00000000  00009650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000a3da  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000fd0  00000000  00000000  0000a3ec  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
0001244c l    d  .rodata	00000000 .rodata
000127d4 l    d  .data	00000000 .data
000127e0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102a5 l     F .text	00000058 addr_alloc_init
000102fd l     F .text	00000067 addr_alloc_page
00010364 l     F .text	00000055 addr_free_page
00000000 l    df *ABS*	00000000 task.c
00010453 l     F .text	0000001b list_node_init
0001046e l     F .text	0000000b list_node_next
00010479 l     F .text	0000000b list_count
00010484 l     F .text	0000000a list_first
0001048e l     F .text	00000007 hlt
00010495 l     F .text	00000017 write_tr
000127e0 l     O .bss	00000190 task_manager
000104ac l     F .text	00000114 tss_init
000124c8 l     O .rodata	0000000a __func__.2094
00010712 l     F .text	0000000a idle_task_entry
00012980 l     O .bss	00001000 idle_task_stack
00000000 l    df *ABS*	00000000 cpu.c
00010a71 l     F .text	00000028 lgdt
00010a99 l     F .text	0000001a far_jump
00013980 l     O .bss	00000800 gdt_table
00014180 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00010c91 l     F .text	0000001d inb
00010cae l     F .text	0000001f outb
00010ccd l     F .text	00000007 cli
00010cd4 l     F .text	00000007 sti
00010cdb l     F .text	00000028 lidt
00010d03 l     F .text	00000007 hlt
00010d0a l     F .text	00000010 read_eflags
00010d1a l     F .text	0000000b write_eflags
00010d25 l     F .text	000000d9 dump_core_regs
00010dfe l     F .text	0000003e do_default_handler
000141a0 l     O .bss	00000400 idt_table
0001106c l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011463 l     F .text	0000001f outb
000145a0 l     O .bss	00000004 sys_tick
000114aa l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
000145c0 l     O .bss	00001000 init_task_stack
000155c0 l     O .bss	000000b4 init_task
00015674 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011646 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000117cd l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00011b5a l     F .text	00000007 hlt
000127d4 l     O .data	00000004 num2ch.1907
00000000 l    df *ABS*	00000000 list.c
000120a5 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001229f l     F .text	0000001d inb
000122bc l     F .text	0000001f outb
00015684 l     O .bss	00000014 mutex
0001197a g     F .text	0000003e bitmap_get_bit
00011ccd g     F .text	0000004f kernel_memcpy
00010821 g     F .text	0000000a task_current
00011404 g     F .text	0000000b irq_enable_global
0001213d g     F .text	00000064 list_insert_last
00010f70 g     F .text	0000001c do_handler_segment_not_present
0001077f g     F .text	00000034 task_set_ready
00011a8c g     F .text	0000001b bitmap_is_set
00011d1c g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
00010bea g     F .text	0000001e cpu_init
000122db g     F .text	0000009d log_init
0001158b g     F .text	000000bb init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00011b61 g     F .text	00000047 kernel_strcpy
000112e7 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010ec8 g     F .text	0000001c do_handler_overflow
00010ffc g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010fa8 g     F .text	0000001c do_handler_general_protection
000118e8 g     F .text	00000029 sem_count
00010e58 g     F .text	0000001c do_handler_divider
000119b8 g     F .text	000000d4 bitmap_set_bit
00010f38 g     F .text	0000001c do_handler_double_fault
00011552 g     F .text	00000039 init_task_entry
00010fc4 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
0001140f g     F .text	0000002b pic_send_eoi
00010708 g     F .text	0000000a task_first_task
000117fb g     F .text	0000006b sem_wait
00011482 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00011050 g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
000156a0 g     O .bss	00002000 stack
00010a1a g     F .text	00000057 sys_sleep
000100e2 g       .text	00000000 exception_handler_bound_range
00011866 g     F .text	00000082 sem_notify
00010f00 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010fe0 g     F .text	0000001c do_handler_fpu_error
000106cb g     F .text	0000003d task_first_init
00011018 g     F .text	0000001c do_handler_machine_check
00010e74 g     F .text	0000001c do_handler_Debug
000120dd g     F .text	00000060 list_insert_first
000109fa g     F .text	00000020 task_set_wakeup
00010e90 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00011ba8 g     F .text	00000070 kernel_strncpy
000113f9 g     F .text	0000000b irq_disable_global
00010886 g     F .text	00000061 sys_sched_yield
00011522 g     F .text	00000030 kernel_init
000117d8 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00011f24 g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
0001167f g     F .text	00000091 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
00010f54 g     F .text	0000001c do_handler_invalid_tss
000109c0 g     F .text	0000003a task_set_sleep
0001206f g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
000112ad g     F .text	0000003a irq_install
00010b36 g     F .text	0000006d init_gdt
0001143a g     F .text	00000018 irq_enter_protection
00011651 g     F .text	0000002e mutex_init
00011372 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00011911 g     F .text	00000016 bitmap_byte_count
00010f1c g     F .text	0000001c do_handler_device_unavailable
0001082b g     F .text	0000005b task_dispatch
00010c7d g     F .text	00000014 switch_to_tss
000107de g     F .text	00000043 task_next_run
00011d5d g     F .text	00000064 kernel_memcmp
000120b8 g     F .text	00000025 list_init
00011034 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
000107b3 g     F .text	0000002b task_set_block
00010e3c g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
000105c0 g     F .text	0000001e task_switch_from_to
000110ff g     F .text	000001ae irq_init
00011710 g     F .text	000000bd mutex_unlock
00011452 g     F .text	00000011 irq_leave_protection
00011c92 g     F .text	0000003b kernel_strlen
00010ab3 g     F .text	00000083 segment_desc_set
00010ee4 g     F .text	0000001c do_handler_bound_range
000121a1 g     F .text	00000079 list_remove_first
00011c18 g     F .text	0000007a kernel_strncmp
00011927 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00011aa7 g     F .text	000000b3 bitmap_alloc_nbits
0001071c g     F .text	00000063 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
000108e7 g     F .text	000000d9 task_time_tick
000103b9 g     F .text	0000009a memory_init
00010f8c g     F .text	0000001c do_handler_stack_segment_fault
00010eac g     F .text	0000001c do_handler_breakpoint
00012378 g     F .text	000000d4 log_printf
000105de g     F .text	000000ed task_init
00011dc1 g     F .text	00000024 kernel_sprintf
00010c08 g     F .text	00000075 gdt_alloc_desc
00011de5 g     F .text	0000013f kernel_itoa
0001221a g     F .text	00000085 list_remove
00010ba3 g     F .text	00000047 gate_desc_set
0001150a g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 19 15 00 00       	call   11522 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc a0 76 01 00       	mov    $0x176a0,%esp
    jmp init_main
   10023:	e9 63 15 00 00       	jmp    1158b <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 03 0e 00 00       	call   10e3c <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 00 0e 00 00       	call   10e58 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 fd 0d 00 00       	call   10e74 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 fa 0d 00 00       	call   10e90 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 f7 0d 00 00       	call   10eac <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 f4 0d 00 00       	call   10ec8 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 f1 0d 00 00       	call   10ee4 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 ee 0d 00 00       	call   10f00 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 eb 0d 00 00       	call   10f1c <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 ea 0d 00 00       	call   10f38 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 e9 0d 00 00       	call   10f54 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 e8 0d 00 00       	call   10f70 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 e7 0d 00 00       	call   10f8c <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 e6 0d 00 00       	call   10fa8 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 e5 0d 00 00       	call   10fc4 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 e2 0d 00 00       	call   10fe0 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 e1 0d 00 00       	call   10ffc <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 de 0d 00 00       	call   11018 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 db 0d 00 00       	call   11034 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 d8 0d 00 00       	call   11050 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 eb 11 00 00       	call   11482 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <addr_alloc_init>:
#include "core/memory.h"
#include "ipc/mutex.h"
#include "tools/log.h"

static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start, uint32_t size, uint32_t page_size)
{
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
   102a8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   102ab:	8b 45 08             	mov    0x8(%ebp),%eax
   102ae:	83 ec 0c             	sub    $0xc,%esp
   102b1:	50                   	push   %eax
   102b2:	e8 9a 13 00 00       	call   11651 <mutex_init>
   102b7:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   102ba:	8b 45 08             	mov    0x8(%ebp),%eax
   102bd:	8b 55 10             	mov    0x10(%ebp),%edx
   102c0:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   102c3:	8b 45 08             	mov    0x8(%ebp),%eax
   102c6:	8b 55 14             	mov    0x14(%ebp),%edx
   102c9:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   102cc:	8b 45 08             	mov    0x8(%ebp),%eax
   102cf:	8b 55 18             	mov    0x18(%ebp),%edx
   102d2:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   102d5:	8b 45 08             	mov    0x8(%ebp),%eax
   102d8:	8b 40 20             	mov    0x20(%eax),%eax
   102db:	ba 00 00 00 00       	mov    $0x0,%edx
   102e0:	f7 75 18             	divl   0x18(%ebp)
   102e3:	89 c2                	mov    %eax,%edx
   102e5:	8b 45 08             	mov    0x8(%ebp),%eax
   102e8:	83 c0 14             	add    $0x14,%eax
   102eb:	6a 00                	push   $0x0
   102ed:	52                   	push   %edx
   102ee:	ff 75 0c             	pushl  0xc(%ebp)
   102f1:	50                   	push   %eax
   102f2:	e8 30 16 00 00       	call   11927 <bitmap_init>
   102f7:	83 c4 10             	add    $0x10,%esp
}
   102fa:	90                   	nop
   102fb:	c9                   	leave  
   102fc:	c3                   	ret    

000102fd <addr_alloc_page>:

static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   102fd:	55                   	push   %ebp
   102fe:	89 e5                	mov    %esp,%ebp
   10300:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10303:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&alloc->mutex);
   1030a:	8b 45 08             	mov    0x8(%ebp),%eax
   1030d:	83 ec 0c             	sub    $0xc,%esp
   10310:	50                   	push   %eax
   10311:	e8 69 13 00 00       	call   1167f <mutex_lock>
   10316:	83 c4 10             	add    $0x10,%esp
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10319:	8b 45 08             	mov    0x8(%ebp),%eax
   1031c:	83 c0 14             	add    $0x14,%eax
   1031f:	83 ec 04             	sub    $0x4,%esp
   10322:	ff 75 0c             	pushl  0xc(%ebp)
   10325:	6a 00                	push   $0x0
   10327:	50                   	push   %eax
   10328:	e8 7a 17 00 00       	call   11aa7 <bitmap_alloc_nbits>
   1032d:	83 c4 10             	add    $0x10,%esp
   10330:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10333:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10337:	78 17                	js     10350 <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   10339:	8b 45 08             	mov    0x8(%ebp),%eax
   1033c:	8b 50 1c             	mov    0x1c(%eax),%edx
   1033f:	8b 45 08             	mov    0x8(%ebp),%eax
   10342:	8b 48 24             	mov    0x24(%eax),%ecx
   10345:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10348:	0f af c1             	imul   %ecx,%eax
   1034b:	01 d0                	add    %edx,%eax
   1034d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&alloc->mutex);
   10350:	8b 45 08             	mov    0x8(%ebp),%eax
   10353:	83 ec 0c             	sub    $0xc,%esp
   10356:	50                   	push   %eax
   10357:	e8 b4 13 00 00       	call   11710 <mutex_unlock>
   1035c:	83 c4 10             	add    $0x10,%esp
    return addr;
   1035f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10362:	c9                   	leave  
   10363:	c3                   	ret    

00010364 <addr_free_page>:
static uint32_t addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   10364:	55                   	push   %ebp
   10365:	89 e5                	mov    %esp,%ebp
   10367:	53                   	push   %ebx
   10368:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   1036b:	8b 45 08             	mov    0x8(%ebp),%eax
   1036e:	83 ec 0c             	sub    $0xc,%esp
   10371:	50                   	push   %eax
   10372:	e8 08 13 00 00       	call   1167f <mutex_lock>
   10377:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   1037a:	8b 45 08             	mov    0x8(%ebp),%eax
   1037d:	8b 40 1c             	mov    0x1c(%eax),%eax
   10380:	8b 55 0c             	mov    0xc(%ebp),%edx
   10383:	89 d1                	mov    %edx,%ecx
   10385:	29 c1                	sub    %eax,%ecx
   10387:	8b 45 08             	mov    0x8(%ebp),%eax
   1038a:	8b 58 24             	mov    0x24(%eax),%ebx
   1038d:	89 c8                	mov    %ecx,%eax
   1038f:	ba 00 00 00 00       	mov    $0x0,%edx
   10394:	f7 f3                	div    %ebx
   10396:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   10399:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1039c:	8b 55 08             	mov    0x8(%ebp),%edx
   1039f:	83 c2 14             	add    $0x14,%edx
   103a2:	6a 00                	push   $0x0
   103a4:	ff 75 10             	pushl  0x10(%ebp)
   103a7:	50                   	push   %eax
   103a8:	52                   	push   %edx
   103a9:	e8 0a 16 00 00       	call   119b8 <bitmap_set_bit>
   103ae:	83 c4 10             	add    $0x10,%esp
    return addr;
   103b1:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   103b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103b7:	c9                   	leave  
   103b8:	c3                   	ret    

000103b9 <memory_init>:

void memory_init(boot_info_t *boot_info)
{
   103b9:	55                   	push   %ebp
   103ba:	89 e5                	mov    %esp,%ebp
   103bc:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;
    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   103bf:	83 ec 0c             	sub    $0xc,%esp
   103c2:	68 00 10 00 00       	push   $0x1000
   103c7:	68 00 00 04 00       	push   $0x40000
   103cc:	68 00 10 00 00       	push   $0x1000
   103d1:	8d 45 b8             	lea    -0x48(%ebp),%eax
   103d4:	50                   	push   %eax
   103d5:	8d 45 c0             	lea    -0x40(%ebp),%eax
   103d8:	50                   	push   %eax
   103d9:	e8 c7 fe ff ff       	call   102a5 <addr_alloc_init>
   103de:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < 32; i++)
   103e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   103e8:	eb 2b                	jmp    10415 <memory_init+0x5c>
    {
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   103ea:	83 ec 08             	sub    $0x8,%esp
   103ed:	6a 02                	push   $0x2
   103ef:	8d 45 c0             	lea    -0x40(%ebp),%eax
   103f2:	50                   	push   %eax
   103f3:	e8 05 ff ff ff       	call   102fd <addr_alloc_page>
   103f8:	83 c4 10             	add    $0x10,%esp
   103fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr:0x%x", addr);
   103fe:	83 ec 08             	sub    $0x8,%esp
   10401:	ff 75 e8             	pushl  -0x18(%ebp)
   10404:	68 4c 24 01 00       	push   $0x1244c
   10409:	e8 6a 1f 00 00       	call   12378 <log_printf>
   1040e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++)
   10411:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10415:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   10419:	7e cf                	jle    103ea <memory_init+0x31>
    }

    uint32_t addr = 0x1000;
   1041b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++)
   10422:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10429:	eb 1f                	jmp    1044a <memory_init+0x91>
    {
        addr_free_page(&addr_alloc, addr, 2);
   1042b:	83 ec 04             	sub    $0x4,%esp
   1042e:	6a 02                	push   $0x2
   10430:	ff 75 f0             	pushl  -0x10(%ebp)
   10433:	8d 45 c0             	lea    -0x40(%ebp),%eax
   10436:	50                   	push   %eax
   10437:	e8 28 ff ff ff       	call   10364 <addr_free_page>
   1043c:	83 c4 10             	add    $0x10,%esp
        addr += 4096 * 2;
   1043f:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
    for (int i = 0; i < 32; i++)
   10446:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1044a:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   1044e:	7e db                	jle    1042b <memory_init+0x72>
    }
   10450:	90                   	nop
   10451:	c9                   	leave  
   10452:	c3                   	ret    

00010453 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   10453:	55                   	push   %ebp
   10454:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10456:	8b 45 08             	mov    0x8(%ebp),%eax
   10459:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10460:	8b 45 08             	mov    0x8(%ebp),%eax
   10463:	8b 50 04             	mov    0x4(%eax),%edx
   10466:	8b 45 08             	mov    0x8(%ebp),%eax
   10469:	89 10                	mov    %edx,(%eax)
}
   1046b:	90                   	nop
   1046c:	5d                   	pop    %ebp
   1046d:	c3                   	ret    

0001046e <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   1046e:	55                   	push   %ebp
   1046f:	89 e5                	mov    %esp,%ebp
    return node->next;
   10471:	8b 45 08             	mov    0x8(%ebp),%eax
   10474:	8b 40 04             	mov    0x4(%eax),%eax
}
   10477:	5d                   	pop    %ebp
   10478:	c3                   	ret    

00010479 <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   10479:	55                   	push   %ebp
   1047a:	89 e5                	mov    %esp,%ebp
    return list->count;
   1047c:	8b 45 08             	mov    0x8(%ebp),%eax
   1047f:	8b 40 08             	mov    0x8(%eax),%eax
}
   10482:	5d                   	pop    %ebp
   10483:	c3                   	ret    

00010484 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   10484:	55                   	push   %ebp
   10485:	89 e5                	mov    %esp,%ebp
    return list->first;
   10487:	8b 45 08             	mov    0x8(%ebp),%eax
   1048a:	8b 00                	mov    (%eax),%eax
}
   1048c:	5d                   	pop    %ebp
   1048d:	c3                   	ret    

0001048e <hlt>:

/**
 * @brief 当处理器执行到HLT指令时，它会停止执行并进入一个低功耗状态，直到外部事件唤醒处理器继续执行。
 * 
 */
static inline void hlt (void) {
   1048e:	55                   	push   %ebp
   1048f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10491:	f4                   	hlt    
}
   10492:	90                   	nop
   10493:	5d                   	pop    %ebp
   10494:	c3                   	ret    

00010495 <write_tr>:

static inline void write_tr(uint16_t tss_sel) {
   10495:	55                   	push   %ebp
   10496:	89 e5                	mov    %esp,%ebp
   10498:	83 ec 04             	sub    $0x4,%esp
   1049b:	8b 45 08             	mov    0x8(%ebp),%eax
   1049e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   104a2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   104a6:	0f 00 d8             	ltr    %ax
}
   104a9:	90                   	nop
   104aa:	c9                   	leave  
   104ab:	c3                   	ret    

000104ac <tss_init>:
#include "comm/cpu_instr.h"
#include "cpu/irq.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   104ac:	55                   	push   %ebp
   104ad:	89 e5                	mov    %esp,%ebp
   104af:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   104b2:	e8 51 07 00 00       	call   10c08 <gdt_alloc_desc>
   104b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   104ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   104be:	79 1a                	jns    104da <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   104c0:	83 ec 0c             	sub    $0xc,%esp
   104c3:	68 5c 24 01 00       	push   $0x1245c
   104c8:	e8 ab 1e 00 00       	call   12378 <log_printf>
   104cd:	83 c4 10             	add    $0x10,%esp
        return -1;
   104d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   104d5:	e9 e4 00 00 00       	jmp    105be <tss_init+0x112>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   104da:	8b 45 08             	mov    0x8(%ebp),%eax
   104dd:	83 c0 48             	add    $0x48,%eax
   104e0:	68 89 00 00 00       	push   $0x89
   104e5:	6a 68                	push   $0x68
   104e7:	50                   	push   %eax
   104e8:	ff 75 f4             	pushl  -0xc(%ebp)
   104eb:	e8 c3 05 00 00       	call   10ab3 <segment_desc_set>
   104f0:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   104f3:	8b 45 08             	mov    0x8(%ebp),%eax
   104f6:	83 c0 48             	add    $0x48,%eax
   104f9:	83 ec 04             	sub    $0x4,%esp
   104fc:	6a 68                	push   $0x68
   104fe:	6a 00                	push   $0x0
   10500:	50                   	push   %eax
   10501:	e8 16 18 00 00       	call   11d1c <kernel_memset>
   10506:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10509:	8b 45 08             	mov    0x8(%ebp),%eax
   1050c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1050f:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10512:	8b 45 08             	mov    0x8(%ebp),%eax
   10515:	8b 55 10             	mov    0x10(%ebp),%edx
   10518:	89 50 4c             	mov    %edx,0x4c(%eax)
   1051b:	8b 45 08             	mov    0x8(%ebp),%eax
   1051e:	8b 50 4c             	mov    0x4c(%eax),%edx
   10521:	8b 45 08             	mov    0x8(%ebp),%eax
   10524:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   1052a:	8b 45 08             	mov    0x8(%ebp),%eax
   1052d:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   1053e:	8b 45 08             	mov    0x8(%ebp),%eax
   10541:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   10548:	00 00 00 
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10554:	8b 45 08             	mov    0x8(%ebp),%eax
   10557:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   1055d:	8b 45 08             	mov    0x8(%ebp),%eax
   10560:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10566:	8b 45 08             	mov    0x8(%ebp),%eax
   10569:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   1056f:	8b 45 08             	mov    0x8(%ebp),%eax
   10572:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10578:	8b 45 08             	mov    0x8(%ebp),%eax
   1057b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   10581:	8b 45 08             	mov    0x8(%ebp),%eax
   10584:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   1058a:	8b 45 08             	mov    0x8(%ebp),%eax
   1058d:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   10593:	8b 45 08             	mov    0x8(%ebp),%eax
   10596:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   1059d:	00 00 00 
    task->tss.iomap = 0;
   105a0:	8b 45 08             	mov    0x8(%ebp),%eax
   105a3:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
   105aa:	00 00 00 

    task->tss_sel = tss_sel;
   105ad:	8b 45 08             	mov    0x8(%ebp),%eax
   105b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   105b3:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   105b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105be:	c9                   	leave  
   105bf:	c3                   	ret    

000105c0 <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   105c0:	55                   	push   %ebp
   105c1:	89 e5                	mov    %esp,%ebp
   105c3:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   105c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   105c9:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   105cf:	83 ec 0c             	sub    $0xc,%esp
   105d2:	50                   	push   %eax
   105d3:	e8 a5 06 00 00       	call   10c7d <switch_to_tss>
   105d8:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   105db:	90                   	nop
   105dc:	c9                   	leave  
   105dd:	c3                   	ret    

000105de <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   105de:	55                   	push   %ebp
   105df:	89 e5                	mov    %esp,%ebp
   105e1:	83 ec 18             	sub    $0x18,%esp

    ASSERT(task != (task_t*)0);
   105e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105e8:	75 19                	jne    10603 <task_init+0x25>
   105ea:	68 6f 24 01 00       	push   $0x1246f
   105ef:	68 c8 24 01 00       	push   $0x124c8
   105f4:	6a 38                	push   $0x38
   105f6:	68 84 24 01 00       	push   $0x12484
   105fb:	e8 6f 1a 00 00       	call   1206f <panic>
   10600:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   10603:	83 ec 04             	sub    $0x4,%esp
   10606:	ff 75 14             	pushl  0x14(%ebp)
   10609:	ff 75 10             	pushl  0x10(%ebp)
   1060c:	ff 75 08             	pushl  0x8(%ebp)
   1060f:	e8 98 fe ff ff       	call   104ac <tss_init>
   10614:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10617:	8b 45 08             	mov    0x8(%ebp),%eax
   1061a:	83 c0 10             	add    $0x10,%eax
   1061d:	83 ec 04             	sub    $0x4,%esp
   10620:	6a 20                	push   $0x20
   10622:	ff 75 0c             	pushl  0xc(%ebp)
   10625:	50                   	push   %eax
   10626:	e8 7d 15 00 00       	call   11ba8 <kernel_strncpy>
   1062b:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1062e:	8b 45 08             	mov    0x8(%ebp),%eax
   10631:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   10637:	8b 45 08             	mov    0x8(%ebp),%eax
   1063a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10641:	8b 45 08             	mov    0x8(%ebp),%eax
   10644:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   1064b:	8b 45 08             	mov    0x8(%ebp),%eax
   1064e:	8b 50 08             	mov    0x8(%eax),%edx
   10651:	8b 45 08             	mov    0x8(%ebp),%eax
   10654:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   10657:	8b 45 08             	mov    0x8(%ebp),%eax
   1065a:	83 c0 40             	add    $0x40,%eax
   1065d:	83 ec 0c             	sub    $0xc,%esp
   10660:	50                   	push   %eax
   10661:	e8 ed fd ff ff       	call   10453 <list_node_init>
   10666:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10669:	8b 45 08             	mov    0x8(%ebp),%eax
   1066c:	83 c0 30             	add    $0x30,%eax
   1066f:	83 ec 0c             	sub    $0xc,%esp
   10672:	50                   	push   %eax
   10673:	e8 db fd ff ff       	call   10453 <list_node_init>
   10678:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   1067b:	8b 45 08             	mov    0x8(%ebp),%eax
   1067e:	83 c0 38             	add    $0x38,%eax
   10681:	83 ec 0c             	sub    $0xc,%esp
   10684:	50                   	push   %eax
   10685:	e8 c9 fd ff ff       	call   10453 <list_node_init>
   1068a:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   1068d:	e8 a8 0d 00 00       	call   1143a <irq_enter_protection>
   10692:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10695:	83 ec 0c             	sub    $0xc,%esp
   10698:	ff 75 08             	pushl  0x8(%ebp)
   1069b:	e8 df 00 00 00       	call   1077f <task_set_ready>
   106a0:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   106a3:	8b 45 08             	mov    0x8(%ebp),%eax
   106a6:	83 c0 40             	add    $0x40,%eax
   106a9:	83 ec 08             	sub    $0x8,%esp
   106ac:	50                   	push   %eax
   106ad:	68 f0 27 01 00       	push   $0x127f0
   106b2:	e8 86 1a 00 00       	call   1213d <list_insert_last>
   106b7:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   106ba:	83 ec 0c             	sub    $0xc,%esp
   106bd:	ff 75 f4             	pushl  -0xc(%ebp)
   106c0:	e8 8d 0d 00 00       	call   11452 <irq_leave_protection>
   106c5:	83 c4 10             	add    $0x10,%esp
}
   106c8:	90                   	nop
   106c9:	c9                   	leave  
   106ca:	c3                   	ret    

000106cb <task_first_init>:

void task_first_init (void) {
   106cb:	55                   	push   %ebp
   106cc:	89 e5                	mov    %esp,%ebp
   106ce:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   106d1:	6a 00                	push   $0x0
   106d3:	6a 00                	push   $0x0
   106d5:	68 b1 24 01 00       	push   $0x124b1
   106da:	68 08 28 01 00       	push   $0x12808
   106df:	e8 fa fe ff ff       	call   105de <task_init>
   106e4:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   106e7:	a1 b8 28 01 00       	mov    0x128b8,%eax
   106ec:	0f b7 c0             	movzwl %ax,%eax
   106ef:	83 ec 0c             	sub    $0xc,%esp
   106f2:	50                   	push   %eax
   106f3:	e8 9d fd ff ff       	call   10495 <write_tr>
   106f8:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   106fb:	c7 05 e0 27 01 00 08 	movl   $0x12808,0x127e0
   10702:	28 01 00 
}
   10705:	90                   	nop
   10706:	c9                   	leave  
   10707:	c3                   	ret    

00010708 <task_first_task>:

task_t * task_first_task (void) {
   10708:	55                   	push   %ebp
   10709:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1070b:	b8 08 28 01 00       	mov    $0x12808,%eax
}
   10710:	5d                   	pop    %ebp
   10711:	c3                   	ret    

00010712 <idle_task_entry>:

static void idle_task_entry (void) {
   10712:	55                   	push   %ebp
   10713:	89 e5                	mov    %esp,%ebp
    for(;;) {
        hlt();
   10715:	e8 74 fd ff ff       	call   1048e <hlt>
   1071a:	eb f9                	jmp    10715 <idle_task_entry+0x3>

0001071c <task_manager_init>:
    }
}
static uint32_t idle_task_stack[IDLE_TASK_SIZE];

void task_manager_init (void) {
   1071c:	55                   	push   %ebp
   1071d:	89 e5                	mov    %esp,%ebp
   1071f:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10722:	83 ec 0c             	sub    $0xc,%esp
   10725:	68 e4 27 01 00       	push   $0x127e4
   1072a:	e8 89 19 00 00       	call   120b8 <list_init>
   1072f:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10732:	83 ec 0c             	sub    $0xc,%esp
   10735:	68 f0 27 01 00       	push   $0x127f0
   1073a:	e8 79 19 00 00       	call   120b8 <list_init>
   1073f:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10742:	83 ec 0c             	sub    $0xc,%esp
   10745:	68 fc 27 01 00       	push   $0x127fc
   1074a:	e8 69 19 00 00       	call   120b8 <list_init>
   1074f:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10752:	c7 05 e0 27 01 00 00 	movl   $0x0,0x127e0
   10759:	00 00 00 

    task_init(&task_manager.idle_task,
        "idle_task",
        (uint32_t)idle_task_entry,
        (uint32_t)(idle_task_stack + IDLE_TASK_SIZE)
   1075c:	b8 80 39 01 00       	mov    $0x13980,%eax
    task_init(&task_manager.idle_task,
   10761:	89 c2                	mov    %eax,%edx
   10763:	b8 12 07 01 00       	mov    $0x10712,%eax
   10768:	52                   	push   %edx
   10769:	50                   	push   %eax
   1076a:	68 bc 24 01 00       	push   $0x124bc
   1076f:	68 bc 28 01 00       	push   $0x128bc
   10774:	e8 65 fe ff ff       	call   105de <task_init>
   10779:	83 c4 10             	add    $0x10,%esp
    );


}
   1077c:	90                   	nop
   1077d:	c9                   	leave  
   1077e:	c3                   	ret    

0001077f <task_set_ready>:

void task_set_ready(task_t * task) {
   1077f:	55                   	push   %ebp
   10780:	89 e5                	mov    %esp,%ebp
   10782:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10785:	81 7d 08 bc 28 01 00 	cmpl   $0x128bc,0x8(%ebp)
   1078c:	74 22                	je     107b0 <task_set_ready+0x31>
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   1078e:	8b 45 08             	mov    0x8(%ebp),%eax
   10791:	83 c0 30             	add    $0x30,%eax
   10794:	83 ec 08             	sub    $0x8,%esp
   10797:	50                   	push   %eax
   10798:	68 e4 27 01 00       	push   $0x127e4
   1079d:	e8 9b 19 00 00       	call   1213d <list_insert_last>
   107a2:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   107a5:	8b 45 08             	mov    0x8(%ebp),%eax
   107a8:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   107ae:	eb 01                	jmp    107b1 <task_set_ready+0x32>
        return;
   107b0:	90                   	nop
}
   107b1:	c9                   	leave  
   107b2:	c3                   	ret    

000107b3 <task_set_block>:

void task_set_block(task_t * task) {
   107b3:	55                   	push   %ebp
   107b4:	89 e5                	mov    %esp,%ebp
   107b6:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   107b9:	81 7d 08 bc 28 01 00 	cmpl   $0x128bc,0x8(%ebp)
   107c0:	74 19                	je     107db <task_set_block+0x28>
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   107c2:	8b 45 08             	mov    0x8(%ebp),%eax
   107c5:	83 c0 30             	add    $0x30,%eax
   107c8:	83 ec 08             	sub    $0x8,%esp
   107cb:	50                   	push   %eax
   107cc:	68 e4 27 01 00       	push   $0x127e4
   107d1:	e8 44 1a 00 00       	call   1221a <list_remove>
   107d6:	83 c4 10             	add    $0x10,%esp
   107d9:	eb 01                	jmp    107dc <task_set_block+0x29>
        return;
   107db:	90                   	nop
}
   107dc:	c9                   	leave  
   107dd:	c3                   	ret    

000107de <task_next_run>:


task_t * task_next_run(void) {
   107de:	55                   	push   %ebp
   107df:	89 e5                	mov    %esp,%ebp
   107e1:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   107e4:	68 e4 27 01 00       	push   $0x127e4
   107e9:	e8 8b fc ff ff       	call   10479 <list_count>
   107ee:	83 c4 04             	add    $0x4,%esp
   107f1:	85 c0                	test   %eax,%eax
   107f3:	75 07                	jne    107fc <task_next_run+0x1e>
        return &task_manager.idle_task;
   107f5:	b8 bc 28 01 00       	mov    $0x128bc,%eax
   107fa:	eb 23                	jmp    1081f <task_next_run+0x41>
    }
    list_node_t * task_node = list_first(&task_manager.ready_list);
   107fc:	68 e4 27 01 00       	push   $0x127e4
   10801:	e8 7e fc ff ff       	call   10484 <list_first>
   10806:	83 c4 04             	add    $0x4,%esp
   10809:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   1080c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10810:	74 08                	je     1081a <task_next_run+0x3c>
   10812:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10815:	83 e8 30             	sub    $0x30,%eax
   10818:	eb 05                	jmp    1081f <task_next_run+0x41>
   1081a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1081f:	c9                   	leave  
   10820:	c3                   	ret    

00010821 <task_current>:

task_t * task_current (void) {
   10821:	55                   	push   %ebp
   10822:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10824:	a1 e0 27 01 00       	mov    0x127e0,%eax
}
   10829:	5d                   	pop    %ebp
   1082a:	c3                   	ret    

0001082b <task_dispatch>:


void task_dispatch(void) {
   1082b:	55                   	push   %ebp
   1082c:	89 e5                	mov    %esp,%ebp
   1082e:	83 ec 18             	sub    $0x18,%esp


    irq_state_t state = irq_enter_protection();
   10831:	e8 04 0c 00 00       	call   1143a <irq_enter_protection>
   10836:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * to = task_next_run();
   10839:	e8 a0 ff ff ff       	call   107de <task_next_run>
   1083e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( to != task_manager.curr_task) {
   10841:	a1 e0 27 01 00       	mov    0x127e0,%eax
   10846:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10849:	74 2a                	je     10875 <task_dispatch+0x4a>
        task_t * from = task_current();
   1084b:	e8 d1 ff ff ff       	call   10821 <task_current>
   10850:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10853:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10856:	a3 e0 27 01 00       	mov    %eax,0x127e0
        to->state = TASK_RUNNING;
   1085b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1085e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from,to);
   10864:	83 ec 08             	sub    $0x8,%esp
   10867:	ff 75 f0             	pushl  -0x10(%ebp)
   1086a:	ff 75 ec             	pushl  -0x14(%ebp)
   1086d:	e8 4e fd ff ff       	call   105c0 <task_switch_from_to>
   10872:	83 c4 10             	add    $0x10,%esp
    }


    irq_leave_protection(state);
   10875:	83 ec 0c             	sub    $0xc,%esp
   10878:	ff 75 f4             	pushl  -0xc(%ebp)
   1087b:	e8 d2 0b 00 00       	call   11452 <irq_leave_protection>
   10880:	83 c4 10             	add    $0x10,%esp

}
   10883:	90                   	nop
   10884:	c9                   	leave  
   10885:	c3                   	ret    

00010886 <sys_sched_yield>:

int sys_sched_yield(void) {
   10886:	55                   	push   %ebp
   10887:	89 e5                	mov    %esp,%ebp
   10889:	83 ec 18             	sub    $0x18,%esp
    
    irq_state_t state = irq_enter_protection();
   1088c:	e8 a9 0b 00 00       	call   1143a <irq_enter_protection>
   10891:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&task_manager.ready_list) > 1) {
   10894:	83 ec 0c             	sub    $0xc,%esp
   10897:	68 e4 27 01 00       	push   $0x127e4
   1089c:	e8 d8 fb ff ff       	call   10479 <list_count>
   108a1:	83 c4 10             	add    $0x10,%esp
   108a4:	83 f8 01             	cmp    $0x1,%eax
   108a7:	7e 29                	jle    108d2 <sys_sched_yield+0x4c>
        task_t * curr_task = task_current();
   108a9:	e8 73 ff ff ff       	call   10821 <task_current>
   108ae:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   108b1:	83 ec 0c             	sub    $0xc,%esp
   108b4:	ff 75 f0             	pushl  -0x10(%ebp)
   108b7:	e8 f7 fe ff ff       	call   107b3 <task_set_block>
   108bc:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   108bf:	83 ec 0c             	sub    $0xc,%esp
   108c2:	ff 75 f0             	pushl  -0x10(%ebp)
   108c5:	e8 b5 fe ff ff       	call   1077f <task_set_ready>
   108ca:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   108cd:	e8 59 ff ff ff       	call   1082b <task_dispatch>
    }

    irq_leave_protection(state);
   108d2:	83 ec 0c             	sub    $0xc,%esp
   108d5:	ff 75 f4             	pushl  -0xc(%ebp)
   108d8:	e8 75 0b 00 00       	call   11452 <irq_leave_protection>
   108dd:	83 c4 10             	add    $0x10,%esp
    return 0;
   108e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   108e5:	c9                   	leave  
   108e6:	c3                   	ret    

000108e7 <task_time_tick>:

void task_time_tick(void) {
   108e7:	55                   	push   %ebp
   108e8:	89 e5                	mov    %esp,%ebp
   108ea:	83 ec 18             	sub    $0x18,%esp
    
    task_t * curr_task = task_current();
   108ed:	e8 2f ff ff ff       	call   10821 <task_current>
   108f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--curr_task->slice_ticks == 0) {
   108f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108f8:	8b 40 0c             	mov    0xc(%eax),%eax
   108fb:	8d 50 ff             	lea    -0x1(%eax),%edx
   108fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10901:	89 50 0c             	mov    %edx,0xc(%eax)
   10904:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10907:	8b 40 0c             	mov    0xc(%eax),%eax
   1090a:	85 c0                	test   %eax,%eax
   1090c:	75 2d                	jne    1093b <task_time_tick+0x54>
        
        curr_task->slice_ticks = curr_task->time_ticks;
   1090e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10911:	8b 50 08             	mov    0x8(%eax),%edx
   10914:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10917:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(curr_task);
   1091a:	83 ec 0c             	sub    $0xc,%esp
   1091d:	ff 75 f0             	pushl  -0x10(%ebp)
   10920:	e8 8e fe ff ff       	call   107b3 <task_set_block>
   10925:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);      
   10928:	83 ec 0c             	sub    $0xc,%esp
   1092b:	ff 75 f0             	pushl  -0x10(%ebp)
   1092e:	e8 4c fe ff ff       	call   1077f <task_set_ready>
   10933:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10936:	e8 f0 fe ff ff       	call   1082b <task_dispatch>
    }

    list_node_t * curr = list_first(&task_manager.sleep_list);
   1093b:	83 ec 0c             	sub    $0xc,%esp
   1093e:	68 fc 27 01 00       	push   $0x127fc
   10943:	e8 3c fb ff ff       	call   10484 <list_first>
   10948:	83 c4 10             	add    $0x10,%esp
   1094b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (curr) {
   1094e:	eb 62                	jmp    109b2 <task_time_tick+0xcb>
        list_node_t * next = list_node_next(curr);
   10950:	83 ec 0c             	sub    $0xc,%esp
   10953:	ff 75 f4             	pushl  -0xc(%ebp)
   10956:	e8 13 fb ff ff       	call   1046e <list_node_next>
   1095b:	83 c4 10             	add    $0x10,%esp
   1095e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   10961:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10965:	74 08                	je     1096f <task_time_tick+0x88>
   10967:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1096a:	83 e8 30             	sub    $0x30,%eax
   1096d:	eb 05                	jmp    10974 <task_time_tick+0x8d>
   1096f:	b8 00 00 00 00       	mov    $0x0,%eax
   10974:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) {
   10977:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1097a:	8b 40 04             	mov    0x4(%eax),%eax
   1097d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10980:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10983:	89 50 04             	mov    %edx,0x4(%eax)
   10986:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10989:	8b 40 04             	mov    0x4(%eax),%eax
   1098c:	85 c0                	test   %eax,%eax
   1098e:	75 1c                	jne    109ac <task_time_tick+0xc5>
            task_set_wakeup(task);
   10990:	83 ec 0c             	sub    $0xc,%esp
   10993:	ff 75 e8             	pushl  -0x18(%ebp)
   10996:	e8 5f 00 00 00       	call   109fa <task_set_wakeup>
   1099b:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1099e:	83 ec 0c             	sub    $0xc,%esp
   109a1:	ff 75 e8             	pushl  -0x18(%ebp)
   109a4:	e8 d6 fd ff ff       	call   1077f <task_set_ready>
   109a9:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   109ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   109b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109b6:	75 98                	jne    10950 <task_time_tick+0x69>
    }

    task_dispatch();
   109b8:	e8 6e fe ff ff       	call   1082b <task_dispatch>
}
   109bd:	90                   	nop
   109be:	c9                   	leave  
   109bf:	c3                   	ret    

000109c0 <task_set_sleep>:




void task_set_sleep (task_t * task, uint32_t ticks) {
   109c0:	55                   	push   %ebp
   109c1:	89 e5                	mov    %esp,%ebp
   109c3:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   109c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   109ca:	74 2b                	je     109f7 <task_set_sleep+0x37>
        return;
    }

    task->sleep_ticks = ticks;
   109cc:	8b 55 0c             	mov    0xc(%ebp),%edx
   109cf:	8b 45 08             	mov    0x8(%ebp),%eax
   109d2:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   109d5:	8b 45 08             	mov    0x8(%ebp),%eax
   109d8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last (&task_manager.sleep_list,&task->run_node);
   109de:	8b 45 08             	mov    0x8(%ebp),%eax
   109e1:	83 c0 30             	add    $0x30,%eax
   109e4:	83 ec 08             	sub    $0x8,%esp
   109e7:	50                   	push   %eax
   109e8:	68 fc 27 01 00       	push   $0x127fc
   109ed:	e8 4b 17 00 00       	call   1213d <list_insert_last>
   109f2:	83 c4 10             	add    $0x10,%esp
   109f5:	eb 01                	jmp    109f8 <task_set_sleep+0x38>
        return;
   109f7:	90                   	nop
}
   109f8:	c9                   	leave  
   109f9:	c3                   	ret    

000109fa <task_set_wakeup>:
void task_set_wakeup (task_t * task) {
   109fa:	55                   	push   %ebp
   109fb:	89 e5                	mov    %esp,%ebp
   109fd:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   10a00:	8b 45 08             	mov    0x8(%ebp),%eax
   10a03:	83 c0 30             	add    $0x30,%eax
   10a06:	83 ec 08             	sub    $0x8,%esp
   10a09:	50                   	push   %eax
   10a0a:	68 fc 27 01 00       	push   $0x127fc
   10a0f:	e8 06 18 00 00       	call   1221a <list_remove>
   10a14:	83 c4 10             	add    $0x10,%esp
}
   10a17:	90                   	nop
   10a18:	c9                   	leave  
   10a19:	c3                   	ret    

00010a1a <sys_sleep>:
void sys_sleep (uint32_t ms) {
   10a1a:	55                   	push   %ebp
   10a1b:	89 e5                	mov    %esp,%ebp
   10a1d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10a20:	e8 15 0a 00 00       	call   1143a <irq_enter_protection>
   10a25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_set_block(task_manager.curr_task);
   10a28:	a1 e0 27 01 00       	mov    0x127e0,%eax
   10a2d:	83 ec 0c             	sub    $0xc,%esp
   10a30:	50                   	push   %eax
   10a31:	e8 7d fd ff ff       	call   107b3 <task_set_block>
   10a36:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task,(ms + OS_TICK_MS - 1)/OS_TICK_MS);
   10a39:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3c:	83 c0 09             	add    $0x9,%eax
   10a3f:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10a44:	f7 e2                	mul    %edx
   10a46:	c1 ea 03             	shr    $0x3,%edx
   10a49:	a1 e0 27 01 00       	mov    0x127e0,%eax
   10a4e:	83 ec 08             	sub    $0x8,%esp
   10a51:	52                   	push   %edx
   10a52:	50                   	push   %eax
   10a53:	e8 68 ff ff ff       	call   109c0 <task_set_sleep>
   10a58:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   10a5b:	e8 cb fd ff ff       	call   1082b <task_dispatch>

    irq_leave_protection(state);
   10a60:	83 ec 0c             	sub    $0xc,%esp
   10a63:	ff 75 f4             	pushl  -0xc(%ebp)
   10a66:	e8 e7 09 00 00       	call   11452 <irq_leave_protection>
   10a6b:	83 c4 10             	add    $0x10,%esp
}
   10a6e:	90                   	nop
   10a6f:	c9                   	leave  
   10a70:	c3                   	ret    

00010a71 <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   10a71:	55                   	push   %ebp
   10a72:	89 e5                	mov    %esp,%ebp
   10a74:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   10a77:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7a:	c1 e8 10             	shr    $0x10,%eax
   10a7d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   10a81:	8b 45 08             	mov    0x8(%ebp),%eax
   10a84:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10a88:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a8b:	83 e8 01             	sub    $0x1,%eax
   10a8e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10a92:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10a96:	90                   	nop
   10a97:	c9                   	leave  
   10a98:	c3                   	ret    

00010a99 <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   10a99:	55                   	push   %ebp
   10a9a:	89 e5                	mov    %esp,%ebp
   10a9c:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   10a9f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10aa2:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10aab:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10aae:	ff 28                	ljmp   *(%eax)
}
   10ab0:	90                   	nop
   10ab1:	c9                   	leave  
   10ab2:	c3                   	ret    

00010ab3 <segment_desc_set>:
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

//  设置GDT表函数
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   10ab3:	55                   	push   %ebp
   10ab4:	89 e5                	mov    %esp,%ebp
   10ab6:	83 ec 14             	sub    $0x14,%esp
   10ab9:	8b 45 14             	mov    0x14(%ebp),%eax
   10abc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10ac0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac3:	83 e0 f8             	and    $0xfffffff8,%eax
   10ac6:	05 80 39 01 00       	add    $0x13980,%eax
   10acb:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
    if (limit > 0xfffff)
   10ace:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10ad5:	76 0f                	jbe    10ae6 <segment_desc_set+0x33>
    {
        attr |= SEG_G;
   10ad7:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10add:	8b 45 10             	mov    0x10(%ebp),%eax
   10ae0:	c1 e8 0c             	shr    $0xc,%eax
   10ae3:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   10ae6:	8b 45 10             	mov    0x10(%ebp),%eax
   10ae9:	89 c2                	mov    %eax,%edx
   10aeb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10aee:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10af1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10af4:	89 c2                	mov    %eax,%edx
   10af6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10af9:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10afd:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b00:	c1 e8 10             	shr    $0x10,%eax
   10b03:	89 c2                	mov    %eax,%edx
   10b05:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b08:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   10b0b:	8b 45 10             	mov    0x10(%ebp),%eax
   10b0e:	c1 e8 10             	shr    $0x10,%eax
   10b11:	c1 e0 08             	shl    $0x8,%eax
   10b14:	66 25 00 0f          	and    $0xf00,%ax
   10b18:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10b1c:	89 c2                	mov    %eax,%edx
   10b1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b21:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10b25:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b28:	c1 e8 18             	shr    $0x18,%eax
   10b2b:	89 c2                	mov    %eax,%edx
   10b2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b30:	88 50 07             	mov    %dl,0x7(%eax)
}
   10b33:	90                   	nop
   10b34:	c9                   	leave  
   10b35:	c3                   	ret    

00010b36 <init_gdt>:

void init_gdt(void)
{
   10b36:	55                   	push   %ebp
   10b37:	89 e5                	mov    %esp,%ebp
   10b39:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10b3c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10b43:	eb 19                	jmp    10b5e <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10b45:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b48:	c1 e0 03             	shl    $0x3,%eax
   10b4b:	6a 00                	push   $0x0
   10b4d:	6a 00                	push   $0x0
   10b4f:	6a 00                	push   $0x0
   10b51:	50                   	push   %eax
   10b52:	e8 5c ff ff ff       	call   10ab3 <segment_desc_set>
   10b57:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10b5a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10b5e:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10b65:	7e de                	jle    10b45 <init_gdt+0xf>
    }

    // 设置GDT表中的CS段
    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10b67:	68 9a 40 00 00       	push   $0x409a
   10b6c:	6a ff                	push   $0xffffffff
   10b6e:	6a 00                	push   $0x0
   10b70:	6a 08                	push   $0x8
   10b72:	e8 3c ff ff ff       	call   10ab3 <segment_desc_set>
   10b77:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10b7a:	68 92 40 00 00       	push   $0x4092
   10b7f:	6a ff                	push   $0xffffffff
   10b81:	6a 00                	push   $0x0
   10b83:	6a 10                	push   $0x10
   10b85:	e8 29 ff ff ff       	call   10ab3 <segment_desc_set>
   10b8a:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10b8d:	b8 80 39 01 00       	mov    $0x13980,%eax
   10b92:	68 00 08 00 00       	push   $0x800
   10b97:	50                   	push   %eax
   10b98:	e8 d4 fe ff ff       	call   10a71 <lgdt>
   10b9d:	83 c4 08             	add    $0x8,%esp
}
   10ba0:	90                   	nop
   10ba1:	c9                   	leave  
   10ba2:	c3                   	ret    

00010ba3 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   10ba3:	55                   	push   %ebp
   10ba4:	89 e5                	mov    %esp,%ebp
   10ba6:	83 ec 08             	sub    $0x8,%esp
   10ba9:	8b 55 0c             	mov    0xc(%ebp),%edx
   10bac:	8b 45 14             	mov    0x14(%ebp),%eax
   10baf:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10bb3:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

    desc->offset15_0 = offset & 0xffff;
   10bb7:	8b 45 10             	mov    0x10(%ebp),%eax
   10bba:	89 c2                	mov    %eax,%edx
   10bbc:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbf:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10bc2:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10bc9:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10bcd:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd0:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10bd4:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10bd8:	8b 45 10             	mov    0x10(%ebp),%eax
   10bdb:	c1 e8 10             	shr    $0x10,%eax
   10bde:	89 c2                	mov    %eax,%edx
   10be0:	8b 45 08             	mov    0x8(%ebp),%eax
   10be3:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10be7:	90                   	nop
   10be8:	c9                   	leave  
   10be9:	c3                   	ret    

00010bea <cpu_init>:

void cpu_init(void)
{
   10bea:	55                   	push   %ebp
   10beb:	89 e5                	mov    %esp,%ebp
   10bed:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   10bf0:	83 ec 0c             	sub    $0xc,%esp
   10bf3:	68 80 41 01 00       	push   $0x14180
   10bf8:	e8 54 0a 00 00       	call   11651 <mutex_init>
   10bfd:	83 c4 10             	add    $0x10,%esp
    // 初始化GDT表
    init_gdt();
   10c00:	e8 31 ff ff ff       	call   10b36 <init_gdt>
}
   10c05:	90                   	nop
   10c06:	c9                   	leave  
   10c07:	c3                   	ret    

00010c08 <gdt_alloc_desc>:

int gdt_alloc_desc()
{
   10c08:	55                   	push   %ebp
   10c09:	89 e5                	mov    %esp,%ebp
   10c0b:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);
   10c0e:	83 ec 0c             	sub    $0xc,%esp
   10c11:	68 80 41 01 00       	push   $0x14180
   10c16:	e8 64 0a 00 00       	call   1167f <mutex_lock>
   10c1b:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10c1e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10c25:	eb 36                	jmp    10c5d <gdt_alloc_desc+0x55>
    {

        segment_desc_t *desc = gdt_table + i;
   10c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c2a:	c1 e0 03             	shl    $0x3,%eax
   10c2d:	05 80 39 01 00       	add    $0x13980,%eax
   10c32:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0)
   10c35:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c38:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10c3c:	66 85 c0             	test   %ax,%ax
   10c3f:	75 18                	jne    10c59 <gdt_alloc_desc+0x51>
        {
            mutex_unlock(&mutex);
   10c41:	83 ec 0c             	sub    $0xc,%esp
   10c44:	68 80 41 01 00       	push   $0x14180
   10c49:	e8 c2 0a 00 00       	call   11710 <mutex_unlock>
   10c4e:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c54:	c1 e0 03             	shl    $0x3,%eax
   10c57:	eb 22                	jmp    10c7b <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10c59:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10c5d:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10c64:	7e c1                	jle    10c27 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);
   10c66:	83 ec 0c             	sub    $0xc,%esp
   10c69:	68 80 41 01 00       	push   $0x14180
   10c6e:	e8 9d 0a 00 00       	call   11710 <mutex_unlock>
   10c73:	83 c4 10             	add    $0x10,%esp
    return -1;
   10c76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10c7b:	c9                   	leave  
   10c7c:	c3                   	ret    

00010c7d <switch_to_tss>:

void switch_to_tss(int tss_sel)
{
   10c7d:	55                   	push   %ebp
   10c7e:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10c80:	8b 45 08             	mov    0x8(%ebp),%eax
   10c83:	6a 00                	push   $0x0
   10c85:	50                   	push   %eax
   10c86:	e8 0e fe ff ff       	call   10a99 <far_jump>
   10c8b:	83 c4 08             	add    $0x8,%esp
   10c8e:	90                   	nop
   10c8f:	c9                   	leave  
   10c90:	c3                   	ret    

00010c91 <inb>:
static inline uint8_t inb(uint16_t port) {
   10c91:	55                   	push   %ebp
   10c92:	89 e5                	mov    %esp,%ebp
   10c94:	83 ec 14             	sub    $0x14,%esp
   10c97:	8b 45 08             	mov    0x8(%ebp),%eax
   10c9a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10c9e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ca2:	89 c2                	mov    %eax,%edx
   10ca4:	ec                   	in     (%dx),%al
   10ca5:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10ca8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10cac:	c9                   	leave  
   10cad:	c3                   	ret    

00010cae <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10cae:	55                   	push   %ebp
   10caf:	89 e5                	mov    %esp,%ebp
   10cb1:	83 ec 08             	sub    $0x8,%esp
   10cb4:	8b 55 08             	mov    0x8(%ebp),%edx
   10cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cba:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10cbe:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10cc1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10cc5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10cc9:	ee                   	out    %al,(%dx)
}
   10cca:	90                   	nop
   10ccb:	c9                   	leave  
   10ccc:	c3                   	ret    

00010ccd <cli>:
static inline void cli(void){
   10ccd:	55                   	push   %ebp
   10cce:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10cd0:	fa                   	cli    
}
   10cd1:	90                   	nop
   10cd2:	5d                   	pop    %ebp
   10cd3:	c3                   	ret    

00010cd4 <sti>:
static inline void sti(void){
   10cd4:	55                   	push   %ebp
   10cd5:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10cd7:	fb                   	sti    
}
   10cd8:	90                   	nop
   10cd9:	5d                   	pop    %ebp
   10cda:	c3                   	ret    

00010cdb <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   10cdb:	55                   	push   %ebp
   10cdc:	89 e5                	mov    %esp,%ebp
   10cde:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   10ce1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce4:	c1 e8 10             	shr    $0x10,%eax
   10ce7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   10cee:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cf5:	83 e8 01             	sub    $0x1,%eax
   10cf8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10cfc:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10d00:	90                   	nop
   10d01:	c9                   	leave  
   10d02:	c3                   	ret    

00010d03 <hlt>:
static inline void hlt (void) {
   10d03:	55                   	push   %ebp
   10d04:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10d06:	f4                   	hlt    
}
   10d07:	90                   	nop
   10d08:	5d                   	pop    %ebp
   10d09:	c3                   	ret    

00010d0a <read_eflags>:

static inline uint32_t read_eflags (void) {
   10d0a:	55                   	push   %ebp
   10d0b:	89 e5                	mov    %esp,%ebp
   10d0d:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__ ("pushf\n\tpop %%eax":"=a"(eflags));    
   10d10:	9c                   	pushf  
   10d11:	58                   	pop    %eax
   10d12:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10d15:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10d18:	c9                   	leave  
   10d19:	c3                   	ret    

00010d1a <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   10d1a:	55                   	push   %ebp
   10d1b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__ ("push %%eax\n\tpopf"::"a"(eflags));  
   10d1d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d20:	50                   	push   %eax
   10d21:	9d                   	popf   
}
   10d22:	90                   	nop
   10d23:	5d                   	pop    %ebp
   10d24:	c3                   	ret    

00010d25 <dump_core_regs>:

void exception_handler_unknown(void);

// 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t *frame)
{
   10d25:	55                   	push   %ebp
   10d26:	89 e5                	mov    %esp,%ebp
   10d28:	57                   	push   %edi
   10d29:	56                   	push   %esi
   10d2a:	53                   	push   %ebx
   10d2b:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d", frame->num, frame->error_code);
   10d2e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d31:	8b 50 34             	mov    0x34(%eax),%edx
   10d34:	8b 45 08             	mov    0x8(%ebp),%eax
   10d37:	8b 40 30             	mov    0x30(%eax),%eax
   10d3a:	83 ec 04             	sub    $0x4,%esp
   10d3d:	52                   	push   %edx
   10d3e:	50                   	push   %eax
   10d3f:	68 d4 24 01 00       	push   $0x124d4
   10d44:	e8 2f 16 00 00       	call   12378 <log_printf>
   10d49:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   10d4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4f:	8b 38                	mov    (%eax),%edi
   10d51:	8b 45 08             	mov    0x8(%ebp),%eax
   10d54:	8b 70 04             	mov    0x4(%eax),%esi
   10d57:	8b 45 08             	mov    0x8(%ebp),%eax
   10d5a:	8b 58 0c             	mov    0xc(%eax),%ebx
   10d5d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d60:	8b 48 08             	mov    0x8(%eax),%ecx
   10d63:	8b 45 08             	mov    0x8(%ebp),%eax
   10d66:	8b 50 0c             	mov    0xc(%eax),%edx
   10d69:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6c:	8b 40 3c             	mov    0x3c(%eax),%eax
   10d6f:	83 ec 04             	sub    $0x4,%esp
   10d72:	57                   	push   %edi
   10d73:	56                   	push   %esi
   10d74:	53                   	push   %ebx
   10d75:	51                   	push   %ecx
   10d76:	52                   	push   %edx
   10d77:	50                   	push   %eax
   10d78:	68 ec 24 01 00       	push   $0x124ec
   10d7d:	e8 f6 15 00 00       	call   12378 <log_printf>
   10d82:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   10d85:	8b 45 08             	mov    0x8(%ebp),%eax
   10d88:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10d8b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d8e:	8b 40 18             	mov    0x18(%eax),%eax
   10d91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10d94:	8b 45 08             	mov    0x8(%ebp),%eax
   10d97:	8b 58 14             	mov    0x14(%eax),%ebx
   10d9a:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10d9d:	8b 45 08             	mov    0x8(%ebp),%eax
   10da0:	8b 78 10             	mov    0x10(%eax),%edi
   10da3:	8b 45 08             	mov    0x8(%ebp),%eax
   10da6:	8b 70 24             	mov    0x24(%eax),%esi
   10da9:	8b 45 08             	mov    0x8(%ebp),%eax
   10dac:	8b 58 28             	mov    0x28(%eax),%ebx
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	8b 50 20             	mov    0x20(%eax),%edx
   10db5:	8b 45 08             	mov    0x8(%ebp),%eax
   10db8:	8b 40 2c             	mov    0x2c(%eax),%eax
   10dbb:	83 ec 0c             	sub    $0xc,%esp
   10dbe:	51                   	push   %ecx
   10dbf:	ff 75 e4             	pushl  -0x1c(%ebp)
   10dc2:	ff 75 e0             	pushl  -0x20(%ebp)
   10dc5:	57                   	push   %edi
   10dc6:	56                   	push   %esi
   10dc7:	53                   	push   %ebx
   10dc8:	52                   	push   %edx
   10dc9:	50                   	push   %eax
   10dca:	68 18 25 01 00       	push   $0x12518
   10dcf:	e8 a4 15 00 00       	call   12378 <log_printf>
   10dd4:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10dd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dda:	8b 50 40             	mov    0x40(%eax),%edx
   10ddd:	8b 45 08             	mov    0x8(%ebp),%eax
   10de0:	8b 40 38             	mov    0x38(%eax),%eax
   10de3:	83 ec 04             	sub    $0x4,%esp
   10de6:	52                   	push   %edx
   10de7:	50                   	push   %eax
   10de8:	68 61 25 01 00       	push   $0x12561
   10ded:	e8 86 15 00 00       	call   12378 <log_printf>
   10df2:	83 c4 10             	add    $0x10,%esp
}
   10df5:	90                   	nop
   10df6:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10df9:	5b                   	pop    %ebx
   10dfa:	5e                   	pop    %esi
   10dfb:	5f                   	pop    %edi
   10dfc:	5d                   	pop    %ebp
   10dfd:	c3                   	ret    

00010dfe <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10dfe:	55                   	push   %ebp
   10dff:	89 e5                	mov    %esp,%ebp
   10e01:	83 ec 08             	sub    $0x8,%esp

    log_printf("----------------------------");
   10e04:	83 ec 0c             	sub    $0xc,%esp
   10e07:	68 77 25 01 00       	push   $0x12577
   10e0c:	e8 67 15 00 00       	call   12378 <log_printf>
   10e11:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s", message);
   10e14:	83 ec 08             	sub    $0x8,%esp
   10e17:	ff 75 0c             	pushl  0xc(%ebp)
   10e1a:	68 94 25 01 00       	push   $0x12594
   10e1f:	e8 54 15 00 00       	call   12378 <log_printf>
   10e24:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10e27:	83 ec 0c             	sub    $0xc,%esp
   10e2a:	ff 75 08             	pushl  0x8(%ebp)
   10e2d:	e8 f3 fe ff ff       	call   10d25 <dump_core_regs>
   10e32:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   10e35:	e8 c9 fe ff ff       	call   10d03 <hlt>
   10e3a:	eb f9                	jmp    10e35 <do_default_handler+0x37>

00010e3c <do_handler_unknown>:
    }
}

// 异常处理函数
void do_handler_unknown(exception_frame_t *frame)
{
   10e3c:	55                   	push   %ebp
   10e3d:	89 e5                	mov    %esp,%ebp
   10e3f:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame, "unknown exception");
   10e42:	83 ec 08             	sub    $0x8,%esp
   10e45:	68 ae 25 01 00       	push   $0x125ae
   10e4a:	ff 75 08             	pushl  0x8(%ebp)
   10e4d:	e8 ac ff ff ff       	call   10dfe <do_default_handler>
   10e52:	83 c4 10             	add    $0x10,%esp
}
   10e55:	90                   	nop
   10e56:	c9                   	leave  
   10e57:	c3                   	ret    

00010e58 <do_handler_divider>:
void do_handler_divider(exception_frame_t *frame)
{
   10e58:	55                   	push   %ebp
   10e59:	89 e5                	mov    %esp,%ebp
   10e5b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divder exception");
   10e5e:	83 ec 08             	sub    $0x8,%esp
   10e61:	68 c0 25 01 00       	push   $0x125c0
   10e66:	ff 75 08             	pushl  0x8(%ebp)
   10e69:	e8 90 ff ff ff       	call   10dfe <do_default_handler>
   10e6e:	83 c4 10             	add    $0x10,%esp
}
   10e71:	90                   	nop
   10e72:	c9                   	leave  
   10e73:	c3                   	ret    

00010e74 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t *frame)
{
   10e74:	55                   	push   %ebp
   10e75:	89 e5                	mov    %esp,%ebp
   10e77:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10e7a:	83 ec 08             	sub    $0x8,%esp
   10e7d:	68 d1 25 01 00       	push   $0x125d1
   10e82:	ff 75 08             	pushl  0x8(%ebp)
   10e85:	e8 74 ff ff ff       	call   10dfe <do_default_handler>
   10e8a:	83 c4 10             	add    $0x10,%esp
}
   10e8d:	90                   	nop
   10e8e:	c9                   	leave  
   10e8f:	c3                   	ret    

00010e90 <do_handler_NMI>:
void do_handler_NMI(exception_frame_t *frame)
{
   10e90:	55                   	push   %ebp
   10e91:	89 e5                	mov    %esp,%ebp
   10e93:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10e96:	83 ec 08             	sub    $0x8,%esp
   10e99:	68 e1 25 01 00       	push   $0x125e1
   10e9e:	ff 75 08             	pushl  0x8(%ebp)
   10ea1:	e8 58 ff ff ff       	call   10dfe <do_default_handler>
   10ea6:	83 c4 10             	add    $0x10,%esp
}
   10ea9:	90                   	nop
   10eaa:	c9                   	leave  
   10eab:	c3                   	ret    

00010eac <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t *frame)
{
   10eac:	55                   	push   %ebp
   10ead:	89 e5                	mov    %esp,%ebp
   10eaf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10eb2:	83 ec 08             	sub    $0x8,%esp
   10eb5:	68 f0 25 01 00       	push   $0x125f0
   10eba:	ff 75 08             	pushl  0x8(%ebp)
   10ebd:	e8 3c ff ff ff       	call   10dfe <do_default_handler>
   10ec2:	83 c4 10             	add    $0x10,%esp
}
   10ec5:	90                   	nop
   10ec6:	c9                   	leave  
   10ec7:	c3                   	ret    

00010ec8 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   10ec8:	55                   	push   %ebp
   10ec9:	89 e5                	mov    %esp,%ebp
   10ecb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10ece:	83 ec 08             	sub    $0x8,%esp
   10ed1:	68 fc 25 01 00       	push   $0x125fc
   10ed6:	ff 75 08             	pushl  0x8(%ebp)
   10ed9:	e8 20 ff ff ff       	call   10dfe <do_default_handler>
   10ede:	83 c4 10             	add    $0x10,%esp
}
   10ee1:	90                   	nop
   10ee2:	c9                   	leave  
   10ee3:	c3                   	ret    

00010ee4 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t *frame)
{
   10ee4:	55                   	push   %ebp
   10ee5:	89 e5                	mov    %esp,%ebp
   10ee7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10eea:	83 ec 08             	sub    $0x8,%esp
   10eed:	68 06 26 01 00       	push   $0x12606
   10ef2:	ff 75 08             	pushl  0x8(%ebp)
   10ef5:	e8 04 ff ff ff       	call   10dfe <do_default_handler>
   10efa:	83 c4 10             	add    $0x10,%esp
}
   10efd:	90                   	nop
   10efe:	c9                   	leave  
   10eff:	c3                   	ret    

00010f00 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t *frame)
{
   10f00:	55                   	push   %ebp
   10f01:	89 e5                	mov    %esp,%ebp
   10f03:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10f06:	83 ec 08             	sub    $0x8,%esp
   10f09:	68 1c 26 01 00       	push   $0x1261c
   10f0e:	ff 75 08             	pushl  0x8(%ebp)
   10f11:	e8 e8 fe ff ff       	call   10dfe <do_default_handler>
   10f16:	83 c4 10             	add    $0x10,%esp
}
   10f19:	90                   	nop
   10f1a:	c9                   	leave  
   10f1b:	c3                   	ret    

00010f1c <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t *frame)
{
   10f1c:	55                   	push   %ebp
   10f1d:	89 e5                	mov    %esp,%ebp
   10f1f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10f22:	83 ec 08             	sub    $0x8,%esp
   10f25:	68 2c 26 01 00       	push   $0x1262c
   10f2a:	ff 75 08             	pushl  0x8(%ebp)
   10f2d:	e8 cc fe ff ff       	call   10dfe <do_default_handler>
   10f32:	83 c4 10             	add    $0x10,%esp
}
   10f35:	90                   	nop
   10f36:	c9                   	leave  
   10f37:	c3                   	ret    

00010f38 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   10f38:	55                   	push   %ebp
   10f39:	89 e5                	mov    %esp,%ebp
   10f3b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10f3e:	83 ec 08             	sub    $0x8,%esp
   10f41:	68 42 26 01 00       	push   $0x12642
   10f46:	ff 75 08             	pushl  0x8(%ebp)
   10f49:	e8 b0 fe ff ff       	call   10dfe <do_default_handler>
   10f4e:	83 c4 10             	add    $0x10,%esp
}
   10f51:	90                   	nop
   10f52:	c9                   	leave  
   10f53:	c3                   	ret    

00010f54 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   10f54:	55                   	push   %ebp
   10f55:	89 e5                	mov    %esp,%ebp
   10f57:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10f5a:	83 ec 08             	sub    $0x8,%esp
   10f5d:	68 50 26 01 00       	push   $0x12650
   10f62:	ff 75 08             	pushl  0x8(%ebp)
   10f65:	e8 94 fe ff ff       	call   10dfe <do_default_handler>
   10f6a:	83 c4 10             	add    $0x10,%esp
}
   10f6d:	90                   	nop
   10f6e:	c9                   	leave  
   10f6f:	c3                   	ret    

00010f70 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   10f70:	55                   	push   %ebp
   10f71:	89 e5                	mov    %esp,%ebp
   10f73:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10f76:	83 ec 08             	sub    $0x8,%esp
   10f79:	68 5c 26 01 00       	push   $0x1265c
   10f7e:	ff 75 08             	pushl  0x8(%ebp)
   10f81:	e8 78 fe ff ff       	call   10dfe <do_default_handler>
   10f86:	83 c4 10             	add    $0x10,%esp
}
   10f89:	90                   	nop
   10f8a:	c9                   	leave  
   10f8b:	c3                   	ret    

00010f8c <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   10f8c:	55                   	push   %ebp
   10f8d:	89 e5                	mov    %esp,%ebp
   10f8f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10f92:	83 ec 08             	sub    $0x8,%esp
   10f95:	68 71 26 01 00       	push   $0x12671
   10f9a:	ff 75 08             	pushl  0x8(%ebp)
   10f9d:	e8 5c fe ff ff       	call   10dfe <do_default_handler>
   10fa2:	83 c4 10             	add    $0x10,%esp
}
   10fa5:	90                   	nop
   10fa6:	c9                   	leave  
   10fa7:	c3                   	ret    

00010fa8 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   10fa8:	55                   	push   %ebp
   10fa9:	89 e5                	mov    %esp,%ebp
   10fab:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10fae:	83 ec 08             	sub    $0x8,%esp
   10fb1:	68 86 26 01 00       	push   $0x12686
   10fb6:	ff 75 08             	pushl  0x8(%ebp)
   10fb9:	e8 40 fe ff ff       	call   10dfe <do_default_handler>
   10fbe:	83 c4 10             	add    $0x10,%esp
}
   10fc1:	90                   	nop
   10fc2:	c9                   	leave  
   10fc3:	c3                   	ret    

00010fc4 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   10fc4:	55                   	push   %ebp
   10fc5:	89 e5                	mov    %esp,%ebp
   10fc7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10fca:	83 ec 08             	sub    $0x8,%esp
   10fcd:	68 9a 26 01 00       	push   $0x1269a
   10fd2:	ff 75 08             	pushl  0x8(%ebp)
   10fd5:	e8 24 fe ff ff       	call   10dfe <do_default_handler>
   10fda:	83 c4 10             	add    $0x10,%esp
}
   10fdd:	90                   	nop
   10fde:	c9                   	leave  
   10fdf:	c3                   	ret    

00010fe0 <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t *frame)
{
   10fe0:	55                   	push   %ebp
   10fe1:	89 e5                	mov    %esp,%ebp
   10fe3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10fe6:	83 ec 08             	sub    $0x8,%esp
   10fe9:	68 a6 26 01 00       	push   $0x126a6
   10fee:	ff 75 08             	pushl  0x8(%ebp)
   10ff1:	e8 08 fe ff ff       	call   10dfe <do_default_handler>
   10ff6:	83 c4 10             	add    $0x10,%esp
}
   10ff9:	90                   	nop
   10ffa:	c9                   	leave  
   10ffb:	c3                   	ret    

00010ffc <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   10ffc:	55                   	push   %ebp
   10ffd:	89 e5                	mov    %esp,%ebp
   10fff:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   11002:	83 ec 08             	sub    $0x8,%esp
   11005:	68 c4 26 01 00       	push   $0x126c4
   1100a:	ff 75 08             	pushl  0x8(%ebp)
   1100d:	e8 ec fd ff ff       	call   10dfe <do_default_handler>
   11012:	83 c4 10             	add    $0x10,%esp
}
   11015:	90                   	nop
   11016:	c9                   	leave  
   11017:	c3                   	ret    

00011018 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   11018:	55                   	push   %ebp
   11019:	89 e5                	mov    %esp,%ebp
   1101b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   1101e:	83 ec 08             	sub    $0x8,%esp
   11021:	68 d5 26 01 00       	push   $0x126d5
   11026:	ff 75 08             	pushl  0x8(%ebp)
   11029:	e8 d0 fd ff ff       	call   10dfe <do_default_handler>
   1102e:	83 c4 10             	add    $0x10,%esp
}
   11031:	90                   	nop
   11032:	c9                   	leave  
   11033:	c3                   	ret    

00011034 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t *frame)
{
   11034:	55                   	push   %ebp
   11035:	89 e5                	mov    %esp,%ebp
   11037:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   1103a:	83 ec 08             	sub    $0x8,%esp
   1103d:	68 e4 26 01 00       	push   $0x126e4
   11042:	ff 75 08             	pushl  0x8(%ebp)
   11045:	e8 b4 fd ff ff       	call   10dfe <do_default_handler>
   1104a:	83 c4 10             	add    $0x10,%esp
}
   1104d:	90                   	nop
   1104e:	c9                   	leave  
   1104f:	c3                   	ret    

00011050 <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t *frame)
{
   11050:	55                   	push   %ebp
   11051:	89 e5                	mov    %esp,%ebp
   11053:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   11056:	83 ec 08             	sub    $0x8,%esp
   11059:	68 03 27 01 00       	push   $0x12703
   1105e:	ff 75 08             	pushl  0x8(%ebp)
   11061:	e8 98 fd ff ff       	call   10dfe <do_default_handler>
   11066:	83 c4 10             	add    $0x10,%esp
}
   11069:	90                   	nop
   1106a:	c9                   	leave  
   1106b:	c3                   	ret    

0001106c <init_pic>:
static gate_desc_t idt_table[IDE_TABLE_NR];

// 初始化中断控制器
// 硬件相关 --- 待解决
static void init_pic(void)
{
   1106c:	55                   	push   %ebp
   1106d:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1106f:	6a 11                	push   $0x11
   11071:	6a 20                	push   $0x20
   11073:	e8 36 fc ff ff       	call   10cae <outb>
   11078:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   1107b:	6a 20                	push   $0x20
   1107d:	6a 21                	push   $0x21
   1107f:	e8 2a fc ff ff       	call   10cae <outb>
   11084:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   11087:	6a 04                	push   $0x4
   11089:	6a 21                	push   $0x21
   1108b:	e8 1e fc ff ff       	call   10cae <outb>
   11090:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11093:	6a 01                	push   $0x1
   11095:	6a 21                	push   $0x21
   11097:	e8 12 fc ff ff       	call   10cae <outb>
   1109c:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   1109f:	6a 11                	push   $0x11
   110a1:	68 a0 00 00 00       	push   $0xa0
   110a6:	e8 03 fc ff ff       	call   10cae <outb>
   110ab:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   110ae:	6a 28                	push   $0x28
   110b0:	68 a1 00 00 00       	push   $0xa1
   110b5:	e8 f4 fb ff ff       	call   10cae <outb>
   110ba:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   110bd:	6a 02                	push   $0x2
   110bf:	68 a1 00 00 00       	push   $0xa1
   110c4:	e8 e5 fb ff ff       	call   10cae <outb>
   110c9:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   110cc:	6a 01                	push   $0x1
   110ce:	68 a1 00 00 00       	push   $0xa1
   110d3:	e8 d6 fb ff ff       	call   10cae <outb>
   110d8:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   110db:	68 fb 00 00 00       	push   $0xfb
   110e0:	6a 21                	push   $0x21
   110e2:	e8 c7 fb ff ff       	call   10cae <outb>
   110e7:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   110ea:	68 ff 00 00 00       	push   $0xff
   110ef:	68 a1 00 00 00       	push   $0xa1
   110f4:	e8 b5 fb ff ff       	call   10cae <outb>
   110f9:	83 c4 08             	add    $0x8,%esp
}
   110fc:	90                   	nop
   110fd:	c9                   	leave  
   110fe:	c3                   	ret    

000110ff <irq_init>:

void irq_init(void)
{
   110ff:	55                   	push   %ebp
   11100:	89 e5                	mov    %esp,%ebp
   11102:	83 ec 18             	sub    $0x18,%esp

    for (int i = 0; i < IDE_TABLE_NR; i++)
   11105:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1110c:	eb 25                	jmp    11133 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   1110e:	ba 28 00 01 00       	mov    $0x10028,%edx
   11113:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11116:	c1 e0 03             	shl    $0x3,%eax
   11119:	05 a0 41 01 00       	add    $0x141a0,%eax
   1111e:	68 00 8e 00 00       	push   $0x8e00
   11123:	52                   	push   %edx
   11124:	6a 08                	push   $0x8
   11126:	50                   	push   %eax
   11127:	e8 77 fa ff ff       	call   10ba3 <gate_desc_set>
   1112c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDE_TABLE_NR; i++)
   1112f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11133:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11137:	7e d5                	jle    1110e <irq_init+0xf>
                      GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   11139:	83 ec 08             	sub    $0x8,%esp
   1113c:	68 47 00 01 00       	push   $0x10047
   11141:	6a 00                	push   $0x0
   11143:	e8 65 01 00 00       	call   112ad <irq_install>
   11148:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, exception_handler_Debug);
   1114b:	83 ec 08             	sub    $0x8,%esp
   1114e:	68 66 00 01 00       	push   $0x10066
   11153:	6a 01                	push   $0x1
   11155:	e8 53 01 00 00       	call   112ad <irq_install>
   1115a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, exception_handler_NMI);
   1115d:	83 ec 08             	sub    $0x8,%esp
   11160:	68 85 00 01 00       	push   $0x10085
   11165:	6a 02                	push   $0x2
   11167:	e8 41 01 00 00       	call   112ad <irq_install>
   1116c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, exception_handler_breakpoint);
   1116f:	83 ec 08             	sub    $0x8,%esp
   11172:	68 a4 00 01 00       	push   $0x100a4
   11177:	6a 03                	push   $0x3
   11179:	e8 2f 01 00 00       	call   112ad <irq_install>
   1117e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, exception_handler_overflow);
   11181:	83 ec 08             	sub    $0x8,%esp
   11184:	68 c3 00 01 00       	push   $0x100c3
   11189:	6a 04                	push   $0x4
   1118b:	e8 1d 01 00 00       	call   112ad <irq_install>
   11190:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, exception_handler_bound_range);
   11193:	83 ec 08             	sub    $0x8,%esp
   11196:	68 e2 00 01 00       	push   $0x100e2
   1119b:	6a 05                	push   $0x5
   1119d:	e8 0b 01 00 00       	call   112ad <irq_install>
   111a2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   111a5:	83 ec 08             	sub    $0x8,%esp
   111a8:	68 01 01 01 00       	push   $0x10101
   111ad:	6a 06                	push   $0x6
   111af:	e8 f9 00 00 00       	call   112ad <irq_install>
   111b4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, exception_handler_device_unavailable);
   111b7:	83 ec 08             	sub    $0x8,%esp
   111ba:	68 20 01 01 00       	push   $0x10120
   111bf:	6a 07                	push   $0x7
   111c1:	e8 e7 00 00 00       	call   112ad <irq_install>
   111c6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, exception_handler_double_fault);
   111c9:	83 ec 08             	sub    $0x8,%esp
   111cc:	68 3f 01 01 00       	push   $0x1013f
   111d1:	6a 08                	push   $0x8
   111d3:	e8 d5 00 00 00       	call   112ad <irq_install>
   111d8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, exception_handler_invalid_tss);
   111db:	83 ec 08             	sub    $0x8,%esp
   111de:	68 5c 01 01 00       	push   $0x1015c
   111e3:	6a 0a                	push   $0xa
   111e5:	e8 c3 00 00 00       	call   112ad <irq_install>
   111ea:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, exception_handler_segment_not_present);
   111ed:	83 ec 08             	sub    $0x8,%esp
   111f0:	68 79 01 01 00       	push   $0x10179
   111f5:	6a 0b                	push   $0xb
   111f7:	e8 b1 00 00 00       	call   112ad <irq_install>
   111fc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   111ff:	83 ec 08             	sub    $0x8,%esp
   11202:	68 96 01 01 00       	push   $0x10196
   11207:	6a 0c                	push   $0xc
   11209:	e8 9f 00 00 00       	call   112ad <irq_install>
   1120e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, exception_handler_general_protection);
   11211:	83 ec 08             	sub    $0x8,%esp
   11214:	68 b3 01 01 00       	push   $0x101b3
   11219:	6a 0d                	push   $0xd
   1121b:	e8 8d 00 00 00       	call   112ad <irq_install>
   11220:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, exception_handler_page_fault);
   11223:	83 ec 08             	sub    $0x8,%esp
   11226:	68 d0 01 01 00       	push   $0x101d0
   1122b:	6a 0e                	push   $0xe
   1122d:	e8 7b 00 00 00       	call   112ad <irq_install>
   11232:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, exception_handler_fpu_error);
   11235:	83 ec 08             	sub    $0x8,%esp
   11238:	68 ed 01 01 00       	push   $0x101ed
   1123d:	6a 10                	push   $0x10
   1123f:	e8 69 00 00 00       	call   112ad <irq_install>
   11244:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, exception_handler_alignment_check);
   11247:	83 ec 08             	sub    $0x8,%esp
   1124a:	68 0c 02 01 00       	push   $0x1020c
   1124f:	6a 11                	push   $0x11
   11251:	e8 57 00 00 00       	call   112ad <irq_install>
   11256:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, exception_handler_machine_check);
   11259:	83 ec 08             	sub    $0x8,%esp
   1125c:	68 29 02 01 00       	push   $0x10229
   11261:	6a 12                	push   $0x12
   11263:	e8 45 00 00 00       	call   112ad <irq_install>
   11268:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, exception_handler_smd_exception);
   1126b:	83 ec 08             	sub    $0x8,%esp
   1126e:	68 48 02 01 00       	push   $0x10248
   11273:	6a 13                	push   $0x13
   11275:	e8 33 00 00 00       	call   112ad <irq_install>
   1127a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, exception_handler_virtual_exception);
   1127d:	83 ec 08             	sub    $0x8,%esp
   11280:	68 67 02 01 00       	push   $0x10267
   11285:	6a 14                	push   $0x14
   11287:	e8 21 00 00 00       	call   112ad <irq_install>
   1128c:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   1128f:	b8 a0 41 01 00       	mov    $0x141a0,%eax
   11294:	83 ec 08             	sub    $0x8,%esp
   11297:	68 00 04 00 00       	push   $0x400
   1129c:	50                   	push   %eax
   1129d:	e8 39 fa ff ff       	call   10cdb <lidt>
   112a2:	83 c4 10             	add    $0x10,%esp

    // 初始化中断控制器
    init_pic();
   112a5:	e8 c2 fd ff ff       	call   1106c <init_pic>
}
   112aa:	90                   	nop
   112ab:	c9                   	leave  
   112ac:	c3                   	ret    

000112ad <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   112ad:	55                   	push   %ebp
   112ae:	89 e5                	mov    %esp,%ebp
   112b0:	83 ec 08             	sub    $0x8,%esp

    if (irq_num >= IDE_TABLE_NR)
   112b3:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112b7:	7e 07                	jle    112c0 <irq_install+0x13>
    {
        return -1;
   112b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   112be:	eb 25                	jmp    112e5 <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS,
   112c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c3:	8b 55 08             	mov    0x8(%ebp),%edx
   112c6:	c1 e2 03             	shl    $0x3,%edx
   112c9:	81 c2 a0 41 01 00    	add    $0x141a0,%edx
   112cf:	68 00 8e 00 00       	push   $0x8e00
   112d4:	50                   	push   %eax
   112d5:	6a 08                	push   $0x8
   112d7:	52                   	push   %edx
   112d8:	e8 c6 f8 ff ff       	call   10ba3 <gate_desc_set>
   112dd:	83 c4 10             	add    $0x10,%esp
                  (uint32_t)handler, GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   112e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   112e5:	c9                   	leave  
   112e6:	c3                   	ret    

000112e7 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable(int irq_num)
{
   112e7:	55                   	push   %ebp
   112e8:	89 e5                	mov    %esp,%ebp
   112ea:	53                   	push   %ebx
   112eb:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   112ee:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   112f2:	7e 78                	jle    1136c <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   112f4:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   112f8:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   112fc:	7f 32                	jg     11330 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   112fe:	6a 21                	push   $0x21
   11300:	e8 8c f9 ff ff       	call   10c91 <inb>
   11305:	83 c4 04             	add    $0x4,%esp
   11308:	89 c2                	mov    %eax,%edx
   1130a:	8b 45 08             	mov    0x8(%ebp),%eax
   1130d:	bb 01 00 00 00       	mov    $0x1,%ebx
   11312:	89 c1                	mov    %eax,%ecx
   11314:	d3 e3                	shl    %cl,%ebx
   11316:	89 d8                	mov    %ebx,%eax
   11318:	f7 d0                	not    %eax
   1131a:	21 d0                	and    %edx,%eax
   1131c:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   1131f:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11323:	50                   	push   %eax
   11324:	6a 21                	push   $0x21
   11326:	e8 83 f9 ff ff       	call   10cae <outb>
   1132b:	83 c4 08             	add    $0x8,%esp
   1132e:	eb 3d                	jmp    1136d <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   11330:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11334:	68 a1 00 00 00       	push   $0xa1
   11339:	e8 53 f9 ff ff       	call   10c91 <inb>
   1133e:	83 c4 04             	add    $0x4,%esp
   11341:	89 c2                	mov    %eax,%edx
   11343:	8b 45 08             	mov    0x8(%ebp),%eax
   11346:	bb 01 00 00 00       	mov    $0x1,%ebx
   1134b:	89 c1                	mov    %eax,%ecx
   1134d:	d3 e3                	shl    %cl,%ebx
   1134f:	89 d8                	mov    %ebx,%eax
   11351:	f7 d0                	not    %eax
   11353:	21 d0                	and    %edx,%eax
   11355:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11358:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1135c:	50                   	push   %eax
   1135d:	68 a1 00 00 00       	push   $0xa1
   11362:	e8 47 f9 ff ff       	call   10cae <outb>
   11367:	83 c4 08             	add    $0x8,%esp
   1136a:	eb 01                	jmp    1136d <irq_enable+0x86>
        return;
   1136c:	90                   	nop
    }
}
   1136d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11370:	c9                   	leave  
   11371:	c3                   	ret    

00011372 <irq_disable>:
void irq_disable(int irq_num)
{
   11372:	55                   	push   %ebp
   11373:	89 e5                	mov    %esp,%ebp
   11375:	53                   	push   %ebx
   11376:	83 ec 10             	sub    $0x10,%esp

    if (irq_num < IRQ_PIC_START)
   11379:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1137d:	7e 74                	jle    113f3 <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   1137f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11383:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11387:	7f 30                	jg     113b9 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11389:	6a 21                	push   $0x21
   1138b:	e8 01 f9 ff ff       	call   10c91 <inb>
   11390:	83 c4 04             	add    $0x4,%esp
   11393:	89 c3                	mov    %eax,%ebx
   11395:	8b 45 08             	mov    0x8(%ebp),%eax
   11398:	ba 01 00 00 00       	mov    $0x1,%edx
   1139d:	89 c1                	mov    %eax,%ecx
   1139f:	d3 e2                	shl    %cl,%edx
   113a1:	89 d0                	mov    %edx,%eax
   113a3:	09 d8                	or     %ebx,%eax
   113a5:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   113a8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   113ac:	50                   	push   %eax
   113ad:	6a 21                	push   $0x21
   113af:	e8 fa f8 ff ff       	call   10cae <outb>
   113b4:	83 c4 08             	add    $0x8,%esp
   113b7:	eb 3b                	jmp    113f4 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   113b9:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   113bd:	68 a1 00 00 00       	push   $0xa1
   113c2:	e8 ca f8 ff ff       	call   10c91 <inb>
   113c7:	83 c4 04             	add    $0x4,%esp
   113ca:	89 c3                	mov    %eax,%ebx
   113cc:	8b 45 08             	mov    0x8(%ebp),%eax
   113cf:	ba 01 00 00 00       	mov    $0x1,%edx
   113d4:	89 c1                	mov    %eax,%ecx
   113d6:	d3 e2                	shl    %cl,%edx
   113d8:	89 d0                	mov    %edx,%eax
   113da:	09 d8                	or     %ebx,%eax
   113dc:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   113df:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   113e3:	50                   	push   %eax
   113e4:	68 a1 00 00 00       	push   $0xa1
   113e9:	e8 c0 f8 ff ff       	call   10cae <outb>
   113ee:	83 c4 08             	add    $0x8,%esp
   113f1:	eb 01                	jmp    113f4 <irq_disable+0x82>
        return;
   113f3:	90                   	nop
    }
}
   113f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   113f7:	c9                   	leave  
   113f8:	c3                   	ret    

000113f9 <irq_disable_global>:

// 将eflags中的IF位设置为0
void irq_disable_global(void)
{
   113f9:	55                   	push   %ebp
   113fa:	89 e5                	mov    %esp,%ebp
    cli();
   113fc:	e8 cc f8 ff ff       	call   10ccd <cli>
}
   11401:	90                   	nop
   11402:	5d                   	pop    %ebp
   11403:	c3                   	ret    

00011404 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global(void)
{
   11404:	55                   	push   %ebp
   11405:	89 e5                	mov    %esp,%ebp
    sti();
   11407:	e8 c8 f8 ff ff       	call   10cd4 <sti>
}
   1140c:	90                   	nop
   1140d:	5d                   	pop    %ebp
   1140e:	c3                   	ret    

0001140f <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   1140f:	55                   	push   %ebp
   11410:	89 e5                	mov    %esp,%ebp

    irq_num -= IRQ_PIC_START;
   11412:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if (irq_num >= 8)
   11416:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1141a:	7e 0f                	jle    1142b <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   1141c:	6a 20                	push   $0x20
   1141e:	68 a0 00 00 00       	push   $0xa0
   11423:	e8 86 f8 ff ff       	call   10cae <outb>
   11428:	83 c4 08             	add    $0x8,%esp
    }
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   1142b:	6a 20                	push   $0x20
   1142d:	6a 20                	push   $0x20
   1142f:	e8 7a f8 ff ff       	call   10cae <outb>
   11434:	83 c4 08             	add    $0x8,%esp
}
   11437:	90                   	nop
   11438:	c9                   	leave  
   11439:	c3                   	ret    

0001143a <irq_enter_protection>:
 * @brief 进入临界区
 *
 * @return irq_state_t
 */
irq_state_t irq_enter_protection(void)
{
   1143a:	55                   	push   %ebp
   1143b:	89 e5                	mov    %esp,%ebp
   1143d:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11440:	e8 c5 f8 ff ff       	call   10d0a <read_eflags>
   11445:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11448:	e8 ac ff ff ff       	call   113f9 <irq_disable_global>
    return state;
   1144d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11450:	c9                   	leave  
   11451:	c3                   	ret    

00011452 <irq_leave_protection>:
 * @brief 退出临界区
 *
 * @param state eflags寄存器的值
 */
void irq_leave_protection(irq_state_t state)
{
   11452:	55                   	push   %ebp
   11453:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11455:	ff 75 08             	pushl  0x8(%ebp)
   11458:	e8 bd f8 ff ff       	call   10d1a <write_eflags>
   1145d:	83 c4 04             	add    $0x4,%esp
}
   11460:	90                   	nop
   11461:	c9                   	leave  
   11462:	c3                   	ret    

00011463 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11463:	55                   	push   %ebp
   11464:	89 e5                	mov    %esp,%ebp
   11466:	83 ec 08             	sub    $0x8,%esp
   11469:	8b 55 08             	mov    0x8(%ebp),%edx
   1146c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1146f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11473:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11476:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1147a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1147e:	ee                   	out    %al,(%dx)
}
   1147f:	90                   	nop
   11480:	c9                   	leave  
   11481:	c3                   	ret    

00011482 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   11482:	55                   	push   %ebp
   11483:	89 e5                	mov    %esp,%ebp
   11485:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11488:	a1 a0 45 01 00       	mov    0x145a0,%eax
   1148d:	83 c0 01             	add    $0x1,%eax
   11490:	a3 a0 45 01 00       	mov    %eax,0x145a0
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   11495:	83 ec 0c             	sub    $0xc,%esp
   11498:	6a 20                	push   $0x20
   1149a:	e8 70 ff ff ff       	call   1140f <pic_send_eoi>
   1149f:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   114a2:	e8 40 f4 ff ff       	call   108e7 <task_time_tick>
}
   114a7:	90                   	nop
   114a8:	c9                   	leave  
   114a9:	c3                   	ret    

000114aa <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   114aa:	55                   	push   %ebp
   114ab:	89 e5                	mov    %esp,%ebp
   114ad:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   114b0:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   114b7:	6a 36                	push   $0x36
   114b9:	6a 43                	push   $0x43
   114bb:	e8 a3 ff ff ff       	call   11463 <outb>
   114c0:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   114c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114c6:	0f b6 c0             	movzbl %al,%eax
   114c9:	50                   	push   %eax
   114ca:	6a 40                	push   $0x40
   114cc:	e8 92 ff ff ff       	call   11463 <outb>
   114d1:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   114d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114d7:	c1 e8 08             	shr    $0x8,%eax
   114da:	0f b6 c0             	movzbl %al,%eax
   114dd:	50                   	push   %eax
   114de:	6a 40                	push   $0x40
   114e0:	e8 7e ff ff ff       	call   11463 <outb>
   114e5:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   114e8:	83 ec 08             	sub    $0x8,%esp
   114eb:	68 86 02 01 00       	push   $0x10286
   114f0:	6a 20                	push   $0x20
   114f2:	e8 b6 fd ff ff       	call   112ad <irq_install>
   114f7:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   114fa:	83 ec 0c             	sub    $0xc,%esp
   114fd:	6a 20                	push   $0x20
   114ff:	e8 e3 fd ff ff       	call   112e7 <irq_enable>
   11504:	83 c4 10             	add    $0x10,%esp
}
   11507:	90                   	nop
   11508:	c9                   	leave  
   11509:	c3                   	ret    

0001150a <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   1150a:	55                   	push   %ebp
   1150b:	89 e5                	mov    %esp,%ebp
   1150d:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11510:	c7 05 a0 45 01 00 00 	movl   $0x0,0x145a0
   11517:	00 00 00 

    init_pit();
   1151a:	e8 8b ff ff ff       	call   114aa <init_pit>
   1151f:	90                   	nop
   11520:	c9                   	leave  
   11521:	c3                   	ret    

00011522 <kernel_init>:
#include "core/memory.h"
/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   11522:	55                   	push   %ebp
   11523:	89 e5                	mov    %esp,%ebp
   11525:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   11528:	e8 bd f6 ff ff       	call   10bea <cpu_init>
    memory_init(boot_info);
   1152d:	83 ec 0c             	sub    $0xc,%esp
   11530:	ff 75 08             	pushl  0x8(%ebp)
   11533:	e8 81 ee ff ff       	call   103b9 <memory_init>
   11538:	83 c4 10             	add    $0x10,%esp

    log_init();
   1153b:	e8 9b 0d 00 00       	call   122db <log_init>
    irq_init();
   11540:	e8 ba fb ff ff       	call   110ff <irq_init>
    time_init();
   11545:	e8 c0 ff ff ff       	call   1150a <time_init>

    task_manager_init();
   1154a:	e8 cd f1 ff ff       	call   1071c <task_manager_init>
}
   1154f:	90                   	nop
   11550:	c9                   	leave  
   11551:	c3                   	ret    

00011552 <init_task_entry>:
static uint32_t init_task_stack[1024];
static task_t init_task;
static sem_t sem;

void init_task_entry(void)
{
   11552:	55                   	push   %ebp
   11553:	89 e5                	mov    %esp,%ebp
   11555:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11558:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        sem_wait(&sem);
   1155f:	83 ec 0c             	sub    $0xc,%esp
   11562:	68 74 56 01 00       	push   $0x15674
   11567:	e8 8f 02 00 00       	call   117fb <sem_wait>
   1156c:	83 c4 10             	add    $0x10,%esp

        log_printf("int task: %d", count++);
   1156f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11572:	8d 50 01             	lea    0x1(%eax),%edx
   11575:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11578:	83 ec 08             	sub    $0x8,%esp
   1157b:	50                   	push   %eax
   1157c:	68 1d 27 01 00       	push   $0x1271d
   11581:	e8 f2 0d 00 00       	call   12378 <log_printf>
   11586:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem);
   11589:	eb d4                	jmp    1155f <init_task_entry+0xd>

0001158b <init_main>:
    }
}

void init_main(void)
{
   1158b:	55                   	push   %ebp
   1158c:	89 e5                	mov    %esp,%ebp
   1158e:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   11591:	83 ec 0c             	sub    $0xc,%esp
   11594:	68 2a 27 01 00       	push   $0x1272a
   11599:	e8 da 0d 00 00       	call   12378 <log_printf>
   1159e:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s", OS_VERSION, "diyx86os");
   115a1:	83 ec 04             	sub    $0x4,%esp
   115a4:	68 40 27 01 00       	push   $0x12740
   115a9:	68 49 27 01 00       	push   $0x12749
   115ae:	68 4f 27 01 00       	push   $0x1274f
   115b3:	e8 c0 0d 00 00       	call   12378 <log_printf>
   115b8:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 123456, -123, 0x12345, 'a');
   115bb:	83 ec 0c             	sub    $0xc,%esp
   115be:	6a 61                	push   $0x61
   115c0:	68 45 23 01 00       	push   $0x12345
   115c5:	6a 85                	push   $0xffffff85
   115c7:	68 40 e2 01 00       	push   $0x1e240
   115cc:	68 5e 27 01 00       	push   $0x1275e
   115d1:	e8 a2 0d 00 00       	call   12378 <log_printf>
   115d6:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   115d9:	ba c0 55 01 00       	mov    $0x155c0,%edx
   115de:	b8 52 15 01 00       	mov    $0x11552,%eax
   115e3:	52                   	push   %edx
   115e4:	50                   	push   %eax
   115e5:	68 6a 27 01 00       	push   $0x1276a
   115ea:	68 c0 55 01 00       	push   $0x155c0
   115ef:	e8 ea ef ff ff       	call   105de <task_init>
   115f4:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   115f7:	e8 cf f0 ff ff       	call   106cb <task_first_init>
    sem_init(&sem, 0);
   115fc:	83 ec 08             	sub    $0x8,%esp
   115ff:	6a 00                	push   $0x0
   11601:	68 74 56 01 00       	push   $0x15674
   11606:	e8 cd 01 00 00       	call   117d8 <sem_init>
   1160b:	83 c4 10             	add    $0x10,%esp

    irq_enable_global();
   1160e:	e8 f1 fd ff ff       	call   11404 <irq_enable_global>
    int count = 0;
   11613:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_printf("first main: %d", count++);
   1161a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1161d:	8d 50 01             	lea    0x1(%eax),%edx
   11620:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11623:	83 ec 08             	sub    $0x8,%esp
   11626:	50                   	push   %eax
   11627:	68 74 27 01 00       	push   $0x12774
   1162c:	e8 47 0d 00 00       	call   12378 <log_printf>
   11631:	83 c4 10             	add    $0x10,%esp
        sem_notify(&sem);
   11634:	83 ec 0c             	sub    $0xc,%esp
   11637:	68 74 56 01 00       	push   $0x15674
   1163c:	e8 25 02 00 00       	call   11866 <sem_notify>
   11641:	83 c4 10             	add    $0x10,%esp
        log_printf("first main: %d", count++);
   11644:	eb d4                	jmp    1161a <init_main+0x8f>

00011646 <list_count>:
static inline int list_count(list_t *list) {
   11646:	55                   	push   %ebp
   11647:	89 e5                	mov    %esp,%ebp
    return list->count;
   11649:	8b 45 08             	mov    0x8(%ebp),%eax
   1164c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1164f:	5d                   	pop    %ebp
   11650:	c3                   	ret    

00011651 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/list.h"

void mutex_init (mutex_t *mutex) {
   11651:	55                   	push   %ebp
   11652:	89 e5                	mov    %esp,%ebp
   11654:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11657:	8b 45 08             	mov    0x8(%ebp),%eax
   1165a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   11661:	8b 45 08             	mov    0x8(%ebp),%eax
   11664:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   1166a:	8b 45 08             	mov    0x8(%ebp),%eax
   1166d:	83 c0 08             	add    $0x8,%eax
   11670:	83 ec 0c             	sub    $0xc,%esp
   11673:	50                   	push   %eax
   11674:	e8 3f 0a 00 00       	call   120b8 <list_init>
   11679:	83 c4 10             	add    $0x10,%esp
}
   1167c:	90                   	nop
   1167d:	c9                   	leave  
   1167e:	c3                   	ret    

0001167f <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   1167f:	55                   	push   %ebp
   11680:	89 e5                	mov    %esp,%ebp
   11682:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11685:	e8 b0 fd ff ff       	call   1143a <irq_enter_protection>
   1168a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   1168d:	e8 8f f1 ff ff       	call   10821 <task_current>
   11692:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11695:	8b 45 08             	mov    0x8(%ebp),%eax
   11698:	8b 40 04             	mov    0x4(%eax),%eax
   1169b:	85 c0                	test   %eax,%eax
   1169d:	75 19                	jne    116b8 <mutex_lock+0x39>
        mutex->locked_count++;
   1169f:	8b 45 08             	mov    0x8(%ebp),%eax
   116a2:	8b 40 04             	mov    0x4(%eax),%eax
   116a5:	8d 50 01             	lea    0x1(%eax),%edx
   116a8:	8b 45 08             	mov    0x8(%ebp),%eax
   116ab:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   116ae:	8b 45 08             	mov    0x8(%ebp),%eax
   116b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   116b4:	89 10                	mov    %edx,(%eax)
   116b6:	eb 47                	jmp    116ff <mutex_lock+0x80>
    } else if (mutex->owner == curr){
   116b8:	8b 45 08             	mov    0x8(%ebp),%eax
   116bb:	8b 00                	mov    (%eax),%eax
   116bd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   116c0:	75 11                	jne    116d3 <mutex_lock+0x54>
        mutex->locked_count++;
   116c2:	8b 45 08             	mov    0x8(%ebp),%eax
   116c5:	8b 40 04             	mov    0x4(%eax),%eax
   116c8:	8d 50 01             	lea    0x1(%eax),%edx
   116cb:	8b 45 08             	mov    0x8(%ebp),%eax
   116ce:	89 50 04             	mov    %edx,0x4(%eax)
   116d1:	eb 2c                	jmp    116ff <mutex_lock+0x80>
    } else {
        task_set_block(curr);
   116d3:	83 ec 0c             	sub    $0xc,%esp
   116d6:	ff 75 f0             	pushl  -0x10(%ebp)
   116d9:	e8 d5 f0 ff ff       	call   107b3 <task_set_block>
   116de:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list,&curr->wait_node);
   116e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116e4:	8d 50 38             	lea    0x38(%eax),%edx
   116e7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ea:	83 c0 08             	add    $0x8,%eax
   116ed:	83 ec 08             	sub    $0x8,%esp
   116f0:	52                   	push   %edx
   116f1:	50                   	push   %eax
   116f2:	e8 46 0a 00 00       	call   1213d <list_insert_last>
   116f7:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   116fa:	e8 2c f1 ff ff       	call   1082b <task_dispatch>
    }

    irq_leave_protection(state);
   116ff:	83 ec 0c             	sub    $0xc,%esp
   11702:	ff 75 f4             	pushl  -0xc(%ebp)
   11705:	e8 48 fd ff ff       	call   11452 <irq_leave_protection>
   1170a:	83 c4 10             	add    $0x10,%esp
}
   1170d:	90                   	nop
   1170e:	c9                   	leave  
   1170f:	c3                   	ret    

00011710 <mutex_unlock>:


void mutex_unlock (mutex_t * mutex) {
   11710:	55                   	push   %ebp
   11711:	89 e5                	mov    %esp,%ebp
   11713:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11716:	e8 1f fd ff ff       	call   1143a <irq_enter_protection>
   1171b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   1171e:	e8 fe f0 ff ff       	call   10821 <task_current>
   11723:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (mutex->owner == curr) {
   11726:	8b 45 08             	mov    0x8(%ebp),%eax
   11729:	8b 00                	mov    (%eax),%eax
   1172b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1172e:	0f 85 88 00 00 00    	jne    117bc <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   11734:	8b 45 08             	mov    0x8(%ebp),%eax
   11737:	8b 40 04             	mov    0x4(%eax),%eax
   1173a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1173d:	8b 45 08             	mov    0x8(%ebp),%eax
   11740:	89 50 04             	mov    %edx,0x4(%eax)
   11743:	8b 45 08             	mov    0x8(%ebp),%eax
   11746:	8b 40 04             	mov    0x4(%eax),%eax
   11749:	85 c0                	test   %eax,%eax
   1174b:	75 6f                	jne    117bc <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   1174d:	8b 45 08             	mov    0x8(%ebp),%eax
   11750:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   11756:	8b 45 08             	mov    0x8(%ebp),%eax
   11759:	83 c0 08             	add    $0x8,%eax
   1175c:	83 ec 0c             	sub    $0xc,%esp
   1175f:	50                   	push   %eax
   11760:	e8 e1 fe ff ff       	call   11646 <list_count>
   11765:	83 c4 10             	add    $0x10,%esp
   11768:	85 c0                	test   %eax,%eax
   1176a:	74 50                	je     117bc <mutex_unlock+0xac>

                list_node_t * node = list_remove_first(&mutex->wait_list);
   1176c:	8b 45 08             	mov    0x8(%ebp),%eax
   1176f:	83 c0 08             	add    $0x8,%eax
   11772:	83 ec 0c             	sub    $0xc,%esp
   11775:	50                   	push   %eax
   11776:	e8 26 0a 00 00       	call   121a1 <list_remove_first>
   1177b:	83 c4 10             	add    $0x10,%esp
   1177e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node,task_t,wait_node);
   11781:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11785:	74 08                	je     1178f <mutex_unlock+0x7f>
   11787:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1178a:	83 e8 38             	sub    $0x38,%eax
   1178d:	eb 05                	jmp    11794 <mutex_unlock+0x84>
   1178f:	b8 00 00 00 00       	mov    $0x0,%eax
   11794:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11797:	83 ec 0c             	sub    $0xc,%esp
   1179a:	ff 75 e8             	pushl  -0x18(%ebp)
   1179d:	e8 dd ef ff ff       	call   1077f <task_set_ready>
   117a2:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   117a5:	8b 45 08             	mov    0x8(%ebp),%eax
   117a8:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   117af:	8b 45 08             	mov    0x8(%ebp),%eax
   117b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
   117b5:	89 10                	mov    %edx,(%eax)
                task_dispatch();
   117b7:	e8 6f f0 ff ff       	call   1082b <task_dispatch>
            }

        }
    }
    irq_leave_protection(state);    
   117bc:	83 ec 0c             	sub    $0xc,%esp
   117bf:	ff 75 f4             	pushl  -0xc(%ebp)
   117c2:	e8 8b fc ff ff       	call   11452 <irq_leave_protection>
   117c7:	83 c4 10             	add    $0x10,%esp
   117ca:	90                   	nop
   117cb:	c9                   	leave  
   117cc:	c3                   	ret    

000117cd <list_count>:
static inline int list_count(list_t *list) {
   117cd:	55                   	push   %ebp
   117ce:	89 e5                	mov    %esp,%ebp
    return list->count;
   117d0:	8b 45 08             	mov    0x8(%ebp),%eax
   117d3:	8b 40 08             	mov    0x8(%eax),%eax
}
   117d6:	5d                   	pop    %ebp
   117d7:	c3                   	ret    

000117d8 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init (sem_t *sem, int init_count) {
   117d8:	55                   	push   %ebp
   117d9:	89 e5                	mov    %esp,%ebp
   117db:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   117de:	8b 45 08             	mov    0x8(%ebp),%eax
   117e1:	8b 55 0c             	mov    0xc(%ebp),%edx
   117e4:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   117e6:	8b 45 08             	mov    0x8(%ebp),%eax
   117e9:	83 c0 04             	add    $0x4,%eax
   117ec:	83 ec 0c             	sub    $0xc,%esp
   117ef:	50                   	push   %eax
   117f0:	e8 c3 08 00 00       	call   120b8 <list_init>
   117f5:	83 c4 10             	add    $0x10,%esp
}
   117f8:	90                   	nop
   117f9:	c9                   	leave  
   117fa:	c3                   	ret    

000117fb <sem_wait>:

void sem_wait (sem_t *sem) {
   117fb:	55                   	push   %ebp
   117fc:	89 e5                	mov    %esp,%ebp
   117fe:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   11801:	e8 34 fc ff ff       	call   1143a <irq_enter_protection>
   11806:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   11809:	8b 45 08             	mov    0x8(%ebp),%eax
   1180c:	8b 00                	mov    (%eax),%eax
   1180e:	85 c0                	test   %eax,%eax
   11810:	7e 0f                	jle    11821 <sem_wait+0x26>
        sem->count--;
   11812:	8b 45 08             	mov    0x8(%ebp),%eax
   11815:	8b 00                	mov    (%eax),%eax
   11817:	8d 50 ff             	lea    -0x1(%eax),%edx
   1181a:	8b 45 08             	mov    0x8(%ebp),%eax
   1181d:	89 10                	mov    %edx,(%eax)
   1181f:	eb 34                	jmp    11855 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   11821:	e8 fb ef ff ff       	call   10821 <task_current>
   11826:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11829:	83 ec 0c             	sub    $0xc,%esp
   1182c:	ff 75 f0             	pushl  -0x10(%ebp)
   1182f:	e8 7f ef ff ff       	call   107b3 <task_set_block>
   11834:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   11837:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1183a:	8d 50 38             	lea    0x38(%eax),%edx
   1183d:	8b 45 08             	mov    0x8(%ebp),%eax
   11840:	83 c0 04             	add    $0x4,%eax
   11843:	83 ec 08             	sub    $0x8,%esp
   11846:	52                   	push   %edx
   11847:	50                   	push   %eax
   11848:	e8 f0 08 00 00       	call   1213d <list_insert_last>
   1184d:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11850:	e8 d6 ef ff ff       	call   1082b <task_dispatch>
    }

    irq_leave_protection(state);
   11855:	83 ec 0c             	sub    $0xc,%esp
   11858:	ff 75 f4             	pushl  -0xc(%ebp)
   1185b:	e8 f2 fb ff ff       	call   11452 <irq_leave_protection>
   11860:	83 c4 10             	add    $0x10,%esp

}
   11863:	90                   	nop
   11864:	c9                   	leave  
   11865:	c3                   	ret    

00011866 <sem_notify>:
void sem_notify (sem_t *sem) {
   11866:	55                   	push   %ebp
   11867:	89 e5                	mov    %esp,%ebp
   11869:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1186c:	e8 c9 fb ff ff       	call   1143a <irq_enter_protection>
   11871:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&sem->wait_list)) {
   11874:	8b 45 08             	mov    0x8(%ebp),%eax
   11877:	83 c0 04             	add    $0x4,%eax
   1187a:	83 ec 0c             	sub    $0xc,%esp
   1187d:	50                   	push   %eax
   1187e:	e8 4a ff ff ff       	call   117cd <list_count>
   11883:	83 c4 10             	add    $0x10,%esp
   11886:	85 c0                	test   %eax,%eax
   11888:	74 40                	je     118ca <sem_notify+0x64>
        list_node_t * node = list_remove_first(&sem->wait_list);
   1188a:	8b 45 08             	mov    0x8(%ebp),%eax
   1188d:	83 c0 04             	add    $0x4,%eax
   11890:	83 ec 0c             	sub    $0xc,%esp
   11893:	50                   	push   %eax
   11894:	e8 08 09 00 00       	call   121a1 <list_remove_first>
   11899:	83 c4 10             	add    $0x10,%esp
   1189c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node,task_t,wait_node);
   1189f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   118a3:	74 08                	je     118ad <sem_notify+0x47>
   118a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118a8:	83 e8 38             	sub    $0x38,%eax
   118ab:	eb 05                	jmp    118b2 <sem_notify+0x4c>
   118ad:	b8 00 00 00 00       	mov    $0x0,%eax
   118b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   118b5:	83 ec 0c             	sub    $0xc,%esp
   118b8:	ff 75 ec             	pushl  -0x14(%ebp)
   118bb:	e8 bf ee ff ff       	call   1077f <task_set_ready>
   118c0:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   118c3:	e8 63 ef ff ff       	call   1082b <task_dispatch>
   118c8:	eb 0d                	jmp    118d7 <sem_notify+0x71>
    } else {
        sem->count++;
   118ca:	8b 45 08             	mov    0x8(%ebp),%eax
   118cd:	8b 00                	mov    (%eax),%eax
   118cf:	8d 50 01             	lea    0x1(%eax),%edx
   118d2:	8b 45 08             	mov    0x8(%ebp),%eax
   118d5:	89 10                	mov    %edx,(%eax)
    }
    
    irq_leave_protection(state);
   118d7:	83 ec 0c             	sub    $0xc,%esp
   118da:	ff 75 f4             	pushl  -0xc(%ebp)
   118dd:	e8 70 fb ff ff       	call   11452 <irq_leave_protection>
   118e2:	83 c4 10             	add    $0x10,%esp
}
   118e5:	90                   	nop
   118e6:	c9                   	leave  
   118e7:	c3                   	ret    

000118e8 <sem_count>:


int sem_count (sem_t *sem) {
   118e8:	55                   	push   %ebp
   118e9:	89 e5                	mov    %esp,%ebp
   118eb:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   118ee:	e8 47 fb ff ff       	call   1143a <irq_enter_protection>
   118f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;    
   118f6:	8b 45 08             	mov    0x8(%ebp),%eax
   118f9:	8b 00                	mov    (%eax),%eax
   118fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   118fe:	83 ec 0c             	sub    $0xc,%esp
   11901:	ff 75 f4             	pushl  -0xc(%ebp)
   11904:	e8 49 fb ff ff       	call   11452 <irq_leave_protection>
   11909:	83 c4 10             	add    $0x10,%esp

    return count;    
   1190c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1190f:	c9                   	leave  
   11910:	c3                   	ret    

00011911 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   11911:	55                   	push   %ebp
   11912:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   11914:	8b 45 08             	mov    0x8(%ebp),%eax
   11917:	83 c0 07             	add    $0x7,%eax
   1191a:	8d 50 07             	lea    0x7(%eax),%edx
   1191d:	85 c0                	test   %eax,%eax
   1191f:	0f 48 c2             	cmovs  %edx,%eax
   11922:	c1 f8 03             	sar    $0x3,%eax
}
   11925:	5d                   	pop    %ebp
   11926:	c3                   	ret    

00011927 <bitmap_init>:
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   11927:	55                   	push   %ebp
   11928:	89 e5                	mov    %esp,%ebp
   1192a:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1192d:	8b 45 08             	mov    0x8(%ebp),%eax
   11930:	8b 55 10             	mov    0x10(%ebp),%edx
   11933:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11935:	8b 45 08             	mov    0x8(%ebp),%eax
   11938:	8b 55 0c             	mov    0xc(%ebp),%edx
   1193b:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   1193e:	8b 45 08             	mov    0x8(%ebp),%eax
   11941:	8b 00                	mov    (%eax),%eax
   11943:	50                   	push   %eax
   11944:	e8 c8 ff ff ff       	call   11911 <bitmap_byte_count>
   11949:	83 c4 04             	add    $0x4,%esp
   1194c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   1194f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11953:	74 07                	je     1195c <bitmap_init+0x35>
   11955:	ba ff 00 00 00       	mov    $0xff,%edx
   1195a:	eb 05                	jmp    11961 <bitmap_init+0x3a>
   1195c:	ba 00 00 00 00       	mov    $0x0,%edx
   11961:	8b 45 08             	mov    0x8(%ebp),%eax
   11964:	8b 40 04             	mov    0x4(%eax),%eax
   11967:	83 ec 04             	sub    $0x4,%esp
   1196a:	ff 75 f4             	pushl  -0xc(%ebp)
   1196d:	52                   	push   %edx
   1196e:	50                   	push   %eax
   1196f:	e8 a8 03 00 00       	call   11d1c <kernel_memset>
   11974:	83 c4 10             	add    $0x10,%esp
}
   11977:	90                   	nop
   11978:	c9                   	leave  
   11979:	c3                   	ret    

0001197a <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   1197a:	55                   	push   %ebp
   1197b:	89 e5                	mov    %esp,%ebp
   1197d:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   1197e:	8b 45 08             	mov    0x8(%ebp),%eax
   11981:	8b 50 04             	mov    0x4(%eax),%edx
   11984:	8b 45 0c             	mov    0xc(%ebp),%eax
   11987:	8d 48 07             	lea    0x7(%eax),%ecx
   1198a:	85 c0                	test   %eax,%eax
   1198c:	0f 48 c1             	cmovs  %ecx,%eax
   1198f:	c1 f8 03             	sar    $0x3,%eax
   11992:	01 d0                	add    %edx,%eax
   11994:	0f b6 00             	movzbl (%eax),%eax
   11997:	0f b6 d8             	movzbl %al,%ebx
   1199a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1199d:	99                   	cltd   
   1199e:	c1 ea 1d             	shr    $0x1d,%edx
   119a1:	01 d0                	add    %edx,%eax
   119a3:	83 e0 07             	and    $0x7,%eax
   119a6:	29 d0                	sub    %edx,%eax
   119a8:	ba 01 00 00 00       	mov    $0x1,%edx
   119ad:	89 c1                	mov    %eax,%ecx
   119af:	d3 e2                	shl    %cl,%edx
   119b1:	89 d0                	mov    %edx,%eax
   119b3:	21 d8                	and    %ebx,%eax
}
   119b5:	5b                   	pop    %ebx
   119b6:	5d                   	pop    %ebp
   119b7:	c3                   	ret    

000119b8 <bitmap_set_bit>:
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   119b8:	55                   	push   %ebp
   119b9:	89 e5                	mov    %esp,%ebp
   119bb:	56                   	push   %esi
   119bc:	53                   	push   %ebx
   119bd:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   119c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   119c7:	e9 a2 00 00 00       	jmp    11a6e <bitmap_set_bit+0xb6>
    {
        if (bit)
   119cc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   119d0:	74 4a                	je     11a1c <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   119d2:	8b 45 08             	mov    0x8(%ebp),%eax
   119d5:	8b 50 04             	mov    0x4(%eax),%edx
   119d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   119db:	8d 48 07             	lea    0x7(%eax),%ecx
   119de:	85 c0                	test   %eax,%eax
   119e0:	0f 48 c1             	cmovs  %ecx,%eax
   119e3:	c1 f8 03             	sar    $0x3,%eax
   119e6:	89 c3                	mov    %eax,%ebx
   119e8:	89 d8                	mov    %ebx,%eax
   119ea:	01 d0                	add    %edx,%eax
   119ec:	0f b6 00             	movzbl (%eax),%eax
   119ef:	89 c6                	mov    %eax,%esi
   119f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   119f4:	99                   	cltd   
   119f5:	c1 ea 1d             	shr    $0x1d,%edx
   119f8:	01 d0                	add    %edx,%eax
   119fa:	83 e0 07             	and    $0x7,%eax
   119fd:	29 d0                	sub    %edx,%eax
   119ff:	ba 01 00 00 00       	mov    $0x1,%edx
   11a04:	89 c1                	mov    %eax,%ecx
   11a06:	d3 e2                	shl    %cl,%edx
   11a08:	89 d0                	mov    %edx,%eax
   11a0a:	89 f2                	mov    %esi,%edx
   11a0c:	09 c2                	or     %eax,%edx
   11a0e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a11:	8b 40 04             	mov    0x4(%eax),%eax
   11a14:	89 d9                	mov    %ebx,%ecx
   11a16:	01 c8                	add    %ecx,%eax
   11a18:	88 10                	mov    %dl,(%eax)
   11a1a:	eb 4a                	jmp    11a66 <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   11a1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a1f:	8b 50 04             	mov    0x4(%eax),%edx
   11a22:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a25:	8d 48 07             	lea    0x7(%eax),%ecx
   11a28:	85 c0                	test   %eax,%eax
   11a2a:	0f 48 c1             	cmovs  %ecx,%eax
   11a2d:	c1 f8 03             	sar    $0x3,%eax
   11a30:	89 c3                	mov    %eax,%ebx
   11a32:	89 d8                	mov    %ebx,%eax
   11a34:	01 d0                	add    %edx,%eax
   11a36:	0f b6 00             	movzbl (%eax),%eax
   11a39:	89 c6                	mov    %eax,%esi
   11a3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a3e:	99                   	cltd   
   11a3f:	c1 ea 1d             	shr    $0x1d,%edx
   11a42:	01 d0                	add    %edx,%eax
   11a44:	83 e0 07             	and    $0x7,%eax
   11a47:	29 d0                	sub    %edx,%eax
   11a49:	ba 01 00 00 00       	mov    $0x1,%edx
   11a4e:	89 c1                	mov    %eax,%ecx
   11a50:	d3 e2                	shl    %cl,%edx
   11a52:	89 d0                	mov    %edx,%eax
   11a54:	f7 d0                	not    %eax
   11a56:	89 f2                	mov    %esi,%edx
   11a58:	21 c2                	and    %eax,%edx
   11a5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5d:	8b 40 04             	mov    0x4(%eax),%eax
   11a60:	89 d9                	mov    %ebx,%ecx
   11a62:	01 c8                	add    %ecx,%eax
   11a64:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   11a66:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11a6a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   11a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a71:	3b 45 10             	cmp    0x10(%ebp),%eax
   11a74:	7d 0e                	jge    11a84 <bitmap_set_bit+0xcc>
   11a76:	8b 45 08             	mov    0x8(%ebp),%eax
   11a79:	8b 00                	mov    (%eax),%eax
   11a7b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11a7e:	0f 8c 48 ff ff ff    	jl     119cc <bitmap_set_bit+0x14>
        }
    }
}
   11a84:	90                   	nop
   11a85:	83 c4 10             	add    $0x10,%esp
   11a88:	5b                   	pop    %ebx
   11a89:	5e                   	pop    %esi
   11a8a:	5d                   	pop    %ebp
   11a8b:	c3                   	ret    

00011a8c <bitmap_is_set>:
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   11a8c:	55                   	push   %ebp
   11a8d:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   11a8f:	ff 75 0c             	pushl  0xc(%ebp)
   11a92:	ff 75 08             	pushl  0x8(%ebp)
   11a95:	e8 e0 fe ff ff       	call   1197a <bitmap_get_bit>
   11a9a:	83 c4 08             	add    $0x8,%esp
   11a9d:	85 c0                	test   %eax,%eax
   11a9f:	0f 95 c0             	setne  %al
   11aa2:	0f b6 c0             	movzbl %al,%eax
}
   11aa5:	c9                   	leave  
   11aa6:	c3                   	ret    

00011aa7 <bitmap_alloc_nbits>:
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   11aa7:	55                   	push   %ebp
   11aa8:	89 e5                	mov    %esp,%ebp
   11aaa:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   11aad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   11ab4:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while (search_idx < bitmap->bit_count)
   11abb:	e9 85 00 00 00       	jmp    11b45 <bitmap_alloc_nbits+0x9e>
    {
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   11ac0:	ff 75 fc             	pushl  -0x4(%ebp)
   11ac3:	ff 75 08             	pushl  0x8(%ebp)
   11ac6:	e8 af fe ff ff       	call   1197a <bitmap_get_bit>
   11acb:	83 c4 08             	add    $0x8,%esp
   11ace:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11ad1:	74 06                	je     11ad9 <bitmap_alloc_nbits+0x32>
        {
            search_idx++;
   11ad3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   11ad7:	eb 6c                	jmp    11b45 <bitmap_alloc_nbits+0x9e>
        }

        ok_index = search_idx;
   11ad9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11adc:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   11adf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11ae6:	eb 27                	jmp    11b0f <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   11ae8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11aeb:	8d 50 01             	lea    0x1(%eax),%edx
   11aee:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11af1:	50                   	push   %eax
   11af2:	ff 75 08             	pushl  0x8(%ebp)
   11af5:	e8 80 fe ff ff       	call   1197a <bitmap_get_bit>
   11afa:	83 c4 08             	add    $0x8,%esp
   11afd:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11b00:	74 09                	je     11b0b <bitmap_alloc_nbits+0x64>
            {
                ok_index = -1;
   11b02:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   11b09:	eb 16                	jmp    11b21 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   11b0b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b12:	3b 45 10             	cmp    0x10(%ebp),%eax
   11b15:	7d 0a                	jge    11b21 <bitmap_alloc_nbits+0x7a>
   11b17:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1a:	8b 00                	mov    (%eax),%eax
   11b1c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11b1f:	7c c7                	jl     11ae8 <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count)
   11b21:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b24:	3b 45 10             	cmp    0x10(%ebp),%eax
   11b27:	7c 1c                	jl     11b45 <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   11b29:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b2c:	f7 d0                	not    %eax
   11b2e:	50                   	push   %eax
   11b2f:	ff 75 10             	pushl  0x10(%ebp)
   11b32:	ff 75 f8             	pushl  -0x8(%ebp)
   11b35:	ff 75 08             	pushl  0x8(%ebp)
   11b38:	e8 7b fe ff ff       	call   119b8 <bitmap_set_bit>
   11b3d:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   11b40:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b43:	eb 13                	jmp    11b58 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   11b45:	8b 45 08             	mov    0x8(%ebp),%eax
   11b48:	8b 00                	mov    (%eax),%eax
   11b4a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11b4d:	0f 8c 6d ff ff ff    	jl     11ac0 <bitmap_alloc_nbits+0x19>
        }
    }
    return -1;
   11b53:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b58:	c9                   	leave  
   11b59:	c3                   	ret    

00011b5a <hlt>:
static inline void hlt (void) {
   11b5a:	55                   	push   %ebp
   11b5b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11b5d:	f4                   	hlt    
}
   11b5e:	90                   	nop
   11b5f:	5d                   	pop    %ebp
   11b60:	c3                   	ret    

00011b61 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   11b61:	55                   	push   %ebp
   11b62:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   11b64:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b68:	74 3b                	je     11ba5 <kernel_strcpy+0x44>
   11b6a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b6e:	74 35                	je     11ba5 <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   11b70:	eb 17                	jmp    11b89 <kernel_strcpy+0x28>
        *dest++ = *src++;
   11b72:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b75:	8d 42 01             	lea    0x1(%edx),%eax
   11b78:	89 45 0c             	mov    %eax,0xc(%ebp)
   11b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7e:	8d 48 01             	lea    0x1(%eax),%ecx
   11b81:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11b84:	0f b6 12             	movzbl (%edx),%edx
   11b87:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   11b89:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8c:	0f b6 00             	movzbl (%eax),%eax
   11b8f:	84 c0                	test   %al,%al
   11b91:	74 0a                	je     11b9d <kernel_strcpy+0x3c>
   11b93:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b96:	0f b6 00             	movzbl (%eax),%eax
   11b99:	84 c0                	test   %al,%al
   11b9b:	75 d5                	jne    11b72 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   11b9d:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba0:	c6 00 00             	movb   $0x0,(%eax)
   11ba3:	eb 01                	jmp    11ba6 <kernel_strcpy+0x45>
        return;
   11ba5:	90                   	nop
}
   11ba6:	5d                   	pop    %ebp
   11ba7:	c3                   	ret    

00011ba8 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   11ba8:	55                   	push   %ebp
   11ba9:	89 e5                	mov    %esp,%ebp
   11bab:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   11bae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bb2:	74 61                	je     11c15 <kernel_strncpy+0x6d>
   11bb4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11bb8:	74 5b                	je     11c15 <kernel_strncpy+0x6d>
   11bba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11bbe:	74 55                	je     11c15 <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   11bc0:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   11bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bc9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   11bcc:	eb 17                	jmp    11be5 <kernel_strncpy+0x3d>
        *d++ = *s++;
   11bce:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11bd1:	8d 42 01             	lea    0x1(%edx),%eax
   11bd4:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11bd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11bda:	8d 48 01             	lea    0x1(%eax),%ecx
   11bdd:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11be0:	0f b6 12             	movzbl (%edx),%edx
   11be3:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   11be5:	8b 45 10             	mov    0x10(%ebp),%eax
   11be8:	8d 50 ff             	lea    -0x1(%eax),%edx
   11beb:	89 55 10             	mov    %edx,0x10(%ebp)
   11bee:	85 c0                	test   %eax,%eax
   11bf0:	7e 0a                	jle    11bfc <kernel_strncpy+0x54>
   11bf2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11bf5:	0f b6 00             	movzbl (%eax),%eax
   11bf8:	84 c0                	test   %al,%al
   11bfa:	75 d2                	jne    11bce <kernel_strncpy+0x26>
    }
    if (size == 0) {
   11bfc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c00:	75 0b                	jne    11c0d <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11c02:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c05:	83 e8 01             	sub    $0x1,%eax
   11c08:	c6 00 00             	movb   $0x0,(%eax)
   11c0b:	eb 09                	jmp    11c16 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   11c0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c10:	c6 00 00             	movb   $0x0,(%eax)
   11c13:	eb 01                	jmp    11c16 <kernel_strncpy+0x6e>
        return;
   11c15:	90                   	nop
    }
}
   11c16:	c9                   	leave  
   11c17:	c3                   	ret    

00011c18 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   11c18:	55                   	push   %ebp
   11c19:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   11c1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c1f:	74 06                	je     11c27 <kernel_strncmp+0xf>
   11c21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c25:	75 0f                	jne    11c36 <kernel_strncmp+0x1e>
        return -1;
   11c27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c2c:	eb 62                	jmp    11c90 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   11c2e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11c32:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   11c36:	8b 45 08             	mov    0x8(%ebp),%eax
   11c39:	0f b6 00             	movzbl (%eax),%eax
   11c3c:	84 c0                	test   %al,%al
   11c3e:	74 20                	je     11c60 <kernel_strncmp+0x48>
   11c40:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c43:	0f b6 00             	movzbl (%eax),%eax
   11c46:	84 c0                	test   %al,%al
   11c48:	74 16                	je     11c60 <kernel_strncmp+0x48>
   11c4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11c4d:	0f b6 10             	movzbl (%eax),%edx
   11c50:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c53:	0f b6 00             	movzbl (%eax),%eax
   11c56:	38 c2                	cmp    %al,%dl
   11c58:	75 06                	jne    11c60 <kernel_strncmp+0x48>
   11c5a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c5e:	75 ce                	jne    11c2e <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11c60:	8b 45 08             	mov    0x8(%ebp),%eax
   11c63:	0f b6 00             	movzbl (%eax),%eax
   11c66:	84 c0                	test   %al,%al
   11c68:	74 21                	je     11c8b <kernel_strncmp+0x73>
   11c6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c6d:	0f b6 00             	movzbl (%eax),%eax
   11c70:	84 c0                	test   %al,%al
   11c72:	74 17                	je     11c8b <kernel_strncmp+0x73>
   11c74:	8b 45 08             	mov    0x8(%ebp),%eax
   11c77:	0f b6 10             	movzbl (%eax),%edx
   11c7a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c7d:	0f b6 00             	movzbl (%eax),%eax
   11c80:	38 c2                	cmp    %al,%dl
   11c82:	74 07                	je     11c8b <kernel_strncmp+0x73>
   11c84:	b8 01 00 00 00       	mov    $0x1,%eax
   11c89:	eb 05                	jmp    11c90 <kernel_strncmp+0x78>
   11c8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c90:	5d                   	pop    %ebp
   11c91:	c3                   	ret    

00011c92 <kernel_strlen>:
int kernel_strlen(const char * str){
   11c92:	55                   	push   %ebp
   11c93:	89 e5                	mov    %esp,%ebp
   11c95:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   11c98:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c9c:	75 07                	jne    11ca5 <kernel_strlen+0x13>
        return 0;
   11c9e:	b8 00 00 00 00       	mov    $0x0,%eax
   11ca3:	eb 26                	jmp    11ccb <kernel_strlen+0x39>
    }

    const char * c = str;
   11ca5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11cab:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11cb2:	eb 04                	jmp    11cb8 <kernel_strlen+0x26>
        len++;
   11cb4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   11cb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11cbb:	8d 50 01             	lea    0x1(%eax),%edx
   11cbe:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11cc1:	0f b6 00             	movzbl (%eax),%eax
   11cc4:	84 c0                	test   %al,%al
   11cc6:	75 ec                	jne    11cb4 <kernel_strlen+0x22>
    }
    return len;
   11cc8:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11ccb:	c9                   	leave  
   11ccc:	c3                   	ret    

00011ccd <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   11ccd:	55                   	push   %ebp
   11cce:	89 e5                	mov    %esp,%ebp
   11cd0:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11cd3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cd7:	74 40                	je     11d19 <kernel_memcpy+0x4c>
   11cd9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11cdd:	74 3a                	je     11d19 <kernel_memcpy+0x4c>
   11cdf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11ce3:	74 34                	je     11d19 <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   11ce5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ce8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   11ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cee:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11cf1:	eb 17                	jmp    11d0a <kernel_memcpy+0x3d>
        *d++ = *s++;
   11cf3:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11cf6:	8d 42 01             	lea    0x1(%edx),%eax
   11cf9:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11cfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11cff:	8d 48 01             	lea    0x1(%eax),%ecx
   11d02:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11d05:	0f b6 12             	movzbl (%edx),%edx
   11d08:	88 10                	mov    %dl,(%eax)
    while(size--){
   11d0a:	8b 45 10             	mov    0x10(%ebp),%eax
   11d0d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d10:	89 55 10             	mov    %edx,0x10(%ebp)
   11d13:	85 c0                	test   %eax,%eax
   11d15:	75 dc                	jne    11cf3 <kernel_memcpy+0x26>
   11d17:	eb 01                	jmp    11d1a <kernel_memcpy+0x4d>
        return;
   11d19:	90                   	nop
    }

}
   11d1a:	c9                   	leave  
   11d1b:	c3                   	ret    

00011d1c <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   11d1c:	55                   	push   %ebp
   11d1d:	89 e5                	mov    %esp,%ebp
   11d1f:	83 ec 14             	sub    $0x14,%esp
   11d22:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d25:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   11d28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d2c:	74 2c                	je     11d5a <kernel_memset+0x3e>
   11d2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11d32:	74 26                	je     11d5a <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11d34:	8b 45 08             	mov    0x8(%ebp),%eax
   11d37:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   11d3a:	eb 0f                	jmp    11d4b <kernel_memset+0x2f>
       *d++ = v; 
   11d3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11d3f:	8d 50 01             	lea    0x1(%eax),%edx
   11d42:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11d45:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11d49:	88 10                	mov    %dl,(%eax)
    while(size--){
   11d4b:	8b 45 10             	mov    0x10(%ebp),%eax
   11d4e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d51:	89 55 10             	mov    %edx,0x10(%ebp)
   11d54:	85 c0                	test   %eax,%eax
   11d56:	75 e4                	jne    11d3c <kernel_memset+0x20>
   11d58:	eb 01                	jmp    11d5b <kernel_memset+0x3f>
        return;
   11d5a:	90                   	nop
    }
}
   11d5b:	c9                   	leave  
   11d5c:	c3                   	ret    

00011d5d <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   11d5d:	55                   	push   %ebp
   11d5e:	89 e5                	mov    %esp,%ebp
   11d60:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   11d63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d67:	74 0c                	je     11d75 <kernel_memcmp+0x18>
   11d69:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11d6d:	74 06                	je     11d75 <kernel_memcmp+0x18>
   11d6f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11d73:	75 07                	jne    11d7c <kernel_memcmp+0x1f>
        return -1;
   11d75:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d7a:	eb 43                	jmp    11dbf <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11d7c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   11d82:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d85:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11d88:	eb 23                	jmp    11dad <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   11d8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11d8d:	8d 50 01             	lea    0x1(%eax),%edx
   11d90:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11d93:	0f b6 08             	movzbl (%eax),%ecx
   11d96:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11d99:	8d 50 01             	lea    0x1(%eax),%edx
   11d9c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11d9f:	0f b6 00             	movzbl (%eax),%eax
   11da2:	38 c1                	cmp    %al,%cl
   11da4:	74 07                	je     11dad <kernel_memcmp+0x50>
            return -1;
   11da6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11dab:	eb 12                	jmp    11dbf <kernel_memcmp+0x62>
    while(size--){
   11dad:	8b 45 10             	mov    0x10(%ebp),%eax
   11db0:	8d 50 ff             	lea    -0x1(%eax),%edx
   11db3:	89 55 10             	mov    %edx,0x10(%ebp)
   11db6:	85 c0                	test   %eax,%eax
   11db8:	75 d0                	jne    11d8a <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11dba:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11dbf:	c9                   	leave  
   11dc0:	c3                   	ret    

00011dc1 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   11dc1:	55                   	push   %ebp
   11dc2:	89 e5                	mov    %esp,%ebp
   11dc4:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   11dc7:	8d 45 10             	lea    0x10(%ebp),%eax
   11dca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   11dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11dd0:	83 ec 04             	sub    $0x4,%esp
   11dd3:	50                   	push   %eax
   11dd4:	ff 75 0c             	pushl  0xc(%ebp)
   11dd7:	ff 75 08             	pushl  0x8(%ebp)
   11dda:	e8 45 01 00 00       	call   11f24 <kernel_vsprintf>
   11ddf:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11de2:	90                   	nop
   11de3:	c9                   	leave  
   11de4:	c3                   	ret    

00011de5 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   11de5:	55                   	push   %ebp
   11de6:	89 e5                	mov    %esp,%ebp
   11de8:	53                   	push   %ebx
   11de9:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11dec:	8b 45 08             	mov    0x8(%ebp),%eax
   11def:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11df2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11df5:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   11df8:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11dfc:	74 1d                	je     11e1b <kernel_itoa+0x36>
   11dfe:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11e02:	74 17                	je     11e1b <kernel_itoa+0x36>
   11e04:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11e08:	74 11                	je     11e1b <kernel_itoa+0x36>
   11e0a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11e0e:	74 0b                	je     11e1b <kernel_itoa+0x36>
        *p = '\0';
   11e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e13:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11e16:	e9 03 01 00 00       	jmp    11f1e <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11e1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11e22:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e26:	79 19                	jns    11e41 <kernel_itoa+0x5c>
   11e28:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11e2c:	75 13                	jne    11e41 <kernel_itoa+0x5c>
        *p++ = '-';
   11e2e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e31:	8d 50 01             	lea    0x1(%eax),%edx
   11e34:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11e37:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11e3a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11e41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11e45:	74 3b                	je     11e82 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   11e47:	8b 0d d4 27 01 00    	mov    0x127d4,%ecx
   11e4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e50:	99                   	cltd   
   11e51:	f7 7d 10             	idivl  0x10(%ebp)
   11e54:	89 d0                	mov    %edx,%eax
   11e56:	83 c0 0f             	add    $0xf,%eax
   11e59:	01 c8                	add    %ecx,%eax
   11e5b:	0f b6 00             	movzbl (%eax),%eax
   11e5e:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   11e61:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e64:	8d 50 01             	lea    0x1(%eax),%edx
   11e67:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11e6a:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11e6e:	88 10                	mov    %dl,(%eax)
            num /= base;
   11e70:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e73:	99                   	cltd   
   11e74:	f7 7d 10             	idivl  0x10(%ebp)
   11e77:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11e7a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e7e:	75 c7                	jne    11e47 <kernel_itoa+0x62>
   11e80:	eb 4b                	jmp    11ecd <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   11e82:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e85:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   11e88:	8b 0d d4 27 01 00    	mov    0x127d4,%ecx
   11e8e:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11e91:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e94:	ba 00 00 00 00       	mov    $0x0,%edx
   11e99:	f7 f3                	div    %ebx
   11e9b:	89 d0                	mov    %edx,%eax
   11e9d:	83 c0 0f             	add    $0xf,%eax
   11ea0:	01 c8                	add    %ecx,%eax
   11ea2:	0f b6 00             	movzbl (%eax),%eax
   11ea5:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11ea8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11eab:	8d 50 01             	lea    0x1(%eax),%edx
   11eae:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11eb1:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11eb5:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11eb7:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11eba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ebd:	ba 00 00 00 00       	mov    $0x0,%edx
   11ec2:	f7 f3                	div    %ebx
   11ec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11ec7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ecb:	75 bb                	jne    11e88 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11ecd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11ed0:	8d 50 ff             	lea    -0x1(%eax),%edx
   11ed3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11ed6:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   11ed9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11edd:	74 08                	je     11ee7 <kernel_itoa+0x102>
   11edf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee2:	83 c0 01             	add    $0x1,%eax
   11ee5:	eb 03                	jmp    11eea <kernel_itoa+0x105>
   11ee7:	8b 45 08             	mov    0x8(%ebp),%eax
   11eea:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   11eed:	eb 27                	jmp    11f16 <kernel_itoa+0x131>
        char ch = *start;
   11eef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ef2:	0f b6 00             	movzbl (%eax),%eax
   11ef5:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11ef8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11efb:	0f b6 10             	movzbl (%eax),%edx
   11efe:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f01:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11f03:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f06:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f09:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11f0c:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11f10:	88 10                	mov    %dl,(%eax)
        start++;
   11f12:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   11f16:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f19:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11f1c:	72 d1                	jb     11eef <kernel_itoa+0x10a>
    }
}
   11f1e:	83 c4 20             	add    $0x20,%esp
   11f21:	5b                   	pop    %ebx
   11f22:	5d                   	pop    %ebp
   11f23:	c3                   	ret    

00011f24 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   11f24:	55                   	push   %ebp
   11f25:	89 e5                	mov    %esp,%ebp
   11f27:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   11f2a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11f31:	8b 45 08             	mov    0x8(%ebp),%eax
   11f34:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   11f37:	e9 17 01 00 00       	jmp    12053 <kernel_vsprintf+0x12f>
        switch(state) {
   11f3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f3f:	85 c0                	test   %eax,%eax
   11f41:	74 0a                	je     11f4d <kernel_vsprintf+0x29>
   11f43:	83 f8 01             	cmp    $0x1,%eax
   11f46:	74 2b                	je     11f73 <kernel_vsprintf+0x4f>
   11f48:	e9 06 01 00 00       	jmp    12053 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   11f4d:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11f51:	75 0c                	jne    11f5f <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   11f53:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11f5a:	e9 f4 00 00 00       	jmp    12053 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   11f5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f62:	8d 50 01             	lea    0x1(%eax),%edx
   11f65:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11f68:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11f6c:	88 10                	mov    %dl,(%eax)
                }
                break;
   11f6e:	e9 e0 00 00 00       	jmp    12053 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   11f73:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11f77:	75 47                	jne    11fc0 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   11f79:	8b 45 10             	mov    0x10(%ebp),%eax
   11f7c:	8d 50 04             	lea    0x4(%eax),%edx
   11f7f:	89 55 10             	mov    %edx,0x10(%ebp)
   11f82:	8b 00                	mov    (%eax),%eax
   11f84:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   11f87:	ff 75 f4             	pushl  -0xc(%ebp)
   11f8a:	e8 03 fd ff ff       	call   11c92 <kernel_strlen>
   11f8f:	83 c4 04             	add    $0x4,%esp
   11f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   11f95:	eb 17                	jmp    11fae <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   11f97:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11f9a:	8d 42 01             	lea    0x1(%edx),%eax
   11f9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11fa0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11fa3:	8d 48 01             	lea    0x1(%eax),%ecx
   11fa6:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11fa9:	0f b6 12             	movzbl (%edx),%edx
   11fac:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   11fae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fb1:	8d 50 ff             	lea    -0x1(%eax),%edx
   11fb4:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11fb7:	85 c0                	test   %eax,%eax
   11fb9:	75 dc                	jne    11f97 <kernel_vsprintf+0x73>
   11fbb:	e9 8b 00 00 00       	jmp    1204b <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   11fc0:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11fc4:	75 2e                	jne    11ff4 <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   11fc6:	8b 45 10             	mov    0x10(%ebp),%eax
   11fc9:	8d 50 04             	lea    0x4(%eax),%edx
   11fcc:	89 55 10             	mov    %edx,0x10(%ebp)
   11fcf:	8b 00                	mov    (%eax),%eax
   11fd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   11fd4:	6a 0a                	push   $0xa
   11fd6:	ff 75 e4             	pushl  -0x1c(%ebp)
   11fd9:	ff 75 f8             	pushl  -0x8(%ebp)
   11fdc:	e8 04 fe ff ff       	call   11de5 <kernel_itoa>
   11fe1:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   11fe4:	ff 75 f8             	pushl  -0x8(%ebp)
   11fe7:	e8 a6 fc ff ff       	call   11c92 <kernel_strlen>
   11fec:	83 c4 04             	add    $0x4,%esp
   11fef:	01 45 f8             	add    %eax,-0x8(%ebp)
   11ff2:	eb 57                	jmp    1204b <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   11ff4:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11ff8:	75 2e                	jne    12028 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   11ffa:	8b 45 10             	mov    0x10(%ebp),%eax
   11ffd:	8d 50 04             	lea    0x4(%eax),%edx
   12000:	89 55 10             	mov    %edx,0x10(%ebp)
   12003:	8b 00                	mov    (%eax),%eax
   12005:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   12008:	6a 10                	push   $0x10
   1200a:	ff 75 e8             	pushl  -0x18(%ebp)
   1200d:	ff 75 f8             	pushl  -0x8(%ebp)
   12010:	e8 d0 fd ff ff       	call   11de5 <kernel_itoa>
   12015:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   12018:	ff 75 f8             	pushl  -0x8(%ebp)
   1201b:	e8 72 fc ff ff       	call   11c92 <kernel_strlen>
   12020:	83 c4 04             	add    $0x4,%esp
   12023:	01 45 f8             	add    %eax,-0x8(%ebp)
   12026:	eb 23                	jmp    1204b <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   12028:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1202c:	75 1d                	jne    1204b <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   1202e:	8b 45 10             	mov    0x10(%ebp),%eax
   12031:	8d 50 04             	lea    0x4(%eax),%edx
   12034:	89 55 10             	mov    %edx,0x10(%ebp)
   12037:	8b 00                	mov    (%eax),%eax
   12039:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   1203c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1203f:	8d 50 01             	lea    0x1(%eax),%edx
   12042:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12045:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12049:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   1204b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   12052:	90                   	nop
    while ((ch = *fmt++)) {
   12053:	8b 45 0c             	mov    0xc(%ebp),%eax
   12056:	8d 50 01             	lea    0x1(%eax),%edx
   12059:	89 55 0c             	mov    %edx,0xc(%ebp)
   1205c:	0f b6 00             	movzbl (%eax),%eax
   1205f:	88 45 ef             	mov    %al,-0x11(%ebp)
   12062:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12066:	0f 85 d0 fe ff ff    	jne    11f3c <kernel_vsprintf+0x18>
        }
    }
}
   1206c:	90                   	nop
   1206d:	c9                   	leave  
   1206e:	c3                   	ret    

0001206f <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   1206f:	55                   	push   %ebp
   12070:	89 e5                	mov    %esp,%ebp
   12072:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   12075:	83 ec 08             	sub    $0x8,%esp
   12078:	ff 75 14             	pushl  0x14(%ebp)
   1207b:	68 84 27 01 00       	push   $0x12784
   12080:	e8 f3 02 00 00       	call   12378 <log_printf>
   12085:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   12088:	ff 75 10             	pushl  0x10(%ebp)
   1208b:	ff 75 0c             	pushl  0xc(%ebp)
   1208e:	ff 75 08             	pushl  0x8(%ebp)
   12091:	68 96 27 01 00       	push   $0x12796
   12096:	e8 dd 02 00 00       	call   12378 <log_printf>
   1209b:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1209e:	e8 b7 fa ff ff       	call   11b5a <hlt>
   120a3:	eb f9                	jmp    1209e <panic+0x2f>

000120a5 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   120a5:	55                   	push   %ebp
   120a6:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   120a8:	8b 45 08             	mov    0x8(%ebp),%eax
   120ab:	8b 40 08             	mov    0x8(%eax),%eax
   120ae:	85 c0                	test   %eax,%eax
   120b0:	0f 94 c0             	sete   %al
   120b3:	0f b6 c0             	movzbl %al,%eax
}
   120b6:	5d                   	pop    %ebp
   120b7:	c3                   	ret    

000120b8 <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   120b8:	55                   	push   %ebp
   120b9:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   120bb:	8b 45 08             	mov    0x8(%ebp),%eax
   120be:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   120c5:	8b 45 08             	mov    0x8(%ebp),%eax
   120c8:	8b 50 04             	mov    0x4(%eax),%edx
   120cb:	8b 45 08             	mov    0x8(%ebp),%eax
   120ce:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   120d0:	8b 45 08             	mov    0x8(%ebp),%eax
   120d3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   120da:	90                   	nop
   120db:	5d                   	pop    %ebp
   120dc:	c3                   	ret    

000120dd <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   120dd:	55                   	push   %ebp
   120de:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   120e0:	8b 45 08             	mov    0x8(%ebp),%eax
   120e3:	8b 10                	mov    (%eax),%edx
   120e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   120e8:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   120eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   120ee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   120f4:	ff 75 08             	pushl  0x8(%ebp)
   120f7:	e8 a9 ff ff ff       	call   120a5 <list_is_empty>
   120fc:	83 c4 04             	add    $0x4,%esp
   120ff:	85 c0                	test   %eax,%eax
   12101:	74 16                	je     12119 <list_insert_first+0x3c>
        list->first = list->last = node;
   12103:	8b 45 08             	mov    0x8(%ebp),%eax
   12106:	8b 55 0c             	mov    0xc(%ebp),%edx
   12109:	89 50 04             	mov    %edx,0x4(%eax)
   1210c:	8b 45 08             	mov    0x8(%ebp),%eax
   1210f:	8b 50 04             	mov    0x4(%eax),%edx
   12112:	8b 45 08             	mov    0x8(%ebp),%eax
   12115:	89 10                	mov    %edx,(%eax)
   12117:	eb 12                	jmp    1212b <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   12119:	8b 45 08             	mov    0x8(%ebp),%eax
   1211c:	8b 00                	mov    (%eax),%eax
   1211e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12121:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12123:	8b 45 08             	mov    0x8(%ebp),%eax
   12126:	8b 55 0c             	mov    0xc(%ebp),%edx
   12129:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   1212b:	8b 45 08             	mov    0x8(%ebp),%eax
   1212e:	8b 40 08             	mov    0x8(%eax),%eax
   12131:	8d 50 01             	lea    0x1(%eax),%edx
   12134:	8b 45 08             	mov    0x8(%ebp),%eax
   12137:	89 50 08             	mov    %edx,0x8(%eax)
}
   1213a:	90                   	nop
   1213b:	c9                   	leave  
   1213c:	c3                   	ret    

0001213d <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1213d:	55                   	push   %ebp
   1213e:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12140:	8b 45 08             	mov    0x8(%ebp),%eax
   12143:	8b 50 04             	mov    0x4(%eax),%edx
   12146:	8b 45 0c             	mov    0xc(%ebp),%eax
   12149:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   1214b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1214e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   12155:	ff 75 08             	pushl  0x8(%ebp)
   12158:	e8 48 ff ff ff       	call   120a5 <list_is_empty>
   1215d:	83 c4 04             	add    $0x4,%esp
   12160:	85 c0                	test   %eax,%eax
   12162:	74 16                	je     1217a <list_insert_last+0x3d>
        list->first = list->last = node;
   12164:	8b 45 08             	mov    0x8(%ebp),%eax
   12167:	8b 55 0c             	mov    0xc(%ebp),%edx
   1216a:	89 50 04             	mov    %edx,0x4(%eax)
   1216d:	8b 45 08             	mov    0x8(%ebp),%eax
   12170:	8b 50 04             	mov    0x4(%eax),%edx
   12173:	8b 45 08             	mov    0x8(%ebp),%eax
   12176:	89 10                	mov    %edx,(%eax)
   12178:	eb 15                	jmp    1218f <list_insert_last+0x52>
    } else {
        list->last->next = node;
   1217a:	8b 45 08             	mov    0x8(%ebp),%eax
   1217d:	8b 40 04             	mov    0x4(%eax),%eax
   12180:	8b 55 0c             	mov    0xc(%ebp),%edx
   12183:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12186:	8b 45 08             	mov    0x8(%ebp),%eax
   12189:	8b 55 0c             	mov    0xc(%ebp),%edx
   1218c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   1218f:	8b 45 08             	mov    0x8(%ebp),%eax
   12192:	8b 40 08             	mov    0x8(%eax),%eax
   12195:	8d 50 01             	lea    0x1(%eax),%edx
   12198:	8b 45 08             	mov    0x8(%ebp),%eax
   1219b:	89 50 08             	mov    %edx,0x8(%eax)
}
   1219e:	90                   	nop
   1219f:	c9                   	leave  
   121a0:	c3                   	ret    

000121a1 <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   121a1:	55                   	push   %ebp
   121a2:	89 e5                	mov    %esp,%ebp
   121a4:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   121a7:	ff 75 08             	pushl  0x8(%ebp)
   121aa:	e8 f6 fe ff ff       	call   120a5 <list_is_empty>
   121af:	83 c4 04             	add    $0x4,%esp
   121b2:	85 c0                	test   %eax,%eax
   121b4:	74 07                	je     121bd <list_remove_first+0x1c>
        return (list_node_t *)0;
   121b6:	b8 00 00 00 00       	mov    $0x0,%eax
   121bb:	eb 5b                	jmp    12218 <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   121bd:	8b 45 08             	mov    0x8(%ebp),%eax
   121c0:	8b 00                	mov    (%eax),%eax
   121c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   121c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121c8:	8b 50 04             	mov    0x4(%eax),%edx
   121cb:	8b 45 08             	mov    0x8(%ebp),%eax
   121ce:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   121d0:	8b 45 08             	mov    0x8(%ebp),%eax
   121d3:	8b 00                	mov    (%eax),%eax
   121d5:	85 c0                	test   %eax,%eax
   121d7:	75 0c                	jne    121e5 <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   121d9:	8b 45 08             	mov    0x8(%ebp),%eax
   121dc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   121e3:	eb 0c                	jmp    121f1 <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   121e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121e8:	8b 40 04             	mov    0x4(%eax),%eax
   121eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   121f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121f4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   121fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121fe:	8b 50 04             	mov    0x4(%eax),%edx
   12201:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12204:	89 10                	mov    %edx,(%eax)
    list->count--;
   12206:	8b 45 08             	mov    0x8(%ebp),%eax
   12209:	8b 40 08             	mov    0x8(%eax),%eax
   1220c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1220f:	8b 45 08             	mov    0x8(%ebp),%eax
   12212:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   12215:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12218:	c9                   	leave  
   12219:	c3                   	ret    

0001221a <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   1221a:	55                   	push   %ebp
   1221b:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   1221d:	8b 45 08             	mov    0x8(%ebp),%eax
   12220:	8b 00                	mov    (%eax),%eax
   12222:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12225:	75 0b                	jne    12232 <list_remove+0x18>
        list->first = node->next;
   12227:	8b 45 0c             	mov    0xc(%ebp),%eax
   1222a:	8b 50 04             	mov    0x4(%eax),%edx
   1222d:	8b 45 08             	mov    0x8(%ebp),%eax
   12230:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12232:	8b 45 08             	mov    0x8(%ebp),%eax
   12235:	8b 40 04             	mov    0x4(%eax),%eax
   12238:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1223b:	75 0b                	jne    12248 <list_remove+0x2e>
        list->last = node->pre;
   1223d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12240:	8b 10                	mov    (%eax),%edx
   12242:	8b 45 08             	mov    0x8(%ebp),%eax
   12245:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12248:	8b 45 0c             	mov    0xc(%ebp),%eax
   1224b:	8b 00                	mov    (%eax),%eax
   1224d:	85 c0                	test   %eax,%eax
   1224f:	74 0e                	je     1225f <list_remove+0x45>
        node->pre->next = node->next;
   12251:	8b 45 0c             	mov    0xc(%ebp),%eax
   12254:	8b 00                	mov    (%eax),%eax
   12256:	8b 55 0c             	mov    0xc(%ebp),%edx
   12259:	8b 52 04             	mov    0x4(%edx),%edx
   1225c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   1225f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12262:	8b 40 04             	mov    0x4(%eax),%eax
   12265:	85 c0                	test   %eax,%eax
   12267:	74 0d                	je     12276 <list_remove+0x5c>
        node->next->pre = node->pre;
   12269:	8b 45 0c             	mov    0xc(%ebp),%eax
   1226c:	8b 40 04             	mov    0x4(%eax),%eax
   1226f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12272:	8b 12                	mov    (%edx),%edx
   12274:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   12276:	8b 45 0c             	mov    0xc(%ebp),%eax
   12279:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12280:	8b 45 0c             	mov    0xc(%ebp),%eax
   12283:	8b 50 04             	mov    0x4(%eax),%edx
   12286:	8b 45 0c             	mov    0xc(%ebp),%eax
   12289:	89 10                	mov    %edx,(%eax)

    list->count--;
   1228b:	8b 45 08             	mov    0x8(%ebp),%eax
   1228e:	8b 40 08             	mov    0x8(%eax),%eax
   12291:	8d 50 ff             	lea    -0x1(%eax),%edx
   12294:	8b 45 08             	mov    0x8(%ebp),%eax
   12297:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   1229a:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   1229d:	5d                   	pop    %ebp
   1229e:	c3                   	ret    

0001229f <inb>:
static inline uint8_t inb(uint16_t port) {
   1229f:	55                   	push   %ebp
   122a0:	89 e5                	mov    %esp,%ebp
   122a2:	83 ec 14             	sub    $0x14,%esp
   122a5:	8b 45 08             	mov    0x8(%ebp),%eax
   122a8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   122ac:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   122b0:	89 c2                	mov    %eax,%edx
   122b2:	ec                   	in     (%dx),%al
   122b3:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   122b6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   122ba:	c9                   	leave  
   122bb:	c3                   	ret    

000122bc <outb>:
static inline void outb(uint16_t port,uint8_t data){
   122bc:	55                   	push   %ebp
   122bd:	89 e5                	mov    %esp,%ebp
   122bf:	83 ec 08             	sub    $0x8,%esp
   122c2:	8b 55 08             	mov    0x8(%ebp),%edx
   122c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   122c8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   122cc:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   122cf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   122d3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   122d7:	ee                   	out    %al,(%dx)
}
   122d8:	90                   	nop
   122d9:	c9                   	leave  
   122da:	c3                   	ret    

000122db <log_init>:
static mutex_t mutex;

#define COM1_PORT 0x3f8

void log_init(void)
{
   122db:	55                   	push   %ebp
   122dc:	89 e5                	mov    %esp,%ebp
   122de:	83 ec 08             	sub    $0x8,%esp

    mutex_init(&mutex);
   122e1:	83 ec 0c             	sub    $0xc,%esp
   122e4:	68 84 56 01 00       	push   $0x15684
   122e9:	e8 63 f3 ff ff       	call   11651 <mutex_init>
   122ee:	83 c4 10             	add    $0x10,%esp
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   122f1:	83 ec 08             	sub    $0x8,%esp
   122f4:	6a 00                	push   $0x0
   122f6:	68 f9 03 00 00       	push   $0x3f9
   122fb:	e8 bc ff ff ff       	call   122bc <outb>
   12300:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12303:	83 ec 08             	sub    $0x8,%esp
   12306:	68 80 00 00 00       	push   $0x80
   1230b:	68 fb 03 00 00       	push   $0x3fb
   12310:	e8 a7 ff ff ff       	call   122bc <outb>
   12315:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   12318:	83 ec 08             	sub    $0x8,%esp
   1231b:	6a 03                	push   $0x3
   1231d:	68 f8 03 00 00       	push   $0x3f8
   12322:	e8 95 ff ff ff       	call   122bc <outb>
   12327:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   1232a:	83 ec 08             	sub    $0x8,%esp
   1232d:	6a 00                	push   $0x0
   1232f:	68 f9 03 00 00       	push   $0x3f9
   12334:	e8 83 ff ff ff       	call   122bc <outb>
   12339:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   1233c:	83 ec 08             	sub    $0x8,%esp
   1233f:	6a 03                	push   $0x3
   12341:	68 fb 03 00 00       	push   $0x3fb
   12346:	e8 71 ff ff ff       	call   122bc <outb>
   1234b:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   1234e:	83 ec 08             	sub    $0x8,%esp
   12351:	68 c7 00 00 00       	push   $0xc7
   12356:	68 fa 03 00 00       	push   $0x3fa
   1235b:	e8 5c ff ff ff       	call   122bc <outb>
   12360:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   12363:	83 ec 08             	sub    $0x8,%esp
   12366:	6a 0f                	push   $0xf
   12368:	68 fc 03 00 00       	push   $0x3fc
   1236d:	e8 4a ff ff ff       	call   122bc <outb>
   12372:	83 c4 10             	add    $0x10,%esp
}
   12375:	90                   	nop
   12376:	c9                   	leave  
   12377:	c3                   	ret    

00012378 <log_printf>:
// 支持可变参数
void log_printf(const char *fmt, ...)
{
   12378:	55                   	push   %ebp
   12379:	89 e5                	mov    %esp,%ebp
   1237b:	81 ec 98 00 00 00    	sub    $0x98,%esp

    // 缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12381:	83 ec 04             	sub    $0x4,%esp
   12384:	68 80 00 00 00       	push   $0x80
   12389:	6a 00                	push   $0x0
   1238b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12391:	50                   	push   %eax
   12392:	e8 85 f9 ff ff       	call   11d1c <kernel_memset>
   12397:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   1239a:	8d 45 0c             	lea    0xc(%ebp),%eax
   1239d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   123a3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   123a9:	83 ec 04             	sub    $0x4,%esp
   123ac:	50                   	push   %eax
   123ad:	ff 75 08             	pushl  0x8(%ebp)
   123b0:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   123b6:	50                   	push   %eax
   123b7:	e8 68 fb ff ff       	call   11f24 <kernel_vsprintf>
   123bc:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   123bf:	83 ec 0c             	sub    $0xc,%esp
   123c2:	68 84 56 01 00       	push   $0x15684
   123c7:	e8 b3 f2 ff ff       	call   1167f <mutex_lock>
   123cc:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   123cf:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   123d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   123d8:	eb 31                	jmp    1240b <log_printf+0x93>
    {
        while (inb(COM1_PORT + 5) & (1 << 6) == 0)
   123da:	90                   	nop
   123db:	83 ec 0c             	sub    $0xc,%esp
   123de:	68 fd 03 00 00       	push   $0x3fd
   123e3:	e8 b7 fe ff ff       	call   1229f <inb>
   123e8:	83 c4 10             	add    $0x10,%esp
            ;
        outb(COM1_PORT, *p++);
   123eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123ee:	8d 50 01             	lea    0x1(%eax),%edx
   123f1:	89 55 f4             	mov    %edx,-0xc(%ebp)
   123f4:	0f b6 00             	movzbl (%eax),%eax
   123f7:	0f b6 c0             	movzbl %al,%eax
   123fa:	83 ec 08             	sub    $0x8,%esp
   123fd:	50                   	push   %eax
   123fe:	68 f8 03 00 00       	push   $0x3f8
   12403:	e8 b4 fe ff ff       	call   122bc <outb>
   12408:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   1240b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1240e:	0f b6 00             	movzbl (%eax),%eax
   12411:	84 c0                	test   %al,%al
   12413:	75 c5                	jne    123da <log_printf+0x62>
    }
    // 变列
    outb(COM1_PORT, '\r');
   12415:	83 ec 08             	sub    $0x8,%esp
   12418:	6a 0d                	push   $0xd
   1241a:	68 f8 03 00 00       	push   $0x3f8
   1241f:	e8 98 fe ff ff       	call   122bc <outb>
   12424:	83 c4 10             	add    $0x10,%esp
    // 变行
    outb(COM1_PORT, '\n');
   12427:	83 ec 08             	sub    $0x8,%esp
   1242a:	6a 0a                	push   $0xa
   1242c:	68 f8 03 00 00       	push   $0x3f8
   12431:	e8 86 fe ff ff       	call   122bc <outb>
   12436:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   12439:	83 ec 0c             	sub    $0xc,%esp
   1243c:	68 84 56 01 00       	push   $0x15684
   12441:	e8 ca f2 ff ff       	call   11710 <mutex_unlock>
   12446:	83 c4 10             	add    $0x10,%esp
}
   12449:	90                   	nop
   1244a:	c9                   	leave  
   1244b:	c3                   	ret    
