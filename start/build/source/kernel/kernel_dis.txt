
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001141 memsz 0x00003d70 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f9a  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000001a5  00010f9c  00010f9c  00001f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00002c10  00011160  00011160  00002141  2**5
                  ALLOC
  3 .debug_line   00000776  00000000  00000000  00002141  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000011c7  00000000  00000000  000028b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000687  00000000  00000000  00003a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000e0  00000000  00000000  00004108  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000702  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000011  00000000  00000000  000048ea  2**0
                  CONTENTS, READONLY
  9 .debug_frame  000007b0  00000000  00000000  000048fc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00010f9c l    d  .rodata	00000000 .rodata
00011160 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
000102a5 l     F .text	00000028 lgdt
00011160 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001040f l     F .text	0000001d inb
0001042c l     F .text	0000001f outb
0001044b l     F .text	00000007 cli
00010452 l     F .text	00000007 sti
00010459 l     F .text	00000028 lidt
00010481 l     F .text	00000007 hlt
00010488 l     F .text	0000000a do_default_handler
00011960 l     O .bss	00000400 idt_table
0001064a l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010a18 l     F .text	0000001f outb
00011d60 l     O .bss	00000004 sys_tick
00010a5a l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 klib.c
00000000 l    df *ABS*	00000000 log.c
00010e35 l     F .text	0000001d inb
00010e52 l     F .text	0000001f outb
00010c92 g     F .text	0000004f kernel_memcpy
000109e2 g     F .text	0000000b irq_enable_global
00010584 g     F .text	00000016 do_handler_segment_not_present
00010ce1 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
00010404 g     F .text	0000000b cpu_init
00010e71 g     F .text	00000075 log_init
00010aef g     F .text	00000037 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00010b26 g     F .text	00000047 kernel_strcpy
000108c5 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010500 g     F .text	00000016 do_handler_overflow
000105f2 g     F .text	00000016 do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
000105b0 g     F .text	00000016 do_handler_general_protection
000104a8 g     F .text	00000016 do_handler_divider
00010558 g     F .text	00000016 do_handler_double_fault
000105c6 g     F .text	00000016 do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
000109ed g     F .text	0000002b pic_send_eoi
00010a37 g     F .text	00000023 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010634 g     F .text	00000016 do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00011d70 g     O .bss	00002000 stack
000100e2 g       .text	00000000 exception_handler_bound_range
0001052c g     F .text	00000016 do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
000105dc g     F .text	00000016 do_handler_fpu_error
00010608 g     F .text	00000016 do_handler_machine_check
000104be g     F .text	00000016 do_handler_Debug
000104d4 g     F .text	00000016 do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00010b6d g     F .text	00000070 kernel_strncpy
000109d7 g     F .text	0000000b irq_disable_global
00010ad2 g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
00010d86 g     F .text	000000af kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
0001056e g     F .text	00000016 do_handler_invalid_tss
00010286 g       .text	00000000 exception_handler_timer
0001088b g     F .text	0000003a irq_install
00010350 g     F .text	0000006d init_gdt
00010950 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00010542 g     F .text	00000016 do_handler_device_unavailable
00010d22 g     F .text	00000064 kernel_memcmp
0001061e g     F .text	00000016 do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00010492 g     F .text	00000016 do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
000106dd g     F .text	000001ae irq_init
00010c57 g     F .text	0000003b kernel_strlen
000102cd g     F .text	00000083 segment_desc_set
00010516 g     F .text	00000016 do_handler_bound_range
00010bdd g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010066 g       .text	00000000 exception_handler_Debug
0001059a g     F .text	00000016 do_handler_stack_segment_fault
000104ea g     F .text	00000016 do_handler_breakpoint
00010ee6 g     F .text	000000b4 log_printf
000103bd g     F .text	00000047 gate_desc_set
00010aba g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 c9 0a 00 00       	call   10ad2 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 70 3d 01 00       	mov    $0x13d70,%esp
    jmp init_main
   10023:	e9 c7 0a 00 00       	jmp    10aef <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 59 04 00 00       	call   10492 <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 50 04 00 00       	call   104a8 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 47 04 00 00       	call   104be <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 3e 04 00 00       	call   104d4 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 35 04 00 00       	call   104ea <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 2c 04 00 00       	call   10500 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 23 04 00 00       	call   10516 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 1a 04 00 00       	call   1052c <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 11 04 00 00       	call   10542 <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 0a 04 00 00       	call   10558 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 03 04 00 00       	call   1056e <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 fc 03 00 00       	call   10584 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 f5 03 00 00       	call   1059a <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 ee 03 00 00       	call   105b0 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 e7 03 00 00       	call   105c6 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 de 03 00 00       	call   105dc <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 d7 03 00 00       	call   105f2 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 ce 03 00 00       	call   10608 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 c5 03 00 00       	call   1061e <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 bc 03 00 00       	call   10634 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 a0 07 00 00       	call   10a37 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <lgdt>:
static inline void sti(void){
    __asm__ __volatile__("sti");    
}


static inline void lgdt(uint32_t start,uint32_t size){
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
   102a8:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }gdt;
    
    gdt.start32_16 = start >> 16;
   102ab:	8b 45 08             	mov    0x8(%ebp),%eax
   102ae:	c1 e8 10             	shr    $0x10,%eax
   102b1:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   102b5:	8b 45 08             	mov    0x8(%ebp),%eax
   102b8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   102bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   102bf:	83 e8 01             	sub    $0x1,%eax
   102c2:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   102c6:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   102ca:	90                   	nop
   102cb:	c9                   	leave  
   102cc:	c3                   	ret    

000102cd <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   102cd:	55                   	push   %ebp
   102ce:	89 e5                	mov    %esp,%ebp
   102d0:	83 ec 14             	sub    $0x14,%esp
   102d3:	8b 45 14             	mov    0x14(%ebp),%eax
   102d6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   102da:	8b 45 08             	mov    0x8(%ebp),%eax
   102dd:	83 e0 f8             	and    $0xfffffff8,%eax
   102e0:	05 60 11 01 00       	add    $0x11160,%eax
   102e5:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   102e8:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   102ef:	76 0f                	jbe    10300 <segment_desc_set+0x33>
		attr |= SEG_G;
   102f1:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   102f7:	8b 45 10             	mov    0x10(%ebp),%eax
   102fa:	c1 e8 0c             	shr    $0xc,%eax
   102fd:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   10300:	8b 45 10             	mov    0x10(%ebp),%eax
   10303:	89 c2                	mov    %eax,%edx
   10305:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10308:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   1030b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1030e:	89 c2                	mov    %eax,%edx
   10310:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10313:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10317:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031a:	c1 e8 10             	shr    $0x10,%eax
   1031d:	89 c2                	mov    %eax,%edx
   1031f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10322:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   10325:	8b 45 10             	mov    0x10(%ebp),%eax
   10328:	c1 e8 10             	shr    $0x10,%eax
   1032b:	c1 e0 08             	shl    $0x8,%eax
   1032e:	66 25 00 0f          	and    $0xf00,%ax
   10332:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10336:	89 c2                	mov    %eax,%edx
   10338:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1033b:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   1033f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10342:	c1 e8 18             	shr    $0x18,%eax
   10345:	89 c2                	mov    %eax,%edx
   10347:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1034a:	88 50 07             	mov    %dl,0x7(%eax)

}
   1034d:	90                   	nop
   1034e:	c9                   	leave  
   1034f:	c3                   	ret    

00010350 <init_gdt>:

void init_gdt(void){
   10350:	55                   	push   %ebp
   10351:	89 e5                	mov    %esp,%ebp
   10353:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10356:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1035d:	eb 19                	jmp    10378 <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   1035f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10362:	c1 e0 03             	shl    $0x3,%eax
   10365:	6a 00                	push   $0x0
   10367:	6a 00                	push   $0x0
   10369:	6a 00                	push   $0x0
   1036b:	50                   	push   %eax
   1036c:	e8 5c ff ff ff       	call   102cd <segment_desc_set>
   10371:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10374:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10378:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1037f:	7e de                	jle    1035f <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10381:	68 9a 40 00 00       	push   $0x409a
   10386:	6a ff                	push   $0xffffffff
   10388:	6a 00                	push   $0x0
   1038a:	6a 08                	push   $0x8
   1038c:	e8 3c ff ff ff       	call   102cd <segment_desc_set>
   10391:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10394:	68 92 40 00 00       	push   $0x4092
   10399:	6a ff                	push   $0xffffffff
   1039b:	6a 00                	push   $0x0
   1039d:	6a 10                	push   $0x10
   1039f:	e8 29 ff ff ff       	call   102cd <segment_desc_set>
   103a4:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   103a7:	b8 60 11 01 00       	mov    $0x11160,%eax
   103ac:	68 00 08 00 00       	push   $0x800
   103b1:	50                   	push   %eax
   103b2:	e8 ee fe ff ff       	call   102a5 <lgdt>
   103b7:	83 c4 08             	add    $0x8,%esp
}
   103ba:	90                   	nop
   103bb:	c9                   	leave  
   103bc:	c3                   	ret    

000103bd <gate_desc_set>:
/**
 * 设置门描述符
 */


void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   103bd:	55                   	push   %ebp
   103be:	89 e5                	mov    %esp,%ebp
   103c0:	83 ec 08             	sub    $0x8,%esp
   103c3:	8b 55 0c             	mov    0xc(%ebp),%edx
   103c6:	8b 45 14             	mov    0x14(%ebp),%eax
   103c9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   103cd:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   103d1:	8b 45 10             	mov    0x10(%ebp),%eax
   103d4:	89 c2                	mov    %eax,%edx
   103d6:	8b 45 08             	mov    0x8(%ebp),%eax
   103d9:	66 89 10             	mov    %dx,(%eax)
	
    desc->selector = selector;
   103dc:	8b 45 08             	mov    0x8(%ebp),%eax
   103df:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   103e3:	66 89 50 02          	mov    %dx,0x2(%eax)
	
    desc->attr = attr;
   103e7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ea:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   103ee:	66 89 50 04          	mov    %dx,0x4(%eax)
	
    desc->offset31_16 = (offset >> 16) & 0xffff;
   103f2:	8b 45 10             	mov    0x10(%ebp),%eax
   103f5:	c1 e8 10             	shr    $0x10,%eax
   103f8:	89 c2                	mov    %eax,%edx
   103fa:	8b 45 08             	mov    0x8(%ebp),%eax
   103fd:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10401:	90                   	nop
   10402:	c9                   	leave  
   10403:	c3                   	ret    

00010404 <cpu_init>:




void cpu_init (void){
   10404:	55                   	push   %ebp
   10405:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   10407:	e8 44 ff ff ff       	call   10350 <init_gdt>
   1040c:	90                   	nop
   1040d:	5d                   	pop    %ebp
   1040e:	c3                   	ret    

0001040f <inb>:
static inline uint8_t inb(uint16_t port) {
   1040f:	55                   	push   %ebp
   10410:	89 e5                	mov    %esp,%ebp
   10412:	83 ec 14             	sub    $0x14,%esp
   10415:	8b 45 08             	mov    0x8(%ebp),%eax
   10418:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   1041c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10420:	89 c2                	mov    %eax,%edx
   10422:	ec                   	in     (%dx),%al
   10423:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10426:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1042a:	c9                   	leave  
   1042b:	c3                   	ret    

0001042c <outb>:
static inline void outb(uint16_t port,uint8_t data){
   1042c:	55                   	push   %ebp
   1042d:	89 e5                	mov    %esp,%ebp
   1042f:	83 ec 08             	sub    $0x8,%esp
   10432:	8b 55 08             	mov    0x8(%ebp),%edx
   10435:	8b 45 0c             	mov    0xc(%ebp),%eax
   10438:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1043c:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   1043f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10443:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10447:	ee                   	out    %al,(%dx)
}
   10448:	90                   	nop
   10449:	c9                   	leave  
   1044a:	c3                   	ret    

0001044b <cli>:
static inline void cli(void){
   1044b:	55                   	push   %ebp
   1044c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   1044e:	fa                   	cli    
}
   1044f:	90                   	nop
   10450:	5d                   	pop    %ebp
   10451:	c3                   	ret    

00010452 <sti>:
static inline void sti(void){
   10452:	55                   	push   %ebp
   10453:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10455:	fb                   	sti    
}
   10456:	90                   	nop
   10457:	5d                   	pop    %ebp
   10458:	c3                   	ret    

00010459 <lidt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}



static inline void lidt(uint32_t start,uint32_t size){
   10459:	55                   	push   %ebp
   1045a:	89 e5                	mov    %esp,%ebp
   1045c:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }idt;
    
    idt.start32_16 = start >> 16;
   1045f:	8b 45 08             	mov    0x8(%ebp),%eax
   10462:	c1 e8 10             	shr    $0x10,%eax
   10465:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10469:	8b 45 08             	mov    0x8(%ebp),%eax
   1046c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10470:	8b 45 0c             	mov    0xc(%ebp),%eax
   10473:	83 e8 01             	sub    $0x1,%eax
   10476:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   1047a:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1047e:	90                   	nop
   1047f:	c9                   	leave  
   10480:	c3                   	ret    

00010481 <hlt>:

static inline void hlt (void) {
   10481:	55                   	push   %ebp
   10482:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10484:	f4                   	hlt    
}
   10485:	90                   	nop
   10486:	5d                   	pop    %ebp
   10487:	c3                   	ret    

00010488 <do_default_handler>:
#define IDE_TABLE_NR  128


void exception_handler_unknown(void);

static void do_default_handler(exception_frame_t * frame,const char * message) {
   10488:	55                   	push   %ebp
   10489:	89 e5                	mov    %esp,%ebp
    for(;;){
        hlt();
   1048b:	e8 f1 ff ff ff       	call   10481 <hlt>
   10490:	eb f9                	jmp    1048b <do_default_handler+0x3>

00010492 <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   10492:	55                   	push   %ebp
   10493:	89 e5                	mov    %esp,%ebp

    do_default_handler(frame,"unknown exception");
   10495:	68 9c 0f 01 00       	push   $0x10f9c
   1049a:	ff 75 08             	pushl  0x8(%ebp)
   1049d:	e8 e6 ff ff ff       	call   10488 <do_default_handler>
   104a2:	83 c4 08             	add    $0x8,%esp

}
   104a5:	90                   	nop
   104a6:	c9                   	leave  
   104a7:	c3                   	ret    

000104a8 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   104a8:	55                   	push   %ebp
   104a9:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame,"Divder exception");
   104ab:	68 ae 0f 01 00       	push   $0x10fae
   104b0:	ff 75 08             	pushl  0x8(%ebp)
   104b3:	e8 d0 ff ff ff       	call   10488 <do_default_handler>
   104b8:	83 c4 08             	add    $0x8,%esp
}
   104bb:	90                   	nop
   104bc:	c9                   	leave  
   104bd:	c3                   	ret    

000104be <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   104be:	55                   	push   %ebp
   104bf:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Debug Exception");
   104c1:	68 bf 0f 01 00       	push   $0x10fbf
   104c6:	ff 75 08             	pushl  0x8(%ebp)
   104c9:	e8 ba ff ff ff       	call   10488 <do_default_handler>
   104ce:	83 c4 08             	add    $0x8,%esp
}
   104d1:	90                   	nop
   104d2:	c9                   	leave  
   104d3:	c3                   	ret    

000104d4 <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   104d4:	55                   	push   %ebp
   104d5:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "NMI Interrupt.");
   104d7:	68 cf 0f 01 00       	push   $0x10fcf
   104dc:	ff 75 08             	pushl  0x8(%ebp)
   104df:	e8 a4 ff ff ff       	call   10488 <do_default_handler>
   104e4:	83 c4 08             	add    $0x8,%esp
}
   104e7:	90                   	nop
   104e8:	c9                   	leave  
   104e9:	c3                   	ret    

000104ea <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   104ea:	55                   	push   %ebp
   104eb:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Breakpoint.");
   104ed:	68 de 0f 01 00       	push   $0x10fde
   104f2:	ff 75 08             	pushl  0x8(%ebp)
   104f5:	e8 8e ff ff ff       	call   10488 <do_default_handler>
   104fa:	83 c4 08             	add    $0x8,%esp
}
   104fd:	90                   	nop
   104fe:	c9                   	leave  
   104ff:	c3                   	ret    

00010500 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10500:	55                   	push   %ebp
   10501:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Overflow.");
   10503:	68 ea 0f 01 00       	push   $0x10fea
   10508:	ff 75 08             	pushl  0x8(%ebp)
   1050b:	e8 78 ff ff ff       	call   10488 <do_default_handler>
   10510:	83 c4 08             	add    $0x8,%esp
}
   10513:	90                   	nop
   10514:	c9                   	leave  
   10515:	c3                   	ret    

00010516 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10516:	55                   	push   %ebp
   10517:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10519:	68 f4 0f 01 00       	push   $0x10ff4
   1051e:	ff 75 08             	pushl  0x8(%ebp)
   10521:	e8 62 ff ff ff       	call   10488 <do_default_handler>
   10526:	83 c4 08             	add    $0x8,%esp
}
   10529:	90                   	nop
   1052a:	c9                   	leave  
   1052b:	c3                   	ret    

0001052c <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   1052c:	55                   	push   %ebp
   1052d:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Invalid Opcode.");
   1052f:	68 0a 10 01 00       	push   $0x1100a
   10534:	ff 75 08             	pushl  0x8(%ebp)
   10537:	e8 4c ff ff ff       	call   10488 <do_default_handler>
   1053c:	83 c4 08             	add    $0x8,%esp
}
   1053f:	90                   	nop
   10540:	c9                   	leave  
   10541:	c3                   	ret    

00010542 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   10542:	55                   	push   %ebp
   10543:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Device Not Available.");
   10545:	68 1a 10 01 00       	push   $0x1101a
   1054a:	ff 75 08             	pushl  0x8(%ebp)
   1054d:	e8 36 ff ff ff       	call   10488 <do_default_handler>
   10552:	83 c4 08             	add    $0x8,%esp
}
   10555:	90                   	nop
   10556:	c9                   	leave  
   10557:	c3                   	ret    

00010558 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10558:	55                   	push   %ebp
   10559:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Double Fault.");
   1055b:	68 30 10 01 00       	push   $0x11030
   10560:	ff 75 08             	pushl  0x8(%ebp)
   10563:	e8 20 ff ff ff       	call   10488 <do_default_handler>
   10568:	83 c4 08             	add    $0x8,%esp
}
   1056b:	90                   	nop
   1056c:	c9                   	leave  
   1056d:	c3                   	ret    

0001056e <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   1056e:	55                   	push   %ebp
   1056f:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Invalid TSS");
   10571:	68 3e 10 01 00       	push   $0x1103e
   10576:	ff 75 08             	pushl  0x8(%ebp)
   10579:	e8 0a ff ff ff       	call   10488 <do_default_handler>
   1057e:	83 c4 08             	add    $0x8,%esp
}
   10581:	90                   	nop
   10582:	c9                   	leave  
   10583:	c3                   	ret    

00010584 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   10584:	55                   	push   %ebp
   10585:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Segment Not Present.");
   10587:	68 4a 10 01 00       	push   $0x1104a
   1058c:	ff 75 08             	pushl  0x8(%ebp)
   1058f:	e8 f4 fe ff ff       	call   10488 <do_default_handler>
   10594:	83 c4 08             	add    $0x8,%esp
}
   10597:	90                   	nop
   10598:	c9                   	leave  
   10599:	c3                   	ret    

0001059a <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   1059a:	55                   	push   %ebp
   1059b:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Stack-Segment Fault.");
   1059d:	68 5f 10 01 00       	push   $0x1105f
   105a2:	ff 75 08             	pushl  0x8(%ebp)
   105a5:	e8 de fe ff ff       	call   10488 <do_default_handler>
   105aa:	83 c4 08             	add    $0x8,%esp
}
   105ad:	90                   	nop
   105ae:	c9                   	leave  
   105af:	c3                   	ret    

000105b0 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   105b0:	55                   	push   %ebp
   105b1:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "General Protection.");
   105b3:	68 74 10 01 00       	push   $0x11074
   105b8:	ff 75 08             	pushl  0x8(%ebp)
   105bb:	e8 c8 fe ff ff       	call   10488 <do_default_handler>
   105c0:	83 c4 08             	add    $0x8,%esp
}
   105c3:	90                   	nop
   105c4:	c9                   	leave  
   105c5:	c3                   	ret    

000105c6 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   105c6:	55                   	push   %ebp
   105c7:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Page Fault.");
   105c9:	68 88 10 01 00       	push   $0x11088
   105ce:	ff 75 08             	pushl  0x8(%ebp)
   105d1:	e8 b2 fe ff ff       	call   10488 <do_default_handler>
   105d6:	83 c4 08             	add    $0x8,%esp
}
   105d9:	90                   	nop
   105da:	c9                   	leave  
   105db:	c3                   	ret    

000105dc <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   105dc:	55                   	push   %ebp
   105dd:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   105df:	68 94 10 01 00       	push   $0x11094
   105e4:	ff 75 08             	pushl  0x8(%ebp)
   105e7:	e8 9c fe ff ff       	call   10488 <do_default_handler>
   105ec:	83 c4 08             	add    $0x8,%esp
}
   105ef:	90                   	nop
   105f0:	c9                   	leave  
   105f1:	c3                   	ret    

000105f2 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   105f2:	55                   	push   %ebp
   105f3:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Alignment Check.");
   105f5:	68 b2 10 01 00       	push   $0x110b2
   105fa:	ff 75 08             	pushl  0x8(%ebp)
   105fd:	e8 86 fe ff ff       	call   10488 <do_default_handler>
   10602:	83 c4 08             	add    $0x8,%esp
}
   10605:	90                   	nop
   10606:	c9                   	leave  
   10607:	c3                   	ret    

00010608 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10608:	55                   	push   %ebp
   10609:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Machine Check.");
   1060b:	68 c3 10 01 00       	push   $0x110c3
   10610:	ff 75 08             	pushl  0x8(%ebp)
   10613:	e8 70 fe ff ff       	call   10488 <do_default_handler>
   10618:	83 c4 08             	add    $0x8,%esp
}
   1061b:	90                   	nop
   1061c:	c9                   	leave  
   1061d:	c3                   	ret    

0001061e <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   1061e:	55                   	push   %ebp
   1061f:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10621:	68 d4 10 01 00       	push   $0x110d4
   10626:	ff 75 08             	pushl  0x8(%ebp)
   10629:	e8 5a fe ff ff       	call   10488 <do_default_handler>
   1062e:	83 c4 08             	add    $0x8,%esp
}
   10631:	90                   	nop
   10632:	c9                   	leave  
   10633:	c3                   	ret    

00010634 <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   10634:	55                   	push   %ebp
   10635:	89 e5                	mov    %esp,%ebp
	do_default_handler(frame, "Virtualization Exception.");
   10637:	68 f3 10 01 00       	push   $0x110f3
   1063c:	ff 75 08             	pushl  0x8(%ebp)
   1063f:	e8 44 fe ff ff       	call   10488 <do_default_handler>
   10644:	83 c4 08             	add    $0x8,%esp
}
   10647:	90                   	nop
   10648:	c9                   	leave  
   10649:	c3                   	ret    

0001064a <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   1064a:	55                   	push   %ebp
   1064b:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1064d:	6a 11                	push   $0x11
   1064f:	6a 20                	push   $0x20
   10651:	e8 d6 fd ff ff       	call   1042c <outb>
   10656:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10659:	6a 20                	push   $0x20
   1065b:	6a 21                	push   $0x21
   1065d:	e8 ca fd ff ff       	call   1042c <outb>
   10662:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10665:	6a 04                	push   $0x4
   10667:	6a 21                	push   $0x21
   10669:	e8 be fd ff ff       	call   1042c <outb>
   1066e:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10671:	6a 01                	push   $0x1
   10673:	6a 21                	push   $0x21
   10675:	e8 b2 fd ff ff       	call   1042c <outb>
   1067a:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   1067d:	6a 11                	push   $0x11
   1067f:	68 a0 00 00 00       	push   $0xa0
   10684:	e8 a3 fd ff ff       	call   1042c <outb>
   10689:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   1068c:	6a 28                	push   $0x28
   1068e:	68 a1 00 00 00       	push   $0xa1
   10693:	e8 94 fd ff ff       	call   1042c <outb>
   10698:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   1069b:	6a 02                	push   $0x2
   1069d:	68 a1 00 00 00       	push   $0xa1
   106a2:	e8 85 fd ff ff       	call   1042c <outb>
   106a7:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   106aa:	6a 01                	push   $0x1
   106ac:	68 a1 00 00 00       	push   $0xa1
   106b1:	e8 76 fd ff ff       	call   1042c <outb>
   106b6:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   106b9:	68 fb 00 00 00       	push   $0xfb
   106be:	6a 21                	push   $0x21
   106c0:	e8 67 fd ff ff       	call   1042c <outb>
   106c5:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   106c8:	68 ff 00 00 00       	push   $0xff
   106cd:	68 a1 00 00 00       	push   $0xa1
   106d2:	e8 55 fd ff ff       	call   1042c <outb>
   106d7:	83 c4 08             	add    $0x8,%esp
}
   106da:	90                   	nop
   106db:	c9                   	leave  
   106dc:	c3                   	ret    

000106dd <irq_init>:


void irq_init(void){ 
   106dd:	55                   	push   %ebp
   106de:	89 e5                	mov    %esp,%ebp
   106e0:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   106e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106ea:	eb 25                	jmp    10711 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   106ec:	ba 28 00 01 00       	mov    $0x10028,%edx
   106f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106f4:	c1 e0 03             	shl    $0x3,%eax
   106f7:	05 60 19 01 00       	add    $0x11960,%eax
   106fc:	68 00 8e 00 00       	push   $0x8e00
   10701:	52                   	push   %edx
   10702:	6a 08                	push   $0x8
   10704:	50                   	push   %eax
   10705:	e8 b3 fc ff ff       	call   103bd <gate_desc_set>
   1070a:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   1070d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10711:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10715:	7e d5                	jle    106ec <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10717:	83 ec 08             	sub    $0x8,%esp
   1071a:	68 47 00 01 00       	push   $0x10047
   1071f:	6a 00                	push   $0x0
   10721:	e8 65 01 00 00       	call   1088b <irq_install>
   10726:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10729:	83 ec 08             	sub    $0x8,%esp
   1072c:	68 66 00 01 00       	push   $0x10066
   10731:	6a 01                	push   $0x1
   10733:	e8 53 01 00 00       	call   1088b <irq_install>
   10738:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   1073b:	83 ec 08             	sub    $0x8,%esp
   1073e:	68 85 00 01 00       	push   $0x10085
   10743:	6a 02                	push   $0x2
   10745:	e8 41 01 00 00       	call   1088b <irq_install>
   1074a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   1074d:	83 ec 08             	sub    $0x8,%esp
   10750:	68 a4 00 01 00       	push   $0x100a4
   10755:	6a 03                	push   $0x3
   10757:	e8 2f 01 00 00       	call   1088b <irq_install>
   1075c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   1075f:	83 ec 08             	sub    $0x8,%esp
   10762:	68 c3 00 01 00       	push   $0x100c3
   10767:	6a 04                	push   $0x4
   10769:	e8 1d 01 00 00       	call   1088b <irq_install>
   1076e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10771:	83 ec 08             	sub    $0x8,%esp
   10774:	68 e2 00 01 00       	push   $0x100e2
   10779:	6a 05                	push   $0x5
   1077b:	e8 0b 01 00 00       	call   1088b <irq_install>
   10780:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10783:	83 ec 08             	sub    $0x8,%esp
   10786:	68 01 01 01 00       	push   $0x10101
   1078b:	6a 06                	push   $0x6
   1078d:	e8 f9 00 00 00       	call   1088b <irq_install>
   10792:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10795:	83 ec 08             	sub    $0x8,%esp
   10798:	68 20 01 01 00       	push   $0x10120
   1079d:	6a 07                	push   $0x7
   1079f:	e8 e7 00 00 00       	call   1088b <irq_install>
   107a4:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   107a7:	83 ec 08             	sub    $0x8,%esp
   107aa:	68 3f 01 01 00       	push   $0x1013f
   107af:	6a 08                	push   $0x8
   107b1:	e8 d5 00 00 00       	call   1088b <irq_install>
   107b6:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   107b9:	83 ec 08             	sub    $0x8,%esp
   107bc:	68 5c 01 01 00       	push   $0x1015c
   107c1:	6a 0a                	push   $0xa
   107c3:	e8 c3 00 00 00       	call   1088b <irq_install>
   107c8:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   107cb:	83 ec 08             	sub    $0x8,%esp
   107ce:	68 79 01 01 00       	push   $0x10179
   107d3:	6a 0b                	push   $0xb
   107d5:	e8 b1 00 00 00       	call   1088b <irq_install>
   107da:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   107dd:	83 ec 08             	sub    $0x8,%esp
   107e0:	68 96 01 01 00       	push   $0x10196
   107e5:	6a 0c                	push   $0xc
   107e7:	e8 9f 00 00 00       	call   1088b <irq_install>
   107ec:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   107ef:	83 ec 08             	sub    $0x8,%esp
   107f2:	68 b3 01 01 00       	push   $0x101b3
   107f7:	6a 0d                	push   $0xd
   107f9:	e8 8d 00 00 00       	call   1088b <irq_install>
   107fe:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10801:	83 ec 08             	sub    $0x8,%esp
   10804:	68 d0 01 01 00       	push   $0x101d0
   10809:	6a 0e                	push   $0xe
   1080b:	e8 7b 00 00 00       	call   1088b <irq_install>
   10810:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10813:	83 ec 08             	sub    $0x8,%esp
   10816:	68 ed 01 01 00       	push   $0x101ed
   1081b:	6a 10                	push   $0x10
   1081d:	e8 69 00 00 00       	call   1088b <irq_install>
   10822:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10825:	83 ec 08             	sub    $0x8,%esp
   10828:	68 0c 02 01 00       	push   $0x1020c
   1082d:	6a 11                	push   $0x11
   1082f:	e8 57 00 00 00       	call   1088b <irq_install>
   10834:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10837:	83 ec 08             	sub    $0x8,%esp
   1083a:	68 29 02 01 00       	push   $0x10229
   1083f:	6a 12                	push   $0x12
   10841:	e8 45 00 00 00       	call   1088b <irq_install>
   10846:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10849:	83 ec 08             	sub    $0x8,%esp
   1084c:	68 48 02 01 00       	push   $0x10248
   10851:	6a 13                	push   $0x13
   10853:	e8 33 00 00 00       	call   1088b <irq_install>
   10858:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   1085b:	83 ec 08             	sub    $0x8,%esp
   1085e:	68 67 02 01 00       	push   $0x10267
   10863:	6a 14                	push   $0x14
   10865:	e8 21 00 00 00       	call   1088b <irq_install>
   1086a:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   1086d:	b8 60 19 01 00       	mov    $0x11960,%eax
   10872:	83 ec 08             	sub    $0x8,%esp
   10875:	68 00 04 00 00       	push   $0x400
   1087a:	50                   	push   %eax
   1087b:	e8 d9 fb ff ff       	call   10459 <lidt>
   10880:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10883:	e8 c2 fd ff ff       	call   1064a <init_pic>
}
   10888:	90                   	nop
   10889:	c9                   	leave  
   1088a:	c3                   	ret    

0001088b <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   1088b:	55                   	push   %ebp
   1088c:	89 e5                	mov    %esp,%ebp
   1088e:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10891:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10895:	7e 07                	jle    1089e <irq_install+0x13>
        return -1;
   10897:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1089c:	eb 25                	jmp    108c3 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   1089e:	8b 45 0c             	mov    0xc(%ebp),%eax
   108a1:	8b 55 08             	mov    0x8(%ebp),%edx
   108a4:	c1 e2 03             	shl    $0x3,%edx
   108a7:	81 c2 60 19 01 00    	add    $0x11960,%edx
   108ad:	68 00 8e 00 00       	push   $0x8e00
   108b2:	50                   	push   %eax
   108b3:	6a 08                	push   $0x8
   108b5:	52                   	push   %edx
   108b6:	e8 02 fb ff ff       	call   103bd <gate_desc_set>
   108bb:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   108be:	b8 00 00 00 00       	mov    $0x0,%eax
}
   108c3:	c9                   	leave  
   108c4:	c3                   	ret    

000108c5 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   108c5:	55                   	push   %ebp
   108c6:	89 e5                	mov    %esp,%ebp
   108c8:	53                   	push   %ebx
   108c9:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   108cc:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   108d0:	7e 78                	jle    1094a <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   108d2:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   108d6:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   108da:	7f 32                	jg     1090e <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   108dc:	6a 21                	push   $0x21
   108de:	e8 2c fb ff ff       	call   1040f <inb>
   108e3:	83 c4 04             	add    $0x4,%esp
   108e6:	89 c2                	mov    %eax,%edx
   108e8:	8b 45 08             	mov    0x8(%ebp),%eax
   108eb:	bb 01 00 00 00       	mov    $0x1,%ebx
   108f0:	89 c1                	mov    %eax,%ecx
   108f2:	d3 e3                	shl    %cl,%ebx
   108f4:	89 d8                	mov    %ebx,%eax
   108f6:	f7 d0                	not    %eax
   108f8:	21 d0                	and    %edx,%eax
   108fa:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   108fd:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10901:	50                   	push   %eax
   10902:	6a 21                	push   $0x21
   10904:	e8 23 fb ff ff       	call   1042c <outb>
   10909:	83 c4 08             	add    $0x8,%esp
   1090c:	eb 3d                	jmp    1094b <irq_enable+0x86>
    }else{
        irq_num -= 8;
   1090e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10912:	68 a1 00 00 00       	push   $0xa1
   10917:	e8 f3 fa ff ff       	call   1040f <inb>
   1091c:	83 c4 04             	add    $0x4,%esp
   1091f:	89 c2                	mov    %eax,%edx
   10921:	8b 45 08             	mov    0x8(%ebp),%eax
   10924:	bb 01 00 00 00       	mov    $0x1,%ebx
   10929:	89 c1                	mov    %eax,%ecx
   1092b:	d3 e3                	shl    %cl,%ebx
   1092d:	89 d8                	mov    %ebx,%eax
   1092f:	f7 d0                	not    %eax
   10931:	21 d0                	and    %edx,%eax
   10933:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10936:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1093a:	50                   	push   %eax
   1093b:	68 a1 00 00 00       	push   $0xa1
   10940:	e8 e7 fa ff ff       	call   1042c <outb>
   10945:	83 c4 08             	add    $0x8,%esp
   10948:	eb 01                	jmp    1094b <irq_enable+0x86>
        return;
   1094a:	90                   	nop
    }
}
   1094b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1094e:	c9                   	leave  
   1094f:	c3                   	ret    

00010950 <irq_disable>:
void irq_disable (int irq_num) {
   10950:	55                   	push   %ebp
   10951:	89 e5                	mov    %esp,%ebp
   10953:	53                   	push   %ebx
   10954:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10957:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1095b:	7e 74                	jle    109d1 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   1095d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10961:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10965:	7f 30                	jg     10997 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10967:	6a 21                	push   $0x21
   10969:	e8 a1 fa ff ff       	call   1040f <inb>
   1096e:	83 c4 04             	add    $0x4,%esp
   10971:	89 c3                	mov    %eax,%ebx
   10973:	8b 45 08             	mov    0x8(%ebp),%eax
   10976:	ba 01 00 00 00       	mov    $0x1,%edx
   1097b:	89 c1                	mov    %eax,%ecx
   1097d:	d3 e2                	shl    %cl,%edx
   1097f:	89 d0                	mov    %edx,%eax
   10981:	09 d8                	or     %ebx,%eax
   10983:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10986:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1098a:	50                   	push   %eax
   1098b:	6a 21                	push   $0x21
   1098d:	e8 9a fa ff ff       	call   1042c <outb>
   10992:	83 c4 08             	add    $0x8,%esp
   10995:	eb 3b                	jmp    109d2 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10997:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   1099b:	68 a1 00 00 00       	push   $0xa1
   109a0:	e8 6a fa ff ff       	call   1040f <inb>
   109a5:	83 c4 04             	add    $0x4,%esp
   109a8:	89 c3                	mov    %eax,%ebx
   109aa:	8b 45 08             	mov    0x8(%ebp),%eax
   109ad:	ba 01 00 00 00       	mov    $0x1,%edx
   109b2:	89 c1                	mov    %eax,%ecx
   109b4:	d3 e2                	shl    %cl,%edx
   109b6:	89 d0                	mov    %edx,%eax
   109b8:	09 d8                	or     %ebx,%eax
   109ba:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   109bd:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   109c1:	50                   	push   %eax
   109c2:	68 a1 00 00 00       	push   $0xa1
   109c7:	e8 60 fa ff ff       	call   1042c <outb>
   109cc:	83 c4 08             	add    $0x8,%esp
   109cf:	eb 01                	jmp    109d2 <irq_disable+0x82>
        return;
   109d1:	90                   	nop
    }
}
   109d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   109d5:	c9                   	leave  
   109d6:	c3                   	ret    

000109d7 <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   109d7:	55                   	push   %ebp
   109d8:	89 e5                	mov    %esp,%ebp
    cli();
   109da:	e8 6c fa ff ff       	call   1044b <cli>
}
   109df:	90                   	nop
   109e0:	5d                   	pop    %ebp
   109e1:	c3                   	ret    

000109e2 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   109e2:	55                   	push   %ebp
   109e3:	89 e5                	mov    %esp,%ebp
    sti();
   109e5:	e8 68 fa ff ff       	call   10452 <sti>
}
   109ea:	90                   	nop
   109eb:	5d                   	pop    %ebp
   109ec:	c3                   	ret    

000109ed <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   109ed:	55                   	push   %ebp
   109ee:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   109f0:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   109f4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   109f8:	7e 0f                	jle    10a09 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   109fa:	6a 20                	push   $0x20
   109fc:	68 a0 00 00 00       	push   $0xa0
   10a01:	e8 26 fa ff ff       	call   1042c <outb>
   10a06:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10a09:	6a 20                	push   $0x20
   10a0b:	6a 20                	push   $0x20
   10a0d:	e8 1a fa ff ff       	call   1042c <outb>
   10a12:	83 c4 08             	add    $0x8,%esp

}
   10a15:	90                   	nop
   10a16:	c9                   	leave  
   10a17:	c3                   	ret    

00010a18 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10a18:	55                   	push   %ebp
   10a19:	89 e5                	mov    %esp,%ebp
   10a1b:	83 ec 08             	sub    $0x8,%esp
   10a1e:	8b 55 08             	mov    0x8(%ebp),%edx
   10a21:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a24:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10a28:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10a2b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a2f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10a33:	ee                   	out    %al,(%dx)
}
   10a34:	90                   	nop
   10a35:	c9                   	leave  
   10a36:	c3                   	ret    

00010a37 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   10a37:	55                   	push   %ebp
   10a38:	89 e5                	mov    %esp,%ebp
   10a3a:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10a3d:	a1 60 1d 01 00       	mov    0x11d60,%eax
   10a42:	83 c0 01             	add    $0x1,%eax
   10a45:	a3 60 1d 01 00       	mov    %eax,0x11d60
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   10a4a:	83 ec 0c             	sub    $0xc,%esp
   10a4d:	6a 20                	push   $0x20
   10a4f:	e8 99 ff ff ff       	call   109ed <pic_send_eoi>
   10a54:	83 c4 10             	add    $0x10,%esp
}
   10a57:	90                   	nop
   10a58:	c9                   	leave  
   10a59:	c3                   	ret    

00010a5a <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10a5a:	55                   	push   %ebp
   10a5b:	89 e5                	mov    %esp,%ebp
   10a5d:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10a60:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   10a67:	6a 36                	push   $0x36
   10a69:	6a 43                	push   $0x43
   10a6b:	e8 a8 ff ff ff       	call   10a18 <outb>
   10a70:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   10a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a76:	0f b6 c0             	movzbl %al,%eax
   10a79:	50                   	push   %eax
   10a7a:	6a 40                	push   $0x40
   10a7c:	e8 97 ff ff ff       	call   10a18 <outb>
   10a81:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   10a84:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a87:	c1 e8 08             	shr    $0x8,%eax
   10a8a:	0f b6 c0             	movzbl %al,%eax
   10a8d:	50                   	push   %eax
   10a8e:	6a 40                	push   $0x40
   10a90:	e8 83 ff ff ff       	call   10a18 <outb>
   10a95:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10a98:	83 ec 08             	sub    $0x8,%esp
   10a9b:	68 86 02 01 00       	push   $0x10286
   10aa0:	6a 20                	push   $0x20
   10aa2:	e8 e4 fd ff ff       	call   1088b <irq_install>
   10aa7:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10aaa:	83 ec 0c             	sub    $0xc,%esp
   10aad:	6a 20                	push   $0x20
   10aaf:	e8 11 fe ff ff       	call   108c5 <irq_enable>
   10ab4:	83 c4 10             	add    $0x10,%esp
}
   10ab7:	90                   	nop
   10ab8:	c9                   	leave  
   10ab9:	c3                   	ret    

00010aba <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   10aba:	55                   	push   %ebp
   10abb:	89 e5                	mov    %esp,%ebp
   10abd:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10ac0:	c7 05 60 1d 01 00 00 	movl   $0x0,0x11d60
   10ac7:	00 00 00 

    init_pit();
   10aca:	e8 8b ff ff ff       	call   10a5a <init_pit>
   10acf:	90                   	nop
   10ad0:	c9                   	leave  
   10ad1:	c3                   	ret    

00010ad2 <kernel_init>:
#include "os_cfg.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   10ad2:	55                   	push   %ebp
   10ad3:	89 e5                	mov    %esp,%ebp
   10ad5:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10ad8:	e8 27 f9 ff ff       	call   10404 <cpu_init>
    log_init();
   10add:	e8 8f 03 00 00       	call   10e71 <log_init>
    irq_init();
   10ae2:	e8 f6 fb ff ff       	call   106dd <irq_init>
    time_init();
   10ae7:	e8 ce ff ff ff       	call   10aba <time_init>
}
   10aec:	90                   	nop
   10aed:	c9                   	leave  
   10aee:	c3                   	ret    

00010aef <init_main>:

void init_main(void) {
   10aef:	55                   	push   %ebp
   10af0:	89 e5                	mov    %esp,%ebp
   10af2:	83 ec 08             	sub    $0x8,%esp

    // int a = 3 / 0;
    log_printf("kernel is running....");
   10af5:	83 ec 0c             	sub    $0xc,%esp
   10af8:	68 0d 11 01 00       	push   $0x1110d
   10afd:	e8 e4 03 00 00       	call   10ee6 <log_printf>
   10b02:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   10b05:	83 ec 04             	sub    $0x4,%esp
   10b08:	68 23 11 01 00       	push   $0x11123
   10b0d:	68 2c 11 01 00       	push   $0x1112c
   10b12:	68 32 11 01 00       	push   $0x11132
   10b17:	e8 ca 03 00 00       	call   10ee6 <log_printf>
   10b1c:	83 c4 10             	add    $0x10,%esp

    irq_enable_global();
   10b1f:	e8 be fe ff ff       	call   109e2 <irq_enable_global>
    for(;;){}
   10b24:	eb fe                	jmp    10b24 <init_main+0x35>

00010b26 <kernel_strcpy>:
 **/

#include "comm/types.h"
#include "tools/klib.h"

void kernel_strcpy(char * dest,const char *src) {
   10b26:	55                   	push   %ebp
   10b27:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   10b29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b2d:	74 3b                	je     10b6a <kernel_strcpy+0x44>
   10b2f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10b33:	74 35                	je     10b6a <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   10b35:	eb 17                	jmp    10b4e <kernel_strcpy+0x28>
        *dest++ = *src++;
   10b37:	8b 55 0c             	mov    0xc(%ebp),%edx
   10b3a:	8d 42 01             	lea    0x1(%edx),%eax
   10b3d:	89 45 0c             	mov    %eax,0xc(%ebp)
   10b40:	8b 45 08             	mov    0x8(%ebp),%eax
   10b43:	8d 48 01             	lea    0x1(%eax),%ecx
   10b46:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10b49:	0f b6 12             	movzbl (%edx),%edx
   10b4c:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   10b4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b51:	0f b6 00             	movzbl (%eax),%eax
   10b54:	84 c0                	test   %al,%al
   10b56:	74 0a                	je     10b62 <kernel_strcpy+0x3c>
   10b58:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b5b:	0f b6 00             	movzbl (%eax),%eax
   10b5e:	84 c0                	test   %al,%al
   10b60:	75 d5                	jne    10b37 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   10b62:	8b 45 08             	mov    0x8(%ebp),%eax
   10b65:	c6 00 00             	movb   $0x0,(%eax)
   10b68:	eb 01                	jmp    10b6b <kernel_strcpy+0x45>
        return;
   10b6a:	90                   	nop
}
   10b6b:	5d                   	pop    %ebp
   10b6c:	c3                   	ret    

00010b6d <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   10b6d:	55                   	push   %ebp
   10b6e:	89 e5                	mov    %esp,%ebp
   10b70:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   10b73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b77:	74 61                	je     10bda <kernel_strncpy+0x6d>
   10b79:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10b7d:	74 5b                	je     10bda <kernel_strncpy+0x6d>
   10b7f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10b83:	74 55                	je     10bda <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   10b85:	8b 45 08             	mov    0x8(%ebp),%eax
   10b88:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   10b8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b8e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   10b91:	eb 17                	jmp    10baa <kernel_strncpy+0x3d>
        *d++ = *s++;
   10b93:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10b96:	8d 42 01             	lea    0x1(%edx),%eax
   10b99:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10b9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b9f:	8d 48 01             	lea    0x1(%eax),%ecx
   10ba2:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10ba5:	0f b6 12             	movzbl (%edx),%edx
   10ba8:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   10baa:	8b 45 10             	mov    0x10(%ebp),%eax
   10bad:	8d 50 ff             	lea    -0x1(%eax),%edx
   10bb0:	89 55 10             	mov    %edx,0x10(%ebp)
   10bb3:	85 c0                	test   %eax,%eax
   10bb5:	7e 0a                	jle    10bc1 <kernel_strncpy+0x54>
   10bb7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10bba:	0f b6 00             	movzbl (%eax),%eax
   10bbd:	84 c0                	test   %al,%al
   10bbf:	75 d2                	jne    10b93 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   10bc1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10bc5:	75 0b                	jne    10bd2 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   10bc7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10bca:	83 e8 01             	sub    $0x1,%eax
   10bcd:	c6 00 00             	movb   $0x0,(%eax)
   10bd0:	eb 09                	jmp    10bdb <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   10bd2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10bd5:	c6 00 00             	movb   $0x0,(%eax)
   10bd8:	eb 01                	jmp    10bdb <kernel_strncpy+0x6e>
        return;
   10bda:	90                   	nop
    }
}
   10bdb:	c9                   	leave  
   10bdc:	c3                   	ret    

00010bdd <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   10bdd:	55                   	push   %ebp
   10bde:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   10be0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10be4:	74 06                	je     10bec <kernel_strncmp+0xf>
   10be6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10bea:	75 0f                	jne    10bfb <kernel_strncmp+0x1e>
        return -1;
   10bec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bf1:	eb 62                	jmp    10c55 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   10bf3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   10bf7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   10bfb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfe:	0f b6 00             	movzbl (%eax),%eax
   10c01:	84 c0                	test   %al,%al
   10c03:	74 20                	je     10c25 <kernel_strncmp+0x48>
   10c05:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c08:	0f b6 00             	movzbl (%eax),%eax
   10c0b:	84 c0                	test   %al,%al
   10c0d:	74 16                	je     10c25 <kernel_strncmp+0x48>
   10c0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c12:	0f b6 10             	movzbl (%eax),%edx
   10c15:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c18:	0f b6 00             	movzbl (%eax),%eax
   10c1b:	38 c2                	cmp    %al,%dl
   10c1d:	75 06                	jne    10c25 <kernel_strncmp+0x48>
   10c1f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10c23:	75 ce                	jne    10bf3 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10c25:	8b 45 08             	mov    0x8(%ebp),%eax
   10c28:	0f b6 00             	movzbl (%eax),%eax
   10c2b:	84 c0                	test   %al,%al
   10c2d:	74 21                	je     10c50 <kernel_strncmp+0x73>
   10c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c32:	0f b6 00             	movzbl (%eax),%eax
   10c35:	84 c0                	test   %al,%al
   10c37:	74 17                	je     10c50 <kernel_strncmp+0x73>
   10c39:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3c:	0f b6 10             	movzbl (%eax),%edx
   10c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c42:	0f b6 00             	movzbl (%eax),%eax
   10c45:	38 c2                	cmp    %al,%dl
   10c47:	74 07                	je     10c50 <kernel_strncmp+0x73>
   10c49:	b8 01 00 00 00       	mov    $0x1,%eax
   10c4e:	eb 05                	jmp    10c55 <kernel_strncmp+0x78>
   10c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c55:	5d                   	pop    %ebp
   10c56:	c3                   	ret    

00010c57 <kernel_strlen>:
int kernel_strlen(const char * str){
   10c57:	55                   	push   %ebp
   10c58:	89 e5                	mov    %esp,%ebp
   10c5a:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   10c5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c61:	75 07                	jne    10c6a <kernel_strlen+0x13>
        return 0;
   10c63:	b8 00 00 00 00       	mov    $0x0,%eax
   10c68:	eb 26                	jmp    10c90 <kernel_strlen+0x39>
    }

    const char * c = str;
   10c6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   10c70:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   10c77:	eb 04                	jmp    10c7d <kernel_strlen+0x26>
        len++;
   10c79:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   10c7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c80:	8d 50 01             	lea    0x1(%eax),%edx
   10c83:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10c86:	0f b6 00             	movzbl (%eax),%eax
   10c89:	84 c0                	test   %al,%al
   10c8b:	75 ec                	jne    10c79 <kernel_strlen+0x22>
    }
    return len;
   10c8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   10c90:	c9                   	leave  
   10c91:	c3                   	ret    

00010c92 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   10c92:	55                   	push   %ebp
   10c93:	89 e5                	mov    %esp,%ebp
   10c95:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   10c98:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c9c:	74 40                	je     10cde <kernel_memcpy+0x4c>
   10c9e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ca2:	74 3a                	je     10cde <kernel_memcpy+0x4c>
   10ca4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ca8:	74 34                	je     10cde <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   10caa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cad:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   10cb0:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   10cb6:	eb 17                	jmp    10ccf <kernel_memcpy+0x3d>
        *d++ = *s++;
   10cb8:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10cbb:	8d 42 01             	lea    0x1(%edx),%eax
   10cbe:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10cc1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10cc4:	8d 48 01             	lea    0x1(%eax),%ecx
   10cc7:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10cca:	0f b6 12             	movzbl (%edx),%edx
   10ccd:	88 10                	mov    %dl,(%eax)
    while(size--){
   10ccf:	8b 45 10             	mov    0x10(%ebp),%eax
   10cd2:	8d 50 ff             	lea    -0x1(%eax),%edx
   10cd5:	89 55 10             	mov    %edx,0x10(%ebp)
   10cd8:	85 c0                	test   %eax,%eax
   10cda:	75 dc                	jne    10cb8 <kernel_memcpy+0x26>
   10cdc:	eb 01                	jmp    10cdf <kernel_memcpy+0x4d>
        return;
   10cde:	90                   	nop
    }

}
   10cdf:	c9                   	leave  
   10ce0:	c3                   	ret    

00010ce1 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   10ce1:	55                   	push   %ebp
   10ce2:	89 e5                	mov    %esp,%ebp
   10ce4:	83 ec 14             	sub    $0x14,%esp
   10ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cea:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   10ced:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10cf1:	74 2c                	je     10d1f <kernel_memset+0x3e>
   10cf3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10cf7:	74 26                	je     10d1f <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   10cf9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cfc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   10cff:	eb 0f                	jmp    10d10 <kernel_memset+0x2f>
       *d++ = v; 
   10d01:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d04:	8d 50 01             	lea    0x1(%eax),%edx
   10d07:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10d0a:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   10d0e:	88 10                	mov    %dl,(%eax)
    while(size--){
   10d10:	8b 45 10             	mov    0x10(%ebp),%eax
   10d13:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d16:	89 55 10             	mov    %edx,0x10(%ebp)
   10d19:	85 c0                	test   %eax,%eax
   10d1b:	75 e4                	jne    10d01 <kernel_memset+0x20>
   10d1d:	eb 01                	jmp    10d20 <kernel_memset+0x3f>
        return;
   10d1f:	90                   	nop
    }
}
   10d20:	c9                   	leave  
   10d21:	c3                   	ret    

00010d22 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   10d22:	55                   	push   %ebp
   10d23:	89 e5                	mov    %esp,%ebp
   10d25:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   10d28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d2c:	74 0c                	je     10d3a <kernel_memcmp+0x18>
   10d2e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10d32:	74 06                	je     10d3a <kernel_memcmp+0x18>
   10d34:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10d38:	75 07                	jne    10d41 <kernel_memcmp+0x1f>
        return -1;
   10d3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10d3f:	eb 43                	jmp    10d84 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   10d41:	8b 45 08             	mov    0x8(%ebp),%eax
   10d44:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   10d47:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d4a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   10d4d:	eb 23                	jmp    10d72 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   10d4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d52:	8d 50 01             	lea    0x1(%eax),%edx
   10d55:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10d58:	0f b6 08             	movzbl (%eax),%ecx
   10d5b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10d5e:	8d 50 01             	lea    0x1(%eax),%edx
   10d61:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10d64:	0f b6 00             	movzbl (%eax),%eax
   10d67:	38 c1                	cmp    %al,%cl
   10d69:	74 07                	je     10d72 <kernel_memcmp+0x50>
            return -1;
   10d6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10d70:	eb 12                	jmp    10d84 <kernel_memcmp+0x62>
    while(size--){
   10d72:	8b 45 10             	mov    0x10(%ebp),%eax
   10d75:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d78:	89 55 10             	mov    %edx,0x10(%ebp)
   10d7b:	85 c0                	test   %eax,%eax
   10d7d:	75 d0                	jne    10d4f <kernel_memcmp+0x2d>
        }
    }
    return 0;
   10d7f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d84:	c9                   	leave  
   10d85:	c3                   	ret    

00010d86 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   10d86:	55                   	push   %ebp
   10d87:	89 e5                	mov    %esp,%ebp
   10d89:	83 ec 20             	sub    $0x20,%esp
    //
    enum{NORMAL,READ_FMT} state = NORMAL;
   10d8c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   10d93:	8b 45 08             	mov    0x8(%ebp),%eax
   10d96:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   10d99:	eb 7e                	jmp    10e19 <kernel_vsprintf+0x93>
        switch(state) {
   10d9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d9e:	85 c0                	test   %eax,%eax
   10da0:	74 07                	je     10da9 <kernel_vsprintf+0x23>
   10da2:	83 f8 01             	cmp    $0x1,%eax
   10da5:	74 22                	je     10dc9 <kernel_vsprintf+0x43>
   10da7:	eb 70                	jmp    10e19 <kernel_vsprintf+0x93>
            case NORMAL:
                if(ch == '%') {
   10da9:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   10dad:	75 09                	jne    10db8 <kernel_vsprintf+0x32>
                    state = READ_FMT;
   10daf:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10db6:	eb 61                	jmp    10e19 <kernel_vsprintf+0x93>
                }else{
                    *curr++ = ch;
   10db8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10dbb:	8d 50 01             	lea    0x1(%eax),%edx
   10dbe:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10dc1:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   10dc5:	88 10                	mov    %dl,(%eax)
                }
                break;
   10dc7:	eb 50                	jmp    10e19 <kernel_vsprintf+0x93>

            case READ_FMT:
                if (ch == 's') {
   10dc9:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   10dcd:	75 42                	jne    10e11 <kernel_vsprintf+0x8b>
                    const char * str = va_arg(args,char *);
   10dcf:	8b 45 10             	mov    0x10(%ebp),%eax
   10dd2:	8d 50 04             	lea    0x4(%eax),%edx
   10dd5:	89 55 10             	mov    %edx,0x10(%ebp)
   10dd8:	8b 00                	mov    (%eax),%eax
   10dda:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   10ddd:	ff 75 f4             	pushl  -0xc(%ebp)
   10de0:	e8 72 fe ff ff       	call   10c57 <kernel_strlen>
   10de5:	83 c4 04             	add    $0x4,%esp
   10de8:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   10deb:	eb 17                	jmp    10e04 <kernel_vsprintf+0x7e>
                        *curr++ = *str++;
   10ded:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10df0:	8d 42 01             	lea    0x1(%edx),%eax
   10df3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10df6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10df9:	8d 48 01             	lea    0x1(%eax),%ecx
   10dfc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10dff:	0f b6 12             	movzbl (%edx),%edx
   10e02:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   10e04:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e07:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e0a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   10e0d:	85 c0                	test   %eax,%eax
   10e0f:	75 dc                	jne    10ded <kernel_vsprintf+0x67>
                    }
                }
                state = NORMAL;
   10e11:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   10e18:	90                   	nop
    while ((ch = *fmt++)) {
   10e19:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e1c:	8d 50 01             	lea    0x1(%eax),%edx
   10e1f:	89 55 0c             	mov    %edx,0xc(%ebp)
   10e22:	0f b6 00             	movzbl (%eax),%eax
   10e25:	88 45 ef             	mov    %al,-0x11(%ebp)
   10e28:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   10e2c:	0f 85 69 ff ff ff    	jne    10d9b <kernel_vsprintf+0x15>
        }
    }
}
   10e32:	90                   	nop
   10e33:	c9                   	leave  
   10e34:	c3                   	ret    

00010e35 <inb>:
static inline uint8_t inb(uint16_t port) {
   10e35:	55                   	push   %ebp
   10e36:	89 e5                	mov    %esp,%ebp
   10e38:	83 ec 14             	sub    $0x14,%esp
   10e3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10e42:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10e46:	89 c2                	mov    %eax,%edx
   10e48:	ec                   	in     (%dx),%al
   10e49:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10e4c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10e50:	c9                   	leave  
   10e51:	c3                   	ret    

00010e52 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10e52:	55                   	push   %ebp
   10e53:	89 e5                	mov    %esp,%ebp
   10e55:	83 ec 08             	sub    $0x8,%esp
   10e58:	8b 55 08             	mov    0x8(%ebp),%edx
   10e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e5e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10e62:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10e65:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10e69:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10e6d:	ee                   	out    %al,(%dx)
}
   10e6e:	90                   	nop
   10e6f:	c9                   	leave  
   10e70:	c3                   	ret    

00010e71 <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值

#define COM1_PORT 0x3f8

void log_init(void) {
   10e71:	55                   	push   %ebp
   10e72:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   10e74:	6a 00                	push   $0x0
   10e76:	68 f9 03 00 00       	push   $0x3f9
   10e7b:	e8 d2 ff ff ff       	call   10e52 <outb>
   10e80:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   10e83:	68 80 00 00 00       	push   $0x80
   10e88:	68 fb 03 00 00       	push   $0x3fb
   10e8d:	e8 c0 ff ff ff       	call   10e52 <outb>
   10e92:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   10e95:	6a 03                	push   $0x3
   10e97:	68 f8 03 00 00       	push   $0x3f8
   10e9c:	e8 b1 ff ff ff       	call   10e52 <outb>
   10ea1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   10ea4:	6a 00                	push   $0x0
   10ea6:	68 f9 03 00 00       	push   $0x3f9
   10eab:	e8 a2 ff ff ff       	call   10e52 <outb>
   10eb0:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   10eb3:	6a 03                	push   $0x3
   10eb5:	68 fb 03 00 00       	push   $0x3fb
   10eba:	e8 93 ff ff ff       	call   10e52 <outb>
   10ebf:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   10ec2:	68 c7 00 00 00       	push   $0xc7
   10ec7:	68 fa 03 00 00       	push   $0x3fa
   10ecc:	e8 81 ff ff ff       	call   10e52 <outb>
   10ed1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   10ed4:	6a 0f                	push   $0xf
   10ed6:	68 fc 03 00 00       	push   $0x3fc
   10edb:	e8 72 ff ff ff       	call   10e52 <outb>
   10ee0:	83 c4 08             	add    $0x8,%esp

}
   10ee3:	90                   	nop
   10ee4:	c9                   	leave  
   10ee5:	c3                   	ret    

00010ee6 <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   10ee6:	55                   	push   %ebp
   10ee7:	89 e5                	mov    %esp,%ebp
   10ee9:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   10eef:	83 ec 04             	sub    $0x4,%esp
   10ef2:	68 80 00 00 00       	push   $0x80
   10ef7:	6a 00                	push   $0x0
   10ef9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   10eff:	50                   	push   %eax
   10f00:	e8 dc fd ff ff       	call   10ce1 <kernel_memset>
   10f05:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   10f08:	8d 45 0c             	lea    0xc(%ebp),%eax
   10f0b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(str_buf,fmt,args);
   10f11:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   10f17:	83 ec 04             	sub    $0x4,%esp
   10f1a:	50                   	push   %eax
   10f1b:	ff 75 08             	pushl  0x8(%ebp)
   10f1e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   10f24:	50                   	push   %eax
   10f25:	e8 5c fe ff ff       	call   10d86 <kernel_vsprintf>
   10f2a:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;
   10f2d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   10f33:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   10f36:	eb 31                	jmp    10f69 <log_printf+0x83>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   10f38:	90                   	nop
   10f39:	83 ec 0c             	sub    $0xc,%esp
   10f3c:	68 fd 03 00 00       	push   $0x3fd
   10f41:	e8 ef fe ff ff       	call   10e35 <inb>
   10f46:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   10f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f4c:	8d 50 01             	lea    0x1(%eax),%edx
   10f4f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f52:	0f b6 00             	movzbl (%eax),%eax
   10f55:	0f b6 c0             	movzbl %al,%eax
   10f58:	83 ec 08             	sub    $0x8,%esp
   10f5b:	50                   	push   %eax
   10f5c:	68 f8 03 00 00       	push   $0x3f8
   10f61:	e8 ec fe ff ff       	call   10e52 <outb>
   10f66:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   10f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f6c:	0f b6 00             	movzbl (%eax),%eax
   10f6f:	84 c0                	test   %al,%al
   10f71:	75 c5                	jne    10f38 <log_printf+0x52>
    }

// 变列
    outb(COM1_PORT,'\r');
   10f73:	83 ec 08             	sub    $0x8,%esp
   10f76:	6a 0d                	push   $0xd
   10f78:	68 f8 03 00 00       	push   $0x3f8
   10f7d:	e8 d0 fe ff ff       	call   10e52 <outb>
   10f82:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   10f85:	83 ec 08             	sub    $0x8,%esp
   10f88:	6a 0a                	push   $0xa
   10f8a:	68 f8 03 00 00       	push   $0x3f8
   10f8f:	e8 be fe ff ff       	call   10e52 <outb>
   10f94:	83 c4 10             	add    $0x10,%esp

   10f97:	90                   	nop
   10f98:	c9                   	leave  
   10f99:	c3                   	ret    
