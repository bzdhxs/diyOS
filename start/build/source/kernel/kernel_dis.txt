
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001cc0 memsz 0x00005a40 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000194e  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000036c  00011950  00011950  00002950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011cbc  00011cbc  00002cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d80  00011cc0  00011cc0  00002cc0  2**5
                  ALLOC
  4 .debug_line   00000b90  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001de3  00000000  00000000  00003850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000989  00000000  00000000  00005633  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  00005fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000009f3  00000000  00000000  000060e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00006ad3  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000af8  00000000  00000000  00006ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011950 l    d  .rodata	00000000 .rodata
00011cbc l    d  .data	00000000 .data
00011cc0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	0000001b list_node_init
000102c0 l     F .text	00000017 write_tr
00011cc0 l     O .bss	000000bc task_manager
000102d7 l     F .text	00000117 tss_init
000119b0 l     O .rodata	0000000a __func__.1985
00000000 l    df *ABS*	00000000 cpu.c
00010574 l     F .text	00000028 lgdt
0001059c l     F .text	0000001a far_jump
00011d80 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010751 l     F .text	0000001d inb
0001076e l     F .text	0000001f outb
0001078d l     F .text	00000007 cli
00010794 l     F .text	00000007 sti
0001079b l     F .text	00000028 lidt
000107c3 l     F .text	00000007 hlt
000107ca l     F .text	000000d9 dump_core_regs
000108a3 l     F .text	0000003e do_default_handler
00012580 l     O .bss	00000400 idt_table
00010b11 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010edf l     F .text	0000001f outb
00012980 l     O .bss	00000004 sys_tick
00010f21 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
000129a0 l     O .bss	00001000 init_task_stack
000139a0 l     O .bss	000000a0 init_task
00000000 l    df *ABS*	00000000 klib.c
000110a4 l     F .text	00000007 hlt
00011cbc l     O .data	00000004 num2ch.1900
00000000 l    df *ABS*	00000000 list.c
000115ef l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000117e9 l     F .text	0000001d inb
00011806 l     F .text	0000001f outb
00011217 g     F .text	0000004f kernel_memcpy
00010ea9 g     F .text	0000000b irq_enable_global
00011687 g     F .text	00000064 list_insert_last
00010a15 g     F .text	0000001c do_handler_segment_not_present
0001052b g     F .text	00000029 task_set_ready
00011266 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
000106ed g     F .text	0000000b cpu_init
00011825 g     F .text	00000075 log_init
00010ffa g     F .text	000000aa init_main
0001020c g       .text	00000000 exception_handler_alignment_check
000110ab g     F .text	00000047 kernel_strcpy
00010d8c g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
0001096d g     F .text	0000001c do_handler_overflow
00010aa1 g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010a4d g     F .text	0000001c do_handler_general_protection
000108fd g     F .text	0000001c do_handler_divider
000109dd g     F .text	0000001c do_handler_double_fault
00010fbb g     F .text	0000003f init_task_entry
00010a69 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010eb4 g     F .text	0000002b pic_send_eoi
000104ee g     F .text	0000000a task_first_task
00010efe g     F .text	00000023 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010af5 g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00013a40 g     O .bss	00002000 stack
000100e2 g       .text	00000000 exception_handler_bound_range
000109a5 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010a85 g     F .text	0000001c do_handler_fpu_error
000104b1 g     F .text	0000003d task_first_init
00010abd g     F .text	0000001c do_handler_machine_check
00010919 g     F .text	0000001c do_handler_Debug
00011627 g     F .text	00000060 list_insert_first
00010935 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
000110f2 g     F .text	00000070 kernel_strncpy
00010e9e g     F .text	0000000b irq_disable_global
00010f99 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
0001146e g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
000109f9 g     F .text	0000001c do_handler_invalid_tss
000115b9 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00010d52 g     F .text	0000003a irq_install
00010639 g     F .text	0000006d init_gdt
00010e17 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
000109c1 g     F .text	0000001c do_handler_device_unavailable
0001073d g     F .text	00000014 switch_to_tss
000112a7 g     F .text	00000064 kernel_memcmp
00011602 g     F .text	00000025 list_init
00010ad9 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00010554 g     F .text	00000020 task_set_block
000108e1 g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
000103ee g     F .text	0000001e task_switch_from_to
00010ba4 g     F .text	000001ae irq_init
000111dc g     F .text	0000003b kernel_strlen
000105b6 g     F .text	00000083 segment_desc_set
00010989 g     F .text	0000001c do_handler_bound_range
000116eb g     F .text	00000079 list_remove_first
00011162 g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
000104f8 g     F .text	00000033 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00010a31 g     F .text	0000001c do_handler_stack_segment_fault
00010951 g     F .text	0000001c do_handler_breakpoint
0001189a g     F .text	000000b4 log_printf
0001040c g     F .text	000000a5 task_init
0001130b g     F .text	00000024 kernel_sprintf
000106f8 g     F .text	00000045 gdt_alloc_desc
0001132f g     F .text	0000013f kernel_itoa
00011764 g     F .text	00000085 list_remove
000106a6 g     F .text	00000047 gate_desc_set
00010f81 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 90 0f 00 00       	call   10f99 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 40 5a 01 00       	mov    $0x15a40,%esp
    jmp init_main
   10023:	e9 d2 0f 00 00       	jmp    10ffa <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 a8 08 00 00       	call   108e1 <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 a5 08 00 00       	call   108fd <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 a2 08 00 00       	call   10919 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 9f 08 00 00       	call   10935 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 9c 08 00 00       	call   10951 <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 99 08 00 00       	call   1096d <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 96 08 00 00       	call   10989 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 93 08 00 00       	call   109a5 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 90 08 00 00       	call   109c1 <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 8f 08 00 00       	call   109dd <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 8e 08 00 00       	call   109f9 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 8d 08 00 00       	call   10a15 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 8c 08 00 00       	call   10a31 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 8b 08 00 00       	call   10a4d <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 8a 08 00 00       	call   10a69 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 87 08 00 00       	call   10a85 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 86 08 00 00       	call   10aa1 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 83 08 00 00       	call   10abd <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 80 08 00 00       	call   10ad9 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 7d 08 00 00       	call   10af5 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 67 0c 00 00       	call   10efe <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102b2:	8b 45 08             	mov    0x8(%ebp),%eax
   102b5:	8b 50 04             	mov    0x4(%eax),%edx
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	89 10                	mov    %edx,(%eax)
}
   102bd:	90                   	nop
   102be:	5d                   	pop    %ebp
   102bf:	c3                   	ret    

000102c0 <write_tr>:

static inline void hlt (void) {
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
   102c3:	83 ec 04             	sub    $0x4,%esp
   102c6:	8b 45 08             	mov    0x8(%ebp),%eax
   102c9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   102cd:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102d1:	0f 00 d8             	ltr    %ax
}
   102d4:	90                   	nop
   102d5:	c9                   	leave  
   102d6:	c3                   	ret    

000102d7 <tss_init>:
#include "tools/log.h"
#include "comm/cpu_instr.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102d7:	55                   	push   %ebp
   102d8:	89 e5                	mov    %esp,%ebp
   102da:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102dd:	e8 16 04 00 00       	call   106f8 <gdt_alloc_desc>
   102e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   102e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102e9:	79 1a                	jns    10305 <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   102eb:	83 ec 0c             	sub    $0xc,%esp
   102ee:	68 50 19 01 00       	push   $0x11950
   102f3:	e8 a2 15 00 00       	call   1189a <log_printf>
   102f8:	83 c4 10             	add    $0x10,%esp
        return -1;
   102fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10300:	e9 e7 00 00 00       	jmp    103ec <tss_init+0x115>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	83 c0 34             	add    $0x34,%eax
   1030b:	68 89 00 00 00       	push   $0x89
   10310:	6a 68                	push   $0x68
   10312:	50                   	push   %eax
   10313:	ff 75 f4             	pushl  -0xc(%ebp)
   10316:	e8 9b 02 00 00       	call   105b6 <segment_desc_set>
   1031b:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   1031e:	8b 45 08             	mov    0x8(%ebp),%eax
   10321:	83 c0 34             	add    $0x34,%eax
   10324:	83 ec 04             	sub    $0x4,%esp
   10327:	6a 68                	push   $0x68
   10329:	6a 00                	push   $0x0
   1032b:	50                   	push   %eax
   1032c:	e8 35 0f 00 00       	call   11266 <kernel_memset>
   10331:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10334:	8b 45 08             	mov    0x8(%ebp),%eax
   10337:	8b 55 0c             	mov    0xc(%ebp),%edx
   1033a:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1033d:	8b 45 08             	mov    0x8(%ebp),%eax
   10340:	8b 55 10             	mov    0x10(%ebp),%edx
   10343:	89 50 38             	mov    %edx,0x38(%eax)
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 50 38             	mov    0x38(%eax),%edx
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10352:	8b 45 08             	mov    0x8(%ebp),%eax
   10355:	c7 40 3c 10 00 00 00 	movl   $0x10,0x3c(%eax)
    task->tss.eip = entry;
   1035c:	8b 45 08             	mov    0x8(%ebp),%eax
   1035f:	8b 55 0c             	mov    0xc(%ebp),%edx
   10362:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10365:	8b 45 08             	mov    0x8(%ebp),%eax
   10368:	c7 40 58 02 02 00 00 	movl   $0x202,0x58(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   1036f:	8b 45 08             	mov    0x8(%ebp),%eax
   10372:	c7 80 90 00 00 00 10 	movl   $0x10,0x90(%eax)
   10379:	00 00 00 
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   10385:	8b 45 08             	mov    0x8(%ebp),%eax
   10388:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
   1038e:	8b 45 08             	mov    0x8(%ebp),%eax
   10391:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
   10397:	8b 45 08             	mov    0x8(%ebp),%eax
   1039a:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   103a0:	8b 45 08             	mov    0x8(%ebp),%eax
   103a3:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
   103a9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ac:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
   103b2:	8b 45 08             	mov    0x8(%ebp),%eax
   103b5:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
   103bb:	8b 45 08             	mov    0x8(%ebp),%eax
   103be:	89 50 7c             	mov    %edx,0x7c(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   103c1:	8b 45 08             	mov    0x8(%ebp),%eax
   103c4:	c7 80 80 00 00 00 08 	movl   $0x8,0x80(%eax)
   103cb:	00 00 00 
    task->tss.iomap = 0;
   103ce:	8b 45 08             	mov    0x8(%ebp),%eax
   103d1:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
   103d8:	00 00 00 

    task->tss_sel = tss_sel;
   103db:	8b 45 08             	mov    0x8(%ebp),%eax
   103de:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103e1:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    return 0;
   103e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103ec:	c9                   	leave  
   103ed:	c3                   	ret    

000103ee <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   103ee:	55                   	push   %ebp
   103ef:	89 e5                	mov    %esp,%ebp
   103f1:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   103f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
   103fd:	83 ec 0c             	sub    $0xc,%esp
   10400:	50                   	push   %eax
   10401:	e8 37 03 00 00       	call   1073d <switch_to_tss>
   10406:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   10409:	90                   	nop
   1040a:	c9                   	leave  
   1040b:	c3                   	ret    

0001040c <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   1040c:	55                   	push   %ebp
   1040d:	89 e5                	mov    %esp,%ebp
   1040f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10412:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10416:	75 19                	jne    10431 <task_init+0x25>
   10418:	68 63 19 01 00       	push   $0x11963
   1041d:	68 b0 19 01 00       	push   $0x119b0
   10422:	6a 37                	push   $0x37
   10424:	68 78 19 01 00       	push   $0x11978
   10429:	e8 8b 11 00 00       	call   115b9 <panic>
   1042e:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   10431:	83 ec 04             	sub    $0x4,%esp
   10434:	ff 75 14             	pushl  0x14(%ebp)
   10437:	ff 75 10             	pushl  0x10(%ebp)
   1043a:	ff 75 08             	pushl  0x8(%ebp)
   1043d:	e8 95 fe ff ff       	call   102d7 <tss_init>
   10442:	83 c4 10             	add    $0x10,%esp


    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10445:	8b 45 08             	mov    0x8(%ebp),%eax
   10448:	83 c0 04             	add    $0x4,%eax
   1044b:	83 ec 04             	sub    $0x4,%esp
   1044e:	6a 20                	push   $0x20
   10450:	ff 75 0c             	pushl  0xc(%ebp)
   10453:	50                   	push   %eax
   10454:	e8 99 0c 00 00       	call   110f2 <kernel_strncpy>
   10459:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1045c:	8b 45 08             	mov    0x8(%ebp),%eax
   1045f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    list_node_init(&task->all_node);
   10465:	8b 45 08             	mov    0x8(%ebp),%eax
   10468:	83 c0 2c             	add    $0x2c,%eax
   1046b:	83 ec 0c             	sub    $0xc,%esp
   1046e:	50                   	push   %eax
   1046f:	e8 31 fe ff ff       	call   102a5 <list_node_init>
   10474:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10477:	8b 45 08             	mov    0x8(%ebp),%eax
   1047a:	83 c0 24             	add    $0x24,%eax
   1047d:	83 ec 0c             	sub    $0xc,%esp
   10480:	50                   	push   %eax
   10481:	e8 1f fe ff ff       	call   102a5 <list_node_init>
   10486:	83 c4 10             	add    $0x10,%esp

    task_set_ready(task);
   10489:	83 ec 0c             	sub    $0xc,%esp
   1048c:	ff 75 08             	pushl  0x8(%ebp)
   1048f:	e8 97 00 00 00       	call   1052b <task_set_ready>
   10494:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   10497:	8b 45 08             	mov    0x8(%ebp),%eax
   1049a:	83 c0 2c             	add    $0x2c,%eax
   1049d:	83 ec 08             	sub    $0x8,%esp
   104a0:	50                   	push   %eax
   104a1:	68 d0 1c 01 00       	push   $0x11cd0
   104a6:	e8 dc 11 00 00       	call   11687 <list_insert_last>
   104ab:	83 c4 10             	add    $0x10,%esp
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     task->stack = pesp;
    // }
    // return 0;
}
   104ae:	90                   	nop
   104af:	c9                   	leave  
   104b0:	c3                   	ret    

000104b1 <task_first_init>:

void task_first_init (void) {
   104b1:	55                   	push   %ebp
   104b2:	89 e5                	mov    %esp,%ebp
   104b4:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   104b7:	6a 00                	push   $0x0
   104b9:	6a 00                	push   $0x0
   104bb:	68 a5 19 01 00       	push   $0x119a5
   104c0:	68 dc 1c 01 00       	push   $0x11cdc
   104c5:	e8 42 ff ff ff       	call   1040c <task_init>
   104ca:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   104cd:	a1 78 1d 01 00       	mov    0x11d78,%eax
   104d2:	0f b7 c0             	movzwl %ax,%eax
   104d5:	83 ec 0c             	sub    $0xc,%esp
   104d8:	50                   	push   %eax
   104d9:	e8 e2 fd ff ff       	call   102c0 <write_tr>
   104de:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   104e1:	c7 05 c0 1c 01 00 dc 	movl   $0x11cdc,0x11cc0
   104e8:	1c 01 00 
}
   104eb:	90                   	nop
   104ec:	c9                   	leave  
   104ed:	c3                   	ret    

000104ee <task_first_task>:

task_t * task_first_task (void) {
   104ee:	55                   	push   %ebp
   104ef:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   104f1:	b8 dc 1c 01 00       	mov    $0x11cdc,%eax
}
   104f6:	5d                   	pop    %ebp
   104f7:	c3                   	ret    

000104f8 <task_manager_init>:

void task_manager_init (void) {
   104f8:	55                   	push   %ebp
   104f9:	89 e5                	mov    %esp,%ebp
   104fb:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   104fe:	83 ec 0c             	sub    $0xc,%esp
   10501:	68 c4 1c 01 00       	push   $0x11cc4
   10506:	e8 f7 10 00 00       	call   11602 <list_init>
   1050b:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1050e:	83 ec 0c             	sub    $0xc,%esp
   10511:	68 d0 1c 01 00       	push   $0x11cd0
   10516:	e8 e7 10 00 00       	call   11602 <list_init>
   1051b:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   1051e:	c7 05 c0 1c 01 00 00 	movl   $0x0,0x11cc0
   10525:	00 00 00 
}
   10528:	90                   	nop
   10529:	c9                   	leave  
   1052a:	c3                   	ret    

0001052b <task_set_ready>:

void task_set_ready(task_t * task) {
   1052b:	55                   	push   %ebp
   1052c:	89 e5                	mov    %esp,%ebp
   1052e:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list,&task->run_node);
   10531:	8b 45 08             	mov    0x8(%ebp),%eax
   10534:	83 c0 24             	add    $0x24,%eax
   10537:	83 ec 08             	sub    $0x8,%esp
   1053a:	50                   	push   %eax
   1053b:	68 c4 1c 01 00       	push   $0x11cc4
   10540:	e8 42 11 00 00       	call   11687 <list_insert_last>
   10545:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10548:	8b 45 08             	mov    0x8(%ebp),%eax
   1054b:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10551:	90                   	nop
   10552:	c9                   	leave  
   10553:	c3                   	ret    

00010554 <task_set_block>:

void task_set_block(task_t * task) {
   10554:	55                   	push   %ebp
   10555:	89 e5                	mov    %esp,%ebp
   10557:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list,&task->run_node);
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	83 c0 24             	add    $0x24,%eax
   10560:	83 ec 08             	sub    $0x8,%esp
   10563:	50                   	push   %eax
   10564:	68 c4 1c 01 00       	push   $0x11cc4
   10569:	e8 f6 11 00 00       	call   11764 <list_remove>
   1056e:	83 c4 10             	add    $0x10,%esp

}
   10571:	90                   	nop
   10572:	c9                   	leave  
   10573:	c3                   	ret    

00010574 <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   10574:	55                   	push   %ebp
   10575:	89 e5                	mov    %esp,%ebp
   10577:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   1057a:	8b 45 08             	mov    0x8(%ebp),%eax
   1057d:	c1 e8 10             	shr    $0x10,%eax
   10580:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   10584:	8b 45 08             	mov    0x8(%ebp),%eax
   10587:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   1058b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1058e:	83 e8 01             	sub    $0x1,%eax
   10591:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10595:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10599:	90                   	nop
   1059a:	c9                   	leave  
   1059b:	c3                   	ret    

0001059c <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   1059c:	55                   	push   %ebp
   1059d:	89 e5                	mov    %esp,%ebp
   1059f:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   105a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   105a5:	89 45 f8             	mov    %eax,-0x8(%ebp)
   105a8:	8b 45 08             	mov    0x8(%ebp),%eax
   105ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   105ae:	8d 45 f8             	lea    -0x8(%ebp),%eax
   105b1:	ff 28                	ljmp   *(%eax)
}
   105b3:	90                   	nop
   105b4:	c9                   	leave  
   105b5:	c3                   	ret    

000105b6 <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   105b6:	55                   	push   %ebp
   105b7:	89 e5                	mov    %esp,%ebp
   105b9:	83 ec 14             	sub    $0x14,%esp
   105bc:	8b 45 14             	mov    0x14(%ebp),%eax
   105bf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   105c3:	8b 45 08             	mov    0x8(%ebp),%eax
   105c6:	83 e0 f8             	and    $0xfffffff8,%eax
   105c9:	05 80 1d 01 00       	add    $0x11d80,%eax
   105ce:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   105d1:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   105d8:	76 0f                	jbe    105e9 <segment_desc_set+0x33>
		attr |= SEG_G;
   105da:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   105e0:	8b 45 10             	mov    0x10(%ebp),%eax
   105e3:	c1 e8 0c             	shr    $0xc,%eax
   105e6:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   105e9:	8b 45 10             	mov    0x10(%ebp),%eax
   105ec:	89 c2                	mov    %eax,%edx
   105ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105f1:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   105f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   105f7:	89 c2                	mov    %eax,%edx
   105f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105fc:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10600:	8b 45 0c             	mov    0xc(%ebp),%eax
   10603:	c1 e8 10             	shr    $0x10,%eax
   10606:	89 c2                	mov    %eax,%edx
   10608:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1060b:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1060e:	8b 45 10             	mov    0x10(%ebp),%eax
   10611:	c1 e8 10             	shr    $0x10,%eax
   10614:	c1 e0 08             	shl    $0x8,%eax
   10617:	66 25 00 0f          	and    $0xf00,%ax
   1061b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1061f:	89 c2                	mov    %eax,%edx
   10621:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10624:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10628:	8b 45 0c             	mov    0xc(%ebp),%eax
   1062b:	c1 e8 18             	shr    $0x18,%eax
   1062e:	89 c2                	mov    %eax,%edx
   10630:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10633:	88 50 07             	mov    %dl,0x7(%eax)

}
   10636:	90                   	nop
   10637:	c9                   	leave  
   10638:	c3                   	ret    

00010639 <init_gdt>:

void init_gdt(void){
   10639:	55                   	push   %ebp
   1063a:	89 e5                	mov    %esp,%ebp
   1063c:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1063f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10646:	eb 19                	jmp    10661 <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10648:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1064b:	c1 e0 03             	shl    $0x3,%eax
   1064e:	6a 00                	push   $0x0
   10650:	6a 00                	push   $0x0
   10652:	6a 00                	push   $0x0
   10654:	50                   	push   %eax
   10655:	e8 5c ff ff ff       	call   105b6 <segment_desc_set>
   1065a:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1065d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10661:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10668:	7e de                	jle    10648 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1066a:	68 9a 40 00 00       	push   $0x409a
   1066f:	6a ff                	push   $0xffffffff
   10671:	6a 00                	push   $0x0
   10673:	6a 08                	push   $0x8
   10675:	e8 3c ff ff ff       	call   105b6 <segment_desc_set>
   1067a:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1067d:	68 92 40 00 00       	push   $0x4092
   10682:	6a ff                	push   $0xffffffff
   10684:	6a 00                	push   $0x0
   10686:	6a 10                	push   $0x10
   10688:	e8 29 ff ff ff       	call   105b6 <segment_desc_set>
   1068d:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   10690:	b8 80 1d 01 00       	mov    $0x11d80,%eax
   10695:	68 00 08 00 00       	push   $0x800
   1069a:	50                   	push   %eax
   1069b:	e8 d4 fe ff ff       	call   10574 <lgdt>
   106a0:	83 c4 08             	add    $0x8,%esp
}
   106a3:	90                   	nop
   106a4:	c9                   	leave  
   106a5:	c3                   	ret    

000106a6 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   106a6:	55                   	push   %ebp
   106a7:	89 e5                	mov    %esp,%ebp
   106a9:	83 ec 08             	sub    $0x8,%esp
   106ac:	8b 55 0c             	mov    0xc(%ebp),%edx
   106af:	8b 45 14             	mov    0x14(%ebp),%eax
   106b2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   106b6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   106ba:	8b 45 10             	mov    0x10(%ebp),%eax
   106bd:	89 c2                	mov    %eax,%edx
   106bf:	8b 45 08             	mov    0x8(%ebp),%eax
   106c2:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   106c5:	8b 45 08             	mov    0x8(%ebp),%eax
   106c8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   106cc:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   106d0:	8b 45 08             	mov    0x8(%ebp),%eax
   106d3:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   106d7:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   106db:	8b 45 10             	mov    0x10(%ebp),%eax
   106de:	c1 e8 10             	shr    $0x10,%eax
   106e1:	89 c2                	mov    %eax,%edx
   106e3:	8b 45 08             	mov    0x8(%ebp),%eax
   106e6:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   106ea:	90                   	nop
   106eb:	c9                   	leave  
   106ec:	c3                   	ret    

000106ed <cpu_init>:

void cpu_init (void){
   106ed:	55                   	push   %ebp
   106ee:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   106f0:	e8 44 ff ff ff       	call   10639 <init_gdt>
}
   106f5:	90                   	nop
   106f6:	5d                   	pop    %ebp
   106f7:	c3                   	ret    

000106f8 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   106f8:	55                   	push   %ebp
   106f9:	89 e5                	mov    %esp,%ebp
   106fb:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   106fe:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10705:	eb 26                	jmp    1072d <gdt_alloc_desc+0x35>

        segment_desc_t * desc = gdt_table + i;
   10707:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1070a:	c1 e0 03             	shl    $0x3,%eax
   1070d:	05 80 1d 01 00       	add    $0x11d80,%eax
   10712:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   10715:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10718:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1071c:	66 85 c0             	test   %ax,%ax
   1071f:	75 08                	jne    10729 <gdt_alloc_desc+0x31>
            return i * sizeof(segment_desc_t);
   10721:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10724:	c1 e0 03             	shl    $0x3,%eax
   10727:	eb 12                	jmp    1073b <gdt_alloc_desc+0x43>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10729:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1072d:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10734:	7e d1                	jle    10707 <gdt_alloc_desc+0xf>
        }
    }
    return -1;
   10736:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1073b:	c9                   	leave  
   1073c:	c3                   	ret    

0001073d <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   1073d:	55                   	push   %ebp
   1073e:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   10740:	8b 45 08             	mov    0x8(%ebp),%eax
   10743:	6a 00                	push   $0x0
   10745:	50                   	push   %eax
   10746:	e8 51 fe ff ff       	call   1059c <far_jump>
   1074b:	83 c4 08             	add    $0x8,%esp
   1074e:	90                   	nop
   1074f:	c9                   	leave  
   10750:	c3                   	ret    

00010751 <inb>:
static inline uint8_t inb(uint16_t port) {
   10751:	55                   	push   %ebp
   10752:	89 e5                	mov    %esp,%ebp
   10754:	83 ec 14             	sub    $0x14,%esp
   10757:	8b 45 08             	mov    0x8(%ebp),%eax
   1075a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   1075e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10762:	89 c2                	mov    %eax,%edx
   10764:	ec                   	in     (%dx),%al
   10765:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10768:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1076c:	c9                   	leave  
   1076d:	c3                   	ret    

0001076e <outb>:
static inline void outb(uint16_t port,uint8_t data){
   1076e:	55                   	push   %ebp
   1076f:	89 e5                	mov    %esp,%ebp
   10771:	83 ec 08             	sub    $0x8,%esp
   10774:	8b 55 08             	mov    0x8(%ebp),%edx
   10777:	8b 45 0c             	mov    0xc(%ebp),%eax
   1077a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1077e:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10781:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10785:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10789:	ee                   	out    %al,(%dx)
}
   1078a:	90                   	nop
   1078b:	c9                   	leave  
   1078c:	c3                   	ret    

0001078d <cli>:
static inline void cli(void){
   1078d:	55                   	push   %ebp
   1078e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10790:	fa                   	cli    
}
   10791:	90                   	nop
   10792:	5d                   	pop    %ebp
   10793:	c3                   	ret    

00010794 <sti>:
static inline void sti(void){
   10794:	55                   	push   %ebp
   10795:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10797:	fb                   	sti    
}
   10798:	90                   	nop
   10799:	5d                   	pop    %ebp
   1079a:	c3                   	ret    

0001079b <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   1079b:	55                   	push   %ebp
   1079c:	89 e5                	mov    %esp,%ebp
   1079e:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   107a1:	8b 45 08             	mov    0x8(%ebp),%eax
   107a4:	c1 e8 10             	shr    $0x10,%eax
   107a7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   107ab:	8b 45 08             	mov    0x8(%ebp),%eax
   107ae:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   107b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   107b5:	83 e8 01             	sub    $0x1,%eax
   107b8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   107bc:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   107c0:	90                   	nop
   107c1:	c9                   	leave  
   107c2:	c3                   	ret    

000107c3 <hlt>:
static inline void hlt (void) {
   107c3:	55                   	push   %ebp
   107c4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   107c6:	f4                   	hlt    
}
   107c7:	90                   	nop
   107c8:	5d                   	pop    %ebp
   107c9:	c3                   	ret    

000107ca <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   107ca:	55                   	push   %ebp
   107cb:	89 e5                	mov    %esp,%ebp
   107cd:	57                   	push   %edi
   107ce:	56                   	push   %esi
   107cf:	53                   	push   %ebx
   107d0:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   107d3:	8b 45 08             	mov    0x8(%ebp),%eax
   107d6:	8b 50 34             	mov    0x34(%eax),%edx
   107d9:	8b 45 08             	mov    0x8(%ebp),%eax
   107dc:	8b 40 30             	mov    0x30(%eax),%eax
   107df:	83 ec 04             	sub    $0x4,%esp
   107e2:	52                   	push   %edx
   107e3:	50                   	push   %eax
   107e4:	68 bc 19 01 00       	push   $0x119bc
   107e9:	e8 ac 10 00 00       	call   1189a <log_printf>
   107ee:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   107f1:	8b 45 08             	mov    0x8(%ebp),%eax
   107f4:	8b 38                	mov    (%eax),%edi
   107f6:	8b 45 08             	mov    0x8(%ebp),%eax
   107f9:	8b 70 04             	mov    0x4(%eax),%esi
   107fc:	8b 45 08             	mov    0x8(%ebp),%eax
   107ff:	8b 58 0c             	mov    0xc(%eax),%ebx
   10802:	8b 45 08             	mov    0x8(%ebp),%eax
   10805:	8b 48 08             	mov    0x8(%eax),%ecx
   10808:	8b 45 08             	mov    0x8(%ebp),%eax
   1080b:	8b 50 0c             	mov    0xc(%eax),%edx
   1080e:	8b 45 08             	mov    0x8(%ebp),%eax
   10811:	8b 40 3c             	mov    0x3c(%eax),%eax
   10814:	83 ec 04             	sub    $0x4,%esp
   10817:	57                   	push   %edi
   10818:	56                   	push   %esi
   10819:	53                   	push   %ebx
   1081a:	51                   	push   %ecx
   1081b:	52                   	push   %edx
   1081c:	50                   	push   %eax
   1081d:	68 d4 19 01 00       	push   $0x119d4
   10822:	e8 73 10 00 00       	call   1189a <log_printf>
   10827:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   1082a:	8b 45 08             	mov    0x8(%ebp),%eax
   1082d:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10830:	8b 45 08             	mov    0x8(%ebp),%eax
   10833:	8b 40 18             	mov    0x18(%eax),%eax
   10836:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10839:	8b 45 08             	mov    0x8(%ebp),%eax
   1083c:	8b 58 14             	mov    0x14(%eax),%ebx
   1083f:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10842:	8b 45 08             	mov    0x8(%ebp),%eax
   10845:	8b 78 10             	mov    0x10(%eax),%edi
   10848:	8b 45 08             	mov    0x8(%ebp),%eax
   1084b:	8b 70 24             	mov    0x24(%eax),%esi
   1084e:	8b 45 08             	mov    0x8(%ebp),%eax
   10851:	8b 58 28             	mov    0x28(%eax),%ebx
   10854:	8b 45 08             	mov    0x8(%ebp),%eax
   10857:	8b 50 20             	mov    0x20(%eax),%edx
   1085a:	8b 45 08             	mov    0x8(%ebp),%eax
   1085d:	8b 40 2c             	mov    0x2c(%eax),%eax
   10860:	83 ec 0c             	sub    $0xc,%esp
   10863:	51                   	push   %ecx
   10864:	ff 75 e4             	pushl  -0x1c(%ebp)
   10867:	ff 75 e0             	pushl  -0x20(%ebp)
   1086a:	57                   	push   %edi
   1086b:	56                   	push   %esi
   1086c:	53                   	push   %ebx
   1086d:	52                   	push   %edx
   1086e:	50                   	push   %eax
   1086f:	68 00 1a 01 00       	push   $0x11a00
   10874:	e8 21 10 00 00       	call   1189a <log_printf>
   10879:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   1087c:	8b 45 08             	mov    0x8(%ebp),%eax
   1087f:	8b 50 40             	mov    0x40(%eax),%edx
   10882:	8b 45 08             	mov    0x8(%ebp),%eax
   10885:	8b 40 38             	mov    0x38(%eax),%eax
   10888:	83 ec 04             	sub    $0x4,%esp
   1088b:	52                   	push   %edx
   1088c:	50                   	push   %eax
   1088d:	68 49 1a 01 00       	push   $0x11a49
   10892:	e8 03 10 00 00       	call   1189a <log_printf>
   10897:	83 c4 10             	add    $0x10,%esp
}
   1089a:	90                   	nop
   1089b:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1089e:	5b                   	pop    %ebx
   1089f:	5e                   	pop    %esi
   108a0:	5f                   	pop    %edi
   108a1:	5d                   	pop    %ebp
   108a2:	c3                   	ret    

000108a3 <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   108a3:	55                   	push   %ebp
   108a4:	89 e5                	mov    %esp,%ebp
   108a6:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   108a9:	83 ec 0c             	sub    $0xc,%esp
   108ac:	68 5f 1a 01 00       	push   $0x11a5f
   108b1:	e8 e4 0f 00 00       	call   1189a <log_printf>
   108b6:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   108b9:	83 ec 08             	sub    $0x8,%esp
   108bc:	ff 75 0c             	pushl  0xc(%ebp)
   108bf:	68 7c 1a 01 00       	push   $0x11a7c
   108c4:	e8 d1 0f 00 00       	call   1189a <log_printf>
   108c9:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   108cc:	83 ec 0c             	sub    $0xc,%esp
   108cf:	ff 75 08             	pushl  0x8(%ebp)
   108d2:	e8 f3 fe ff ff       	call   107ca <dump_core_regs>
   108d7:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   108da:	e8 e4 fe ff ff       	call   107c3 <hlt>
   108df:	eb f9                	jmp    108da <do_default_handler+0x37>

000108e1 <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   108e1:	55                   	push   %ebp
   108e2:	89 e5                	mov    %esp,%ebp
   108e4:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   108e7:	83 ec 08             	sub    $0x8,%esp
   108ea:	68 96 1a 01 00       	push   $0x11a96
   108ef:	ff 75 08             	pushl  0x8(%ebp)
   108f2:	e8 ac ff ff ff       	call   108a3 <do_default_handler>
   108f7:	83 c4 10             	add    $0x10,%esp

}
   108fa:	90                   	nop
   108fb:	c9                   	leave  
   108fc:	c3                   	ret    

000108fd <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   108fd:	55                   	push   %ebp
   108fe:	89 e5                	mov    %esp,%ebp
   10900:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   10903:	83 ec 08             	sub    $0x8,%esp
   10906:	68 a8 1a 01 00       	push   $0x11aa8
   1090b:	ff 75 08             	pushl  0x8(%ebp)
   1090e:	e8 90 ff ff ff       	call   108a3 <do_default_handler>
   10913:	83 c4 10             	add    $0x10,%esp
}
   10916:	90                   	nop
   10917:	c9                   	leave  
   10918:	c3                   	ret    

00010919 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   10919:	55                   	push   %ebp
   1091a:	89 e5                	mov    %esp,%ebp
   1091c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   1091f:	83 ec 08             	sub    $0x8,%esp
   10922:	68 b9 1a 01 00       	push   $0x11ab9
   10927:	ff 75 08             	pushl  0x8(%ebp)
   1092a:	e8 74 ff ff ff       	call   108a3 <do_default_handler>
   1092f:	83 c4 10             	add    $0x10,%esp
}
   10932:	90                   	nop
   10933:	c9                   	leave  
   10934:	c3                   	ret    

00010935 <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   10935:	55                   	push   %ebp
   10936:	89 e5                	mov    %esp,%ebp
   10938:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   1093b:	83 ec 08             	sub    $0x8,%esp
   1093e:	68 c9 1a 01 00       	push   $0x11ac9
   10943:	ff 75 08             	pushl  0x8(%ebp)
   10946:	e8 58 ff ff ff       	call   108a3 <do_default_handler>
   1094b:	83 c4 10             	add    $0x10,%esp
}
   1094e:	90                   	nop
   1094f:	c9                   	leave  
   10950:	c3                   	ret    

00010951 <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   10951:	55                   	push   %ebp
   10952:	89 e5                	mov    %esp,%ebp
   10954:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10957:	83 ec 08             	sub    $0x8,%esp
   1095a:	68 d8 1a 01 00       	push   $0x11ad8
   1095f:	ff 75 08             	pushl  0x8(%ebp)
   10962:	e8 3c ff ff ff       	call   108a3 <do_default_handler>
   10967:	83 c4 10             	add    $0x10,%esp
}
   1096a:	90                   	nop
   1096b:	c9                   	leave  
   1096c:	c3                   	ret    

0001096d <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   1096d:	55                   	push   %ebp
   1096e:	89 e5                	mov    %esp,%ebp
   10970:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   10973:	83 ec 08             	sub    $0x8,%esp
   10976:	68 e4 1a 01 00       	push   $0x11ae4
   1097b:	ff 75 08             	pushl  0x8(%ebp)
   1097e:	e8 20 ff ff ff       	call   108a3 <do_default_handler>
   10983:	83 c4 10             	add    $0x10,%esp
}
   10986:	90                   	nop
   10987:	c9                   	leave  
   10988:	c3                   	ret    

00010989 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10989:	55                   	push   %ebp
   1098a:	89 e5                	mov    %esp,%ebp
   1098c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   1098f:	83 ec 08             	sub    $0x8,%esp
   10992:	68 ee 1a 01 00       	push   $0x11aee
   10997:	ff 75 08             	pushl  0x8(%ebp)
   1099a:	e8 04 ff ff ff       	call   108a3 <do_default_handler>
   1099f:	83 c4 10             	add    $0x10,%esp
}
   109a2:	90                   	nop
   109a3:	c9                   	leave  
   109a4:	c3                   	ret    

000109a5 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   109a5:	55                   	push   %ebp
   109a6:	89 e5                	mov    %esp,%ebp
   109a8:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   109ab:	83 ec 08             	sub    $0x8,%esp
   109ae:	68 04 1b 01 00       	push   $0x11b04
   109b3:	ff 75 08             	pushl  0x8(%ebp)
   109b6:	e8 e8 fe ff ff       	call   108a3 <do_default_handler>
   109bb:	83 c4 10             	add    $0x10,%esp
}
   109be:	90                   	nop
   109bf:	c9                   	leave  
   109c0:	c3                   	ret    

000109c1 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   109c1:	55                   	push   %ebp
   109c2:	89 e5                	mov    %esp,%ebp
   109c4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   109c7:	83 ec 08             	sub    $0x8,%esp
   109ca:	68 14 1b 01 00       	push   $0x11b14
   109cf:	ff 75 08             	pushl  0x8(%ebp)
   109d2:	e8 cc fe ff ff       	call   108a3 <do_default_handler>
   109d7:	83 c4 10             	add    $0x10,%esp
}
   109da:	90                   	nop
   109db:	c9                   	leave  
   109dc:	c3                   	ret    

000109dd <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   109dd:	55                   	push   %ebp
   109de:	89 e5                	mov    %esp,%ebp
   109e0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   109e3:	83 ec 08             	sub    $0x8,%esp
   109e6:	68 2a 1b 01 00       	push   $0x11b2a
   109eb:	ff 75 08             	pushl  0x8(%ebp)
   109ee:	e8 b0 fe ff ff       	call   108a3 <do_default_handler>
   109f3:	83 c4 10             	add    $0x10,%esp
}
   109f6:	90                   	nop
   109f7:	c9                   	leave  
   109f8:	c3                   	ret    

000109f9 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   109f9:	55                   	push   %ebp
   109fa:	89 e5                	mov    %esp,%ebp
   109fc:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   109ff:	83 ec 08             	sub    $0x8,%esp
   10a02:	68 38 1b 01 00       	push   $0x11b38
   10a07:	ff 75 08             	pushl  0x8(%ebp)
   10a0a:	e8 94 fe ff ff       	call   108a3 <do_default_handler>
   10a0f:	83 c4 10             	add    $0x10,%esp
}
   10a12:	90                   	nop
   10a13:	c9                   	leave  
   10a14:	c3                   	ret    

00010a15 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   10a15:	55                   	push   %ebp
   10a16:	89 e5                	mov    %esp,%ebp
   10a18:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10a1b:	83 ec 08             	sub    $0x8,%esp
   10a1e:	68 44 1b 01 00       	push   $0x11b44
   10a23:	ff 75 08             	pushl  0x8(%ebp)
   10a26:	e8 78 fe ff ff       	call   108a3 <do_default_handler>
   10a2b:	83 c4 10             	add    $0x10,%esp
}
   10a2e:	90                   	nop
   10a2f:	c9                   	leave  
   10a30:	c3                   	ret    

00010a31 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   10a31:	55                   	push   %ebp
   10a32:	89 e5                	mov    %esp,%ebp
   10a34:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   10a37:	83 ec 08             	sub    $0x8,%esp
   10a3a:	68 59 1b 01 00       	push   $0x11b59
   10a3f:	ff 75 08             	pushl  0x8(%ebp)
   10a42:	e8 5c fe ff ff       	call   108a3 <do_default_handler>
   10a47:	83 c4 10             	add    $0x10,%esp
}
   10a4a:	90                   	nop
   10a4b:	c9                   	leave  
   10a4c:	c3                   	ret    

00010a4d <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   10a4d:	55                   	push   %ebp
   10a4e:	89 e5                	mov    %esp,%ebp
   10a50:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   10a53:	83 ec 08             	sub    $0x8,%esp
   10a56:	68 6e 1b 01 00       	push   $0x11b6e
   10a5b:	ff 75 08             	pushl  0x8(%ebp)
   10a5e:	e8 40 fe ff ff       	call   108a3 <do_default_handler>
   10a63:	83 c4 10             	add    $0x10,%esp
}
   10a66:	90                   	nop
   10a67:	c9                   	leave  
   10a68:	c3                   	ret    

00010a69 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10a69:	55                   	push   %ebp
   10a6a:	89 e5                	mov    %esp,%ebp
   10a6c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10a6f:	83 ec 08             	sub    $0x8,%esp
   10a72:	68 82 1b 01 00       	push   $0x11b82
   10a77:	ff 75 08             	pushl  0x8(%ebp)
   10a7a:	e8 24 fe ff ff       	call   108a3 <do_default_handler>
   10a7f:	83 c4 10             	add    $0x10,%esp
}
   10a82:	90                   	nop
   10a83:	c9                   	leave  
   10a84:	c3                   	ret    

00010a85 <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   10a85:	55                   	push   %ebp
   10a86:	89 e5                	mov    %esp,%ebp
   10a88:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10a8b:	83 ec 08             	sub    $0x8,%esp
   10a8e:	68 8e 1b 01 00       	push   $0x11b8e
   10a93:	ff 75 08             	pushl  0x8(%ebp)
   10a96:	e8 08 fe ff ff       	call   108a3 <do_default_handler>
   10a9b:	83 c4 10             	add    $0x10,%esp
}
   10a9e:	90                   	nop
   10a9f:	c9                   	leave  
   10aa0:	c3                   	ret    

00010aa1 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   10aa1:	55                   	push   %ebp
   10aa2:	89 e5                	mov    %esp,%ebp
   10aa4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10aa7:	83 ec 08             	sub    $0x8,%esp
   10aaa:	68 ac 1b 01 00       	push   $0x11bac
   10aaf:	ff 75 08             	pushl  0x8(%ebp)
   10ab2:	e8 ec fd ff ff       	call   108a3 <do_default_handler>
   10ab7:	83 c4 10             	add    $0x10,%esp
}
   10aba:	90                   	nop
   10abb:	c9                   	leave  
   10abc:	c3                   	ret    

00010abd <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10abd:	55                   	push   %ebp
   10abe:	89 e5                	mov    %esp,%ebp
   10ac0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   10ac3:	83 ec 08             	sub    $0x8,%esp
   10ac6:	68 bd 1b 01 00       	push   $0x11bbd
   10acb:	ff 75 08             	pushl  0x8(%ebp)
   10ace:	e8 d0 fd ff ff       	call   108a3 <do_default_handler>
   10ad3:	83 c4 10             	add    $0x10,%esp
}
   10ad6:	90                   	nop
   10ad7:	c9                   	leave  
   10ad8:	c3                   	ret    

00010ad9 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10ad9:	55                   	push   %ebp
   10ada:	89 e5                	mov    %esp,%ebp
   10adc:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10adf:	83 ec 08             	sub    $0x8,%esp
   10ae2:	68 cc 1b 01 00       	push   $0x11bcc
   10ae7:	ff 75 08             	pushl  0x8(%ebp)
   10aea:	e8 b4 fd ff ff       	call   108a3 <do_default_handler>
   10aef:	83 c4 10             	add    $0x10,%esp
}
   10af2:	90                   	nop
   10af3:	c9                   	leave  
   10af4:	c3                   	ret    

00010af5 <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   10af5:	55                   	push   %ebp
   10af6:	89 e5                	mov    %esp,%ebp
   10af8:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10afb:	83 ec 08             	sub    $0x8,%esp
   10afe:	68 eb 1b 01 00       	push   $0x11beb
   10b03:	ff 75 08             	pushl  0x8(%ebp)
   10b06:	e8 98 fd ff ff       	call   108a3 <do_default_handler>
   10b0b:	83 c4 10             	add    $0x10,%esp
}
   10b0e:	90                   	nop
   10b0f:	c9                   	leave  
   10b10:	c3                   	ret    

00010b11 <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   10b11:	55                   	push   %ebp
   10b12:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10b14:	6a 11                	push   $0x11
   10b16:	6a 20                	push   $0x20
   10b18:	e8 51 fc ff ff       	call   1076e <outb>
   10b1d:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10b20:	6a 20                	push   $0x20
   10b22:	6a 21                	push   $0x21
   10b24:	e8 45 fc ff ff       	call   1076e <outb>
   10b29:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10b2c:	6a 04                	push   $0x4
   10b2e:	6a 21                	push   $0x21
   10b30:	e8 39 fc ff ff       	call   1076e <outb>
   10b35:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10b38:	6a 01                	push   $0x1
   10b3a:	6a 21                	push   $0x21
   10b3c:	e8 2d fc ff ff       	call   1076e <outb>
   10b41:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10b44:	6a 11                	push   $0x11
   10b46:	68 a0 00 00 00       	push   $0xa0
   10b4b:	e8 1e fc ff ff       	call   1076e <outb>
   10b50:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10b53:	6a 28                	push   $0x28
   10b55:	68 a1 00 00 00       	push   $0xa1
   10b5a:	e8 0f fc ff ff       	call   1076e <outb>
   10b5f:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10b62:	6a 02                	push   $0x2
   10b64:	68 a1 00 00 00       	push   $0xa1
   10b69:	e8 00 fc ff ff       	call   1076e <outb>
   10b6e:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10b71:	6a 01                	push   $0x1
   10b73:	68 a1 00 00 00       	push   $0xa1
   10b78:	e8 f1 fb ff ff       	call   1076e <outb>
   10b7d:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10b80:	68 fb 00 00 00       	push   $0xfb
   10b85:	6a 21                	push   $0x21
   10b87:	e8 e2 fb ff ff       	call   1076e <outb>
   10b8c:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10b8f:	68 ff 00 00 00       	push   $0xff
   10b94:	68 a1 00 00 00       	push   $0xa1
   10b99:	e8 d0 fb ff ff       	call   1076e <outb>
   10b9e:	83 c4 08             	add    $0x8,%esp
}
   10ba1:	90                   	nop
   10ba2:	c9                   	leave  
   10ba3:	c3                   	ret    

00010ba4 <irq_init>:


void irq_init(void){ 
   10ba4:	55                   	push   %ebp
   10ba5:	89 e5                	mov    %esp,%ebp
   10ba7:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10baa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10bb1:	eb 25                	jmp    10bd8 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10bb3:	ba 28 00 01 00       	mov    $0x10028,%edx
   10bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bbb:	c1 e0 03             	shl    $0x3,%eax
   10bbe:	05 80 25 01 00       	add    $0x12580,%eax
   10bc3:	68 00 8e 00 00       	push   $0x8e00
   10bc8:	52                   	push   %edx
   10bc9:	6a 08                	push   $0x8
   10bcb:	50                   	push   %eax
   10bcc:	e8 d5 fa ff ff       	call   106a6 <gate_desc_set>
   10bd1:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10bd4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10bd8:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10bdc:	7e d5                	jle    10bb3 <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10bde:	83 ec 08             	sub    $0x8,%esp
   10be1:	68 47 00 01 00       	push   $0x10047
   10be6:	6a 00                	push   $0x0
   10be8:	e8 65 01 00 00       	call   10d52 <irq_install>
   10bed:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10bf0:	83 ec 08             	sub    $0x8,%esp
   10bf3:	68 66 00 01 00       	push   $0x10066
   10bf8:	6a 01                	push   $0x1
   10bfa:	e8 53 01 00 00       	call   10d52 <irq_install>
   10bff:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10c02:	83 ec 08             	sub    $0x8,%esp
   10c05:	68 85 00 01 00       	push   $0x10085
   10c0a:	6a 02                	push   $0x2
   10c0c:	e8 41 01 00 00       	call   10d52 <irq_install>
   10c11:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10c14:	83 ec 08             	sub    $0x8,%esp
   10c17:	68 a4 00 01 00       	push   $0x100a4
   10c1c:	6a 03                	push   $0x3
   10c1e:	e8 2f 01 00 00       	call   10d52 <irq_install>
   10c23:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10c26:	83 ec 08             	sub    $0x8,%esp
   10c29:	68 c3 00 01 00       	push   $0x100c3
   10c2e:	6a 04                	push   $0x4
   10c30:	e8 1d 01 00 00       	call   10d52 <irq_install>
   10c35:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10c38:	83 ec 08             	sub    $0x8,%esp
   10c3b:	68 e2 00 01 00       	push   $0x100e2
   10c40:	6a 05                	push   $0x5
   10c42:	e8 0b 01 00 00       	call   10d52 <irq_install>
   10c47:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10c4a:	83 ec 08             	sub    $0x8,%esp
   10c4d:	68 01 01 01 00       	push   $0x10101
   10c52:	6a 06                	push   $0x6
   10c54:	e8 f9 00 00 00       	call   10d52 <irq_install>
   10c59:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10c5c:	83 ec 08             	sub    $0x8,%esp
   10c5f:	68 20 01 01 00       	push   $0x10120
   10c64:	6a 07                	push   $0x7
   10c66:	e8 e7 00 00 00       	call   10d52 <irq_install>
   10c6b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10c6e:	83 ec 08             	sub    $0x8,%esp
   10c71:	68 3f 01 01 00       	push   $0x1013f
   10c76:	6a 08                	push   $0x8
   10c78:	e8 d5 00 00 00       	call   10d52 <irq_install>
   10c7d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10c80:	83 ec 08             	sub    $0x8,%esp
   10c83:	68 5c 01 01 00       	push   $0x1015c
   10c88:	6a 0a                	push   $0xa
   10c8a:	e8 c3 00 00 00       	call   10d52 <irq_install>
   10c8f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10c92:	83 ec 08             	sub    $0x8,%esp
   10c95:	68 79 01 01 00       	push   $0x10179
   10c9a:	6a 0b                	push   $0xb
   10c9c:	e8 b1 00 00 00       	call   10d52 <irq_install>
   10ca1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10ca4:	83 ec 08             	sub    $0x8,%esp
   10ca7:	68 96 01 01 00       	push   $0x10196
   10cac:	6a 0c                	push   $0xc
   10cae:	e8 9f 00 00 00       	call   10d52 <irq_install>
   10cb3:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10cb6:	83 ec 08             	sub    $0x8,%esp
   10cb9:	68 b3 01 01 00       	push   $0x101b3
   10cbe:	6a 0d                	push   $0xd
   10cc0:	e8 8d 00 00 00       	call   10d52 <irq_install>
   10cc5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10cc8:	83 ec 08             	sub    $0x8,%esp
   10ccb:	68 d0 01 01 00       	push   $0x101d0
   10cd0:	6a 0e                	push   $0xe
   10cd2:	e8 7b 00 00 00       	call   10d52 <irq_install>
   10cd7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10cda:	83 ec 08             	sub    $0x8,%esp
   10cdd:	68 ed 01 01 00       	push   $0x101ed
   10ce2:	6a 10                	push   $0x10
   10ce4:	e8 69 00 00 00       	call   10d52 <irq_install>
   10ce9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10cec:	83 ec 08             	sub    $0x8,%esp
   10cef:	68 0c 02 01 00       	push   $0x1020c
   10cf4:	6a 11                	push   $0x11
   10cf6:	e8 57 00 00 00       	call   10d52 <irq_install>
   10cfb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10cfe:	83 ec 08             	sub    $0x8,%esp
   10d01:	68 29 02 01 00       	push   $0x10229
   10d06:	6a 12                	push   $0x12
   10d08:	e8 45 00 00 00       	call   10d52 <irq_install>
   10d0d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10d10:	83 ec 08             	sub    $0x8,%esp
   10d13:	68 48 02 01 00       	push   $0x10248
   10d18:	6a 13                	push   $0x13
   10d1a:	e8 33 00 00 00       	call   10d52 <irq_install>
   10d1f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10d22:	83 ec 08             	sub    $0x8,%esp
   10d25:	68 67 02 01 00       	push   $0x10267
   10d2a:	6a 14                	push   $0x14
   10d2c:	e8 21 00 00 00       	call   10d52 <irq_install>
   10d31:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10d34:	b8 80 25 01 00       	mov    $0x12580,%eax
   10d39:	83 ec 08             	sub    $0x8,%esp
   10d3c:	68 00 04 00 00       	push   $0x400
   10d41:	50                   	push   %eax
   10d42:	e8 54 fa ff ff       	call   1079b <lidt>
   10d47:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10d4a:	e8 c2 fd ff ff       	call   10b11 <init_pic>
}
   10d4f:	90                   	nop
   10d50:	c9                   	leave  
   10d51:	c3                   	ret    

00010d52 <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
   10d55:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10d58:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10d5c:	7e 07                	jle    10d65 <irq_install+0x13>
        return -1;
   10d5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10d63:	eb 25                	jmp    10d8a <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   10d65:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d68:	8b 55 08             	mov    0x8(%ebp),%edx
   10d6b:	c1 e2 03             	shl    $0x3,%edx
   10d6e:	81 c2 80 25 01 00    	add    $0x12580,%edx
   10d74:	68 00 8e 00 00       	push   $0x8e00
   10d79:	50                   	push   %eax
   10d7a:	6a 08                	push   $0x8
   10d7c:	52                   	push   %edx
   10d7d:	e8 24 f9 ff ff       	call   106a6 <gate_desc_set>
   10d82:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   10d85:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d8a:	c9                   	leave  
   10d8b:	c3                   	ret    

00010d8c <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   10d8c:	55                   	push   %ebp
   10d8d:	89 e5                	mov    %esp,%ebp
   10d8f:	53                   	push   %ebx
   10d90:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10d93:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d97:	7e 78                	jle    10e11 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10d99:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d9d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10da1:	7f 32                	jg     10dd5 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10da3:	6a 21                	push   $0x21
   10da5:	e8 a7 f9 ff ff       	call   10751 <inb>
   10daa:	83 c4 04             	add    $0x4,%esp
   10dad:	89 c2                	mov    %eax,%edx
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	bb 01 00 00 00       	mov    $0x1,%ebx
   10db7:	89 c1                	mov    %eax,%ecx
   10db9:	d3 e3                	shl    %cl,%ebx
   10dbb:	89 d8                	mov    %ebx,%eax
   10dbd:	f7 d0                	not    %eax
   10dbf:	21 d0                	and    %edx,%eax
   10dc1:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10dc4:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10dc8:	50                   	push   %eax
   10dc9:	6a 21                	push   $0x21
   10dcb:	e8 9e f9 ff ff       	call   1076e <outb>
   10dd0:	83 c4 08             	add    $0x8,%esp
   10dd3:	eb 3d                	jmp    10e12 <irq_enable+0x86>
    }else{
        irq_num -= 8;
   10dd5:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10dd9:	68 a1 00 00 00       	push   $0xa1
   10dde:	e8 6e f9 ff ff       	call   10751 <inb>
   10de3:	83 c4 04             	add    $0x4,%esp
   10de6:	89 c2                	mov    %eax,%edx
   10de8:	8b 45 08             	mov    0x8(%ebp),%eax
   10deb:	bb 01 00 00 00       	mov    $0x1,%ebx
   10df0:	89 c1                	mov    %eax,%ecx
   10df2:	d3 e3                	shl    %cl,%ebx
   10df4:	89 d8                	mov    %ebx,%eax
   10df6:	f7 d0                	not    %eax
   10df8:	21 d0                	and    %edx,%eax
   10dfa:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10dfd:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10e01:	50                   	push   %eax
   10e02:	68 a1 00 00 00       	push   $0xa1
   10e07:	e8 62 f9 ff ff       	call   1076e <outb>
   10e0c:	83 c4 08             	add    $0x8,%esp
   10e0f:	eb 01                	jmp    10e12 <irq_enable+0x86>
        return;
   10e11:	90                   	nop
    }
}
   10e12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e15:	c9                   	leave  
   10e16:	c3                   	ret    

00010e17 <irq_disable>:
void irq_disable (int irq_num) {
   10e17:	55                   	push   %ebp
   10e18:	89 e5                	mov    %esp,%ebp
   10e1a:	53                   	push   %ebx
   10e1b:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10e1e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e22:	7e 74                	jle    10e98 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10e24:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10e28:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e2c:	7f 30                	jg     10e5e <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10e2e:	6a 21                	push   $0x21
   10e30:	e8 1c f9 ff ff       	call   10751 <inb>
   10e35:	83 c4 04             	add    $0x4,%esp
   10e38:	89 c3                	mov    %eax,%ebx
   10e3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3d:	ba 01 00 00 00       	mov    $0x1,%edx
   10e42:	89 c1                	mov    %eax,%ecx
   10e44:	d3 e2                	shl    %cl,%edx
   10e46:	89 d0                	mov    %edx,%eax
   10e48:	09 d8                	or     %ebx,%eax
   10e4a:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10e4d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e51:	50                   	push   %eax
   10e52:	6a 21                	push   $0x21
   10e54:	e8 15 f9 ff ff       	call   1076e <outb>
   10e59:	83 c4 08             	add    $0x8,%esp
   10e5c:	eb 3b                	jmp    10e99 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10e5e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10e62:	68 a1 00 00 00       	push   $0xa1
   10e67:	e8 e5 f8 ff ff       	call   10751 <inb>
   10e6c:	83 c4 04             	add    $0x4,%esp
   10e6f:	89 c3                	mov    %eax,%ebx
   10e71:	8b 45 08             	mov    0x8(%ebp),%eax
   10e74:	ba 01 00 00 00       	mov    $0x1,%edx
   10e79:	89 c1                	mov    %eax,%ecx
   10e7b:	d3 e2                	shl    %cl,%edx
   10e7d:	89 d0                	mov    %edx,%eax
   10e7f:	09 d8                	or     %ebx,%eax
   10e81:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10e84:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10e88:	50                   	push   %eax
   10e89:	68 a1 00 00 00       	push   $0xa1
   10e8e:	e8 db f8 ff ff       	call   1076e <outb>
   10e93:	83 c4 08             	add    $0x8,%esp
   10e96:	eb 01                	jmp    10e99 <irq_disable+0x82>
        return;
   10e98:	90                   	nop
    }
}
   10e99:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e9c:	c9                   	leave  
   10e9d:	c3                   	ret    

00010e9e <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   10e9e:	55                   	push   %ebp
   10e9f:	89 e5                	mov    %esp,%ebp
    cli();
   10ea1:	e8 e7 f8 ff ff       	call   1078d <cli>
}
   10ea6:	90                   	nop
   10ea7:	5d                   	pop    %ebp
   10ea8:	c3                   	ret    

00010ea9 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   10ea9:	55                   	push   %ebp
   10eaa:	89 e5                	mov    %esp,%ebp
    sti();
   10eac:	e8 e3 f8 ff ff       	call   10794 <sti>
}
   10eb1:	90                   	nop
   10eb2:	5d                   	pop    %ebp
   10eb3:	c3                   	ret    

00010eb4 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10eb4:	55                   	push   %ebp
   10eb5:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   10eb7:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   10ebb:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ebf:	7e 0f                	jle    10ed0 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   10ec1:	6a 20                	push   $0x20
   10ec3:	68 a0 00 00 00       	push   $0xa0
   10ec8:	e8 a1 f8 ff ff       	call   1076e <outb>
   10ecd:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10ed0:	6a 20                	push   $0x20
   10ed2:	6a 20                	push   $0x20
   10ed4:	e8 95 f8 ff ff       	call   1076e <outb>
   10ed9:	83 c4 08             	add    $0x8,%esp

}
   10edc:	90                   	nop
   10edd:	c9                   	leave  
   10ede:	c3                   	ret    

00010edf <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10edf:	55                   	push   %ebp
   10ee0:	89 e5                	mov    %esp,%ebp
   10ee2:	83 ec 08             	sub    $0x8,%esp
   10ee5:	8b 55 08             	mov    0x8(%ebp),%edx
   10ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10eeb:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10eef:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10ef2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10ef6:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10efa:	ee                   	out    %al,(%dx)
}
   10efb:	90                   	nop
   10efc:	c9                   	leave  
   10efd:	c3                   	ret    

00010efe <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   10efe:	55                   	push   %ebp
   10eff:	89 e5                	mov    %esp,%ebp
   10f01:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10f04:	a1 80 29 01 00       	mov    0x12980,%eax
   10f09:	83 c0 01             	add    $0x1,%eax
   10f0c:	a3 80 29 01 00       	mov    %eax,0x12980
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   10f11:	83 ec 0c             	sub    $0xc,%esp
   10f14:	6a 20                	push   $0x20
   10f16:	e8 99 ff ff ff       	call   10eb4 <pic_send_eoi>
   10f1b:	83 c4 10             	add    $0x10,%esp
}
   10f1e:	90                   	nop
   10f1f:	c9                   	leave  
   10f20:	c3                   	ret    

00010f21 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10f21:	55                   	push   %ebp
   10f22:	89 e5                	mov    %esp,%ebp
   10f24:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10f27:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   10f2e:	6a 36                	push   $0x36
   10f30:	6a 43                	push   $0x43
   10f32:	e8 a8 ff ff ff       	call   10edf <outb>
   10f37:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   10f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f3d:	0f b6 c0             	movzbl %al,%eax
   10f40:	50                   	push   %eax
   10f41:	6a 40                	push   $0x40
   10f43:	e8 97 ff ff ff       	call   10edf <outb>
   10f48:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   10f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f4e:	c1 e8 08             	shr    $0x8,%eax
   10f51:	0f b6 c0             	movzbl %al,%eax
   10f54:	50                   	push   %eax
   10f55:	6a 40                	push   $0x40
   10f57:	e8 83 ff ff ff       	call   10edf <outb>
   10f5c:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10f5f:	83 ec 08             	sub    $0x8,%esp
   10f62:	68 86 02 01 00       	push   $0x10286
   10f67:	6a 20                	push   $0x20
   10f69:	e8 e4 fd ff ff       	call   10d52 <irq_install>
   10f6e:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10f71:	83 ec 0c             	sub    $0xc,%esp
   10f74:	6a 20                	push   $0x20
   10f76:	e8 11 fe ff ff       	call   10d8c <irq_enable>
   10f7b:	83 c4 10             	add    $0x10,%esp
}
   10f7e:	90                   	nop
   10f7f:	c9                   	leave  
   10f80:	c3                   	ret    

00010f81 <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   10f81:	55                   	push   %ebp
   10f82:	89 e5                	mov    %esp,%ebp
   10f84:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10f87:	c7 05 80 29 01 00 00 	movl   $0x0,0x12980
   10f8e:	00 00 00 

    init_pit();
   10f91:	e8 8b ff ff ff       	call   10f21 <init_pit>
   10f96:	90                   	nop
   10f97:	c9                   	leave  
   10f98:	c3                   	ret    

00010f99 <kernel_init>:
#include "tools/list.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   10f99:	55                   	push   %ebp
   10f9a:	89 e5                	mov    %esp,%ebp
   10f9c:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10f9f:	e8 49 f7 ff ff       	call   106ed <cpu_init>
    log_init();
   10fa4:	e8 7c 08 00 00       	call   11825 <log_init>
    irq_init();
   10fa9:	e8 f6 fb ff ff       	call   10ba4 <irq_init>
    time_init();
   10fae:	e8 ce ff ff ff       	call   10f81 <time_init>

    task_manager_init();
   10fb3:	e8 40 f5 ff ff       	call   104f8 <task_manager_init>

}
   10fb8:	90                   	nop
   10fb9:	c9                   	leave  
   10fba:	c3                   	ret    

00010fbb <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   10fbb:	55                   	push   %ebp
   10fbc:	89 e5                	mov    %esp,%ebp
   10fbe:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   10fc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int task: %d",count++);
   10fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fcb:	8d 50 01             	lea    0x1(%eax),%edx
   10fce:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10fd1:	83 ec 08             	sub    $0x8,%esp
   10fd4:	50                   	push   %eax
   10fd5:	68 05 1c 01 00       	push   $0x11c05
   10fda:	e8 bb 08 00 00       	call   1189a <log_printf>
   10fdf:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task,task_first_task());
   10fe2:	e8 07 f5 ff ff       	call   104ee <task_first_task>
   10fe7:	83 ec 08             	sub    $0x8,%esp
   10fea:	50                   	push   %eax
   10feb:	68 a0 39 01 00       	push   $0x139a0
   10ff0:	e8 f9 f3 ff ff       	call   103ee <task_switch_from_to>
   10ff5:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d",count++);
   10ff8:	eb ce                	jmp    10fc8 <init_task_entry+0xd>

00010ffa <init_main>:
    }    

}

void init_main(void) {
   10ffa:	55                   	push   %ebp
   10ffb:	89 e5                	mov    %esp,%ebp
   10ffd:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   11000:	83 ec 0c             	sub    $0xc,%esp
   11003:	68 12 1c 01 00       	push   $0x11c12
   11008:	e8 8d 08 00 00       	call   1189a <log_printf>
   1100d:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   11010:	83 ec 04             	sub    $0x4,%esp
   11013:	68 28 1c 01 00       	push   $0x11c28
   11018:	68 31 1c 01 00       	push   $0x11c31
   1101d:	68 37 1c 01 00       	push   $0x11c37
   11022:	e8 73 08 00 00       	call   1189a <log_printf>
   11027:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   1102a:	83 ec 0c             	sub    $0xc,%esp
   1102d:	6a 61                	push   $0x61
   1102f:	68 45 23 01 00       	push   $0x12345
   11034:	6a 85                	push   $0xffffff85
   11036:	68 40 e2 01 00       	push   $0x1e240
   1103b:	68 46 1c 01 00       	push   $0x11c46
   11040:	e8 55 08 00 00       	call   1189a <log_printf>
   11045:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task,"init task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   11048:	ba a0 39 01 00       	mov    $0x139a0,%edx
   1104d:	b8 bb 0f 01 00       	mov    $0x10fbb,%eax
   11052:	52                   	push   %edx
   11053:	50                   	push   %eax
   11054:	68 52 1c 01 00       	push   $0x11c52
   11059:	68 a0 39 01 00       	push   $0x139a0
   1105e:	e8 a9 f3 ff ff       	call   1040c <task_init>
   11063:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11066:	e8 46 f4 ff ff       	call   104b1 <task_first_init>

    int count = 0;
   1106b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int main: %d",count++);
   11072:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11075:	8d 50 01             	lea    0x1(%eax),%edx
   11078:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1107b:	83 ec 08             	sub    $0x8,%esp
   1107e:	50                   	push   %eax
   1107f:	68 5c 1c 01 00       	push   $0x11c5c
   11084:	e8 11 08 00 00       	call   1189a <log_printf>
   11089:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(task_first_task(),&init_task);
   1108c:	e8 5d f4 ff ff       	call   104ee <task_first_task>
   11091:	83 ec 08             	sub    $0x8,%esp
   11094:	68 a0 39 01 00       	push   $0x139a0
   11099:	50                   	push   %eax
   1109a:	e8 4f f3 ff ff       	call   103ee <task_switch_from_to>
   1109f:	83 c4 10             	add    $0x10,%esp
        log_printf("int main: %d",count++);
   110a2:	eb ce                	jmp    11072 <init_main+0x78>

000110a4 <hlt>:
static inline void hlt (void) {
   110a4:	55                   	push   %ebp
   110a5:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   110a7:	f4                   	hlt    
}
   110a8:	90                   	nop
   110a9:	5d                   	pop    %ebp
   110aa:	c3                   	ret    

000110ab <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   110ab:	55                   	push   %ebp
   110ac:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   110ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110b2:	74 3b                	je     110ef <kernel_strcpy+0x44>
   110b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110b8:	74 35                	je     110ef <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   110ba:	eb 17                	jmp    110d3 <kernel_strcpy+0x28>
        *dest++ = *src++;
   110bc:	8b 55 0c             	mov    0xc(%ebp),%edx
   110bf:	8d 42 01             	lea    0x1(%edx),%eax
   110c2:	89 45 0c             	mov    %eax,0xc(%ebp)
   110c5:	8b 45 08             	mov    0x8(%ebp),%eax
   110c8:	8d 48 01             	lea    0x1(%eax),%ecx
   110cb:	89 4d 08             	mov    %ecx,0x8(%ebp)
   110ce:	0f b6 12             	movzbl (%edx),%edx
   110d1:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   110d3:	8b 45 08             	mov    0x8(%ebp),%eax
   110d6:	0f b6 00             	movzbl (%eax),%eax
   110d9:	84 c0                	test   %al,%al
   110db:	74 0a                	je     110e7 <kernel_strcpy+0x3c>
   110dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   110e0:	0f b6 00             	movzbl (%eax),%eax
   110e3:	84 c0                	test   %al,%al
   110e5:	75 d5                	jne    110bc <kernel_strcpy+0x11>
    }

    *dest = '\0';
   110e7:	8b 45 08             	mov    0x8(%ebp),%eax
   110ea:	c6 00 00             	movb   $0x0,(%eax)
   110ed:	eb 01                	jmp    110f0 <kernel_strcpy+0x45>
        return;
   110ef:	90                   	nop
}
   110f0:	5d                   	pop    %ebp
   110f1:	c3                   	ret    

000110f2 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   110f2:	55                   	push   %ebp
   110f3:	89 e5                	mov    %esp,%ebp
   110f5:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   110f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110fc:	74 61                	je     1115f <kernel_strncpy+0x6d>
   110fe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11102:	74 5b                	je     1115f <kernel_strncpy+0x6d>
   11104:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11108:	74 55                	je     1115f <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   1110a:	8b 45 08             	mov    0x8(%ebp),%eax
   1110d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   11110:	8b 45 0c             	mov    0xc(%ebp),%eax
   11113:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   11116:	eb 17                	jmp    1112f <kernel_strncpy+0x3d>
        *d++ = *s++;
   11118:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1111b:	8d 42 01             	lea    0x1(%edx),%eax
   1111e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11121:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11124:	8d 48 01             	lea    0x1(%eax),%ecx
   11127:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1112a:	0f b6 12             	movzbl (%edx),%edx
   1112d:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1112f:	8b 45 10             	mov    0x10(%ebp),%eax
   11132:	8d 50 ff             	lea    -0x1(%eax),%edx
   11135:	89 55 10             	mov    %edx,0x10(%ebp)
   11138:	85 c0                	test   %eax,%eax
   1113a:	7e 0a                	jle    11146 <kernel_strncpy+0x54>
   1113c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1113f:	0f b6 00             	movzbl (%eax),%eax
   11142:	84 c0                	test   %al,%al
   11144:	75 d2                	jne    11118 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   11146:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1114a:	75 0b                	jne    11157 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   1114c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1114f:	83 e8 01             	sub    $0x1,%eax
   11152:	c6 00 00             	movb   $0x0,(%eax)
   11155:	eb 09                	jmp    11160 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   11157:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1115a:	c6 00 00             	movb   $0x0,(%eax)
   1115d:	eb 01                	jmp    11160 <kernel_strncpy+0x6e>
        return;
   1115f:	90                   	nop
    }
}
   11160:	c9                   	leave  
   11161:	c3                   	ret    

00011162 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   11162:	55                   	push   %ebp
   11163:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   11165:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11169:	74 06                	je     11171 <kernel_strncmp+0xf>
   1116b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1116f:	75 0f                	jne    11180 <kernel_strncmp+0x1e>
        return -1;
   11171:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11176:	eb 62                	jmp    111da <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   11178:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1117c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   11180:	8b 45 08             	mov    0x8(%ebp),%eax
   11183:	0f b6 00             	movzbl (%eax),%eax
   11186:	84 c0                	test   %al,%al
   11188:	74 20                	je     111aa <kernel_strncmp+0x48>
   1118a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1118d:	0f b6 00             	movzbl (%eax),%eax
   11190:	84 c0                	test   %al,%al
   11192:	74 16                	je     111aa <kernel_strncmp+0x48>
   11194:	8b 45 08             	mov    0x8(%ebp),%eax
   11197:	0f b6 10             	movzbl (%eax),%edx
   1119a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1119d:	0f b6 00             	movzbl (%eax),%eax
   111a0:	38 c2                	cmp    %al,%dl
   111a2:	75 06                	jne    111aa <kernel_strncmp+0x48>
   111a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111a8:	75 ce                	jne    11178 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   111aa:	8b 45 08             	mov    0x8(%ebp),%eax
   111ad:	0f b6 00             	movzbl (%eax),%eax
   111b0:	84 c0                	test   %al,%al
   111b2:	74 21                	je     111d5 <kernel_strncmp+0x73>
   111b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   111b7:	0f b6 00             	movzbl (%eax),%eax
   111ba:	84 c0                	test   %al,%al
   111bc:	74 17                	je     111d5 <kernel_strncmp+0x73>
   111be:	8b 45 08             	mov    0x8(%ebp),%eax
   111c1:	0f b6 10             	movzbl (%eax),%edx
   111c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   111c7:	0f b6 00             	movzbl (%eax),%eax
   111ca:	38 c2                	cmp    %al,%dl
   111cc:	74 07                	je     111d5 <kernel_strncmp+0x73>
   111ce:	b8 01 00 00 00       	mov    $0x1,%eax
   111d3:	eb 05                	jmp    111da <kernel_strncmp+0x78>
   111d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111da:	5d                   	pop    %ebp
   111db:	c3                   	ret    

000111dc <kernel_strlen>:
int kernel_strlen(const char * str){
   111dc:	55                   	push   %ebp
   111dd:	89 e5                	mov    %esp,%ebp
   111df:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   111e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111e6:	75 07                	jne    111ef <kernel_strlen+0x13>
        return 0;
   111e8:	b8 00 00 00 00       	mov    $0x0,%eax
   111ed:	eb 26                	jmp    11215 <kernel_strlen+0x39>
    }

    const char * c = str;
   111ef:	8b 45 08             	mov    0x8(%ebp),%eax
   111f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   111f5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   111fc:	eb 04                	jmp    11202 <kernel_strlen+0x26>
        len++;
   111fe:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   11202:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11205:	8d 50 01             	lea    0x1(%eax),%edx
   11208:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1120b:	0f b6 00             	movzbl (%eax),%eax
   1120e:	84 c0                	test   %al,%al
   11210:	75 ec                	jne    111fe <kernel_strlen+0x22>
    }
    return len;
   11212:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11215:	c9                   	leave  
   11216:	c3                   	ret    

00011217 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   11217:	55                   	push   %ebp
   11218:	89 e5                	mov    %esp,%ebp
   1121a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1121d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11221:	74 40                	je     11263 <kernel_memcpy+0x4c>
   11223:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11227:	74 3a                	je     11263 <kernel_memcpy+0x4c>
   11229:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1122d:	74 34                	je     11263 <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   1122f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11232:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   11235:	8b 45 08             	mov    0x8(%ebp),%eax
   11238:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   1123b:	eb 17                	jmp    11254 <kernel_memcpy+0x3d>
        *d++ = *s++;
   1123d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11240:	8d 42 01             	lea    0x1(%edx),%eax
   11243:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11246:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11249:	8d 48 01             	lea    0x1(%eax),%ecx
   1124c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1124f:	0f b6 12             	movzbl (%edx),%edx
   11252:	88 10                	mov    %dl,(%eax)
    while(size--){
   11254:	8b 45 10             	mov    0x10(%ebp),%eax
   11257:	8d 50 ff             	lea    -0x1(%eax),%edx
   1125a:	89 55 10             	mov    %edx,0x10(%ebp)
   1125d:	85 c0                	test   %eax,%eax
   1125f:	75 dc                	jne    1123d <kernel_memcpy+0x26>
   11261:	eb 01                	jmp    11264 <kernel_memcpy+0x4d>
        return;
   11263:	90                   	nop
    }

}
   11264:	c9                   	leave  
   11265:	c3                   	ret    

00011266 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   11266:	55                   	push   %ebp
   11267:	89 e5                	mov    %esp,%ebp
   11269:	83 ec 14             	sub    $0x14,%esp
   1126c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1126f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   11272:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11276:	74 2c                	je     112a4 <kernel_memset+0x3e>
   11278:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1127c:	74 26                	je     112a4 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   1127e:	8b 45 08             	mov    0x8(%ebp),%eax
   11281:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   11284:	eb 0f                	jmp    11295 <kernel_memset+0x2f>
       *d++ = v; 
   11286:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11289:	8d 50 01             	lea    0x1(%eax),%edx
   1128c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1128f:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11293:	88 10                	mov    %dl,(%eax)
    while(size--){
   11295:	8b 45 10             	mov    0x10(%ebp),%eax
   11298:	8d 50 ff             	lea    -0x1(%eax),%edx
   1129b:	89 55 10             	mov    %edx,0x10(%ebp)
   1129e:	85 c0                	test   %eax,%eax
   112a0:	75 e4                	jne    11286 <kernel_memset+0x20>
   112a2:	eb 01                	jmp    112a5 <kernel_memset+0x3f>
        return;
   112a4:	90                   	nop
    }
}
   112a5:	c9                   	leave  
   112a6:	c3                   	ret    

000112a7 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   112a7:	55                   	push   %ebp
   112a8:	89 e5                	mov    %esp,%ebp
   112aa:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   112ad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112b1:	74 0c                	je     112bf <kernel_memcmp+0x18>
   112b3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112b7:	74 06                	je     112bf <kernel_memcmp+0x18>
   112b9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112bd:	75 07                	jne    112c6 <kernel_memcmp+0x1f>
        return -1;
   112bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   112c4:	eb 43                	jmp    11309 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   112c6:	8b 45 08             	mov    0x8(%ebp),%eax
   112c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   112cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   112cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   112d2:	eb 23                	jmp    112f7 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   112d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112d7:	8d 50 01             	lea    0x1(%eax),%edx
   112da:	89 55 fc             	mov    %edx,-0x4(%ebp)
   112dd:	0f b6 08             	movzbl (%eax),%ecx
   112e0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112e3:	8d 50 01             	lea    0x1(%eax),%edx
   112e6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112e9:	0f b6 00             	movzbl (%eax),%eax
   112ec:	38 c1                	cmp    %al,%cl
   112ee:	74 07                	je     112f7 <kernel_memcmp+0x50>
            return -1;
   112f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   112f5:	eb 12                	jmp    11309 <kernel_memcmp+0x62>
    while(size--){
   112f7:	8b 45 10             	mov    0x10(%ebp),%eax
   112fa:	8d 50 ff             	lea    -0x1(%eax),%edx
   112fd:	89 55 10             	mov    %edx,0x10(%ebp)
   11300:	85 c0                	test   %eax,%eax
   11302:	75 d0                	jne    112d4 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11304:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11309:	c9                   	leave  
   1130a:	c3                   	ret    

0001130b <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   1130b:	55                   	push   %ebp
   1130c:	89 e5                	mov    %esp,%ebp
   1130e:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   11311:	8d 45 10             	lea    0x10(%ebp),%eax
   11314:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   11317:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1131a:	83 ec 04             	sub    $0x4,%esp
   1131d:	50                   	push   %eax
   1131e:	ff 75 0c             	pushl  0xc(%ebp)
   11321:	ff 75 08             	pushl  0x8(%ebp)
   11324:	e8 45 01 00 00       	call   1146e <kernel_vsprintf>
   11329:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1132c:	90                   	nop
   1132d:	c9                   	leave  
   1132e:	c3                   	ret    

0001132f <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   1132f:	55                   	push   %ebp
   11330:	89 e5                	mov    %esp,%ebp
   11332:	53                   	push   %ebx
   11333:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11336:	8b 45 08             	mov    0x8(%ebp),%eax
   11339:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   1133c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1133f:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   11342:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11346:	74 1d                	je     11365 <kernel_itoa+0x36>
   11348:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1134c:	74 17                	je     11365 <kernel_itoa+0x36>
   1134e:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11352:	74 11                	je     11365 <kernel_itoa+0x36>
   11354:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11358:	74 0b                	je     11365 <kernel_itoa+0x36>
        *p = '\0';
   1135a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1135d:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11360:	e9 03 01 00 00       	jmp    11468 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11365:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   1136c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11370:	79 19                	jns    1138b <kernel_itoa+0x5c>
   11372:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11376:	75 13                	jne    1138b <kernel_itoa+0x5c>
        *p++ = '-';
   11378:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1137b:	8d 50 01             	lea    0x1(%eax),%edx
   1137e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11381:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11384:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   1138b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1138f:	74 3b                	je     113cc <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   11391:	8b 0d bc 1c 01 00    	mov    0x11cbc,%ecx
   11397:	8b 45 0c             	mov    0xc(%ebp),%eax
   1139a:	99                   	cltd   
   1139b:	f7 7d 10             	idivl  0x10(%ebp)
   1139e:	89 d0                	mov    %edx,%eax
   113a0:	83 c0 0f             	add    $0xf,%eax
   113a3:	01 c8                	add    %ecx,%eax
   113a5:	0f b6 00             	movzbl (%eax),%eax
   113a8:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   113ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113ae:	8d 50 01             	lea    0x1(%eax),%edx
   113b1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   113b4:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   113b8:	88 10                	mov    %dl,(%eax)
            num /= base;
   113ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   113bd:	99                   	cltd   
   113be:	f7 7d 10             	idivl  0x10(%ebp)
   113c1:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   113c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113c8:	75 c7                	jne    11391 <kernel_itoa+0x62>
   113ca:	eb 4b                	jmp    11417 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   113cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   113cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   113d2:	8b 0d bc 1c 01 00    	mov    0x11cbc,%ecx
   113d8:	8b 5d 10             	mov    0x10(%ebp),%ebx
   113db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   113de:	ba 00 00 00 00       	mov    $0x0,%edx
   113e3:	f7 f3                	div    %ebx
   113e5:	89 d0                	mov    %edx,%eax
   113e7:	83 c0 0f             	add    $0xf,%eax
   113ea:	01 c8                	add    %ecx,%eax
   113ec:	0f b6 00             	movzbl (%eax),%eax
   113ef:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   113f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113f5:	8d 50 01             	lea    0x1(%eax),%edx
   113f8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   113fb:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   113ff:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11401:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11404:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11407:	ba 00 00 00 00       	mov    $0x0,%edx
   1140c:	f7 f3                	div    %ebx
   1140e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11411:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11415:	75 bb                	jne    113d2 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11417:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1141a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1141d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11420:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   11423:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11427:	74 08                	je     11431 <kernel_itoa+0x102>
   11429:	8b 45 08             	mov    0x8(%ebp),%eax
   1142c:	83 c0 01             	add    $0x1,%eax
   1142f:	eb 03                	jmp    11434 <kernel_itoa+0x105>
   11431:	8b 45 08             	mov    0x8(%ebp),%eax
   11434:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   11437:	eb 27                	jmp    11460 <kernel_itoa+0x131>
        char ch = *start;
   11439:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1143c:	0f b6 00             	movzbl (%eax),%eax
   1143f:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11442:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11445:	0f b6 10             	movzbl (%eax),%edx
   11448:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1144b:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   1144d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11450:	8d 50 ff             	lea    -0x1(%eax),%edx
   11453:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11456:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   1145a:	88 10                	mov    %dl,(%eax)
        start++;
   1145c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   11460:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11463:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11466:	72 d1                	jb     11439 <kernel_itoa+0x10a>
    }
}
   11468:	83 c4 20             	add    $0x20,%esp
   1146b:	5b                   	pop    %ebx
   1146c:	5d                   	pop    %ebp
   1146d:	c3                   	ret    

0001146e <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   1146e:	55                   	push   %ebp
   1146f:	89 e5                	mov    %esp,%ebp
   11471:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   11474:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   1147b:	8b 45 08             	mov    0x8(%ebp),%eax
   1147e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   11481:	e9 17 01 00 00       	jmp    1159d <kernel_vsprintf+0x12f>
        switch(state) {
   11486:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11489:	85 c0                	test   %eax,%eax
   1148b:	74 0a                	je     11497 <kernel_vsprintf+0x29>
   1148d:	83 f8 01             	cmp    $0x1,%eax
   11490:	74 2b                	je     114bd <kernel_vsprintf+0x4f>
   11492:	e9 06 01 00 00       	jmp    1159d <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   11497:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1149b:	75 0c                	jne    114a9 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   1149d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   114a4:	e9 f4 00 00 00       	jmp    1159d <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   114a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114ac:	8d 50 01             	lea    0x1(%eax),%edx
   114af:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114b2:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   114b6:	88 10                	mov    %dl,(%eax)
                }
                break;
   114b8:	e9 e0 00 00 00       	jmp    1159d <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   114bd:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   114c1:	75 47                	jne    1150a <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   114c3:	8b 45 10             	mov    0x10(%ebp),%eax
   114c6:	8d 50 04             	lea    0x4(%eax),%edx
   114c9:	89 55 10             	mov    %edx,0x10(%ebp)
   114cc:	8b 00                	mov    (%eax),%eax
   114ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   114d1:	ff 75 f4             	pushl  -0xc(%ebp)
   114d4:	e8 03 fd ff ff       	call   111dc <kernel_strlen>
   114d9:	83 c4 04             	add    $0x4,%esp
   114dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   114df:	eb 17                	jmp    114f8 <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   114e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114e4:	8d 42 01             	lea    0x1(%edx),%eax
   114e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
   114ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114ed:	8d 48 01             	lea    0x1(%eax),%ecx
   114f0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   114f3:	0f b6 12             	movzbl (%edx),%edx
   114f6:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   114f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114fb:	8d 50 ff             	lea    -0x1(%eax),%edx
   114fe:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11501:	85 c0                	test   %eax,%eax
   11503:	75 dc                	jne    114e1 <kernel_vsprintf+0x73>
   11505:	e9 8b 00 00 00       	jmp    11595 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   1150a:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1150e:	75 2e                	jne    1153e <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   11510:	8b 45 10             	mov    0x10(%ebp),%eax
   11513:	8d 50 04             	lea    0x4(%eax),%edx
   11516:	89 55 10             	mov    %edx,0x10(%ebp)
   11519:	8b 00                	mov    (%eax),%eax
   1151b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   1151e:	6a 0a                	push   $0xa
   11520:	ff 75 e4             	pushl  -0x1c(%ebp)
   11523:	ff 75 f8             	pushl  -0x8(%ebp)
   11526:	e8 04 fe ff ff       	call   1132f <kernel_itoa>
   1152b:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   1152e:	ff 75 f8             	pushl  -0x8(%ebp)
   11531:	e8 a6 fc ff ff       	call   111dc <kernel_strlen>
   11536:	83 c4 04             	add    $0x4,%esp
   11539:	01 45 f8             	add    %eax,-0x8(%ebp)
   1153c:	eb 57                	jmp    11595 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   1153e:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11542:	75 2e                	jne    11572 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   11544:	8b 45 10             	mov    0x10(%ebp),%eax
   11547:	8d 50 04             	lea    0x4(%eax),%edx
   1154a:	89 55 10             	mov    %edx,0x10(%ebp)
   1154d:	8b 00                	mov    (%eax),%eax
   1154f:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   11552:	6a 10                	push   $0x10
   11554:	ff 75 e8             	pushl  -0x18(%ebp)
   11557:	ff 75 f8             	pushl  -0x8(%ebp)
   1155a:	e8 d0 fd ff ff       	call   1132f <kernel_itoa>
   1155f:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   11562:	ff 75 f8             	pushl  -0x8(%ebp)
   11565:	e8 72 fc ff ff       	call   111dc <kernel_strlen>
   1156a:	83 c4 04             	add    $0x4,%esp
   1156d:	01 45 f8             	add    %eax,-0x8(%ebp)
   11570:	eb 23                	jmp    11595 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   11572:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11576:	75 1d                	jne    11595 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   11578:	8b 45 10             	mov    0x10(%ebp),%eax
   1157b:	8d 50 04             	lea    0x4(%eax),%edx
   1157e:	89 55 10             	mov    %edx,0x10(%ebp)
   11581:	8b 00                	mov    (%eax),%eax
   11583:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11586:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11589:	8d 50 01             	lea    0x1(%eax),%edx
   1158c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1158f:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11593:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   11595:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   1159c:	90                   	nop
    while ((ch = *fmt++)) {
   1159d:	8b 45 0c             	mov    0xc(%ebp),%eax
   115a0:	8d 50 01             	lea    0x1(%eax),%edx
   115a3:	89 55 0c             	mov    %edx,0xc(%ebp)
   115a6:	0f b6 00             	movzbl (%eax),%eax
   115a9:	88 45 ef             	mov    %al,-0x11(%ebp)
   115ac:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   115b0:	0f 85 d0 fe ff ff    	jne    11486 <kernel_vsprintf+0x18>
        }
    }
}
   115b6:	90                   	nop
   115b7:	c9                   	leave  
   115b8:	c3                   	ret    

000115b9 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   115b9:	55                   	push   %ebp
   115ba:	89 e5                	mov    %esp,%ebp
   115bc:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   115bf:	83 ec 08             	sub    $0x8,%esp
   115c2:	ff 75 14             	pushl  0x14(%ebp)
   115c5:	68 6c 1c 01 00       	push   $0x11c6c
   115ca:	e8 cb 02 00 00       	call   1189a <log_printf>
   115cf:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   115d2:	ff 75 10             	pushl  0x10(%ebp)
   115d5:	ff 75 0c             	pushl  0xc(%ebp)
   115d8:	ff 75 08             	pushl  0x8(%ebp)
   115db:	68 7e 1c 01 00       	push   $0x11c7e
   115e0:	e8 b5 02 00 00       	call   1189a <log_printf>
   115e5:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   115e8:	e8 b7 fa ff ff       	call   110a4 <hlt>
   115ed:	eb f9                	jmp    115e8 <panic+0x2f>

000115ef <list_is_empty>:
/**
 * 判断链表是否为空
 * @param list 判断的链表
 * @return 1 - 空，0 - 非空
 */
static inline int list_is_empty(list_t *list) {
   115ef:	55                   	push   %ebp
   115f0:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   115f2:	8b 45 08             	mov    0x8(%ebp),%eax
   115f5:	8b 40 08             	mov    0x8(%eax),%eax
   115f8:	85 c0                	test   %eax,%eax
   115fa:	0f 94 c0             	sete   %al
   115fd:	0f b6 c0             	movzbl %al,%eax
}
   11600:	5d                   	pop    %ebp
   11601:	c3                   	ret    

00011602 <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   11602:	55                   	push   %ebp
   11603:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11605:	8b 45 08             	mov    0x8(%ebp),%eax
   11608:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1160f:	8b 45 08             	mov    0x8(%ebp),%eax
   11612:	8b 50 04             	mov    0x4(%eax),%edx
   11615:	8b 45 08             	mov    0x8(%ebp),%eax
   11618:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1161a:	8b 45 08             	mov    0x8(%ebp),%eax
   1161d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11624:	90                   	nop
   11625:	5d                   	pop    %ebp
   11626:	c3                   	ret    

00011627 <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   11627:	55                   	push   %ebp
   11628:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   1162a:	8b 45 08             	mov    0x8(%ebp),%eax
   1162d:	8b 10                	mov    (%eax),%edx
   1162f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11632:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11635:	8b 45 0c             	mov    0xc(%ebp),%eax
   11638:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1163e:	ff 75 08             	pushl  0x8(%ebp)
   11641:	e8 a9 ff ff ff       	call   115ef <list_is_empty>
   11646:	83 c4 04             	add    $0x4,%esp
   11649:	85 c0                	test   %eax,%eax
   1164b:	74 16                	je     11663 <list_insert_first+0x3c>
        list->first = list->last = node;
   1164d:	8b 45 08             	mov    0x8(%ebp),%eax
   11650:	8b 55 0c             	mov    0xc(%ebp),%edx
   11653:	89 50 04             	mov    %edx,0x4(%eax)
   11656:	8b 45 08             	mov    0x8(%ebp),%eax
   11659:	8b 50 04             	mov    0x4(%eax),%edx
   1165c:	8b 45 08             	mov    0x8(%ebp),%eax
   1165f:	89 10                	mov    %edx,(%eax)
   11661:	eb 12                	jmp    11675 <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   11663:	8b 45 08             	mov    0x8(%ebp),%eax
   11666:	8b 00                	mov    (%eax),%eax
   11668:	8b 55 0c             	mov    0xc(%ebp),%edx
   1166b:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1166d:	8b 45 08             	mov    0x8(%ebp),%eax
   11670:	8b 55 0c             	mov    0xc(%ebp),%edx
   11673:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11675:	8b 45 08             	mov    0x8(%ebp),%eax
   11678:	8b 40 08             	mov    0x8(%eax),%eax
   1167b:	8d 50 01             	lea    0x1(%eax),%edx
   1167e:	8b 45 08             	mov    0x8(%ebp),%eax
   11681:	89 50 08             	mov    %edx,0x8(%eax)
}
   11684:	90                   	nop
   11685:	c9                   	leave  
   11686:	c3                   	ret    

00011687 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11687:	55                   	push   %ebp
   11688:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1168a:	8b 45 08             	mov    0x8(%ebp),%eax
   1168d:	8b 50 04             	mov    0x4(%eax),%edx
   11690:	8b 45 0c             	mov    0xc(%ebp),%eax
   11693:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   11695:	8b 45 0c             	mov    0xc(%ebp),%eax
   11698:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   1169f:	ff 75 08             	pushl  0x8(%ebp)
   116a2:	e8 48 ff ff ff       	call   115ef <list_is_empty>
   116a7:	83 c4 04             	add    $0x4,%esp
   116aa:	85 c0                	test   %eax,%eax
   116ac:	74 16                	je     116c4 <list_insert_last+0x3d>
        list->first = list->last = node;
   116ae:	8b 45 08             	mov    0x8(%ebp),%eax
   116b1:	8b 55 0c             	mov    0xc(%ebp),%edx
   116b4:	89 50 04             	mov    %edx,0x4(%eax)
   116b7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ba:	8b 50 04             	mov    0x4(%eax),%edx
   116bd:	8b 45 08             	mov    0x8(%ebp),%eax
   116c0:	89 10                	mov    %edx,(%eax)
   116c2:	eb 15                	jmp    116d9 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	8b 40 04             	mov    0x4(%eax),%eax
   116ca:	8b 55 0c             	mov    0xc(%ebp),%edx
   116cd:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   116d0:	8b 45 08             	mov    0x8(%ebp),%eax
   116d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   116d6:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   116d9:	8b 45 08             	mov    0x8(%ebp),%eax
   116dc:	8b 40 08             	mov    0x8(%eax),%eax
   116df:	8d 50 01             	lea    0x1(%eax),%edx
   116e2:	8b 45 08             	mov    0x8(%ebp),%eax
   116e5:	89 50 08             	mov    %edx,0x8(%eax)
}
   116e8:	90                   	nop
   116e9:	c9                   	leave  
   116ea:	c3                   	ret    

000116eb <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   116eb:	55                   	push   %ebp
   116ec:	89 e5                	mov    %esp,%ebp
   116ee:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   116f1:	ff 75 08             	pushl  0x8(%ebp)
   116f4:	e8 f6 fe ff ff       	call   115ef <list_is_empty>
   116f9:	83 c4 04             	add    $0x4,%esp
   116fc:	85 c0                	test   %eax,%eax
   116fe:	74 07                	je     11707 <list_remove_first+0x1c>
        return (list_node_t *)0;
   11700:	b8 00 00 00 00       	mov    $0x0,%eax
   11705:	eb 5b                	jmp    11762 <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   11707:	8b 45 08             	mov    0x8(%ebp),%eax
   1170a:	8b 00                	mov    (%eax),%eax
   1170c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   1170f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11712:	8b 50 04             	mov    0x4(%eax),%edx
   11715:	8b 45 08             	mov    0x8(%ebp),%eax
   11718:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   1171a:	8b 45 08             	mov    0x8(%ebp),%eax
   1171d:	8b 00                	mov    (%eax),%eax
   1171f:	85 c0                	test   %eax,%eax
   11721:	75 0c                	jne    1172f <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   11723:	8b 45 08             	mov    0x8(%ebp),%eax
   11726:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1172d:	eb 0c                	jmp    1173b <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   1172f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11732:	8b 40 04             	mov    0x4(%eax),%eax
   11735:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   1173b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1173e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11745:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11748:	8b 50 04             	mov    0x4(%eax),%edx
   1174b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1174e:	89 10                	mov    %edx,(%eax)
    list->count--;
   11750:	8b 45 08             	mov    0x8(%ebp),%eax
   11753:	8b 40 08             	mov    0x8(%eax),%eax
   11756:	8d 50 ff             	lea    -0x1(%eax),%edx
   11759:	8b 45 08             	mov    0x8(%ebp),%eax
   1175c:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1175f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11762:	c9                   	leave  
   11763:	c3                   	ret    

00011764 <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   11764:	55                   	push   %ebp
   11765:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   11767:	8b 45 08             	mov    0x8(%ebp),%eax
   1176a:	8b 00                	mov    (%eax),%eax
   1176c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1176f:	75 0b                	jne    1177c <list_remove+0x18>
        list->first = node->next;
   11771:	8b 45 0c             	mov    0xc(%ebp),%eax
   11774:	8b 50 04             	mov    0x4(%eax),%edx
   11777:	8b 45 08             	mov    0x8(%ebp),%eax
   1177a:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   1177c:	8b 45 08             	mov    0x8(%ebp),%eax
   1177f:	8b 40 04             	mov    0x4(%eax),%eax
   11782:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11785:	75 0b                	jne    11792 <list_remove+0x2e>
        list->last = node->pre;
   11787:	8b 45 0c             	mov    0xc(%ebp),%eax
   1178a:	8b 10                	mov    (%eax),%edx
   1178c:	8b 45 08             	mov    0x8(%ebp),%eax
   1178f:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   11792:	8b 45 0c             	mov    0xc(%ebp),%eax
   11795:	8b 00                	mov    (%eax),%eax
   11797:	85 c0                	test   %eax,%eax
   11799:	74 0e                	je     117a9 <list_remove+0x45>
        node->pre->next = node->next;
   1179b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1179e:	8b 00                	mov    (%eax),%eax
   117a0:	8b 55 0c             	mov    0xc(%ebp),%edx
   117a3:	8b 52 04             	mov    0x4(%edx),%edx
   117a6:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   117a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   117ac:	8b 40 04             	mov    0x4(%eax),%eax
   117af:	85 c0                	test   %eax,%eax
   117b1:	74 0d                	je     117c0 <list_remove+0x5c>
        node->next->pre = node->pre;
   117b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   117b6:	8b 40 04             	mov    0x4(%eax),%eax
   117b9:	8b 55 0c             	mov    0xc(%ebp),%edx
   117bc:	8b 12                	mov    (%edx),%edx
   117be:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   117c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   117c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   117cd:	8b 50 04             	mov    0x4(%eax),%edx
   117d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   117d3:	89 10                	mov    %edx,(%eax)

    list->count--;
   117d5:	8b 45 08             	mov    0x8(%ebp),%eax
   117d8:	8b 40 08             	mov    0x8(%eax),%eax
   117db:	8d 50 ff             	lea    -0x1(%eax),%edx
   117de:	8b 45 08             	mov    0x8(%ebp),%eax
   117e1:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   117e4:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   117e7:	5d                   	pop    %ebp
   117e8:	c3                   	ret    

000117e9 <inb>:
static inline uint8_t inb(uint16_t port) {
   117e9:	55                   	push   %ebp
   117ea:	89 e5                	mov    %esp,%ebp
   117ec:	83 ec 14             	sub    $0x14,%esp
   117ef:	8b 45 08             	mov    0x8(%ebp),%eax
   117f2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   117f6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   117fa:	89 c2                	mov    %eax,%edx
   117fc:	ec                   	in     (%dx),%al
   117fd:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11800:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11804:	c9                   	leave  
   11805:	c3                   	ret    

00011806 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11806:	55                   	push   %ebp
   11807:	89 e5                	mov    %esp,%ebp
   11809:	83 ec 08             	sub    $0x8,%esp
   1180c:	8b 55 08             	mov    0x8(%ebp),%edx
   1180f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11812:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11816:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11819:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1181d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11821:	ee                   	out    %al,(%dx)
}
   11822:	90                   	nop
   11823:	c9                   	leave  
   11824:	c3                   	ret    

00011825 <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值

#define COM1_PORT 0x3f8

void log_init(void) {
   11825:	55                   	push   %ebp
   11826:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   11828:	6a 00                	push   $0x0
   1182a:	68 f9 03 00 00       	push   $0x3f9
   1182f:	e8 d2 ff ff ff       	call   11806 <outb>
   11834:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11837:	68 80 00 00 00       	push   $0x80
   1183c:	68 fb 03 00 00       	push   $0x3fb
   11841:	e8 c0 ff ff ff       	call   11806 <outb>
   11846:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11849:	6a 03                	push   $0x3
   1184b:	68 f8 03 00 00       	push   $0x3f8
   11850:	e8 b1 ff ff ff       	call   11806 <outb>
   11855:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11858:	6a 00                	push   $0x0
   1185a:	68 f9 03 00 00       	push   $0x3f9
   1185f:	e8 a2 ff ff ff       	call   11806 <outb>
   11864:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11867:	6a 03                	push   $0x3
   11869:	68 fb 03 00 00       	push   $0x3fb
   1186e:	e8 93 ff ff ff       	call   11806 <outb>
   11873:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11876:	68 c7 00 00 00       	push   $0xc7
   1187b:	68 fa 03 00 00       	push   $0x3fa
   11880:	e8 81 ff ff ff       	call   11806 <outb>
   11885:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11888:	6a 0f                	push   $0xf
   1188a:	68 fc 03 00 00       	push   $0x3fc
   1188f:	e8 72 ff ff ff       	call   11806 <outb>
   11894:	83 c4 08             	add    $0x8,%esp

}
   11897:	90                   	nop
   11898:	c9                   	leave  
   11899:	c3                   	ret    

0001189a <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   1189a:	55                   	push   %ebp
   1189b:	89 e5                	mov    %esp,%ebp
   1189d:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   118a3:	83 ec 04             	sub    $0x4,%esp
   118a6:	68 80 00 00 00       	push   $0x80
   118ab:	6a 00                	push   $0x0
   118ad:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   118b3:	50                   	push   %eax
   118b4:	e8 ad f9 ff ff       	call   11266 <kernel_memset>
   118b9:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   118bc:	8d 45 0c             	lea    0xc(%ebp),%eax
   118bf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(str_buf,fmt,args);
   118c5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   118cb:	83 ec 04             	sub    $0x4,%esp
   118ce:	50                   	push   %eax
   118cf:	ff 75 08             	pushl  0x8(%ebp)
   118d2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   118d8:	50                   	push   %eax
   118d9:	e8 90 fb ff ff       	call   1146e <kernel_vsprintf>
   118de:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;
   118e1:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   118e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   118ea:	eb 31                	jmp    1191d <log_printf+0x83>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   118ec:	90                   	nop
   118ed:	83 ec 0c             	sub    $0xc,%esp
   118f0:	68 fd 03 00 00       	push   $0x3fd
   118f5:	e8 ef fe ff ff       	call   117e9 <inb>
   118fa:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   118fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11900:	8d 50 01             	lea    0x1(%eax),%edx
   11903:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11906:	0f b6 00             	movzbl (%eax),%eax
   11909:	0f b6 c0             	movzbl %al,%eax
   1190c:	83 ec 08             	sub    $0x8,%esp
   1190f:	50                   	push   %eax
   11910:	68 f8 03 00 00       	push   $0x3f8
   11915:	e8 ec fe ff ff       	call   11806 <outb>
   1191a:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   1191d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11920:	0f b6 00             	movzbl (%eax),%eax
   11923:	84 c0                	test   %al,%al
   11925:	75 c5                	jne    118ec <log_printf+0x52>
    }

// 变列
    outb(COM1_PORT,'\r');
   11927:	83 ec 08             	sub    $0x8,%esp
   1192a:	6a 0d                	push   $0xd
   1192c:	68 f8 03 00 00       	push   $0x3f8
   11931:	e8 d0 fe ff ff       	call   11806 <outb>
   11936:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   11939:	83 ec 08             	sub    $0x8,%esp
   1193c:	6a 0a                	push   $0xa
   1193e:	68 f8 03 00 00       	push   $0x3f8
   11943:	e8 be fe ff ff       	call   11806 <outb>
   11948:	83 c4 10             	add    $0x10,%esp
   1194b:	90                   	nop
   1194c:	c9                   	leave  
   1194d:	c3                   	ret    
