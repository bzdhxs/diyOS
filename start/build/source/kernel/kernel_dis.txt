
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000001a5 memsz 0x000029c0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a5  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00002800  000101c0  000101c0  000011a5  2**5
                  ALLOC
  2 .debug_line   00000207  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003ee  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e7  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00001988  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    00000271  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY
  8 .debug_frame  00000100  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000101c0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
00010028 l     F .text	00000028 lgdt
000101c0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 init.c
00010187 g     F .text	0000000b cpu_init
000101a0 g     F .text	00000005 init_main
000109c0 g     O .bss	00002000 stack
00010192 g     F .text	0000000e kernel_init
00010000 g       .text	00000000 _start
000100d3 g     F .text	0000006d init_gdt
00010050 g     F .text	00000083 segment_desc_set
00010140 g     F .text	00000047 gate_desc_set



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 89 01 00 00       	call   10192 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc c0 29 01 00       	mov    $0x129c0,%esp
    jmp init_main
   10023:	e9 78 01 00 00       	jmp    101a0 <init_main>

00010028 <lgdt>:
static inline void sti(void){
    __asm__ __volatile__("sti");    
}


static inline void lgdt(uint32_t start,uint32_t size){
   10028:	55                   	push   %ebp
   10029:	89 e5                	mov    %esp,%ebp
   1002b:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }gdt;
    
    gdt.start32_16 = start >> 16;
   1002e:	8b 45 08             	mov    0x8(%ebp),%eax
   10031:	c1 e8 10             	shr    $0x10,%eax
   10034:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   10038:	8b 45 08             	mov    0x8(%ebp),%eax
   1003b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   1003f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10042:	83 e8 01             	sub    $0x1,%eax
   10045:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10049:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1004d:	90                   	nop
   1004e:	c9                   	leave  
   1004f:	c3                   	ret    

00010050 <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   10050:	55                   	push   %ebp
   10051:	89 e5                	mov    %esp,%ebp
   10053:	83 ec 14             	sub    $0x14,%esp
   10056:	8b 45 14             	mov    0x14(%ebp),%eax
   10059:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   1005d:	8b 45 08             	mov    0x8(%ebp),%eax
   10060:	83 e0 f8             	and    $0xfffffff8,%eax
   10063:	05 c0 01 01 00       	add    $0x101c0,%eax
   10068:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   1006b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10072:	76 0f                	jbe    10083 <segment_desc_set+0x33>
		attr |= SEG_G;
   10074:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1007a:	8b 45 10             	mov    0x10(%ebp),%eax
   1007d:	c1 e8 0c             	shr    $0xc,%eax
   10080:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   10083:	8b 45 10             	mov    0x10(%ebp),%eax
   10086:	89 c2                	mov    %eax,%edx
   10088:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1008b:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   1008e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10091:	89 c2                	mov    %eax,%edx
   10093:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10096:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1009a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1009d:	c1 e8 10             	shr    $0x10,%eax
   100a0:	89 c2                	mov    %eax,%edx
   100a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100a5:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   100a8:	8b 45 10             	mov    0x10(%ebp),%eax
   100ab:	c1 e8 10             	shr    $0x10,%eax
   100ae:	c1 e0 08             	shl    $0x8,%eax
   100b1:	66 25 00 0f          	and    $0xf00,%ax
   100b5:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   100b9:	89 c2                	mov    %eax,%edx
   100bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100be:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   100c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   100c5:	c1 e8 18             	shr    $0x18,%eax
   100c8:	89 c2                	mov    %eax,%edx
   100ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100cd:	88 50 07             	mov    %dl,0x7(%eax)

}
   100d0:	90                   	nop
   100d1:	c9                   	leave  
   100d2:	c3                   	ret    

000100d3 <init_gdt>:

void init_gdt(void){
   100d3:	55                   	push   %ebp
   100d4:	89 e5                	mov    %esp,%ebp
   100d6:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   100d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   100e0:	eb 19                	jmp    100fb <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   100e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100e5:	c1 e0 03             	shl    $0x3,%eax
   100e8:	6a 00                	push   $0x0
   100ea:	6a 00                	push   $0x0
   100ec:	6a 00                	push   $0x0
   100ee:	50                   	push   %eax
   100ef:	e8 5c ff ff ff       	call   10050 <segment_desc_set>
   100f4:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   100f7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   100fb:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10102:	7e de                	jle    100e2 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10104:	68 9a 40 00 00       	push   $0x409a
   10109:	6a ff                	push   $0xffffffff
   1010b:	6a 00                	push   $0x0
   1010d:	6a 08                	push   $0x8
   1010f:	e8 3c ff ff ff       	call   10050 <segment_desc_set>
   10114:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10117:	68 92 40 00 00       	push   $0x4092
   1011c:	6a ff                	push   $0xffffffff
   1011e:	6a 00                	push   $0x0
   10120:	6a 10                	push   $0x10
   10122:	e8 29 ff ff ff       	call   10050 <segment_desc_set>
   10127:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   1012a:	b8 c0 01 01 00       	mov    $0x101c0,%eax
   1012f:	68 00 08 00 00       	push   $0x800
   10134:	50                   	push   %eax
   10135:	e8 ee fe ff ff       	call   10028 <lgdt>
   1013a:	83 c4 08             	add    $0x8,%esp
}
   1013d:	90                   	nop
   1013e:	c9                   	leave  
   1013f:	c3                   	ret    

00010140 <gate_desc_set>:

/**
 * 设置门描述符
 */

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10140:	55                   	push   %ebp
   10141:	89 e5                	mov    %esp,%ebp
   10143:	83 ec 08             	sub    $0x8,%esp
   10146:	8b 55 0c             	mov    0xc(%ebp),%edx
   10149:	8b 45 14             	mov    0x14(%ebp),%eax
   1014c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10150:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10154:	8b 45 10             	mov    0x10(%ebp),%eax
   10157:	89 c2                	mov    %eax,%edx
   10159:	8b 45 08             	mov    0x8(%ebp),%eax
   1015c:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   1015f:	8b 45 08             	mov    0x8(%ebp),%eax
   10162:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10166:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   1016a:	8b 45 08             	mov    0x8(%ebp),%eax
   1016d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10171:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10175:	8b 45 10             	mov    0x10(%ebp),%eax
   10178:	c1 e8 10             	shr    $0x10,%eax
   1017b:	89 c2                	mov    %eax,%edx
   1017d:	8b 45 08             	mov    0x8(%ebp),%eax
   10180:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10184:	90                   	nop
   10185:	c9                   	leave  
   10186:	c3                   	ret    

00010187 <cpu_init>:




void cpu_init (void){
   10187:	55                   	push   %ebp
   10188:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   1018a:	e8 44 ff ff ff       	call   100d3 <init_gdt>
   1018f:	90                   	nop
   10190:	5d                   	pop    %ebp
   10191:	c3                   	ret    

00010192 <kernel_init>:


/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   10192:	55                   	push   %ebp
   10193:	89 e5                	mov    %esp,%ebp
   10195:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10198:	e8 ea ff ff ff       	call   10187 <cpu_init>
}
   1019d:	90                   	nop
   1019e:	c9                   	leave  
   1019f:	c3                   	ret    

000101a0 <init_main>:

void init_main(void) {
   101a0:	55                   	push   %ebp
   101a1:	89 e5                	mov    %esp,%ebp

    
    for(;;){}
   101a3:	eb fe                	jmp    101a3 <init_main+0x3>
