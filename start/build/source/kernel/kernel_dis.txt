
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001d6c memsz 0x00005b00 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019fa  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000036c  000119fc  000119fc  000029fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011d68  00011d68  00002d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d80  00011d80  00011d80  00002d6c  2**5
                  ALLOC
  4 .debug_line   00000bbd  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ee3  00000000  00000000  00003929  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bb  00000000  00000000  0000580c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  000061c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000a4c  00000000  00000000  000062e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00006d34  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000bb8  00000000  00000000  00006d48  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000119fc l    d  .rodata	00000000 .rodata
00011d68 l    d  .data	00000000 .data
00011d80 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	0000001b list_node_init
000102c0 l     F .text	0000000b list_count
000102cb l     F .text	0000000a list_first
000102d5 l     F .text	00000017 write_tr
00011d80 l     O .bss	000000bc task_manager
000102ec l     F .text	0000010e tss_init
00011a5c l     O .rodata	0000000a __func__.1987
00000000 l    df *ABS*	00000000 cpu.c
00010642 l     F .text	00000028 lgdt
0001066a l     F .text	0000001a far_jump
00011e40 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001081f l     F .text	0000001d inb
0001083c l     F .text	0000001f outb
0001085b l     F .text	00000007 cli
00010862 l     F .text	00000007 sti
00010869 l     F .text	00000028 lidt
00010891 l     F .text	00000007 hlt
00010898 l     F .text	000000d9 dump_core_regs
00010971 l     F .text	0000003e do_default_handler
00012640 l     O .bss	00000400 idt_table
00010bdf l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010fad l     F .text	0000001f outb
00012a40 l     O .bss	00000004 sys_tick
00010fef l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012a60 l     O .bss	00001000 init_task_stack
00013a60 l     O .bss	000000a0 init_task
00000000 l    df *ABS*	00000000 klib.c
00011150 l     F .text	00000007 hlt
00011d68 l     O .data	00000004 num2ch.1900
00000000 l    df *ABS*	00000000 list.c
0001169b l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011895 l     F .text	0000001d inb
000118b2 l     F .text	0000001f outb
000112c3 g     F .text	0000004f kernel_memcpy
000105ab g     F .text	0000000a task_current
00010f77 g     F .text	0000000b irq_enable_global
00011733 g     F .text	00000064 list_insert_last
00010ae3 g     F .text	0000001c do_handler_segment_not_present
00010537 g     F .text	00000029 task_set_ready
00011312 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
000107bb g     F .text	0000000b cpu_init
000118d1 g     F .text	00000075 log_init
000110b7 g     F .text	00000099 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00011157 g     F .text	00000047 kernel_strcpy
00010e5a g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010a3b g     F .text	0000001c do_handler_overflow
00010b6f g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010b1b g     F .text	0000001c do_handler_general_protection
000109cb g     F .text	0000001c do_handler_divider
00010aab g     F .text	0000001c do_handler_double_fault
00011089 g     F .text	0000002e init_task_entry
00010b37 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010f82 g     F .text	0000002b pic_send_eoi
000104fa g     F .text	0000000a task_first_task
00010fcc g     F .text	00000023 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010bc3 g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00013b00 g     O .bss	00002000 stack
000100e2 g       .text	00000000 exception_handler_bound_range
00010a73 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010b53 g     F .text	0000001c do_handler_fpu_error
000104bd g     F .text	0000003d task_first_init
00010b8b g     F .text	0000001c do_handler_machine_check
000109e7 g     F .text	0000001c do_handler_Debug
000116d3 g     F .text	00000060 list_insert_first
00010a03 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
0001119e g     F .text	00000070 kernel_strncpy
00010f6c g     F .text	0000000b irq_disable_global
000105fa g     F .text	00000048 sys_sched_yield
00011067 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
0001151a g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
00010ac7 g     F .text	0000001c do_handler_invalid_tss
00011665 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00010e20 g     F .text	0000003a irq_install
00010707 g     F .text	0000006d init_gdt
00010ee5 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00010a8f g     F .text	0000001c do_handler_device_unavailable
000105b5 g     F .text	00000045 task_dispatch
0001080b g     F .text	00000014 switch_to_tss
00010580 g     F .text	0000002b task_next_run
00011353 g     F .text	00000064 kernel_memcmp
000116ae g     F .text	00000025 list_init
00010ba7 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00010560 g     F .text	00000020 task_set_block
000109af g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
000103fa g     F .text	0000001e task_switch_from_to
00010c72 g     F .text	000001ae irq_init
00011288 g     F .text	0000003b kernel_strlen
00010684 g     F .text	00000083 segment_desc_set
00010a57 g     F .text	0000001c do_handler_bound_range
00011797 g     F .text	00000079 list_remove_first
0001120e g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010504 g     F .text	00000033 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00010aff g     F .text	0000001c do_handler_stack_segment_fault
00010a1f g     F .text	0000001c do_handler_breakpoint
00011946 g     F .text	000000b4 log_printf
00010418 g     F .text	000000a5 task_init
000113b7 g     F .text	00000024 kernel_sprintf
000107c6 g     F .text	00000045 gdt_alloc_desc
000113db g     F .text	0000013f kernel_itoa
00011810 g     F .text	00000085 list_remove
00010774 g     F .text	00000047 gate_desc_set
0001104f g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 5e 10 00 00       	call   11067 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 00 5b 01 00       	mov    $0x15b00,%esp
    jmp init_main
   10023:	e9 8f 10 00 00       	jmp    110b7 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 76 09 00 00       	call   109af <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 73 09 00 00       	call   109cb <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 70 09 00 00       	call   109e7 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 6d 09 00 00       	call   10a03 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 6a 09 00 00       	call   10a1f <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 67 09 00 00       	call   10a3b <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 64 09 00 00       	call   10a57 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 61 09 00 00       	call   10a73 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 5e 09 00 00       	call   10a8f <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 5d 09 00 00       	call   10aab <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 5c 09 00 00       	call   10ac7 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 5b 09 00 00       	call   10ae3 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 5a 09 00 00       	call   10aff <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 59 09 00 00       	call   10b1b <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 58 09 00 00       	call   10b37 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 55 09 00 00       	call   10b53 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 54 09 00 00       	call   10b6f <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 51 09 00 00       	call   10b8b <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 4e 09 00 00       	call   10ba7 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 4b 09 00 00       	call   10bc3 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 35 0d 00 00       	call   10fcc <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102b2:	8b 45 08             	mov    0x8(%ebp),%eax
   102b5:	8b 50 04             	mov    0x4(%eax),%edx
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	89 10                	mov    %edx,(%eax)
}
   102bd:	90                   	nop
   102be:	5d                   	pop    %ebp
   102bf:	c3                   	ret    

000102c0 <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
    return list->count;
   102c3:	8b 45 08             	mov    0x8(%ebp),%eax
   102c6:	8b 40 08             	mov    0x8(%eax),%eax
}
   102c9:	5d                   	pop    %ebp
   102ca:	c3                   	ret    

000102cb <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   102cb:	55                   	push   %ebp
   102cc:	89 e5                	mov    %esp,%ebp
    return list->first;
   102ce:	8b 45 08             	mov    0x8(%ebp),%eax
   102d1:	8b 00                	mov    (%eax),%eax
}
   102d3:	5d                   	pop    %ebp
   102d4:	c3                   	ret    

000102d5 <write_tr>:

static inline void hlt (void) {
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel) {
   102d5:	55                   	push   %ebp
   102d6:	89 e5                	mov    %esp,%ebp
   102d8:	83 ec 04             	sub    $0x4,%esp
   102db:	8b 45 08             	mov    0x8(%ebp),%eax
   102de:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   102e2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102e6:	0f 00 d8             	ltr    %ax
}
   102e9:	90                   	nop
   102ea:	c9                   	leave  
   102eb:	c3                   	ret    

000102ec <tss_init>:
#include "tools/log.h"
#include "comm/cpu_instr.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102ec:	55                   	push   %ebp
   102ed:	89 e5                	mov    %esp,%ebp
   102ef:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102f2:	e8 cf 04 00 00       	call   107c6 <gdt_alloc_desc>
   102f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   102fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102fe:	79 1a                	jns    1031a <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   10300:	83 ec 0c             	sub    $0xc,%esp
   10303:	68 fc 19 01 00       	push   $0x119fc
   10308:	e8 39 16 00 00       	call   11946 <log_printf>
   1030d:	83 c4 10             	add    $0x10,%esp
        return -1;
   10310:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10315:	e9 de 00 00 00       	jmp    103f8 <tss_init+0x10c>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   1031a:	8b 45 08             	mov    0x8(%ebp),%eax
   1031d:	83 c0 34             	add    $0x34,%eax
   10320:	68 89 00 00 00       	push   $0x89
   10325:	6a 68                	push   $0x68
   10327:	50                   	push   %eax
   10328:	ff 75 f4             	pushl  -0xc(%ebp)
   1032b:	e8 54 03 00 00       	call   10684 <segment_desc_set>
   10330:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10333:	8b 45 08             	mov    0x8(%ebp),%eax
   10336:	83 c0 34             	add    $0x34,%eax
   10339:	83 ec 04             	sub    $0x4,%esp
   1033c:	6a 68                	push   $0x68
   1033e:	6a 00                	push   $0x0
   10340:	50                   	push   %eax
   10341:	e8 cc 0f 00 00       	call   11312 <kernel_memset>
   10346:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1034f:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10352:	8b 45 08             	mov    0x8(%ebp),%eax
   10355:	8b 55 10             	mov    0x10(%ebp),%edx
   10358:	89 50 38             	mov    %edx,0x38(%eax)
   1035b:	8b 45 08             	mov    0x8(%ebp),%eax
   1035e:	8b 50 38             	mov    0x38(%eax),%edx
   10361:	8b 45 08             	mov    0x8(%ebp),%eax
   10364:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10367:	8b 45 08             	mov    0x8(%ebp),%eax
   1036a:	c7 40 3c 10 00 00 00 	movl   $0x10,0x3c(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10371:	8b 45 08             	mov    0x8(%ebp),%eax
   10374:	c7 40 58 02 02 00 00 	movl   $0x202,0x58(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   1037b:	8b 45 08             	mov    0x8(%ebp),%eax
   1037e:	c7 80 90 00 00 00 10 	movl   $0x10,0x90(%eax)
   10385:	00 00 00 
   10388:	8b 45 08             	mov    0x8(%ebp),%eax
   1038b:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
   1039a:	8b 45 08             	mov    0x8(%ebp),%eax
   1039d:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
   103a3:	8b 45 08             	mov    0x8(%ebp),%eax
   103a6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   103ac:	8b 45 08             	mov    0x8(%ebp),%eax
   103af:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
   103b5:	8b 45 08             	mov    0x8(%ebp),%eax
   103b8:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
   103c7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ca:	89 50 7c             	mov    %edx,0x7c(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   103cd:	8b 45 08             	mov    0x8(%ebp),%eax
   103d0:	c7 80 80 00 00 00 08 	movl   $0x8,0x80(%eax)
   103d7:	00 00 00 
    task->tss.iomap = 0;
   103da:	8b 45 08             	mov    0x8(%ebp),%eax
   103dd:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
   103e4:	00 00 00 

    task->tss_sel = tss_sel;
   103e7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103ed:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    return 0;
   103f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103f8:	c9                   	leave  
   103f9:	c3                   	ret    

000103fa <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   103fa:	55                   	push   %ebp
   103fb:	89 e5                	mov    %esp,%ebp
   103fd:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10400:	8b 45 0c             	mov    0xc(%ebp),%eax
   10403:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
   10409:	83 ec 0c             	sub    $0xc,%esp
   1040c:	50                   	push   %eax
   1040d:	e8 f9 03 00 00       	call   1080b <switch_to_tss>
   10412:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   10415:	90                   	nop
   10416:	c9                   	leave  
   10417:	c3                   	ret    

00010418 <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   10418:	55                   	push   %ebp
   10419:	89 e5                	mov    %esp,%ebp
   1041b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1041e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10422:	75 19                	jne    1043d <task_init+0x25>
   10424:	68 0f 1a 01 00       	push   $0x11a0f
   10429:	68 5c 1a 01 00       	push   $0x11a5c
   1042e:	6a 36                	push   $0x36
   10430:	68 24 1a 01 00       	push   $0x11a24
   10435:	e8 2b 12 00 00       	call   11665 <panic>
   1043a:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   1043d:	83 ec 04             	sub    $0x4,%esp
   10440:	ff 75 14             	pushl  0x14(%ebp)
   10443:	ff 75 10             	pushl  0x10(%ebp)
   10446:	ff 75 08             	pushl  0x8(%ebp)
   10449:	e8 9e fe ff ff       	call   102ec <tss_init>
   1044e:	83 c4 10             	add    $0x10,%esp


    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10451:	8b 45 08             	mov    0x8(%ebp),%eax
   10454:	83 c0 04             	add    $0x4,%eax
   10457:	83 ec 04             	sub    $0x4,%esp
   1045a:	6a 20                	push   $0x20
   1045c:	ff 75 0c             	pushl  0xc(%ebp)
   1045f:	50                   	push   %eax
   10460:	e8 39 0d 00 00       	call   1119e <kernel_strncpy>
   10465:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10468:	8b 45 08             	mov    0x8(%ebp),%eax
   1046b:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    list_node_init(&task->all_node);
   10471:	8b 45 08             	mov    0x8(%ebp),%eax
   10474:	83 c0 2c             	add    $0x2c,%eax
   10477:	83 ec 0c             	sub    $0xc,%esp
   1047a:	50                   	push   %eax
   1047b:	e8 25 fe ff ff       	call   102a5 <list_node_init>
   10480:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10483:	8b 45 08             	mov    0x8(%ebp),%eax
   10486:	83 c0 24             	add    $0x24,%eax
   10489:	83 ec 0c             	sub    $0xc,%esp
   1048c:	50                   	push   %eax
   1048d:	e8 13 fe ff ff       	call   102a5 <list_node_init>
   10492:	83 c4 10             	add    $0x10,%esp

    task_set_ready(task);
   10495:	83 ec 0c             	sub    $0xc,%esp
   10498:	ff 75 08             	pushl  0x8(%ebp)
   1049b:	e8 97 00 00 00       	call   10537 <task_set_ready>
   104a0:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   104a3:	8b 45 08             	mov    0x8(%ebp),%eax
   104a6:	83 c0 2c             	add    $0x2c,%eax
   104a9:	83 ec 08             	sub    $0x8,%esp
   104ac:	50                   	push   %eax
   104ad:	68 90 1d 01 00       	push   $0x11d90
   104b2:	e8 7c 12 00 00       	call   11733 <list_insert_last>
   104b7:	83 c4 10             	add    $0x10,%esp
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     task->stack = pesp;
    // }
    // return 0;
}
   104ba:	90                   	nop
   104bb:	c9                   	leave  
   104bc:	c3                   	ret    

000104bd <task_first_init>:

void task_first_init (void) {
   104bd:	55                   	push   %ebp
   104be:	89 e5                	mov    %esp,%ebp
   104c0:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   104c3:	6a 00                	push   $0x0
   104c5:	6a 00                	push   $0x0
   104c7:	68 51 1a 01 00       	push   $0x11a51
   104cc:	68 9c 1d 01 00       	push   $0x11d9c
   104d1:	e8 42 ff ff ff       	call   10418 <task_init>
   104d6:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   104d9:	a1 38 1e 01 00       	mov    0x11e38,%eax
   104de:	0f b7 c0             	movzwl %ax,%eax
   104e1:	83 ec 0c             	sub    $0xc,%esp
   104e4:	50                   	push   %eax
   104e5:	e8 eb fd ff ff       	call   102d5 <write_tr>
   104ea:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   104ed:	c7 05 80 1d 01 00 9c 	movl   $0x11d9c,0x11d80
   104f4:	1d 01 00 
}
   104f7:	90                   	nop
   104f8:	c9                   	leave  
   104f9:	c3                   	ret    

000104fa <task_first_task>:

task_t * task_first_task (void) {
   104fa:	55                   	push   %ebp
   104fb:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   104fd:	b8 9c 1d 01 00       	mov    $0x11d9c,%eax
}
   10502:	5d                   	pop    %ebp
   10503:	c3                   	ret    

00010504 <task_manager_init>:

void task_manager_init (void) {
   10504:	55                   	push   %ebp
   10505:	89 e5                	mov    %esp,%ebp
   10507:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1050a:	83 ec 0c             	sub    $0xc,%esp
   1050d:	68 84 1d 01 00       	push   $0x11d84
   10512:	e8 97 11 00 00       	call   116ae <list_init>
   10517:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1051a:	83 ec 0c             	sub    $0xc,%esp
   1051d:	68 90 1d 01 00       	push   $0x11d90
   10522:	e8 87 11 00 00       	call   116ae <list_init>
   10527:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   1052a:	c7 05 80 1d 01 00 00 	movl   $0x0,0x11d80
   10531:	00 00 00 
}
   10534:	90                   	nop
   10535:	c9                   	leave  
   10536:	c3                   	ret    

00010537 <task_set_ready>:

void task_set_ready(task_t * task) {
   10537:	55                   	push   %ebp
   10538:	89 e5                	mov    %esp,%ebp
   1053a:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list,&task->run_node);
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	83 c0 24             	add    $0x24,%eax
   10543:	83 ec 08             	sub    $0x8,%esp
   10546:	50                   	push   %eax
   10547:	68 84 1d 01 00       	push   $0x11d84
   1054c:	e8 e2 11 00 00       	call   11733 <list_insert_last>
   10551:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10554:	8b 45 08             	mov    0x8(%ebp),%eax
   10557:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   1055d:	90                   	nop
   1055e:	c9                   	leave  
   1055f:	c3                   	ret    

00010560 <task_set_block>:

void task_set_block(task_t * task) {
   10560:	55                   	push   %ebp
   10561:	89 e5                	mov    %esp,%ebp
   10563:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list,&task->run_node);
   10566:	8b 45 08             	mov    0x8(%ebp),%eax
   10569:	83 c0 24             	add    $0x24,%eax
   1056c:	83 ec 08             	sub    $0x8,%esp
   1056f:	50                   	push   %eax
   10570:	68 84 1d 01 00       	push   $0x11d84
   10575:	e8 96 12 00 00       	call   11810 <list_remove>
   1057a:	83 c4 10             	add    $0x10,%esp

}
   1057d:	90                   	nop
   1057e:	c9                   	leave  
   1057f:	c3                   	ret    

00010580 <task_next_run>:


task_t * task_next_run(void) {
   10580:	55                   	push   %ebp
   10581:	89 e5                	mov    %esp,%ebp
   10583:	83 ec 10             	sub    $0x10,%esp
    list_node_t * task_node = list_first(&task_manager.ready_list);
   10586:	68 84 1d 01 00       	push   $0x11d84
   1058b:	e8 3b fd ff ff       	call   102cb <list_first>
   10590:	83 c4 04             	add    $0x4,%esp
   10593:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   10596:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1059a:	74 08                	je     105a4 <task_next_run+0x24>
   1059c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1059f:	83 e8 24             	sub    $0x24,%eax
   105a2:	eb 05                	jmp    105a9 <task_next_run+0x29>
   105a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105a9:	c9                   	leave  
   105aa:	c3                   	ret    

000105ab <task_current>:

task_t * task_current (void) {
   105ab:	55                   	push   %ebp
   105ac:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   105ae:	a1 80 1d 01 00       	mov    0x11d80,%eax
}
   105b3:	5d                   	pop    %ebp
   105b4:	c3                   	ret    

000105b5 <task_dispatch>:


void task_dispatch(void) {
   105b5:	55                   	push   %ebp
   105b6:	89 e5                	mov    %esp,%ebp
   105b8:	83 ec 18             	sub    $0x18,%esp
    task_t * to = task_next_run();
   105bb:	e8 c0 ff ff ff       	call   10580 <task_next_run>
   105c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if( to != task_manager.curr_task) {
   105c3:	a1 80 1d 01 00       	mov    0x11d80,%eax
   105c8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   105cb:	74 2a                	je     105f7 <task_dispatch+0x42>
        task_t * from = task_current();
   105cd:	e8 d9 ff ff ff       	call   105ab <task_current>
   105d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.curr_task = to;
   105d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105d8:	a3 80 1d 01 00       	mov    %eax,0x11d80
        to->state = TASK_RUNNING;
   105dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105e0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from,to);
   105e6:	83 ec 08             	sub    $0x8,%esp
   105e9:	ff 75 f4             	pushl  -0xc(%ebp)
   105ec:	ff 75 f0             	pushl  -0x10(%ebp)
   105ef:	e8 06 fe ff ff       	call   103fa <task_switch_from_to>
   105f4:	83 c4 10             	add    $0x10,%esp
    }
}
   105f7:	90                   	nop
   105f8:	c9                   	leave  
   105f9:	c3                   	ret    

000105fa <sys_sched_yield>:
int sys_sched_yield(void) {
   105fa:	55                   	push   %ebp
   105fb:	89 e5                	mov    %esp,%ebp
   105fd:	83 ec 18             	sub    $0x18,%esp
    if (list_count(&task_manager.ready_list) > 1) {
   10600:	68 84 1d 01 00       	push   $0x11d84
   10605:	e8 b6 fc ff ff       	call   102c0 <list_count>
   1060a:	83 c4 04             	add    $0x4,%esp
   1060d:	83 f8 01             	cmp    $0x1,%eax
   10610:	7e 29                	jle    1063b <sys_sched_yield+0x41>
        task_t * curr_task = task_current();
   10612:	e8 94 ff ff ff       	call   105ab <task_current>
   10617:	89 45 f4             	mov    %eax,-0xc(%ebp)

        task_set_block(curr_task);
   1061a:	83 ec 0c             	sub    $0xc,%esp
   1061d:	ff 75 f4             	pushl  -0xc(%ebp)
   10620:	e8 3b ff ff ff       	call   10560 <task_set_block>
   10625:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10628:	83 ec 0c             	sub    $0xc,%esp
   1062b:	ff 75 f4             	pushl  -0xc(%ebp)
   1062e:	e8 04 ff ff ff       	call   10537 <task_set_ready>
   10633:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10636:	e8 7a ff ff ff       	call   105b5 <task_dispatch>
    }

    return 0;
   1063b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10640:	c9                   	leave  
   10641:	c3                   	ret    

00010642 <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   10642:	55                   	push   %ebp
   10643:	89 e5                	mov    %esp,%ebp
   10645:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   10648:	8b 45 08             	mov    0x8(%ebp),%eax
   1064b:	c1 e8 10             	shr    $0x10,%eax
   1064e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   10652:	8b 45 08             	mov    0x8(%ebp),%eax
   10655:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10659:	8b 45 0c             	mov    0xc(%ebp),%eax
   1065c:	83 e8 01             	sub    $0x1,%eax
   1065f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10663:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10667:	90                   	nop
   10668:	c9                   	leave  
   10669:	c3                   	ret    

0001066a <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   1066a:	55                   	push   %ebp
   1066b:	89 e5                	mov    %esp,%ebp
   1066d:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   10670:	8b 45 0c             	mov    0xc(%ebp),%eax
   10673:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10676:	8b 45 08             	mov    0x8(%ebp),%eax
   10679:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   1067c:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1067f:	ff 28                	ljmp   *(%eax)
}
   10681:	90                   	nop
   10682:	c9                   	leave  
   10683:	c3                   	ret    

00010684 <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   10684:	55                   	push   %ebp
   10685:	89 e5                	mov    %esp,%ebp
   10687:	83 ec 14             	sub    $0x14,%esp
   1068a:	8b 45 14             	mov    0x14(%ebp),%eax
   1068d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   10691:	8b 45 08             	mov    0x8(%ebp),%eax
   10694:	83 e0 f8             	and    $0xfffffff8,%eax
   10697:	05 40 1e 01 00       	add    $0x11e40,%eax
   1069c:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   1069f:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   106a6:	76 0f                	jbe    106b7 <segment_desc_set+0x33>
		attr |= SEG_G;
   106a8:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   106ae:	8b 45 10             	mov    0x10(%ebp),%eax
   106b1:	c1 e8 0c             	shr    $0xc,%eax
   106b4:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   106b7:	8b 45 10             	mov    0x10(%ebp),%eax
   106ba:	89 c2                	mov    %eax,%edx
   106bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106bf:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   106c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   106c5:	89 c2                	mov    %eax,%edx
   106c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106ca:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   106ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   106d1:	c1 e8 10             	shr    $0x10,%eax
   106d4:	89 c2                	mov    %eax,%edx
   106d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106d9:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   106dc:	8b 45 10             	mov    0x10(%ebp),%eax
   106df:	c1 e8 10             	shr    $0x10,%eax
   106e2:	c1 e0 08             	shl    $0x8,%eax
   106e5:	66 25 00 0f          	and    $0xf00,%ax
   106e9:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   106ed:	89 c2                	mov    %eax,%edx
   106ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106f2:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   106f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   106f9:	c1 e8 18             	shr    $0x18,%eax
   106fc:	89 c2                	mov    %eax,%edx
   106fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10701:	88 50 07             	mov    %dl,0x7(%eax)

}
   10704:	90                   	nop
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <init_gdt>:

void init_gdt(void){
   10707:	55                   	push   %ebp
   10708:	89 e5                	mov    %esp,%ebp
   1070a:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1070d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10714:	eb 19                	jmp    1072f <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10716:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10719:	c1 e0 03             	shl    $0x3,%eax
   1071c:	6a 00                	push   $0x0
   1071e:	6a 00                	push   $0x0
   10720:	6a 00                	push   $0x0
   10722:	50                   	push   %eax
   10723:	e8 5c ff ff ff       	call   10684 <segment_desc_set>
   10728:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1072b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1072f:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10736:	7e de                	jle    10716 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10738:	68 9a 40 00 00       	push   $0x409a
   1073d:	6a ff                	push   $0xffffffff
   1073f:	6a 00                	push   $0x0
   10741:	6a 08                	push   $0x8
   10743:	e8 3c ff ff ff       	call   10684 <segment_desc_set>
   10748:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1074b:	68 92 40 00 00       	push   $0x4092
   10750:	6a ff                	push   $0xffffffff
   10752:	6a 00                	push   $0x0
   10754:	6a 10                	push   $0x10
   10756:	e8 29 ff ff ff       	call   10684 <segment_desc_set>
   1075b:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   1075e:	b8 40 1e 01 00       	mov    $0x11e40,%eax
   10763:	68 00 08 00 00       	push   $0x800
   10768:	50                   	push   %eax
   10769:	e8 d4 fe ff ff       	call   10642 <lgdt>
   1076e:	83 c4 08             	add    $0x8,%esp
}
   10771:	90                   	nop
   10772:	c9                   	leave  
   10773:	c3                   	ret    

00010774 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10774:	55                   	push   %ebp
   10775:	89 e5                	mov    %esp,%ebp
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1077d:	8b 45 14             	mov    0x14(%ebp),%eax
   10780:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10784:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   10788:	8b 45 10             	mov    0x10(%ebp),%eax
   1078b:	89 c2                	mov    %eax,%edx
   1078d:	8b 45 08             	mov    0x8(%ebp),%eax
   10790:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10793:	8b 45 08             	mov    0x8(%ebp),%eax
   10796:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1079a:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1079e:	8b 45 08             	mov    0x8(%ebp),%eax
   107a1:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   107a5:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   107a9:	8b 45 10             	mov    0x10(%ebp),%eax
   107ac:	c1 e8 10             	shr    $0x10,%eax
   107af:	89 c2                	mov    %eax,%edx
   107b1:	8b 45 08             	mov    0x8(%ebp),%eax
   107b4:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   107b8:	90                   	nop
   107b9:	c9                   	leave  
   107ba:	c3                   	ret    

000107bb <cpu_init>:

void cpu_init (void){
   107bb:	55                   	push   %ebp
   107bc:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   107be:	e8 44 ff ff ff       	call   10707 <init_gdt>
}
   107c3:	90                   	nop
   107c4:	5d                   	pop    %ebp
   107c5:	c3                   	ret    

000107c6 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   107c6:	55                   	push   %ebp
   107c7:	89 e5                	mov    %esp,%ebp
   107c9:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   107cc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   107d3:	eb 26                	jmp    107fb <gdt_alloc_desc+0x35>

        segment_desc_t * desc = gdt_table + i;
   107d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107d8:	c1 e0 03             	shl    $0x3,%eax
   107db:	05 40 1e 01 00       	add    $0x11e40,%eax
   107e0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   107e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   107e6:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   107ea:	66 85 c0             	test   %ax,%ax
   107ed:	75 08                	jne    107f7 <gdt_alloc_desc+0x31>
            return i * sizeof(segment_desc_t);
   107ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107f2:	c1 e0 03             	shl    $0x3,%eax
   107f5:	eb 12                	jmp    10809 <gdt_alloc_desc+0x43>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   107f7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   107fb:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10802:	7e d1                	jle    107d5 <gdt_alloc_desc+0xf>
        }
    }
    return -1;
   10804:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10809:	c9                   	leave  
   1080a:	c3                   	ret    

0001080b <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   1080b:	55                   	push   %ebp
   1080c:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   1080e:	8b 45 08             	mov    0x8(%ebp),%eax
   10811:	6a 00                	push   $0x0
   10813:	50                   	push   %eax
   10814:	e8 51 fe ff ff       	call   1066a <far_jump>
   10819:	83 c4 08             	add    $0x8,%esp
   1081c:	90                   	nop
   1081d:	c9                   	leave  
   1081e:	c3                   	ret    

0001081f <inb>:
static inline uint8_t inb(uint16_t port) {
   1081f:	55                   	push   %ebp
   10820:	89 e5                	mov    %esp,%ebp
   10822:	83 ec 14             	sub    $0x14,%esp
   10825:	8b 45 08             	mov    0x8(%ebp),%eax
   10828:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   1082c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10830:	89 c2                	mov    %eax,%edx
   10832:	ec                   	in     (%dx),%al
   10833:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10836:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1083a:	c9                   	leave  
   1083b:	c3                   	ret    

0001083c <outb>:
static inline void outb(uint16_t port,uint8_t data){
   1083c:	55                   	push   %ebp
   1083d:	89 e5                	mov    %esp,%ebp
   1083f:	83 ec 08             	sub    $0x8,%esp
   10842:	8b 55 08             	mov    0x8(%ebp),%edx
   10845:	8b 45 0c             	mov    0xc(%ebp),%eax
   10848:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1084c:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   1084f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10853:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10857:	ee                   	out    %al,(%dx)
}
   10858:	90                   	nop
   10859:	c9                   	leave  
   1085a:	c3                   	ret    

0001085b <cli>:
static inline void cli(void){
   1085b:	55                   	push   %ebp
   1085c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   1085e:	fa                   	cli    
}
   1085f:	90                   	nop
   10860:	5d                   	pop    %ebp
   10861:	c3                   	ret    

00010862 <sti>:
static inline void sti(void){
   10862:	55                   	push   %ebp
   10863:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10865:	fb                   	sti    
}
   10866:	90                   	nop
   10867:	5d                   	pop    %ebp
   10868:	c3                   	ret    

00010869 <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   10869:	55                   	push   %ebp
   1086a:	89 e5                	mov    %esp,%ebp
   1086c:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   1086f:	8b 45 08             	mov    0x8(%ebp),%eax
   10872:	c1 e8 10             	shr    $0x10,%eax
   10875:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10879:	8b 45 08             	mov    0x8(%ebp),%eax
   1087c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10880:	8b 45 0c             	mov    0xc(%ebp),%eax
   10883:	83 e8 01             	sub    $0x1,%eax
   10886:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   1088a:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1088e:	90                   	nop
   1088f:	c9                   	leave  
   10890:	c3                   	ret    

00010891 <hlt>:
static inline void hlt (void) {
   10891:	55                   	push   %ebp
   10892:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10894:	f4                   	hlt    
}
   10895:	90                   	nop
   10896:	5d                   	pop    %ebp
   10897:	c3                   	ret    

00010898 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   10898:	55                   	push   %ebp
   10899:	89 e5                	mov    %esp,%ebp
   1089b:	57                   	push   %edi
   1089c:	56                   	push   %esi
   1089d:	53                   	push   %ebx
   1089e:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   108a1:	8b 45 08             	mov    0x8(%ebp),%eax
   108a4:	8b 50 34             	mov    0x34(%eax),%edx
   108a7:	8b 45 08             	mov    0x8(%ebp),%eax
   108aa:	8b 40 30             	mov    0x30(%eax),%eax
   108ad:	83 ec 04             	sub    $0x4,%esp
   108b0:	52                   	push   %edx
   108b1:	50                   	push   %eax
   108b2:	68 68 1a 01 00       	push   $0x11a68
   108b7:	e8 8a 10 00 00       	call   11946 <log_printf>
   108bc:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   108bf:	8b 45 08             	mov    0x8(%ebp),%eax
   108c2:	8b 38                	mov    (%eax),%edi
   108c4:	8b 45 08             	mov    0x8(%ebp),%eax
   108c7:	8b 70 04             	mov    0x4(%eax),%esi
   108ca:	8b 45 08             	mov    0x8(%ebp),%eax
   108cd:	8b 58 0c             	mov    0xc(%eax),%ebx
   108d0:	8b 45 08             	mov    0x8(%ebp),%eax
   108d3:	8b 48 08             	mov    0x8(%eax),%ecx
   108d6:	8b 45 08             	mov    0x8(%ebp),%eax
   108d9:	8b 50 0c             	mov    0xc(%eax),%edx
   108dc:	8b 45 08             	mov    0x8(%ebp),%eax
   108df:	8b 40 3c             	mov    0x3c(%eax),%eax
   108e2:	83 ec 04             	sub    $0x4,%esp
   108e5:	57                   	push   %edi
   108e6:	56                   	push   %esi
   108e7:	53                   	push   %ebx
   108e8:	51                   	push   %ecx
   108e9:	52                   	push   %edx
   108ea:	50                   	push   %eax
   108eb:	68 80 1a 01 00       	push   $0x11a80
   108f0:	e8 51 10 00 00       	call   11946 <log_printf>
   108f5:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   108f8:	8b 45 08             	mov    0x8(%ebp),%eax
   108fb:	8b 48 1c             	mov    0x1c(%eax),%ecx
   108fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10901:	8b 40 18             	mov    0x18(%eax),%eax
   10904:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10907:	8b 45 08             	mov    0x8(%ebp),%eax
   1090a:	8b 58 14             	mov    0x14(%eax),%ebx
   1090d:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10910:	8b 45 08             	mov    0x8(%ebp),%eax
   10913:	8b 78 10             	mov    0x10(%eax),%edi
   10916:	8b 45 08             	mov    0x8(%ebp),%eax
   10919:	8b 70 24             	mov    0x24(%eax),%esi
   1091c:	8b 45 08             	mov    0x8(%ebp),%eax
   1091f:	8b 58 28             	mov    0x28(%eax),%ebx
   10922:	8b 45 08             	mov    0x8(%ebp),%eax
   10925:	8b 50 20             	mov    0x20(%eax),%edx
   10928:	8b 45 08             	mov    0x8(%ebp),%eax
   1092b:	8b 40 2c             	mov    0x2c(%eax),%eax
   1092e:	83 ec 0c             	sub    $0xc,%esp
   10931:	51                   	push   %ecx
   10932:	ff 75 e4             	pushl  -0x1c(%ebp)
   10935:	ff 75 e0             	pushl  -0x20(%ebp)
   10938:	57                   	push   %edi
   10939:	56                   	push   %esi
   1093a:	53                   	push   %ebx
   1093b:	52                   	push   %edx
   1093c:	50                   	push   %eax
   1093d:	68 ac 1a 01 00       	push   $0x11aac
   10942:	e8 ff 0f 00 00       	call   11946 <log_printf>
   10947:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   1094a:	8b 45 08             	mov    0x8(%ebp),%eax
   1094d:	8b 50 40             	mov    0x40(%eax),%edx
   10950:	8b 45 08             	mov    0x8(%ebp),%eax
   10953:	8b 40 38             	mov    0x38(%eax),%eax
   10956:	83 ec 04             	sub    $0x4,%esp
   10959:	52                   	push   %edx
   1095a:	50                   	push   %eax
   1095b:	68 f5 1a 01 00       	push   $0x11af5
   10960:	e8 e1 0f 00 00       	call   11946 <log_printf>
   10965:	83 c4 10             	add    $0x10,%esp
}
   10968:	90                   	nop
   10969:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1096c:	5b                   	pop    %ebx
   1096d:	5e                   	pop    %esi
   1096e:	5f                   	pop    %edi
   1096f:	5d                   	pop    %ebp
   10970:	c3                   	ret    

00010971 <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   10971:	55                   	push   %ebp
   10972:	89 e5                	mov    %esp,%ebp
   10974:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10977:	83 ec 0c             	sub    $0xc,%esp
   1097a:	68 0b 1b 01 00       	push   $0x11b0b
   1097f:	e8 c2 0f 00 00       	call   11946 <log_printf>
   10984:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10987:	83 ec 08             	sub    $0x8,%esp
   1098a:	ff 75 0c             	pushl  0xc(%ebp)
   1098d:	68 28 1b 01 00       	push   $0x11b28
   10992:	e8 af 0f 00 00       	call   11946 <log_printf>
   10997:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   1099a:	83 ec 0c             	sub    $0xc,%esp
   1099d:	ff 75 08             	pushl  0x8(%ebp)
   109a0:	e8 f3 fe ff ff       	call   10898 <dump_core_regs>
   109a5:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   109a8:	e8 e4 fe ff ff       	call   10891 <hlt>
   109ad:	eb f9                	jmp    109a8 <do_default_handler+0x37>

000109af <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   109af:	55                   	push   %ebp
   109b0:	89 e5                	mov    %esp,%ebp
   109b2:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   109b5:	83 ec 08             	sub    $0x8,%esp
   109b8:	68 42 1b 01 00       	push   $0x11b42
   109bd:	ff 75 08             	pushl  0x8(%ebp)
   109c0:	e8 ac ff ff ff       	call   10971 <do_default_handler>
   109c5:	83 c4 10             	add    $0x10,%esp

}
   109c8:	90                   	nop
   109c9:	c9                   	leave  
   109ca:	c3                   	ret    

000109cb <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   109cb:	55                   	push   %ebp
   109cc:	89 e5                	mov    %esp,%ebp
   109ce:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   109d1:	83 ec 08             	sub    $0x8,%esp
   109d4:	68 54 1b 01 00       	push   $0x11b54
   109d9:	ff 75 08             	pushl  0x8(%ebp)
   109dc:	e8 90 ff ff ff       	call   10971 <do_default_handler>
   109e1:	83 c4 10             	add    $0x10,%esp
}
   109e4:	90                   	nop
   109e5:	c9                   	leave  
   109e6:	c3                   	ret    

000109e7 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   109e7:	55                   	push   %ebp
   109e8:	89 e5                	mov    %esp,%ebp
   109ea:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   109ed:	83 ec 08             	sub    $0x8,%esp
   109f0:	68 65 1b 01 00       	push   $0x11b65
   109f5:	ff 75 08             	pushl  0x8(%ebp)
   109f8:	e8 74 ff ff ff       	call   10971 <do_default_handler>
   109fd:	83 c4 10             	add    $0x10,%esp
}
   10a00:	90                   	nop
   10a01:	c9                   	leave  
   10a02:	c3                   	ret    

00010a03 <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   10a03:	55                   	push   %ebp
   10a04:	89 e5                	mov    %esp,%ebp
   10a06:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   10a09:	83 ec 08             	sub    $0x8,%esp
   10a0c:	68 75 1b 01 00       	push   $0x11b75
   10a11:	ff 75 08             	pushl  0x8(%ebp)
   10a14:	e8 58 ff ff ff       	call   10971 <do_default_handler>
   10a19:	83 c4 10             	add    $0x10,%esp
}
   10a1c:	90                   	nop
   10a1d:	c9                   	leave  
   10a1e:	c3                   	ret    

00010a1f <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   10a1f:	55                   	push   %ebp
   10a20:	89 e5                	mov    %esp,%ebp
   10a22:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10a25:	83 ec 08             	sub    $0x8,%esp
   10a28:	68 84 1b 01 00       	push   $0x11b84
   10a2d:	ff 75 08             	pushl  0x8(%ebp)
   10a30:	e8 3c ff ff ff       	call   10971 <do_default_handler>
   10a35:	83 c4 10             	add    $0x10,%esp
}
   10a38:	90                   	nop
   10a39:	c9                   	leave  
   10a3a:	c3                   	ret    

00010a3b <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10a3b:	55                   	push   %ebp
   10a3c:	89 e5                	mov    %esp,%ebp
   10a3e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   10a41:	83 ec 08             	sub    $0x8,%esp
   10a44:	68 90 1b 01 00       	push   $0x11b90
   10a49:	ff 75 08             	pushl  0x8(%ebp)
   10a4c:	e8 20 ff ff ff       	call   10971 <do_default_handler>
   10a51:	83 c4 10             	add    $0x10,%esp
}
   10a54:	90                   	nop
   10a55:	c9                   	leave  
   10a56:	c3                   	ret    

00010a57 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10a57:	55                   	push   %ebp
   10a58:	89 e5                	mov    %esp,%ebp
   10a5a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10a5d:	83 ec 08             	sub    $0x8,%esp
   10a60:	68 9a 1b 01 00       	push   $0x11b9a
   10a65:	ff 75 08             	pushl  0x8(%ebp)
   10a68:	e8 04 ff ff ff       	call   10971 <do_default_handler>
   10a6d:	83 c4 10             	add    $0x10,%esp
}
   10a70:	90                   	nop
   10a71:	c9                   	leave  
   10a72:	c3                   	ret    

00010a73 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   10a73:	55                   	push   %ebp
   10a74:	89 e5                	mov    %esp,%ebp
   10a76:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10a79:	83 ec 08             	sub    $0x8,%esp
   10a7c:	68 b0 1b 01 00       	push   $0x11bb0
   10a81:	ff 75 08             	pushl  0x8(%ebp)
   10a84:	e8 e8 fe ff ff       	call   10971 <do_default_handler>
   10a89:	83 c4 10             	add    $0x10,%esp
}
   10a8c:	90                   	nop
   10a8d:	c9                   	leave  
   10a8e:	c3                   	ret    

00010a8f <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   10a8f:	55                   	push   %ebp
   10a90:	89 e5                	mov    %esp,%ebp
   10a92:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   10a95:	83 ec 08             	sub    $0x8,%esp
   10a98:	68 c0 1b 01 00       	push   $0x11bc0
   10a9d:	ff 75 08             	pushl  0x8(%ebp)
   10aa0:	e8 cc fe ff ff       	call   10971 <do_default_handler>
   10aa5:	83 c4 10             	add    $0x10,%esp
}
   10aa8:	90                   	nop
   10aa9:	c9                   	leave  
   10aaa:	c3                   	ret    

00010aab <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10aab:	55                   	push   %ebp
   10aac:	89 e5                	mov    %esp,%ebp
   10aae:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   10ab1:	83 ec 08             	sub    $0x8,%esp
   10ab4:	68 d6 1b 01 00       	push   $0x11bd6
   10ab9:	ff 75 08             	pushl  0x8(%ebp)
   10abc:	e8 b0 fe ff ff       	call   10971 <do_default_handler>
   10ac1:	83 c4 10             	add    $0x10,%esp
}
   10ac4:	90                   	nop
   10ac5:	c9                   	leave  
   10ac6:	c3                   	ret    

00010ac7 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   10ac7:	55                   	push   %ebp
   10ac8:	89 e5                	mov    %esp,%ebp
   10aca:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   10acd:	83 ec 08             	sub    $0x8,%esp
   10ad0:	68 e4 1b 01 00       	push   $0x11be4
   10ad5:	ff 75 08             	pushl  0x8(%ebp)
   10ad8:	e8 94 fe ff ff       	call   10971 <do_default_handler>
   10add:	83 c4 10             	add    $0x10,%esp
}
   10ae0:	90                   	nop
   10ae1:	c9                   	leave  
   10ae2:	c3                   	ret    

00010ae3 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   10ae3:	55                   	push   %ebp
   10ae4:	89 e5                	mov    %esp,%ebp
   10ae6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10ae9:	83 ec 08             	sub    $0x8,%esp
   10aec:	68 f0 1b 01 00       	push   $0x11bf0
   10af1:	ff 75 08             	pushl  0x8(%ebp)
   10af4:	e8 78 fe ff ff       	call   10971 <do_default_handler>
   10af9:	83 c4 10             	add    $0x10,%esp
}
   10afc:	90                   	nop
   10afd:	c9                   	leave  
   10afe:	c3                   	ret    

00010aff <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   10aff:	55                   	push   %ebp
   10b00:	89 e5                	mov    %esp,%ebp
   10b02:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   10b05:	83 ec 08             	sub    $0x8,%esp
   10b08:	68 05 1c 01 00       	push   $0x11c05
   10b0d:	ff 75 08             	pushl  0x8(%ebp)
   10b10:	e8 5c fe ff ff       	call   10971 <do_default_handler>
   10b15:	83 c4 10             	add    $0x10,%esp
}
   10b18:	90                   	nop
   10b19:	c9                   	leave  
   10b1a:	c3                   	ret    

00010b1b <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   10b1b:	55                   	push   %ebp
   10b1c:	89 e5                	mov    %esp,%ebp
   10b1e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   10b21:	83 ec 08             	sub    $0x8,%esp
   10b24:	68 1a 1c 01 00       	push   $0x11c1a
   10b29:	ff 75 08             	pushl  0x8(%ebp)
   10b2c:	e8 40 fe ff ff       	call   10971 <do_default_handler>
   10b31:	83 c4 10             	add    $0x10,%esp
}
   10b34:	90                   	nop
   10b35:	c9                   	leave  
   10b36:	c3                   	ret    

00010b37 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10b37:	55                   	push   %ebp
   10b38:	89 e5                	mov    %esp,%ebp
   10b3a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10b3d:	83 ec 08             	sub    $0x8,%esp
   10b40:	68 2e 1c 01 00       	push   $0x11c2e
   10b45:	ff 75 08             	pushl  0x8(%ebp)
   10b48:	e8 24 fe ff ff       	call   10971 <do_default_handler>
   10b4d:	83 c4 10             	add    $0x10,%esp
}
   10b50:	90                   	nop
   10b51:	c9                   	leave  
   10b52:	c3                   	ret    

00010b53 <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   10b53:	55                   	push   %ebp
   10b54:	89 e5                	mov    %esp,%ebp
   10b56:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10b59:	83 ec 08             	sub    $0x8,%esp
   10b5c:	68 3a 1c 01 00       	push   $0x11c3a
   10b61:	ff 75 08             	pushl  0x8(%ebp)
   10b64:	e8 08 fe ff ff       	call   10971 <do_default_handler>
   10b69:	83 c4 10             	add    $0x10,%esp
}
   10b6c:	90                   	nop
   10b6d:	c9                   	leave  
   10b6e:	c3                   	ret    

00010b6f <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   10b6f:	55                   	push   %ebp
   10b70:	89 e5                	mov    %esp,%ebp
   10b72:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10b75:	83 ec 08             	sub    $0x8,%esp
   10b78:	68 58 1c 01 00       	push   $0x11c58
   10b7d:	ff 75 08             	pushl  0x8(%ebp)
   10b80:	e8 ec fd ff ff       	call   10971 <do_default_handler>
   10b85:	83 c4 10             	add    $0x10,%esp
}
   10b88:	90                   	nop
   10b89:	c9                   	leave  
   10b8a:	c3                   	ret    

00010b8b <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10b8b:	55                   	push   %ebp
   10b8c:	89 e5                	mov    %esp,%ebp
   10b8e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   10b91:	83 ec 08             	sub    $0x8,%esp
   10b94:	68 69 1c 01 00       	push   $0x11c69
   10b99:	ff 75 08             	pushl  0x8(%ebp)
   10b9c:	e8 d0 fd ff ff       	call   10971 <do_default_handler>
   10ba1:	83 c4 10             	add    $0x10,%esp
}
   10ba4:	90                   	nop
   10ba5:	c9                   	leave  
   10ba6:	c3                   	ret    

00010ba7 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10ba7:	55                   	push   %ebp
   10ba8:	89 e5                	mov    %esp,%ebp
   10baa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10bad:	83 ec 08             	sub    $0x8,%esp
   10bb0:	68 78 1c 01 00       	push   $0x11c78
   10bb5:	ff 75 08             	pushl  0x8(%ebp)
   10bb8:	e8 b4 fd ff ff       	call   10971 <do_default_handler>
   10bbd:	83 c4 10             	add    $0x10,%esp
}
   10bc0:	90                   	nop
   10bc1:	c9                   	leave  
   10bc2:	c3                   	ret    

00010bc3 <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   10bc3:	55                   	push   %ebp
   10bc4:	89 e5                	mov    %esp,%ebp
   10bc6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10bc9:	83 ec 08             	sub    $0x8,%esp
   10bcc:	68 97 1c 01 00       	push   $0x11c97
   10bd1:	ff 75 08             	pushl  0x8(%ebp)
   10bd4:	e8 98 fd ff ff       	call   10971 <do_default_handler>
   10bd9:	83 c4 10             	add    $0x10,%esp
}
   10bdc:	90                   	nop
   10bdd:	c9                   	leave  
   10bde:	c3                   	ret    

00010bdf <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   10bdf:	55                   	push   %ebp
   10be0:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10be2:	6a 11                	push   $0x11
   10be4:	6a 20                	push   $0x20
   10be6:	e8 51 fc ff ff       	call   1083c <outb>
   10beb:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10bee:	6a 20                	push   $0x20
   10bf0:	6a 21                	push   $0x21
   10bf2:	e8 45 fc ff ff       	call   1083c <outb>
   10bf7:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10bfa:	6a 04                	push   $0x4
   10bfc:	6a 21                	push   $0x21
   10bfe:	e8 39 fc ff ff       	call   1083c <outb>
   10c03:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10c06:	6a 01                	push   $0x1
   10c08:	6a 21                	push   $0x21
   10c0a:	e8 2d fc ff ff       	call   1083c <outb>
   10c0f:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10c12:	6a 11                	push   $0x11
   10c14:	68 a0 00 00 00       	push   $0xa0
   10c19:	e8 1e fc ff ff       	call   1083c <outb>
   10c1e:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10c21:	6a 28                	push   $0x28
   10c23:	68 a1 00 00 00       	push   $0xa1
   10c28:	e8 0f fc ff ff       	call   1083c <outb>
   10c2d:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10c30:	6a 02                	push   $0x2
   10c32:	68 a1 00 00 00       	push   $0xa1
   10c37:	e8 00 fc ff ff       	call   1083c <outb>
   10c3c:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10c3f:	6a 01                	push   $0x1
   10c41:	68 a1 00 00 00       	push   $0xa1
   10c46:	e8 f1 fb ff ff       	call   1083c <outb>
   10c4b:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10c4e:	68 fb 00 00 00       	push   $0xfb
   10c53:	6a 21                	push   $0x21
   10c55:	e8 e2 fb ff ff       	call   1083c <outb>
   10c5a:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10c5d:	68 ff 00 00 00       	push   $0xff
   10c62:	68 a1 00 00 00       	push   $0xa1
   10c67:	e8 d0 fb ff ff       	call   1083c <outb>
   10c6c:	83 c4 08             	add    $0x8,%esp
}
   10c6f:	90                   	nop
   10c70:	c9                   	leave  
   10c71:	c3                   	ret    

00010c72 <irq_init>:


void irq_init(void){ 
   10c72:	55                   	push   %ebp
   10c73:	89 e5                	mov    %esp,%ebp
   10c75:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10c78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10c7f:	eb 25                	jmp    10ca6 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10c81:	ba 28 00 01 00       	mov    $0x10028,%edx
   10c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c89:	c1 e0 03             	shl    $0x3,%eax
   10c8c:	05 40 26 01 00       	add    $0x12640,%eax
   10c91:	68 00 8e 00 00       	push   $0x8e00
   10c96:	52                   	push   %edx
   10c97:	6a 08                	push   $0x8
   10c99:	50                   	push   %eax
   10c9a:	e8 d5 fa ff ff       	call   10774 <gate_desc_set>
   10c9f:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10ca2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10ca6:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10caa:	7e d5                	jle    10c81 <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10cac:	83 ec 08             	sub    $0x8,%esp
   10caf:	68 47 00 01 00       	push   $0x10047
   10cb4:	6a 00                	push   $0x0
   10cb6:	e8 65 01 00 00       	call   10e20 <irq_install>
   10cbb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10cbe:	83 ec 08             	sub    $0x8,%esp
   10cc1:	68 66 00 01 00       	push   $0x10066
   10cc6:	6a 01                	push   $0x1
   10cc8:	e8 53 01 00 00       	call   10e20 <irq_install>
   10ccd:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10cd0:	83 ec 08             	sub    $0x8,%esp
   10cd3:	68 85 00 01 00       	push   $0x10085
   10cd8:	6a 02                	push   $0x2
   10cda:	e8 41 01 00 00       	call   10e20 <irq_install>
   10cdf:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10ce2:	83 ec 08             	sub    $0x8,%esp
   10ce5:	68 a4 00 01 00       	push   $0x100a4
   10cea:	6a 03                	push   $0x3
   10cec:	e8 2f 01 00 00       	call   10e20 <irq_install>
   10cf1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10cf4:	83 ec 08             	sub    $0x8,%esp
   10cf7:	68 c3 00 01 00       	push   $0x100c3
   10cfc:	6a 04                	push   $0x4
   10cfe:	e8 1d 01 00 00       	call   10e20 <irq_install>
   10d03:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10d06:	83 ec 08             	sub    $0x8,%esp
   10d09:	68 e2 00 01 00       	push   $0x100e2
   10d0e:	6a 05                	push   $0x5
   10d10:	e8 0b 01 00 00       	call   10e20 <irq_install>
   10d15:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10d18:	83 ec 08             	sub    $0x8,%esp
   10d1b:	68 01 01 01 00       	push   $0x10101
   10d20:	6a 06                	push   $0x6
   10d22:	e8 f9 00 00 00       	call   10e20 <irq_install>
   10d27:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10d2a:	83 ec 08             	sub    $0x8,%esp
   10d2d:	68 20 01 01 00       	push   $0x10120
   10d32:	6a 07                	push   $0x7
   10d34:	e8 e7 00 00 00       	call   10e20 <irq_install>
   10d39:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10d3c:	83 ec 08             	sub    $0x8,%esp
   10d3f:	68 3f 01 01 00       	push   $0x1013f
   10d44:	6a 08                	push   $0x8
   10d46:	e8 d5 00 00 00       	call   10e20 <irq_install>
   10d4b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10d4e:	83 ec 08             	sub    $0x8,%esp
   10d51:	68 5c 01 01 00       	push   $0x1015c
   10d56:	6a 0a                	push   $0xa
   10d58:	e8 c3 00 00 00       	call   10e20 <irq_install>
   10d5d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10d60:	83 ec 08             	sub    $0x8,%esp
   10d63:	68 79 01 01 00       	push   $0x10179
   10d68:	6a 0b                	push   $0xb
   10d6a:	e8 b1 00 00 00       	call   10e20 <irq_install>
   10d6f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10d72:	83 ec 08             	sub    $0x8,%esp
   10d75:	68 96 01 01 00       	push   $0x10196
   10d7a:	6a 0c                	push   $0xc
   10d7c:	e8 9f 00 00 00       	call   10e20 <irq_install>
   10d81:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10d84:	83 ec 08             	sub    $0x8,%esp
   10d87:	68 b3 01 01 00       	push   $0x101b3
   10d8c:	6a 0d                	push   $0xd
   10d8e:	e8 8d 00 00 00       	call   10e20 <irq_install>
   10d93:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10d96:	83 ec 08             	sub    $0x8,%esp
   10d99:	68 d0 01 01 00       	push   $0x101d0
   10d9e:	6a 0e                	push   $0xe
   10da0:	e8 7b 00 00 00       	call   10e20 <irq_install>
   10da5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10da8:	83 ec 08             	sub    $0x8,%esp
   10dab:	68 ed 01 01 00       	push   $0x101ed
   10db0:	6a 10                	push   $0x10
   10db2:	e8 69 00 00 00       	call   10e20 <irq_install>
   10db7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10dba:	83 ec 08             	sub    $0x8,%esp
   10dbd:	68 0c 02 01 00       	push   $0x1020c
   10dc2:	6a 11                	push   $0x11
   10dc4:	e8 57 00 00 00       	call   10e20 <irq_install>
   10dc9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10dcc:	83 ec 08             	sub    $0x8,%esp
   10dcf:	68 29 02 01 00       	push   $0x10229
   10dd4:	6a 12                	push   $0x12
   10dd6:	e8 45 00 00 00       	call   10e20 <irq_install>
   10ddb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10dde:	83 ec 08             	sub    $0x8,%esp
   10de1:	68 48 02 01 00       	push   $0x10248
   10de6:	6a 13                	push   $0x13
   10de8:	e8 33 00 00 00       	call   10e20 <irq_install>
   10ded:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10df0:	83 ec 08             	sub    $0x8,%esp
   10df3:	68 67 02 01 00       	push   $0x10267
   10df8:	6a 14                	push   $0x14
   10dfa:	e8 21 00 00 00       	call   10e20 <irq_install>
   10dff:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10e02:	b8 40 26 01 00       	mov    $0x12640,%eax
   10e07:	83 ec 08             	sub    $0x8,%esp
   10e0a:	68 00 04 00 00       	push   $0x400
   10e0f:	50                   	push   %eax
   10e10:	e8 54 fa ff ff       	call   10869 <lidt>
   10e15:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10e18:	e8 c2 fd ff ff       	call   10bdf <init_pic>
}
   10e1d:	90                   	nop
   10e1e:	c9                   	leave  
   10e1f:	c3                   	ret    

00010e20 <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   10e20:	55                   	push   %ebp
   10e21:	89 e5                	mov    %esp,%ebp
   10e23:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10e26:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10e2a:	7e 07                	jle    10e33 <irq_install+0x13>
        return -1;
   10e2c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10e31:	eb 25                	jmp    10e58 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   10e33:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e36:	8b 55 08             	mov    0x8(%ebp),%edx
   10e39:	c1 e2 03             	shl    $0x3,%edx
   10e3c:	81 c2 40 26 01 00    	add    $0x12640,%edx
   10e42:	68 00 8e 00 00       	push   $0x8e00
   10e47:	50                   	push   %eax
   10e48:	6a 08                	push   $0x8
   10e4a:	52                   	push   %edx
   10e4b:	e8 24 f9 ff ff       	call   10774 <gate_desc_set>
   10e50:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   10e53:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e58:	c9                   	leave  
   10e59:	c3                   	ret    

00010e5a <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   10e5a:	55                   	push   %ebp
   10e5b:	89 e5                	mov    %esp,%ebp
   10e5d:	53                   	push   %ebx
   10e5e:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10e61:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e65:	7e 78                	jle    10edf <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10e67:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10e6b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e6f:	7f 32                	jg     10ea3 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10e71:	6a 21                	push   $0x21
   10e73:	e8 a7 f9 ff ff       	call   1081f <inb>
   10e78:	83 c4 04             	add    $0x4,%esp
   10e7b:	89 c2                	mov    %eax,%edx
   10e7d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e80:	bb 01 00 00 00       	mov    $0x1,%ebx
   10e85:	89 c1                	mov    %eax,%ecx
   10e87:	d3 e3                	shl    %cl,%ebx
   10e89:	89 d8                	mov    %ebx,%eax
   10e8b:	f7 d0                	not    %eax
   10e8d:	21 d0                	and    %edx,%eax
   10e8f:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10e92:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e96:	50                   	push   %eax
   10e97:	6a 21                	push   $0x21
   10e99:	e8 9e f9 ff ff       	call   1083c <outb>
   10e9e:	83 c4 08             	add    $0x8,%esp
   10ea1:	eb 3d                	jmp    10ee0 <irq_enable+0x86>
    }else{
        irq_num -= 8;
   10ea3:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10ea7:	68 a1 00 00 00       	push   $0xa1
   10eac:	e8 6e f9 ff ff       	call   1081f <inb>
   10eb1:	83 c4 04             	add    $0x4,%esp
   10eb4:	89 c2                	mov    %eax,%edx
   10eb6:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb9:	bb 01 00 00 00       	mov    $0x1,%ebx
   10ebe:	89 c1                	mov    %eax,%ecx
   10ec0:	d3 e3                	shl    %cl,%ebx
   10ec2:	89 d8                	mov    %ebx,%eax
   10ec4:	f7 d0                	not    %eax
   10ec6:	21 d0                	and    %edx,%eax
   10ec8:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10ecb:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10ecf:	50                   	push   %eax
   10ed0:	68 a1 00 00 00       	push   $0xa1
   10ed5:	e8 62 f9 ff ff       	call   1083c <outb>
   10eda:	83 c4 08             	add    $0x8,%esp
   10edd:	eb 01                	jmp    10ee0 <irq_enable+0x86>
        return;
   10edf:	90                   	nop
    }
}
   10ee0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ee3:	c9                   	leave  
   10ee4:	c3                   	ret    

00010ee5 <irq_disable>:
void irq_disable (int irq_num) {
   10ee5:	55                   	push   %ebp
   10ee6:	89 e5                	mov    %esp,%ebp
   10ee8:	53                   	push   %ebx
   10ee9:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10eec:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ef0:	7e 74                	jle    10f66 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10ef2:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10ef6:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10efa:	7f 30                	jg     10f2c <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10efc:	6a 21                	push   $0x21
   10efe:	e8 1c f9 ff ff       	call   1081f <inb>
   10f03:	83 c4 04             	add    $0x4,%esp
   10f06:	89 c3                	mov    %eax,%ebx
   10f08:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0b:	ba 01 00 00 00       	mov    $0x1,%edx
   10f10:	89 c1                	mov    %eax,%ecx
   10f12:	d3 e2                	shl    %cl,%edx
   10f14:	89 d0                	mov    %edx,%eax
   10f16:	09 d8                	or     %ebx,%eax
   10f18:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10f1b:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f1f:	50                   	push   %eax
   10f20:	6a 21                	push   $0x21
   10f22:	e8 15 f9 ff ff       	call   1083c <outb>
   10f27:	83 c4 08             	add    $0x8,%esp
   10f2a:	eb 3b                	jmp    10f67 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10f2c:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10f30:	68 a1 00 00 00       	push   $0xa1
   10f35:	e8 e5 f8 ff ff       	call   1081f <inb>
   10f3a:	83 c4 04             	add    $0x4,%esp
   10f3d:	89 c3                	mov    %eax,%ebx
   10f3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f42:	ba 01 00 00 00       	mov    $0x1,%edx
   10f47:	89 c1                	mov    %eax,%ecx
   10f49:	d3 e2                	shl    %cl,%edx
   10f4b:	89 d0                	mov    %edx,%eax
   10f4d:	09 d8                	or     %ebx,%eax
   10f4f:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10f52:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f56:	50                   	push   %eax
   10f57:	68 a1 00 00 00       	push   $0xa1
   10f5c:	e8 db f8 ff ff       	call   1083c <outb>
   10f61:	83 c4 08             	add    $0x8,%esp
   10f64:	eb 01                	jmp    10f67 <irq_disable+0x82>
        return;
   10f66:	90                   	nop
    }
}
   10f67:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f6a:	c9                   	leave  
   10f6b:	c3                   	ret    

00010f6c <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   10f6c:	55                   	push   %ebp
   10f6d:	89 e5                	mov    %esp,%ebp
    cli();
   10f6f:	e8 e7 f8 ff ff       	call   1085b <cli>
}
   10f74:	90                   	nop
   10f75:	5d                   	pop    %ebp
   10f76:	c3                   	ret    

00010f77 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   10f77:	55                   	push   %ebp
   10f78:	89 e5                	mov    %esp,%ebp
    sti();
   10f7a:	e8 e3 f8 ff ff       	call   10862 <sti>
}
   10f7f:	90                   	nop
   10f80:	5d                   	pop    %ebp
   10f81:	c3                   	ret    

00010f82 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10f82:	55                   	push   %ebp
   10f83:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   10f85:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   10f89:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f8d:	7e 0f                	jle    10f9e <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   10f8f:	6a 20                	push   $0x20
   10f91:	68 a0 00 00 00       	push   $0xa0
   10f96:	e8 a1 f8 ff ff       	call   1083c <outb>
   10f9b:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10f9e:	6a 20                	push   $0x20
   10fa0:	6a 20                	push   $0x20
   10fa2:	e8 95 f8 ff ff       	call   1083c <outb>
   10fa7:	83 c4 08             	add    $0x8,%esp

}
   10faa:	90                   	nop
   10fab:	c9                   	leave  
   10fac:	c3                   	ret    

00010fad <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10fad:	55                   	push   %ebp
   10fae:	89 e5                	mov    %esp,%ebp
   10fb0:	83 ec 08             	sub    $0x8,%esp
   10fb3:	8b 55 08             	mov    0x8(%ebp),%edx
   10fb6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fb9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10fbd:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10fc0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10fc4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10fc8:	ee                   	out    %al,(%dx)
}
   10fc9:	90                   	nop
   10fca:	c9                   	leave  
   10fcb:	c3                   	ret    

00010fcc <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   10fcc:	55                   	push   %ebp
   10fcd:	89 e5                	mov    %esp,%ebp
   10fcf:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10fd2:	a1 40 2a 01 00       	mov    0x12a40,%eax
   10fd7:	83 c0 01             	add    $0x1,%eax
   10fda:	a3 40 2a 01 00       	mov    %eax,0x12a40
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   10fdf:	83 ec 0c             	sub    $0xc,%esp
   10fe2:	6a 20                	push   $0x20
   10fe4:	e8 99 ff ff ff       	call   10f82 <pic_send_eoi>
   10fe9:	83 c4 10             	add    $0x10,%esp
}
   10fec:	90                   	nop
   10fed:	c9                   	leave  
   10fee:	c3                   	ret    

00010fef <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10fef:	55                   	push   %ebp
   10ff0:	89 e5                	mov    %esp,%ebp
   10ff2:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10ff5:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   10ffc:	6a 36                	push   $0x36
   10ffe:	6a 43                	push   $0x43
   11000:	e8 a8 ff ff ff       	call   10fad <outb>
   11005:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   11008:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1100b:	0f b6 c0             	movzbl %al,%eax
   1100e:	50                   	push   %eax
   1100f:	6a 40                	push   $0x40
   11011:	e8 97 ff ff ff       	call   10fad <outb>
   11016:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   11019:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1101c:	c1 e8 08             	shr    $0x8,%eax
   1101f:	0f b6 c0             	movzbl %al,%eax
   11022:	50                   	push   %eax
   11023:	6a 40                	push   $0x40
   11025:	e8 83 ff ff ff       	call   10fad <outb>
   1102a:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1102d:	83 ec 08             	sub    $0x8,%esp
   11030:	68 86 02 01 00       	push   $0x10286
   11035:	6a 20                	push   $0x20
   11037:	e8 e4 fd ff ff       	call   10e20 <irq_install>
   1103c:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   1103f:	83 ec 0c             	sub    $0xc,%esp
   11042:	6a 20                	push   $0x20
   11044:	e8 11 fe ff ff       	call   10e5a <irq_enable>
   11049:	83 c4 10             	add    $0x10,%esp
}
   1104c:	90                   	nop
   1104d:	c9                   	leave  
   1104e:	c3                   	ret    

0001104f <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   1104f:	55                   	push   %ebp
   11050:	89 e5                	mov    %esp,%ebp
   11052:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11055:	c7 05 40 2a 01 00 00 	movl   $0x0,0x12a40
   1105c:	00 00 00 

    init_pit();
   1105f:	e8 8b ff ff ff       	call   10fef <init_pit>
   11064:	90                   	nop
   11065:	c9                   	leave  
   11066:	c3                   	ret    

00011067 <kernel_init>:
#include "tools/list.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   11067:	55                   	push   %ebp
   11068:	89 e5                	mov    %esp,%ebp
   1106a:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   1106d:	e8 49 f7 ff ff       	call   107bb <cpu_init>
    log_init();
   11072:	e8 5a 08 00 00       	call   118d1 <log_init>
    irq_init();
   11077:	e8 f6 fb ff ff       	call   10c72 <irq_init>
    time_init();
   1107c:	e8 ce ff ff ff       	call   1104f <time_init>

    task_manager_init();
   11081:	e8 7e f4 ff ff       	call   10504 <task_manager_init>

}
   11086:	90                   	nop
   11087:	c9                   	leave  
   11088:	c3                   	ret    

00011089 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   11089:	55                   	push   %ebp
   1108a:	89 e5                	mov    %esp,%ebp
   1108c:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   1108f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int task: %d",count++);
   11096:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11099:	8d 50 01             	lea    0x1(%eax),%edx
   1109c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1109f:	83 ec 08             	sub    $0x8,%esp
   110a2:	50                   	push   %eax
   110a3:	68 b1 1c 01 00       	push   $0x11cb1
   110a8:	e8 99 08 00 00       	call   11946 <log_printf>
   110ad:	83 c4 10             	add    $0x10,%esp
        // task_switch_from_to(&init_task,task_first_task());
        sys_sched_yield();
   110b0:	e8 45 f5 ff ff       	call   105fa <sys_sched_yield>
        log_printf("int task: %d",count++);
   110b5:	eb df                	jmp    11096 <init_task_entry+0xd>

000110b7 <init_main>:
    }    

}

void init_main(void) {
   110b7:	55                   	push   %ebp
   110b8:	89 e5                	mov    %esp,%ebp
   110ba:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   110bd:	83 ec 0c             	sub    $0xc,%esp
   110c0:	68 be 1c 01 00       	push   $0x11cbe
   110c5:	e8 7c 08 00 00       	call   11946 <log_printf>
   110ca:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   110cd:	83 ec 04             	sub    $0x4,%esp
   110d0:	68 d4 1c 01 00       	push   $0x11cd4
   110d5:	68 dd 1c 01 00       	push   $0x11cdd
   110da:	68 e3 1c 01 00       	push   $0x11ce3
   110df:	e8 62 08 00 00       	call   11946 <log_printf>
   110e4:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   110e7:	83 ec 0c             	sub    $0xc,%esp
   110ea:	6a 61                	push   $0x61
   110ec:	68 45 23 01 00       	push   $0x12345
   110f1:	6a 85                	push   $0xffffff85
   110f3:	68 40 e2 01 00       	push   $0x1e240
   110f8:	68 f2 1c 01 00       	push   $0x11cf2
   110fd:	e8 44 08 00 00       	call   11946 <log_printf>
   11102:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task,"init task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   11105:	ba 60 3a 01 00       	mov    $0x13a60,%edx
   1110a:	b8 89 10 01 00       	mov    $0x11089,%eax
   1110f:	52                   	push   %edx
   11110:	50                   	push   %eax
   11111:	68 fe 1c 01 00       	push   $0x11cfe
   11116:	68 60 3a 01 00       	push   $0x13a60
   1111b:	e8 f8 f2 ff ff       	call   10418 <task_init>
   11120:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11123:	e8 95 f3 ff ff       	call   104bd <task_first_init>

    int count = 0; 
   11128:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("first main: %d",count++);
   1112f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11132:	8d 50 01             	lea    0x1(%eax),%edx
   11135:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11138:	83 ec 08             	sub    $0x8,%esp
   1113b:	50                   	push   %eax
   1113c:	68 08 1d 01 00       	push   $0x11d08
   11141:	e8 00 08 00 00       	call   11946 <log_printf>
   11146:	83 c4 10             	add    $0x10,%esp
        // task_switch_from_to(task_first_task(),&init_task);
        sys_sched_yield();
   11149:	e8 ac f4 ff ff       	call   105fa <sys_sched_yield>
        log_printf("first main: %d",count++);
   1114e:	eb df                	jmp    1112f <init_main+0x78>

00011150 <hlt>:
static inline void hlt (void) {
   11150:	55                   	push   %ebp
   11151:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11153:	f4                   	hlt    
}
   11154:	90                   	nop
   11155:	5d                   	pop    %ebp
   11156:	c3                   	ret    

00011157 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   11157:	55                   	push   %ebp
   11158:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   1115a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1115e:	74 3b                	je     1119b <kernel_strcpy+0x44>
   11160:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11164:	74 35                	je     1119b <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   11166:	eb 17                	jmp    1117f <kernel_strcpy+0x28>
        *dest++ = *src++;
   11168:	8b 55 0c             	mov    0xc(%ebp),%edx
   1116b:	8d 42 01             	lea    0x1(%edx),%eax
   1116e:	89 45 0c             	mov    %eax,0xc(%ebp)
   11171:	8b 45 08             	mov    0x8(%ebp),%eax
   11174:	8d 48 01             	lea    0x1(%eax),%ecx
   11177:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1117a:	0f b6 12             	movzbl (%edx),%edx
   1117d:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   1117f:	8b 45 08             	mov    0x8(%ebp),%eax
   11182:	0f b6 00             	movzbl (%eax),%eax
   11185:	84 c0                	test   %al,%al
   11187:	74 0a                	je     11193 <kernel_strcpy+0x3c>
   11189:	8b 45 0c             	mov    0xc(%ebp),%eax
   1118c:	0f b6 00             	movzbl (%eax),%eax
   1118f:	84 c0                	test   %al,%al
   11191:	75 d5                	jne    11168 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   11193:	8b 45 08             	mov    0x8(%ebp),%eax
   11196:	c6 00 00             	movb   $0x0,(%eax)
   11199:	eb 01                	jmp    1119c <kernel_strcpy+0x45>
        return;
   1119b:	90                   	nop
}
   1119c:	5d                   	pop    %ebp
   1119d:	c3                   	ret    

0001119e <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   1119e:	55                   	push   %ebp
   1119f:	89 e5                	mov    %esp,%ebp
   111a1:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   111a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111a8:	74 61                	je     1120b <kernel_strncpy+0x6d>
   111aa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111ae:	74 5b                	je     1120b <kernel_strncpy+0x6d>
   111b0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111b4:	74 55                	je     1120b <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   111b6:	8b 45 08             	mov    0x8(%ebp),%eax
   111b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   111bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   111bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   111c2:	eb 17                	jmp    111db <kernel_strncpy+0x3d>
        *d++ = *s++;
   111c4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   111c7:	8d 42 01             	lea    0x1(%edx),%eax
   111ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
   111cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111d0:	8d 48 01             	lea    0x1(%eax),%ecx
   111d3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   111d6:	0f b6 12             	movzbl (%edx),%edx
   111d9:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   111db:	8b 45 10             	mov    0x10(%ebp),%eax
   111de:	8d 50 ff             	lea    -0x1(%eax),%edx
   111e1:	89 55 10             	mov    %edx,0x10(%ebp)
   111e4:	85 c0                	test   %eax,%eax
   111e6:	7e 0a                	jle    111f2 <kernel_strncpy+0x54>
   111e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111eb:	0f b6 00             	movzbl (%eax),%eax
   111ee:	84 c0                	test   %al,%al
   111f0:	75 d2                	jne    111c4 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   111f2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111f6:	75 0b                	jne    11203 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   111f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111fb:	83 e8 01             	sub    $0x1,%eax
   111fe:	c6 00 00             	movb   $0x0,(%eax)
   11201:	eb 09                	jmp    1120c <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   11203:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11206:	c6 00 00             	movb   $0x0,(%eax)
   11209:	eb 01                	jmp    1120c <kernel_strncpy+0x6e>
        return;
   1120b:	90                   	nop
    }
}
   1120c:	c9                   	leave  
   1120d:	c3                   	ret    

0001120e <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   1120e:	55                   	push   %ebp
   1120f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   11211:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11215:	74 06                	je     1121d <kernel_strncmp+0xf>
   11217:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1121b:	75 0f                	jne    1122c <kernel_strncmp+0x1e>
        return -1;
   1121d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11222:	eb 62                	jmp    11286 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   11224:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11228:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   1122c:	8b 45 08             	mov    0x8(%ebp),%eax
   1122f:	0f b6 00             	movzbl (%eax),%eax
   11232:	84 c0                	test   %al,%al
   11234:	74 20                	je     11256 <kernel_strncmp+0x48>
   11236:	8b 45 0c             	mov    0xc(%ebp),%eax
   11239:	0f b6 00             	movzbl (%eax),%eax
   1123c:	84 c0                	test   %al,%al
   1123e:	74 16                	je     11256 <kernel_strncmp+0x48>
   11240:	8b 45 08             	mov    0x8(%ebp),%eax
   11243:	0f b6 10             	movzbl (%eax),%edx
   11246:	8b 45 0c             	mov    0xc(%ebp),%eax
   11249:	0f b6 00             	movzbl (%eax),%eax
   1124c:	38 c2                	cmp    %al,%dl
   1124e:	75 06                	jne    11256 <kernel_strncmp+0x48>
   11250:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11254:	75 ce                	jne    11224 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11256:	8b 45 08             	mov    0x8(%ebp),%eax
   11259:	0f b6 00             	movzbl (%eax),%eax
   1125c:	84 c0                	test   %al,%al
   1125e:	74 21                	je     11281 <kernel_strncmp+0x73>
   11260:	8b 45 0c             	mov    0xc(%ebp),%eax
   11263:	0f b6 00             	movzbl (%eax),%eax
   11266:	84 c0                	test   %al,%al
   11268:	74 17                	je     11281 <kernel_strncmp+0x73>
   1126a:	8b 45 08             	mov    0x8(%ebp),%eax
   1126d:	0f b6 10             	movzbl (%eax),%edx
   11270:	8b 45 0c             	mov    0xc(%ebp),%eax
   11273:	0f b6 00             	movzbl (%eax),%eax
   11276:	38 c2                	cmp    %al,%dl
   11278:	74 07                	je     11281 <kernel_strncmp+0x73>
   1127a:	b8 01 00 00 00       	mov    $0x1,%eax
   1127f:	eb 05                	jmp    11286 <kernel_strncmp+0x78>
   11281:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11286:	5d                   	pop    %ebp
   11287:	c3                   	ret    

00011288 <kernel_strlen>:
int kernel_strlen(const char * str){
   11288:	55                   	push   %ebp
   11289:	89 e5                	mov    %esp,%ebp
   1128b:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   1128e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11292:	75 07                	jne    1129b <kernel_strlen+0x13>
        return 0;
   11294:	b8 00 00 00 00       	mov    $0x0,%eax
   11299:	eb 26                	jmp    112c1 <kernel_strlen+0x39>
    }

    const char * c = str;
   1129b:	8b 45 08             	mov    0x8(%ebp),%eax
   1129e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   112a1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   112a8:	eb 04                	jmp    112ae <kernel_strlen+0x26>
        len++;
   112aa:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   112ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112b1:	8d 50 01             	lea    0x1(%eax),%edx
   112b4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   112b7:	0f b6 00             	movzbl (%eax),%eax
   112ba:	84 c0                	test   %al,%al
   112bc:	75 ec                	jne    112aa <kernel_strlen+0x22>
    }
    return len;
   112be:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   112c1:	c9                   	leave  
   112c2:	c3                   	ret    

000112c3 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   112c3:	55                   	push   %ebp
   112c4:	89 e5                	mov    %esp,%ebp
   112c6:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   112c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112cd:	74 40                	je     1130f <kernel_memcpy+0x4c>
   112cf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112d3:	74 3a                	je     1130f <kernel_memcpy+0x4c>
   112d5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112d9:	74 34                	je     1130f <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   112db:	8b 45 0c             	mov    0xc(%ebp),%eax
   112de:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   112e1:	8b 45 08             	mov    0x8(%ebp),%eax
   112e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   112e7:	eb 17                	jmp    11300 <kernel_memcpy+0x3d>
        *d++ = *s++;
   112e9:	8b 55 fc             	mov    -0x4(%ebp),%edx
   112ec:	8d 42 01             	lea    0x1(%edx),%eax
   112ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
   112f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112f5:	8d 48 01             	lea    0x1(%eax),%ecx
   112f8:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   112fb:	0f b6 12             	movzbl (%edx),%edx
   112fe:	88 10                	mov    %dl,(%eax)
    while(size--){
   11300:	8b 45 10             	mov    0x10(%ebp),%eax
   11303:	8d 50 ff             	lea    -0x1(%eax),%edx
   11306:	89 55 10             	mov    %edx,0x10(%ebp)
   11309:	85 c0                	test   %eax,%eax
   1130b:	75 dc                	jne    112e9 <kernel_memcpy+0x26>
   1130d:	eb 01                	jmp    11310 <kernel_memcpy+0x4d>
        return;
   1130f:	90                   	nop
    }

}
   11310:	c9                   	leave  
   11311:	c3                   	ret    

00011312 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   11312:	55                   	push   %ebp
   11313:	89 e5                	mov    %esp,%ebp
   11315:	83 ec 14             	sub    $0x14,%esp
   11318:	8b 45 0c             	mov    0xc(%ebp),%eax
   1131b:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   1131e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11322:	74 2c                	je     11350 <kernel_memset+0x3e>
   11324:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11328:	74 26                	je     11350 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   1132a:	8b 45 08             	mov    0x8(%ebp),%eax
   1132d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   11330:	eb 0f                	jmp    11341 <kernel_memset+0x2f>
       *d++ = v; 
   11332:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11335:	8d 50 01             	lea    0x1(%eax),%edx
   11338:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1133b:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1133f:	88 10                	mov    %dl,(%eax)
    while(size--){
   11341:	8b 45 10             	mov    0x10(%ebp),%eax
   11344:	8d 50 ff             	lea    -0x1(%eax),%edx
   11347:	89 55 10             	mov    %edx,0x10(%ebp)
   1134a:	85 c0                	test   %eax,%eax
   1134c:	75 e4                	jne    11332 <kernel_memset+0x20>
   1134e:	eb 01                	jmp    11351 <kernel_memset+0x3f>
        return;
   11350:	90                   	nop
    }
}
   11351:	c9                   	leave  
   11352:	c3                   	ret    

00011353 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   11353:	55                   	push   %ebp
   11354:	89 e5                	mov    %esp,%ebp
   11356:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   11359:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1135d:	74 0c                	je     1136b <kernel_memcmp+0x18>
   1135f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11363:	74 06                	je     1136b <kernel_memcmp+0x18>
   11365:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11369:	75 07                	jne    11372 <kernel_memcmp+0x1f>
        return -1;
   1136b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11370:	eb 43                	jmp    113b5 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11372:	8b 45 08             	mov    0x8(%ebp),%eax
   11375:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   11378:	8b 45 0c             	mov    0xc(%ebp),%eax
   1137b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   1137e:	eb 23                	jmp    113a3 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   11380:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11383:	8d 50 01             	lea    0x1(%eax),%edx
   11386:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11389:	0f b6 08             	movzbl (%eax),%ecx
   1138c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1138f:	8d 50 01             	lea    0x1(%eax),%edx
   11392:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11395:	0f b6 00             	movzbl (%eax),%eax
   11398:	38 c1                	cmp    %al,%cl
   1139a:	74 07                	je     113a3 <kernel_memcmp+0x50>
            return -1;
   1139c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   113a1:	eb 12                	jmp    113b5 <kernel_memcmp+0x62>
    while(size--){
   113a3:	8b 45 10             	mov    0x10(%ebp),%eax
   113a6:	8d 50 ff             	lea    -0x1(%eax),%edx
   113a9:	89 55 10             	mov    %edx,0x10(%ebp)
   113ac:	85 c0                	test   %eax,%eax
   113ae:	75 d0                	jne    11380 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   113b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   113b5:	c9                   	leave  
   113b6:	c3                   	ret    

000113b7 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   113b7:	55                   	push   %ebp
   113b8:	89 e5                	mov    %esp,%ebp
   113ba:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   113bd:	8d 45 10             	lea    0x10(%ebp),%eax
   113c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   113c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113c6:	83 ec 04             	sub    $0x4,%esp
   113c9:	50                   	push   %eax
   113ca:	ff 75 0c             	pushl  0xc(%ebp)
   113cd:	ff 75 08             	pushl  0x8(%ebp)
   113d0:	e8 45 01 00 00       	call   1151a <kernel_vsprintf>
   113d5:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   113d8:	90                   	nop
   113d9:	c9                   	leave  
   113da:	c3                   	ret    

000113db <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   113db:	55                   	push   %ebp
   113dc:	89 e5                	mov    %esp,%ebp
   113de:	53                   	push   %ebx
   113df:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   113e2:	8b 45 08             	mov    0x8(%ebp),%eax
   113e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   113e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   113eb:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   113ee:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   113f2:	74 1d                	je     11411 <kernel_itoa+0x36>
   113f4:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   113f8:	74 17                	je     11411 <kernel_itoa+0x36>
   113fa:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   113fe:	74 11                	je     11411 <kernel_itoa+0x36>
   11400:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11404:	74 0b                	je     11411 <kernel_itoa+0x36>
        *p = '\0';
   11406:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11409:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1140c:	e9 03 01 00 00       	jmp    11514 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11411:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11418:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1141c:	79 19                	jns    11437 <kernel_itoa+0x5c>
   1141e:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11422:	75 13                	jne    11437 <kernel_itoa+0x5c>
        *p++ = '-';
   11424:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11427:	8d 50 01             	lea    0x1(%eax),%edx
   1142a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1142d:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11430:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11437:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1143b:	74 3b                	je     11478 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   1143d:	8b 0d 68 1d 01 00    	mov    0x11d68,%ecx
   11443:	8b 45 0c             	mov    0xc(%ebp),%eax
   11446:	99                   	cltd   
   11447:	f7 7d 10             	idivl  0x10(%ebp)
   1144a:	89 d0                	mov    %edx,%eax
   1144c:	83 c0 0f             	add    $0xf,%eax
   1144f:	01 c8                	add    %ecx,%eax
   11451:	0f b6 00             	movzbl (%eax),%eax
   11454:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   11457:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1145a:	8d 50 01             	lea    0x1(%eax),%edx
   1145d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11460:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11464:	88 10                	mov    %dl,(%eax)
            num /= base;
   11466:	8b 45 0c             	mov    0xc(%ebp),%eax
   11469:	99                   	cltd   
   1146a:	f7 7d 10             	idivl  0x10(%ebp)
   1146d:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11470:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11474:	75 c7                	jne    1143d <kernel_itoa+0x62>
   11476:	eb 4b                	jmp    114c3 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   11478:	8b 45 0c             	mov    0xc(%ebp),%eax
   1147b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   1147e:	8b 0d 68 1d 01 00    	mov    0x11d68,%ecx
   11484:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11487:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1148a:	ba 00 00 00 00       	mov    $0x0,%edx
   1148f:	f7 f3                	div    %ebx
   11491:	89 d0                	mov    %edx,%eax
   11493:	83 c0 0f             	add    $0xf,%eax
   11496:	01 c8                	add    %ecx,%eax
   11498:	0f b6 00             	movzbl (%eax),%eax
   1149b:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   1149e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114a1:	8d 50 01             	lea    0x1(%eax),%edx
   114a4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114a7:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   114ab:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   114ad:	8b 5d 10             	mov    0x10(%ebp),%ebx
   114b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114b3:	ba 00 00 00 00       	mov    $0x0,%edx
   114b8:	f7 f3                	div    %ebx
   114ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   114bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   114c1:	75 bb                	jne    1147e <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   114c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114c6:	8d 50 ff             	lea    -0x1(%eax),%edx
   114c9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114cc:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   114cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   114d3:	74 08                	je     114dd <kernel_itoa+0x102>
   114d5:	8b 45 08             	mov    0x8(%ebp),%eax
   114d8:	83 c0 01             	add    $0x1,%eax
   114db:	eb 03                	jmp    114e0 <kernel_itoa+0x105>
   114dd:	8b 45 08             	mov    0x8(%ebp),%eax
   114e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   114e3:	eb 27                	jmp    1150c <kernel_itoa+0x131>
        char ch = *start;
   114e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114e8:	0f b6 00             	movzbl (%eax),%eax
   114eb:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   114ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114f1:	0f b6 10             	movzbl (%eax),%edx
   114f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114f7:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   114f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   114ff:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11502:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11506:	88 10                	mov    %dl,(%eax)
        start++;
   11508:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1150c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1150f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11512:	72 d1                	jb     114e5 <kernel_itoa+0x10a>
    }
}
   11514:	83 c4 20             	add    $0x20,%esp
   11517:	5b                   	pop    %ebx
   11518:	5d                   	pop    %ebp
   11519:	c3                   	ret    

0001151a <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   1151a:	55                   	push   %ebp
   1151b:	89 e5                	mov    %esp,%ebp
   1151d:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   11520:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11527:	8b 45 08             	mov    0x8(%ebp),%eax
   1152a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   1152d:	e9 17 01 00 00       	jmp    11649 <kernel_vsprintf+0x12f>
        switch(state) {
   11532:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11535:	85 c0                	test   %eax,%eax
   11537:	74 0a                	je     11543 <kernel_vsprintf+0x29>
   11539:	83 f8 01             	cmp    $0x1,%eax
   1153c:	74 2b                	je     11569 <kernel_vsprintf+0x4f>
   1153e:	e9 06 01 00 00       	jmp    11649 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   11543:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11547:	75 0c                	jne    11555 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   11549:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11550:	e9 f4 00 00 00       	jmp    11649 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   11555:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11558:	8d 50 01             	lea    0x1(%eax),%edx
   1155b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1155e:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11562:	88 10                	mov    %dl,(%eax)
                }
                break;
   11564:	e9 e0 00 00 00       	jmp    11649 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   11569:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1156d:	75 47                	jne    115b6 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   1156f:	8b 45 10             	mov    0x10(%ebp),%eax
   11572:	8d 50 04             	lea    0x4(%eax),%edx
   11575:	89 55 10             	mov    %edx,0x10(%ebp)
   11578:	8b 00                	mov    (%eax),%eax
   1157a:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   1157d:	ff 75 f4             	pushl  -0xc(%ebp)
   11580:	e8 03 fd ff ff       	call   11288 <kernel_strlen>
   11585:	83 c4 04             	add    $0x4,%esp
   11588:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   1158b:	eb 17                	jmp    115a4 <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   1158d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11590:	8d 42 01             	lea    0x1(%edx),%eax
   11593:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11596:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11599:	8d 48 01             	lea    0x1(%eax),%ecx
   1159c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1159f:	0f b6 12             	movzbl (%edx),%edx
   115a2:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   115a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115a7:	8d 50 ff             	lea    -0x1(%eax),%edx
   115aa:	89 55 f0             	mov    %edx,-0x10(%ebp)
   115ad:	85 c0                	test   %eax,%eax
   115af:	75 dc                	jne    1158d <kernel_vsprintf+0x73>
   115b1:	e9 8b 00 00 00       	jmp    11641 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   115b6:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   115ba:	75 2e                	jne    115ea <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   115bc:	8b 45 10             	mov    0x10(%ebp),%eax
   115bf:	8d 50 04             	lea    0x4(%eax),%edx
   115c2:	89 55 10             	mov    %edx,0x10(%ebp)
   115c5:	8b 00                	mov    (%eax),%eax
   115c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   115ca:	6a 0a                	push   $0xa
   115cc:	ff 75 e4             	pushl  -0x1c(%ebp)
   115cf:	ff 75 f8             	pushl  -0x8(%ebp)
   115d2:	e8 04 fe ff ff       	call   113db <kernel_itoa>
   115d7:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   115da:	ff 75 f8             	pushl  -0x8(%ebp)
   115dd:	e8 a6 fc ff ff       	call   11288 <kernel_strlen>
   115e2:	83 c4 04             	add    $0x4,%esp
   115e5:	01 45 f8             	add    %eax,-0x8(%ebp)
   115e8:	eb 57                	jmp    11641 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   115ea:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   115ee:	75 2e                	jne    1161e <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   115f0:	8b 45 10             	mov    0x10(%ebp),%eax
   115f3:	8d 50 04             	lea    0x4(%eax),%edx
   115f6:	89 55 10             	mov    %edx,0x10(%ebp)
   115f9:	8b 00                	mov    (%eax),%eax
   115fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   115fe:	6a 10                	push   $0x10
   11600:	ff 75 e8             	pushl  -0x18(%ebp)
   11603:	ff 75 f8             	pushl  -0x8(%ebp)
   11606:	e8 d0 fd ff ff       	call   113db <kernel_itoa>
   1160b:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   1160e:	ff 75 f8             	pushl  -0x8(%ebp)
   11611:	e8 72 fc ff ff       	call   11288 <kernel_strlen>
   11616:	83 c4 04             	add    $0x4,%esp
   11619:	01 45 f8             	add    %eax,-0x8(%ebp)
   1161c:	eb 23                	jmp    11641 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   1161e:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11622:	75 1d                	jne    11641 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   11624:	8b 45 10             	mov    0x10(%ebp),%eax
   11627:	8d 50 04             	lea    0x4(%eax),%edx
   1162a:	89 55 10             	mov    %edx,0x10(%ebp)
   1162d:	8b 00                	mov    (%eax),%eax
   1162f:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11632:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11635:	8d 50 01             	lea    0x1(%eax),%edx
   11638:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1163b:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1163f:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   11641:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   11648:	90                   	nop
    while ((ch = *fmt++)) {
   11649:	8b 45 0c             	mov    0xc(%ebp),%eax
   1164c:	8d 50 01             	lea    0x1(%eax),%edx
   1164f:	89 55 0c             	mov    %edx,0xc(%ebp)
   11652:	0f b6 00             	movzbl (%eax),%eax
   11655:	88 45 ef             	mov    %al,-0x11(%ebp)
   11658:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1165c:	0f 85 d0 fe ff ff    	jne    11532 <kernel_vsprintf+0x18>
        }
    }
}
   11662:	90                   	nop
   11663:	c9                   	leave  
   11664:	c3                   	ret    

00011665 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   11665:	55                   	push   %ebp
   11666:	89 e5                	mov    %esp,%ebp
   11668:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   1166b:	83 ec 08             	sub    $0x8,%esp
   1166e:	ff 75 14             	pushl  0x14(%ebp)
   11671:	68 18 1d 01 00       	push   $0x11d18
   11676:	e8 cb 02 00 00       	call   11946 <log_printf>
   1167b:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   1167e:	ff 75 10             	pushl  0x10(%ebp)
   11681:	ff 75 0c             	pushl  0xc(%ebp)
   11684:	ff 75 08             	pushl  0x8(%ebp)
   11687:	68 2a 1d 01 00       	push   $0x11d2a
   1168c:	e8 b5 02 00 00       	call   11946 <log_printf>
   11691:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   11694:	e8 b7 fa ff ff       	call   11150 <hlt>
   11699:	eb f9                	jmp    11694 <panic+0x2f>

0001169b <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1169b:	55                   	push   %ebp
   1169c:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   1169e:	8b 45 08             	mov    0x8(%ebp),%eax
   116a1:	8b 40 08             	mov    0x8(%eax),%eax
   116a4:	85 c0                	test   %eax,%eax
   116a6:	0f 94 c0             	sete   %al
   116a9:	0f b6 c0             	movzbl %al,%eax
}
   116ac:	5d                   	pop    %ebp
   116ad:	c3                   	ret    

000116ae <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   116ae:	55                   	push   %ebp
   116af:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   116b1:	8b 45 08             	mov    0x8(%ebp),%eax
   116b4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116bb:	8b 45 08             	mov    0x8(%ebp),%eax
   116be:	8b 50 04             	mov    0x4(%eax),%edx
   116c1:	8b 45 08             	mov    0x8(%ebp),%eax
   116c4:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   116c6:	8b 45 08             	mov    0x8(%ebp),%eax
   116c9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   116d0:	90                   	nop
   116d1:	5d                   	pop    %ebp
   116d2:	c3                   	ret    

000116d3 <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   116d3:	55                   	push   %ebp
   116d4:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   116d6:	8b 45 08             	mov    0x8(%ebp),%eax
   116d9:	8b 10                	mov    (%eax),%edx
   116db:	8b 45 0c             	mov    0xc(%ebp),%eax
   116de:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   116e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   116e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   116ea:	ff 75 08             	pushl  0x8(%ebp)
   116ed:	e8 a9 ff ff ff       	call   1169b <list_is_empty>
   116f2:	83 c4 04             	add    $0x4,%esp
   116f5:	85 c0                	test   %eax,%eax
   116f7:	74 16                	je     1170f <list_insert_first+0x3c>
        list->first = list->last = node;
   116f9:	8b 45 08             	mov    0x8(%ebp),%eax
   116fc:	8b 55 0c             	mov    0xc(%ebp),%edx
   116ff:	89 50 04             	mov    %edx,0x4(%eax)
   11702:	8b 45 08             	mov    0x8(%ebp),%eax
   11705:	8b 50 04             	mov    0x4(%eax),%edx
   11708:	8b 45 08             	mov    0x8(%ebp),%eax
   1170b:	89 10                	mov    %edx,(%eax)
   1170d:	eb 12                	jmp    11721 <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   1170f:	8b 45 08             	mov    0x8(%ebp),%eax
   11712:	8b 00                	mov    (%eax),%eax
   11714:	8b 55 0c             	mov    0xc(%ebp),%edx
   11717:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11719:	8b 45 08             	mov    0x8(%ebp),%eax
   1171c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1171f:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11721:	8b 45 08             	mov    0x8(%ebp),%eax
   11724:	8b 40 08             	mov    0x8(%eax),%eax
   11727:	8d 50 01             	lea    0x1(%eax),%edx
   1172a:	8b 45 08             	mov    0x8(%ebp),%eax
   1172d:	89 50 08             	mov    %edx,0x8(%eax)
}
   11730:	90                   	nop
   11731:	c9                   	leave  
   11732:	c3                   	ret    

00011733 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11733:	55                   	push   %ebp
   11734:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11736:	8b 45 08             	mov    0x8(%ebp),%eax
   11739:	8b 50 04             	mov    0x4(%eax),%edx
   1173c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1173f:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   11741:	8b 45 0c             	mov    0xc(%ebp),%eax
   11744:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   1174b:	ff 75 08             	pushl  0x8(%ebp)
   1174e:	e8 48 ff ff ff       	call   1169b <list_is_empty>
   11753:	83 c4 04             	add    $0x4,%esp
   11756:	85 c0                	test   %eax,%eax
   11758:	74 16                	je     11770 <list_insert_last+0x3d>
        list->first = list->last = node;
   1175a:	8b 45 08             	mov    0x8(%ebp),%eax
   1175d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11760:	89 50 04             	mov    %edx,0x4(%eax)
   11763:	8b 45 08             	mov    0x8(%ebp),%eax
   11766:	8b 50 04             	mov    0x4(%eax),%edx
   11769:	8b 45 08             	mov    0x8(%ebp),%eax
   1176c:	89 10                	mov    %edx,(%eax)
   1176e:	eb 15                	jmp    11785 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11770:	8b 45 08             	mov    0x8(%ebp),%eax
   11773:	8b 40 04             	mov    0x4(%eax),%eax
   11776:	8b 55 0c             	mov    0xc(%ebp),%edx
   11779:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1177c:	8b 45 08             	mov    0x8(%ebp),%eax
   1177f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11782:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   11785:	8b 45 08             	mov    0x8(%ebp),%eax
   11788:	8b 40 08             	mov    0x8(%eax),%eax
   1178b:	8d 50 01             	lea    0x1(%eax),%edx
   1178e:	8b 45 08             	mov    0x8(%ebp),%eax
   11791:	89 50 08             	mov    %edx,0x8(%eax)
}
   11794:	90                   	nop
   11795:	c9                   	leave  
   11796:	c3                   	ret    

00011797 <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   11797:	55                   	push   %ebp
   11798:	89 e5                	mov    %esp,%ebp
   1179a:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   1179d:	ff 75 08             	pushl  0x8(%ebp)
   117a0:	e8 f6 fe ff ff       	call   1169b <list_is_empty>
   117a5:	83 c4 04             	add    $0x4,%esp
   117a8:	85 c0                	test   %eax,%eax
   117aa:	74 07                	je     117b3 <list_remove_first+0x1c>
        return (list_node_t *)0;
   117ac:	b8 00 00 00 00       	mov    $0x0,%eax
   117b1:	eb 5b                	jmp    1180e <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   117b3:	8b 45 08             	mov    0x8(%ebp),%eax
   117b6:	8b 00                	mov    (%eax),%eax
   117b8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   117bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117be:	8b 50 04             	mov    0x4(%eax),%edx
   117c1:	8b 45 08             	mov    0x8(%ebp),%eax
   117c4:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   117c6:	8b 45 08             	mov    0x8(%ebp),%eax
   117c9:	8b 00                	mov    (%eax),%eax
   117cb:	85 c0                	test   %eax,%eax
   117cd:	75 0c                	jne    117db <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   117cf:	8b 45 08             	mov    0x8(%ebp),%eax
   117d2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117d9:	eb 0c                	jmp    117e7 <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   117db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117de:	8b 40 04             	mov    0x4(%eax),%eax
   117e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   117e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117ea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117f4:	8b 50 04             	mov    0x4(%eax),%edx
   117f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117fa:	89 10                	mov    %edx,(%eax)
    list->count--;
   117fc:	8b 45 08             	mov    0x8(%ebp),%eax
   117ff:	8b 40 08             	mov    0x8(%eax),%eax
   11802:	8d 50 ff             	lea    -0x1(%eax),%edx
   11805:	8b 45 08             	mov    0x8(%ebp),%eax
   11808:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1180b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1180e:	c9                   	leave  
   1180f:	c3                   	ret    

00011810 <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   11810:	55                   	push   %ebp
   11811:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   11813:	8b 45 08             	mov    0x8(%ebp),%eax
   11816:	8b 00                	mov    (%eax),%eax
   11818:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1181b:	75 0b                	jne    11828 <list_remove+0x18>
        list->first = node->next;
   1181d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11820:	8b 50 04             	mov    0x4(%eax),%edx
   11823:	8b 45 08             	mov    0x8(%ebp),%eax
   11826:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   11828:	8b 45 08             	mov    0x8(%ebp),%eax
   1182b:	8b 40 04             	mov    0x4(%eax),%eax
   1182e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11831:	75 0b                	jne    1183e <list_remove+0x2e>
        list->last = node->pre;
   11833:	8b 45 0c             	mov    0xc(%ebp),%eax
   11836:	8b 10                	mov    (%eax),%edx
   11838:	8b 45 08             	mov    0x8(%ebp),%eax
   1183b:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   1183e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11841:	8b 00                	mov    (%eax),%eax
   11843:	85 c0                	test   %eax,%eax
   11845:	74 0e                	je     11855 <list_remove+0x45>
        node->pre->next = node->next;
   11847:	8b 45 0c             	mov    0xc(%ebp),%eax
   1184a:	8b 00                	mov    (%eax),%eax
   1184c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1184f:	8b 52 04             	mov    0x4(%edx),%edx
   11852:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   11855:	8b 45 0c             	mov    0xc(%ebp),%eax
   11858:	8b 40 04             	mov    0x4(%eax),%eax
   1185b:	85 c0                	test   %eax,%eax
   1185d:	74 0d                	je     1186c <list_remove+0x5c>
        node->next->pre = node->pre;
   1185f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11862:	8b 40 04             	mov    0x4(%eax),%eax
   11865:	8b 55 0c             	mov    0xc(%ebp),%edx
   11868:	8b 12                	mov    (%edx),%edx
   1186a:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   1186c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1186f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11876:	8b 45 0c             	mov    0xc(%ebp),%eax
   11879:	8b 50 04             	mov    0x4(%eax),%edx
   1187c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1187f:	89 10                	mov    %edx,(%eax)

    list->count--;
   11881:	8b 45 08             	mov    0x8(%ebp),%eax
   11884:	8b 40 08             	mov    0x8(%eax),%eax
   11887:	8d 50 ff             	lea    -0x1(%eax),%edx
   1188a:	8b 45 08             	mov    0x8(%ebp),%eax
   1188d:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11890:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11893:	5d                   	pop    %ebp
   11894:	c3                   	ret    

00011895 <inb>:
static inline uint8_t inb(uint16_t port) {
   11895:	55                   	push   %ebp
   11896:	89 e5                	mov    %esp,%ebp
   11898:	83 ec 14             	sub    $0x14,%esp
   1189b:	8b 45 08             	mov    0x8(%ebp),%eax
   1189e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   118a2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   118a6:	89 c2                	mov    %eax,%edx
   118a8:	ec                   	in     (%dx),%al
   118a9:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   118ac:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   118b0:	c9                   	leave  
   118b1:	c3                   	ret    

000118b2 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   118b2:	55                   	push   %ebp
   118b3:	89 e5                	mov    %esp,%ebp
   118b5:	83 ec 08             	sub    $0x8,%esp
   118b8:	8b 55 08             	mov    0x8(%ebp),%edx
   118bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   118be:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   118c2:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   118c5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118c9:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   118cd:	ee                   	out    %al,(%dx)
}
   118ce:	90                   	nop
   118cf:	c9                   	leave  
   118d0:	c3                   	ret    

000118d1 <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值

#define COM1_PORT 0x3f8

void log_init(void) {
   118d1:	55                   	push   %ebp
   118d2:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   118d4:	6a 00                	push   $0x0
   118d6:	68 f9 03 00 00       	push   $0x3f9
   118db:	e8 d2 ff ff ff       	call   118b2 <outb>
   118e0:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   118e3:	68 80 00 00 00       	push   $0x80
   118e8:	68 fb 03 00 00       	push   $0x3fb
   118ed:	e8 c0 ff ff ff       	call   118b2 <outb>
   118f2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   118f5:	6a 03                	push   $0x3
   118f7:	68 f8 03 00 00       	push   $0x3f8
   118fc:	e8 b1 ff ff ff       	call   118b2 <outb>
   11901:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11904:	6a 00                	push   $0x0
   11906:	68 f9 03 00 00       	push   $0x3f9
   1190b:	e8 a2 ff ff ff       	call   118b2 <outb>
   11910:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11913:	6a 03                	push   $0x3
   11915:	68 fb 03 00 00       	push   $0x3fb
   1191a:	e8 93 ff ff ff       	call   118b2 <outb>
   1191f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11922:	68 c7 00 00 00       	push   $0xc7
   11927:	68 fa 03 00 00       	push   $0x3fa
   1192c:	e8 81 ff ff ff       	call   118b2 <outb>
   11931:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11934:	6a 0f                	push   $0xf
   11936:	68 fc 03 00 00       	push   $0x3fc
   1193b:	e8 72 ff ff ff       	call   118b2 <outb>
   11940:	83 c4 08             	add    $0x8,%esp

}
   11943:	90                   	nop
   11944:	c9                   	leave  
   11945:	c3                   	ret    

00011946 <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   11946:	55                   	push   %ebp
   11947:	89 e5                	mov    %esp,%ebp
   11949:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   1194f:	83 ec 04             	sub    $0x4,%esp
   11952:	68 80 00 00 00       	push   $0x80
   11957:	6a 00                	push   $0x0
   11959:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1195f:	50                   	push   %eax
   11960:	e8 ad f9 ff ff       	call   11312 <kernel_memset>
   11965:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   11968:	8d 45 0c             	lea    0xc(%ebp),%eax
   1196b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(str_buf,fmt,args);
   11971:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11977:	83 ec 04             	sub    $0x4,%esp
   1197a:	50                   	push   %eax
   1197b:	ff 75 08             	pushl  0x8(%ebp)
   1197e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11984:	50                   	push   %eax
   11985:	e8 90 fb ff ff       	call   1151a <kernel_vsprintf>
   1198a:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;
   1198d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11993:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11996:	eb 31                	jmp    119c9 <log_printf+0x83>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   11998:	90                   	nop
   11999:	83 ec 0c             	sub    $0xc,%esp
   1199c:	68 fd 03 00 00       	push   $0x3fd
   119a1:	e8 ef fe ff ff       	call   11895 <inb>
   119a6:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   119a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119ac:	8d 50 01             	lea    0x1(%eax),%edx
   119af:	89 55 f4             	mov    %edx,-0xc(%ebp)
   119b2:	0f b6 00             	movzbl (%eax),%eax
   119b5:	0f b6 c0             	movzbl %al,%eax
   119b8:	83 ec 08             	sub    $0x8,%esp
   119bb:	50                   	push   %eax
   119bc:	68 f8 03 00 00       	push   $0x3f8
   119c1:	e8 ec fe ff ff       	call   118b2 <outb>
   119c6:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   119c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119cc:	0f b6 00             	movzbl (%eax),%eax
   119cf:	84 c0                	test   %al,%al
   119d1:	75 c5                	jne    11998 <log_printf+0x52>
    }

// 变列
    outb(COM1_PORT,'\r');
   119d3:	83 ec 08             	sub    $0x8,%esp
   119d6:	6a 0d                	push   $0xd
   119d8:	68 f8 03 00 00       	push   $0x3f8
   119dd:	e8 d0 fe ff ff       	call   118b2 <outb>
   119e2:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   119e5:	83 ec 08             	sub    $0x8,%esp
   119e8:	6a 0a                	push   $0xa
   119ea:	68 f8 03 00 00       	push   $0x3f8
   119ef:	e8 be fe ff ff       	call   118b2 <outb>
   119f4:	83 c4 10             	add    $0x10,%esp
   119f7:	90                   	nop
   119f8:	c9                   	leave  
   119f9:	c3                   	ret    
