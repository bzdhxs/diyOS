
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002088 memsz 0x00006ef0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d0a  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000378  00011d0c  00011d0c  00002d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00012084  00012084  00003084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004e50  000120a0  000120a0  00003088  2**5
                  ALLOC
  4 .debug_line   00000d49  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022c8  00000000  00000000  00003dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ae7  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000140  00000000  00000000  00006b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b7e  00000000  00000000  00006cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000783e  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000d44  00000000  00000000  00007850  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011d0c l    d  .rodata	00000000 .rodata
00012084 l    d  .data	00000000 .data
000120a0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	0000001b list_node_init
000102c0 l     F .text	0000000b list_node_next
000102cb l     F .text	0000000b list_count
000102d6 l     F .text	0000000a list_first
000102e0 l     F .text	00000007 hlt
000102e7 l     F .text	00000017 write_tr
000120a0 l     O .bss	00000180 task_manager
000102fe l     F .text	00000111 tss_init
00011d78 l     O .rodata	0000000a __func__.2089
0001054f l     F .text	0000000a idle_task_entry
00012220 l     O .bss	00001000 idle_task_stack
00000000 l    df *ABS*	00000000 cpu.c
000108ae l     F .text	00000028 lgdt
000108d6 l     F .text	0000001a far_jump
00013220 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010aaf l     F .text	0000001d inb
00010acc l     F .text	0000001f outb
00010aeb l     F .text	00000007 cli
00010af2 l     F .text	00000007 sti
00010af9 l     F .text	00000028 lidt
00010b21 l     F .text	00000007 hlt
00010b28 l     F .text	00000010 read_eflags
00010b38 l     F .text	0000000b write_eflags
00010b43 l     F .text	000000d9 dump_core_regs
00010c1c l     F .text	0000003e do_default_handler
00013a20 l     O .bss	00000400 idt_table
00010e8a l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011281 l     F .text	0000001f outb
00013e20 l     O .bss	00000004 sys_tick
000112c8 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00013e40 l     O .bss	00001000 init_task_stack
00014e40 l     O .bss	000000ac init_task
00000000 l    df *ABS*	00000000 sem.c
00000000 l    df *ABS*	00000000 klib.c
0001144a l     F .text	00000007 hlt
00012084 l     O .data	00000004 num2ch.1907
00000000 l    df *ABS*	00000000 list.c
00011995 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011b8f l     F .text	0000001d inb
00011bac l     F .text	0000001f outb
000115bd g     F .text	0000004f kernel_memcpy
0001065e g     F .text	0000000a task_current
00011222 g     F .text	0000000b irq_enable_global
00011a2d g     F .text	00000064 list_insert_last
00010d8e g     F .text	0000001c do_handler_segment_not_present
000105bc g     F .text	00000034 task_set_ready
0001160c g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
00010a27 g     F .text	0000000b cpu_init
00011bcb g     F .text	00000075 log_init
0001139b g     F .text	000000a9 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00011451 g     F .text	00000047 kernel_strcpy
00011105 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010ce6 g     F .text	0000001c do_handler_overflow
00010e1a g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010dc6 g     F .text	0000001c do_handler_general_protection
00010c76 g     F .text	0000001c do_handler_divider
00010d56 g     F .text	0000001c do_handler_double_fault
00011362 g     F .text	00000039 init_task_entry
00010de2 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
0001122d g     F .text	0000002b pic_send_eoi
00010545 g     F .text	0000000a task_first_task
000112a0 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010e6e g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00014ef0 g     O .bss	00002000 stack
00010857 g     F .text	00000057 sys_sleep
000100e2 g       .text	00000000 exception_handler_bound_range
00010d1e g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010dfe g     F .text	0000001c do_handler_fpu_error
00010508 g     F .text	0000003d task_first_init
00010e36 g     F .text	0000001c do_handler_machine_check
00010c92 g     F .text	0000001c do_handler_Debug
000119cd g     F .text	00000060 list_insert_first
00010837 g     F .text	00000020 task_set_wakeup
00010cae g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00011498 g     F .text	00000070 kernel_strncpy
00011217 g     F .text	0000000b irq_disable_global
000106c3 g     F .text	00000061 sys_sched_yield
00011340 g     F .text	00000022 kernel_init
00011444 g     F .text	00000006 sem_init
00010000 g       .text	00000000 _start
00011814 g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
00010d72 g     F .text	0000001c do_handler_invalid_tss
000107fd g     F .text	0000003a task_set_sleep
0001195f g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
000110cb g     F .text	0000003a irq_install
00010973 g     F .text	0000006d init_gdt
00011258 g     F .text	00000018 irq_enter_protection
00011190 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00010d3a g     F .text	0000001c do_handler_device_unavailable
00010668 g     F .text	0000005b task_dispatch
00010a9b g     F .text	00000014 switch_to_tss
0001061b g     F .text	00000043 task_next_run
0001164d g     F .text	00000064 kernel_memcmp
000119a8 g     F .text	00000025 list_init
00010e52 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
000105f0 g     F .text	0000002b task_set_block
00010c5a g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
0001040f g     F .text	0000001e task_switch_from_to
00010f1d g     F .text	000001ae irq_init
00011270 g     F .text	00000011 irq_leave_protection
00011582 g     F .text	0000003b kernel_strlen
000108f0 g     F .text	00000083 segment_desc_set
00010d02 g     F .text	0000001c do_handler_bound_range
00011a91 g     F .text	00000079 list_remove_first
00011508 g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010559 g     F .text	00000063 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00010724 g     F .text	000000d9 task_time_tick
00010daa g     F .text	0000001c do_handler_stack_segment_fault
00010cca g     F .text	0000001c do_handler_breakpoint
00011c40 g     F .text	000000ca log_printf
0001042d g     F .text	000000db task_init
000116b1 g     F .text	00000024 kernel_sprintf
00010a32 g     F .text	00000069 gdt_alloc_desc
000116d5 g     F .text	0000013f kernel_itoa
00011b0a g     F .text	00000085 list_remove
000109e0 g     F .text	00000047 gate_desc_set
00011328 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 37 13 00 00       	call   11340 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc f0 6e 01 00       	mov    $0x16ef0,%esp
    jmp init_main
   10023:	e9 73 13 00 00       	jmp    1139b <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 21 0c 00 00       	call   10c5a <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 1e 0c 00 00       	call   10c76 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 1b 0c 00 00       	call   10c92 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 18 0c 00 00       	call   10cae <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 15 0c 00 00       	call   10cca <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 12 0c 00 00       	call   10ce6 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 0f 0c 00 00       	call   10d02 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 0c 0c 00 00       	call   10d1e <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 09 0c 00 00       	call   10d3a <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 08 0c 00 00       	call   10d56 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 07 0c 00 00       	call   10d72 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 06 0c 00 00       	call   10d8e <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 05 0c 00 00       	call   10daa <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 04 0c 00 00       	call   10dc6 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 03 0c 00 00       	call   10de2 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 00 0c 00 00       	call   10dfe <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 ff 0b 00 00       	call   10e1a <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 fc 0b 00 00       	call   10e36 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 f9 0b 00 00       	call   10e52 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 f6 0b 00 00       	call   10e6e <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 09 10 00 00       	call   112a0 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102b2:	8b 45 08             	mov    0x8(%ebp),%eax
   102b5:	8b 50 04             	mov    0x4(%eax),%edx
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	89 10                	mov    %edx,(%eax)
}
   102bd:	90                   	nop
   102be:	5d                   	pop    %ebp
   102bf:	c3                   	ret    

000102c0 <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
    return node->next;
   102c3:	8b 45 08             	mov    0x8(%ebp),%eax
   102c6:	8b 40 04             	mov    0x4(%eax),%eax
}
   102c9:	5d                   	pop    %ebp
   102ca:	c3                   	ret    

000102cb <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   102cb:	55                   	push   %ebp
   102cc:	89 e5                	mov    %esp,%ebp
    return list->count;
   102ce:	8b 45 08             	mov    0x8(%ebp),%eax
   102d1:	8b 40 08             	mov    0x8(%eax),%eax
}
   102d4:	5d                   	pop    %ebp
   102d5:	c3                   	ret    

000102d6 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   102d6:	55                   	push   %ebp
   102d7:	89 e5                	mov    %esp,%ebp
    return list->first;
   102d9:	8b 45 08             	mov    0x8(%ebp),%eax
   102dc:	8b 00                	mov    (%eax),%eax
}
   102de:	5d                   	pop    %ebp
   102df:	c3                   	ret    

000102e0 <hlt>:

/**
 * @brief 当处理器执行到HLT指令时，它会停止执行并进入一个低功耗状态，直到外部事件唤醒处理器继续执行。
 * 
 */
static inline void hlt (void) {
   102e0:	55                   	push   %ebp
   102e1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   102e3:	f4                   	hlt    
}
   102e4:	90                   	nop
   102e5:	5d                   	pop    %ebp
   102e6:	c3                   	ret    

000102e7 <write_tr>:

static inline void write_tr(uint16_t tss_sel) {
   102e7:	55                   	push   %ebp
   102e8:	89 e5                	mov    %esp,%ebp
   102ea:	83 ec 04             	sub    $0x4,%esp
   102ed:	8b 45 08             	mov    0x8(%ebp),%eax
   102f0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   102f4:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102f8:	0f 00 d8             	ltr    %ax
}
   102fb:	90                   	nop
   102fc:	c9                   	leave  
   102fd:	c3                   	ret    

000102fe <tss_init>:
#include "comm/cpu_instr.h"
#include "cpu/irq.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102fe:	55                   	push   %ebp
   102ff:	89 e5                	mov    %esp,%ebp
   10301:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   10304:	e8 29 07 00 00       	call   10a32 <gdt_alloc_desc>
   10309:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   1030c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10310:	79 1a                	jns    1032c <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   10312:	83 ec 0c             	sub    $0xc,%esp
   10315:	68 0c 1d 01 00       	push   $0x11d0c
   1031a:	e8 21 19 00 00       	call   11c40 <log_printf>
   1031f:	83 c4 10             	add    $0x10,%esp
        return -1;
   10322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10327:	e9 e1 00 00 00       	jmp    1040d <tss_init+0x10f>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   1032c:	8b 45 08             	mov    0x8(%ebp),%eax
   1032f:	83 c0 40             	add    $0x40,%eax
   10332:	68 89 00 00 00       	push   $0x89
   10337:	6a 68                	push   $0x68
   10339:	50                   	push   %eax
   1033a:	ff 75 f4             	pushl  -0xc(%ebp)
   1033d:	e8 ae 05 00 00       	call   108f0 <segment_desc_set>
   10342:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10345:	8b 45 08             	mov    0x8(%ebp),%eax
   10348:	83 c0 40             	add    $0x40,%eax
   1034b:	83 ec 04             	sub    $0x4,%esp
   1034e:	6a 68                	push   $0x68
   10350:	6a 00                	push   $0x0
   10352:	50                   	push   %eax
   10353:	e8 b4 12 00 00       	call   1160c <kernel_memset>
   10358:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   1035b:	8b 45 08             	mov    0x8(%ebp),%eax
   1035e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10361:	89 50 60             	mov    %edx,0x60(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	8b 55 10             	mov    0x10(%ebp),%edx
   1036a:	89 50 44             	mov    %edx,0x44(%eax)
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	8b 50 44             	mov    0x44(%eax),%edx
   10373:	8b 45 08             	mov    0x8(%ebp),%eax
   10376:	89 50 78             	mov    %edx,0x78(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10379:	8b 45 08             	mov    0x8(%ebp),%eax
   1037c:	c7 40 48 10 00 00 00 	movl   $0x10,0x48(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	c7 40 64 02 02 00 00 	movl   $0x202,0x64(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   1038d:	8b 45 08             	mov    0x8(%ebp),%eax
   10390:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   10397:	00 00 00 
   1039a:	8b 45 08             	mov    0x8(%ebp),%eax
   1039d:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   103a3:	8b 45 08             	mov    0x8(%ebp),%eax
   103a6:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   103ac:	8b 45 08             	mov    0x8(%ebp),%eax
   103af:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   103b5:	8b 45 08             	mov    0x8(%ebp),%eax
   103b8:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   103c7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ca:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
   103d0:	8b 45 08             	mov    0x8(%ebp),%eax
   103d3:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   103d9:	8b 45 08             	mov    0x8(%ebp),%eax
   103dc:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   103e2:	8b 45 08             	mov    0x8(%ebp),%eax
   103e5:	c7 80 8c 00 00 00 08 	movl   $0x8,0x8c(%eax)
   103ec:	00 00 00 
    task->tss.iomap = 0;
   103ef:	8b 45 08             	mov    0x8(%ebp),%eax
   103f2:	c7 80 a4 00 00 00 00 	movl   $0x0,0xa4(%eax)
   103f9:	00 00 00 

    task->tss_sel = tss_sel;
   103fc:	8b 45 08             	mov    0x8(%ebp),%eax
   103ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10402:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    return 0;
   10408:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1040d:	c9                   	leave  
   1040e:	c3                   	ret    

0001040f <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   1040f:	55                   	push   %ebp
   10410:	89 e5                	mov    %esp,%ebp
   10412:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10415:	8b 45 0c             	mov    0xc(%ebp),%eax
   10418:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   1041e:	83 ec 0c             	sub    $0xc,%esp
   10421:	50                   	push   %eax
   10422:	e8 74 06 00 00       	call   10a9b <switch_to_tss>
   10427:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   1042a:	90                   	nop
   1042b:	c9                   	leave  
   1042c:	c3                   	ret    

0001042d <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   1042d:	55                   	push   %ebp
   1042e:	89 e5                	mov    %esp,%ebp
   10430:	83 ec 18             	sub    $0x18,%esp

    ASSERT(task != (task_t*)0);
   10433:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10437:	75 19                	jne    10452 <task_init+0x25>
   10439:	68 1f 1d 01 00       	push   $0x11d1f
   1043e:	68 78 1d 01 00       	push   $0x11d78
   10443:	6a 38                	push   $0x38
   10445:	68 34 1d 01 00       	push   $0x11d34
   1044a:	e8 10 15 00 00       	call   1195f <panic>
   1044f:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   10452:	83 ec 04             	sub    $0x4,%esp
   10455:	ff 75 14             	pushl  0x14(%ebp)
   10458:	ff 75 10             	pushl  0x10(%ebp)
   1045b:	ff 75 08             	pushl  0x8(%ebp)
   1045e:	e8 9b fe ff ff       	call   102fe <tss_init>
   10463:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10466:	8b 45 08             	mov    0x8(%ebp),%eax
   10469:	83 c0 10             	add    $0x10,%eax
   1046c:	83 ec 04             	sub    $0x4,%esp
   1046f:	6a 20                	push   $0x20
   10471:	ff 75 0c             	pushl  0xc(%ebp)
   10474:	50                   	push   %eax
   10475:	e8 1e 10 00 00       	call   11498 <kernel_strncpy>
   1047a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1047d:	8b 45 08             	mov    0x8(%ebp),%eax
   10480:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   10486:	8b 45 08             	mov    0x8(%ebp),%eax
   10489:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10490:	8b 45 08             	mov    0x8(%ebp),%eax
   10493:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   1049a:	8b 45 08             	mov    0x8(%ebp),%eax
   1049d:	8b 50 08             	mov    0x8(%eax),%edx
   104a0:	8b 45 08             	mov    0x8(%ebp),%eax
   104a3:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   104a6:	8b 45 08             	mov    0x8(%ebp),%eax
   104a9:	83 c0 38             	add    $0x38,%eax
   104ac:	83 ec 0c             	sub    $0xc,%esp
   104af:	50                   	push   %eax
   104b0:	e8 f0 fd ff ff       	call   102a5 <list_node_init>
   104b5:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   104b8:	8b 45 08             	mov    0x8(%ebp),%eax
   104bb:	83 c0 30             	add    $0x30,%eax
   104be:	83 ec 0c             	sub    $0xc,%esp
   104c1:	50                   	push   %eax
   104c2:	e8 de fd ff ff       	call   102a5 <list_node_init>
   104c7:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   104ca:	e8 89 0d 00 00       	call   11258 <irq_enter_protection>
   104cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   104d2:	83 ec 0c             	sub    $0xc,%esp
   104d5:	ff 75 08             	pushl  0x8(%ebp)
   104d8:	e8 df 00 00 00       	call   105bc <task_set_ready>
   104dd:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   104e0:	8b 45 08             	mov    0x8(%ebp),%eax
   104e3:	83 c0 38             	add    $0x38,%eax
   104e6:	83 ec 08             	sub    $0x8,%esp
   104e9:	50                   	push   %eax
   104ea:	68 b0 20 01 00       	push   $0x120b0
   104ef:	e8 39 15 00 00       	call   11a2d <list_insert_last>
   104f4:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   104f7:	83 ec 0c             	sub    $0xc,%esp
   104fa:	ff 75 f4             	pushl  -0xc(%ebp)
   104fd:	e8 6e 0d 00 00       	call   11270 <irq_leave_protection>
   10502:	83 c4 10             	add    $0x10,%esp
}
   10505:	90                   	nop
   10506:	c9                   	leave  
   10507:	c3                   	ret    

00010508 <task_first_init>:

void task_first_init (void) {
   10508:	55                   	push   %ebp
   10509:	89 e5                	mov    %esp,%ebp
   1050b:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   1050e:	6a 00                	push   $0x0
   10510:	6a 00                	push   $0x0
   10512:	68 61 1d 01 00       	push   $0x11d61
   10517:	68 c8 20 01 00       	push   $0x120c8
   1051c:	e8 0c ff ff ff       	call   1042d <task_init>
   10521:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   10524:	a1 70 21 01 00       	mov    0x12170,%eax
   10529:	0f b7 c0             	movzwl %ax,%eax
   1052c:	83 ec 0c             	sub    $0xc,%esp
   1052f:	50                   	push   %eax
   10530:	e8 b2 fd ff ff       	call   102e7 <write_tr>
   10535:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10538:	c7 05 a0 20 01 00 c8 	movl   $0x120c8,0x120a0
   1053f:	20 01 00 
}
   10542:	90                   	nop
   10543:	c9                   	leave  
   10544:	c3                   	ret    

00010545 <task_first_task>:

task_t * task_first_task (void) {
   10545:	55                   	push   %ebp
   10546:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10548:	b8 c8 20 01 00       	mov    $0x120c8,%eax
}
   1054d:	5d                   	pop    %ebp
   1054e:	c3                   	ret    

0001054f <idle_task_entry>:

static void idle_task_entry (void) {
   1054f:	55                   	push   %ebp
   10550:	89 e5                	mov    %esp,%ebp
    for(;;) {
        hlt();
   10552:	e8 89 fd ff ff       	call   102e0 <hlt>
   10557:	eb f9                	jmp    10552 <idle_task_entry+0x3>

00010559 <task_manager_init>:
    }
}
static uint32_t idle_task_stack[IDLE_TASK_SIZE];

void task_manager_init (void) {
   10559:	55                   	push   %ebp
   1055a:	89 e5                	mov    %esp,%ebp
   1055c:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1055f:	83 ec 0c             	sub    $0xc,%esp
   10562:	68 a4 20 01 00       	push   $0x120a4
   10567:	e8 3c 14 00 00       	call   119a8 <list_init>
   1056c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1056f:	83 ec 0c             	sub    $0xc,%esp
   10572:	68 b0 20 01 00       	push   $0x120b0
   10577:	e8 2c 14 00 00       	call   119a8 <list_init>
   1057c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1057f:	83 ec 0c             	sub    $0xc,%esp
   10582:	68 bc 20 01 00       	push   $0x120bc
   10587:	e8 1c 14 00 00       	call   119a8 <list_init>
   1058c:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   1058f:	c7 05 a0 20 01 00 00 	movl   $0x0,0x120a0
   10596:	00 00 00 

    task_init(&task_manager.idle_task,
        "idle_task",
        (uint32_t)idle_task_entry,
        (uint32_t)(idle_task_stack + IDLE_TASK_SIZE)
   10599:	b8 20 32 01 00       	mov    $0x13220,%eax
    task_init(&task_manager.idle_task,
   1059e:	89 c2                	mov    %eax,%edx
   105a0:	b8 4f 05 01 00       	mov    $0x1054f,%eax
   105a5:	52                   	push   %edx
   105a6:	50                   	push   %eax
   105a7:	68 6c 1d 01 00       	push   $0x11d6c
   105ac:	68 74 21 01 00       	push   $0x12174
   105b1:	e8 77 fe ff ff       	call   1042d <task_init>
   105b6:	83 c4 10             	add    $0x10,%esp
    );


}
   105b9:	90                   	nop
   105ba:	c9                   	leave  
   105bb:	c3                   	ret    

000105bc <task_set_ready>:

void task_set_ready(task_t * task) {
   105bc:	55                   	push   %ebp
   105bd:	89 e5                	mov    %esp,%ebp
   105bf:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   105c2:	81 7d 08 74 21 01 00 	cmpl   $0x12174,0x8(%ebp)
   105c9:	74 22                	je     105ed <task_set_ready+0x31>
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   105cb:	8b 45 08             	mov    0x8(%ebp),%eax
   105ce:	83 c0 30             	add    $0x30,%eax
   105d1:	83 ec 08             	sub    $0x8,%esp
   105d4:	50                   	push   %eax
   105d5:	68 a4 20 01 00       	push   $0x120a4
   105da:	e8 4e 14 00 00       	call   11a2d <list_insert_last>
   105df:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   105e2:	8b 45 08             	mov    0x8(%ebp),%eax
   105e5:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   105eb:	eb 01                	jmp    105ee <task_set_ready+0x32>
        return;
   105ed:	90                   	nop
}
   105ee:	c9                   	leave  
   105ef:	c3                   	ret    

000105f0 <task_set_block>:

void task_set_block(task_t * task) {
   105f0:	55                   	push   %ebp
   105f1:	89 e5                	mov    %esp,%ebp
   105f3:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   105f6:	81 7d 08 74 21 01 00 	cmpl   $0x12174,0x8(%ebp)
   105fd:	74 19                	je     10618 <task_set_block+0x28>
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   105ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10602:	83 c0 30             	add    $0x30,%eax
   10605:	83 ec 08             	sub    $0x8,%esp
   10608:	50                   	push   %eax
   10609:	68 a4 20 01 00       	push   $0x120a4
   1060e:	e8 f7 14 00 00       	call   11b0a <list_remove>
   10613:	83 c4 10             	add    $0x10,%esp
   10616:	eb 01                	jmp    10619 <task_set_block+0x29>
        return;
   10618:	90                   	nop
}
   10619:	c9                   	leave  
   1061a:	c3                   	ret    

0001061b <task_next_run>:


task_t * task_next_run(void) {
   1061b:	55                   	push   %ebp
   1061c:	89 e5                	mov    %esp,%ebp
   1061e:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   10621:	68 a4 20 01 00       	push   $0x120a4
   10626:	e8 a0 fc ff ff       	call   102cb <list_count>
   1062b:	83 c4 04             	add    $0x4,%esp
   1062e:	85 c0                	test   %eax,%eax
   10630:	75 07                	jne    10639 <task_next_run+0x1e>
        return &task_manager.idle_task;
   10632:	b8 74 21 01 00       	mov    $0x12174,%eax
   10637:	eb 23                	jmp    1065c <task_next_run+0x41>
    }
    list_node_t * task_node = list_first(&task_manager.ready_list);
   10639:	68 a4 20 01 00       	push   $0x120a4
   1063e:	e8 93 fc ff ff       	call   102d6 <list_first>
   10643:	83 c4 04             	add    $0x4,%esp
   10646:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   10649:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1064d:	74 08                	je     10657 <task_next_run+0x3c>
   1064f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10652:	83 e8 30             	sub    $0x30,%eax
   10655:	eb 05                	jmp    1065c <task_next_run+0x41>
   10657:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1065c:	c9                   	leave  
   1065d:	c3                   	ret    

0001065e <task_current>:

task_t * task_current (void) {
   1065e:	55                   	push   %ebp
   1065f:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10661:	a1 a0 20 01 00       	mov    0x120a0,%eax
}
   10666:	5d                   	pop    %ebp
   10667:	c3                   	ret    

00010668 <task_dispatch>:


void task_dispatch(void) {
   10668:	55                   	push   %ebp
   10669:	89 e5                	mov    %esp,%ebp
   1066b:	83 ec 18             	sub    $0x18,%esp


    irq_state_t state = irq_enter_protection();
   1066e:	e8 e5 0b 00 00       	call   11258 <irq_enter_protection>
   10673:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * to = task_next_run();
   10676:	e8 a0 ff ff ff       	call   1061b <task_next_run>
   1067b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( to != task_manager.curr_task) {
   1067e:	a1 a0 20 01 00       	mov    0x120a0,%eax
   10683:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10686:	74 2a                	je     106b2 <task_dispatch+0x4a>
        task_t * from = task_current();
   10688:	e8 d1 ff ff ff       	call   1065e <task_current>
   1068d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10690:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10693:	a3 a0 20 01 00       	mov    %eax,0x120a0
        to->state = TASK_RUNNING;
   10698:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1069b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from,to);
   106a1:	83 ec 08             	sub    $0x8,%esp
   106a4:	ff 75 f0             	pushl  -0x10(%ebp)
   106a7:	ff 75 ec             	pushl  -0x14(%ebp)
   106aa:	e8 60 fd ff ff       	call   1040f <task_switch_from_to>
   106af:	83 c4 10             	add    $0x10,%esp
    }


    irq_leave_protection(state);
   106b2:	83 ec 0c             	sub    $0xc,%esp
   106b5:	ff 75 f4             	pushl  -0xc(%ebp)
   106b8:	e8 b3 0b 00 00       	call   11270 <irq_leave_protection>
   106bd:	83 c4 10             	add    $0x10,%esp

}
   106c0:	90                   	nop
   106c1:	c9                   	leave  
   106c2:	c3                   	ret    

000106c3 <sys_sched_yield>:

int sys_sched_yield(void) {
   106c3:	55                   	push   %ebp
   106c4:	89 e5                	mov    %esp,%ebp
   106c6:	83 ec 18             	sub    $0x18,%esp
    
    irq_state_t state = irq_enter_protection();
   106c9:	e8 8a 0b 00 00       	call   11258 <irq_enter_protection>
   106ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&task_manager.ready_list) > 1) {
   106d1:	83 ec 0c             	sub    $0xc,%esp
   106d4:	68 a4 20 01 00       	push   $0x120a4
   106d9:	e8 ed fb ff ff       	call   102cb <list_count>
   106de:	83 c4 10             	add    $0x10,%esp
   106e1:	83 f8 01             	cmp    $0x1,%eax
   106e4:	7e 29                	jle    1070f <sys_sched_yield+0x4c>
        task_t * curr_task = task_current();
   106e6:	e8 73 ff ff ff       	call   1065e <task_current>
   106eb:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   106ee:	83 ec 0c             	sub    $0xc,%esp
   106f1:	ff 75 f0             	pushl  -0x10(%ebp)
   106f4:	e8 f7 fe ff ff       	call   105f0 <task_set_block>
   106f9:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   106fc:	83 ec 0c             	sub    $0xc,%esp
   106ff:	ff 75 f0             	pushl  -0x10(%ebp)
   10702:	e8 b5 fe ff ff       	call   105bc <task_set_ready>
   10707:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   1070a:	e8 59 ff ff ff       	call   10668 <task_dispatch>
    }

    irq_leave_protection(state);
   1070f:	83 ec 0c             	sub    $0xc,%esp
   10712:	ff 75 f4             	pushl  -0xc(%ebp)
   10715:	e8 56 0b 00 00       	call   11270 <irq_leave_protection>
   1071a:	83 c4 10             	add    $0x10,%esp
    return 0;
   1071d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10722:	c9                   	leave  
   10723:	c3                   	ret    

00010724 <task_time_tick>:

void task_time_tick(void) {
   10724:	55                   	push   %ebp
   10725:	89 e5                	mov    %esp,%ebp
   10727:	83 ec 18             	sub    $0x18,%esp
    
    task_t * curr_task = task_current();
   1072a:	e8 2f ff ff ff       	call   1065e <task_current>
   1072f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--curr_task->slice_ticks == 0) {
   10732:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10735:	8b 40 0c             	mov    0xc(%eax),%eax
   10738:	8d 50 ff             	lea    -0x1(%eax),%edx
   1073b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1073e:	89 50 0c             	mov    %edx,0xc(%eax)
   10741:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10744:	8b 40 0c             	mov    0xc(%eax),%eax
   10747:	85 c0                	test   %eax,%eax
   10749:	75 2d                	jne    10778 <task_time_tick+0x54>
        
        curr_task->slice_ticks = curr_task->time_ticks;
   1074b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074e:	8b 50 08             	mov    0x8(%eax),%edx
   10751:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10754:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(curr_task);
   10757:	83 ec 0c             	sub    $0xc,%esp
   1075a:	ff 75 f0             	pushl  -0x10(%ebp)
   1075d:	e8 8e fe ff ff       	call   105f0 <task_set_block>
   10762:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);      
   10765:	83 ec 0c             	sub    $0xc,%esp
   10768:	ff 75 f0             	pushl  -0x10(%ebp)
   1076b:	e8 4c fe ff ff       	call   105bc <task_set_ready>
   10770:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10773:	e8 f0 fe ff ff       	call   10668 <task_dispatch>
    }

    list_node_t * curr = list_first(&task_manager.sleep_list);
   10778:	83 ec 0c             	sub    $0xc,%esp
   1077b:	68 bc 20 01 00       	push   $0x120bc
   10780:	e8 51 fb ff ff       	call   102d6 <list_first>
   10785:	83 c4 10             	add    $0x10,%esp
   10788:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (curr) {
   1078b:	eb 62                	jmp    107ef <task_time_tick+0xcb>
        list_node_t * next = list_node_next(curr);
   1078d:	83 ec 0c             	sub    $0xc,%esp
   10790:	ff 75 f4             	pushl  -0xc(%ebp)
   10793:	e8 28 fb ff ff       	call   102c0 <list_node_next>
   10798:	83 c4 10             	add    $0x10,%esp
   1079b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   1079e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107a2:	74 08                	je     107ac <task_time_tick+0x88>
   107a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a7:	83 e8 30             	sub    $0x30,%eax
   107aa:	eb 05                	jmp    107b1 <task_time_tick+0x8d>
   107ac:	b8 00 00 00 00       	mov    $0x0,%eax
   107b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) {
   107b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107b7:	8b 40 04             	mov    0x4(%eax),%eax
   107ba:	8d 50 ff             	lea    -0x1(%eax),%edx
   107bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107c0:	89 50 04             	mov    %edx,0x4(%eax)
   107c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107c6:	8b 40 04             	mov    0x4(%eax),%eax
   107c9:	85 c0                	test   %eax,%eax
   107cb:	75 1c                	jne    107e9 <task_time_tick+0xc5>
            task_set_wakeup(task);
   107cd:	83 ec 0c             	sub    $0xc,%esp
   107d0:	ff 75 e8             	pushl  -0x18(%ebp)
   107d3:	e8 5f 00 00 00       	call   10837 <task_set_wakeup>
   107d8:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   107db:	83 ec 0c             	sub    $0xc,%esp
   107de:	ff 75 e8             	pushl  -0x18(%ebp)
   107e1:	e8 d6 fd ff ff       	call   105bc <task_set_ready>
   107e6:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   107e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   107ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107f3:	75 98                	jne    1078d <task_time_tick+0x69>
    }

    task_dispatch();
   107f5:	e8 6e fe ff ff       	call   10668 <task_dispatch>
}
   107fa:	90                   	nop
   107fb:	c9                   	leave  
   107fc:	c3                   	ret    

000107fd <task_set_sleep>:




void task_set_sleep (task_t * task, uint32_t ticks) {
   107fd:	55                   	push   %ebp
   107fe:	89 e5                	mov    %esp,%ebp
   10800:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10803:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10807:	74 2b                	je     10834 <task_set_sleep+0x37>
        return;
    }

    task->sleep_ticks = ticks;
   10809:	8b 55 0c             	mov    0xc(%ebp),%edx
   1080c:	8b 45 08             	mov    0x8(%ebp),%eax
   1080f:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   10812:	8b 45 08             	mov    0x8(%ebp),%eax
   10815:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last (&task_manager.sleep_list,&task->run_node);
   1081b:	8b 45 08             	mov    0x8(%ebp),%eax
   1081e:	83 c0 30             	add    $0x30,%eax
   10821:	83 ec 08             	sub    $0x8,%esp
   10824:	50                   	push   %eax
   10825:	68 bc 20 01 00       	push   $0x120bc
   1082a:	e8 fe 11 00 00       	call   11a2d <list_insert_last>
   1082f:	83 c4 10             	add    $0x10,%esp
   10832:	eb 01                	jmp    10835 <task_set_sleep+0x38>
        return;
   10834:	90                   	nop
}
   10835:	c9                   	leave  
   10836:	c3                   	ret    

00010837 <task_set_wakeup>:
void task_set_wakeup (task_t * task) {
   10837:	55                   	push   %ebp
   10838:	89 e5                	mov    %esp,%ebp
   1083a:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   1083d:	8b 45 08             	mov    0x8(%ebp),%eax
   10840:	83 c0 30             	add    $0x30,%eax
   10843:	83 ec 08             	sub    $0x8,%esp
   10846:	50                   	push   %eax
   10847:	68 bc 20 01 00       	push   $0x120bc
   1084c:	e8 b9 12 00 00       	call   11b0a <list_remove>
   10851:	83 c4 10             	add    $0x10,%esp
}
   10854:	90                   	nop
   10855:	c9                   	leave  
   10856:	c3                   	ret    

00010857 <sys_sleep>:
void sys_sleep (uint32_t ms) {
   10857:	55                   	push   %ebp
   10858:	89 e5                	mov    %esp,%ebp
   1085a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1085d:	e8 f6 09 00 00       	call   11258 <irq_enter_protection>
   10862:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_set_block(task_manager.curr_task);
   10865:	a1 a0 20 01 00       	mov    0x120a0,%eax
   1086a:	83 ec 0c             	sub    $0xc,%esp
   1086d:	50                   	push   %eax
   1086e:	e8 7d fd ff ff       	call   105f0 <task_set_block>
   10873:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task,(ms + OS_TICK_MS - 1)/OS_TICK_MS);
   10876:	8b 45 08             	mov    0x8(%ebp),%eax
   10879:	83 c0 09             	add    $0x9,%eax
   1087c:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10881:	f7 e2                	mul    %edx
   10883:	c1 ea 03             	shr    $0x3,%edx
   10886:	a1 a0 20 01 00       	mov    0x120a0,%eax
   1088b:	83 ec 08             	sub    $0x8,%esp
   1088e:	52                   	push   %edx
   1088f:	50                   	push   %eax
   10890:	e8 68 ff ff ff       	call   107fd <task_set_sleep>
   10895:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   10898:	e8 cb fd ff ff       	call   10668 <task_dispatch>

    irq_leave_protection(state);
   1089d:	83 ec 0c             	sub    $0xc,%esp
   108a0:	ff 75 f4             	pushl  -0xc(%ebp)
   108a3:	e8 c8 09 00 00       	call   11270 <irq_leave_protection>
   108a8:	83 c4 10             	add    $0x10,%esp
}
   108ab:	90                   	nop
   108ac:	c9                   	leave  
   108ad:	c3                   	ret    

000108ae <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   108ae:	55                   	push   %ebp
   108af:	89 e5                	mov    %esp,%ebp
   108b1:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   108b4:	8b 45 08             	mov    0x8(%ebp),%eax
   108b7:	c1 e8 10             	shr    $0x10,%eax
   108ba:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   108be:	8b 45 08             	mov    0x8(%ebp),%eax
   108c1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   108c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   108c8:	83 e8 01             	sub    $0x1,%eax
   108cb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   108cf:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   108d3:	90                   	nop
   108d4:	c9                   	leave  
   108d5:	c3                   	ret    

000108d6 <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   108d6:	55                   	push   %ebp
   108d7:	89 e5                	mov    %esp,%ebp
   108d9:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   108dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   108df:	89 45 f8             	mov    %eax,-0x8(%ebp)
   108e2:	8b 45 08             	mov    0x8(%ebp),%eax
   108e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   108e8:	8d 45 f8             	lea    -0x8(%ebp),%eax
   108eb:	ff 28                	ljmp   *(%eax)
}
   108ed:	90                   	nop
   108ee:	c9                   	leave  
   108ef:	c3                   	ret    

000108f0 <segment_desc_set>:
#include "cpu/irq.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   108f0:	55                   	push   %ebp
   108f1:	89 e5                	mov    %esp,%ebp
   108f3:	83 ec 14             	sub    $0x14,%esp
   108f6:	8b 45 14             	mov    0x14(%ebp),%eax
   108f9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   108fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10900:	83 e0 f8             	and    $0xfffffff8,%eax
   10903:	05 20 32 01 00       	add    $0x13220,%eax
   10908:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   1090b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10912:	76 0f                	jbe    10923 <segment_desc_set+0x33>
		attr |= SEG_G;
   10914:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1091a:	8b 45 10             	mov    0x10(%ebp),%eax
   1091d:	c1 e8 0c             	shr    $0xc,%eax
   10920:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   10923:	8b 45 10             	mov    0x10(%ebp),%eax
   10926:	89 c2                	mov    %eax,%edx
   10928:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1092b:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   1092e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10931:	89 c2                	mov    %eax,%edx
   10933:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10936:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1093a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1093d:	c1 e8 10             	shr    $0x10,%eax
   10940:	89 c2                	mov    %eax,%edx
   10942:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10945:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   10948:	8b 45 10             	mov    0x10(%ebp),%eax
   1094b:	c1 e8 10             	shr    $0x10,%eax
   1094e:	c1 e0 08             	shl    $0x8,%eax
   10951:	66 25 00 0f          	and    $0xf00,%ax
   10955:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10959:	89 c2                	mov    %eax,%edx
   1095b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1095e:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10962:	8b 45 0c             	mov    0xc(%ebp),%eax
   10965:	c1 e8 18             	shr    $0x18,%eax
   10968:	89 c2                	mov    %eax,%edx
   1096a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1096d:	88 50 07             	mov    %dl,0x7(%eax)

}
   10970:	90                   	nop
   10971:	c9                   	leave  
   10972:	c3                   	ret    

00010973 <init_gdt>:

void init_gdt(void){
   10973:	55                   	push   %ebp
   10974:	89 e5                	mov    %esp,%ebp
   10976:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10979:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10980:	eb 19                	jmp    1099b <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10982:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10985:	c1 e0 03             	shl    $0x3,%eax
   10988:	6a 00                	push   $0x0
   1098a:	6a 00                	push   $0x0
   1098c:	6a 00                	push   $0x0
   1098e:	50                   	push   %eax
   1098f:	e8 5c ff ff ff       	call   108f0 <segment_desc_set>
   10994:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   10997:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1099b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   109a2:	7e de                	jle    10982 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   109a4:	68 9a 40 00 00       	push   $0x409a
   109a9:	6a ff                	push   $0xffffffff
   109ab:	6a 00                	push   $0x0
   109ad:	6a 08                	push   $0x8
   109af:	e8 3c ff ff ff       	call   108f0 <segment_desc_set>
   109b4:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   109b7:	68 92 40 00 00       	push   $0x4092
   109bc:	6a ff                	push   $0xffffffff
   109be:	6a 00                	push   $0x0
   109c0:	6a 10                	push   $0x10
   109c2:	e8 29 ff ff ff       	call   108f0 <segment_desc_set>
   109c7:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   109ca:	b8 20 32 01 00       	mov    $0x13220,%eax
   109cf:	68 00 08 00 00       	push   $0x800
   109d4:	50                   	push   %eax
   109d5:	e8 d4 fe ff ff       	call   108ae <lgdt>
   109da:	83 c4 08             	add    $0x8,%esp
}
   109dd:	90                   	nop
   109de:	c9                   	leave  
   109df:	c3                   	ret    

000109e0 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   109e0:	55                   	push   %ebp
   109e1:	89 e5                	mov    %esp,%ebp
   109e3:	83 ec 08             	sub    $0x8,%esp
   109e6:	8b 55 0c             	mov    0xc(%ebp),%edx
   109e9:	8b 45 14             	mov    0x14(%ebp),%eax
   109ec:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   109f0:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   109f4:	8b 45 10             	mov    0x10(%ebp),%eax
   109f7:	89 c2                	mov    %eax,%edx
   109f9:	8b 45 08             	mov    0x8(%ebp),%eax
   109fc:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   109ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10a02:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a06:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a11:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10a15:	8b 45 10             	mov    0x10(%ebp),%eax
   10a18:	c1 e8 10             	shr    $0x10,%eax
   10a1b:	89 c2                	mov    %eax,%edx
   10a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a20:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a24:	90                   	nop
   10a25:	c9                   	leave  
   10a26:	c3                   	ret    

00010a27 <cpu_init>:

void cpu_init (void){
   10a27:	55                   	push   %ebp
   10a28:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   10a2a:	e8 44 ff ff ff       	call   10973 <init_gdt>
}
   10a2f:	90                   	nop
   10a30:	5d                   	pop    %ebp
   10a31:	c3                   	ret    

00010a32 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   10a32:	55                   	push   %ebp
   10a33:	89 e5                	mov    %esp,%ebp
   10a35:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   10a38:	e8 1b 08 00 00       	call   11258 <irq_enter_protection>
   10a3d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10a40:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10a47:	eb 34                	jmp    10a7d <gdt_alloc_desc+0x4b>

        segment_desc_t * desc = gdt_table + i;
   10a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a4c:	c1 e0 03             	shl    $0x3,%eax
   10a4f:	05 20 32 01 00       	add    $0x13220,%eax
   10a54:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if(desc->attr == 0) {
   10a57:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a5a:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a5e:	66 85 c0             	test   %ax,%ax
   10a61:	75 16                	jne    10a79 <gdt_alloc_desc+0x47>
            
            irq_leave_protection(state);
   10a63:	83 ec 0c             	sub    $0xc,%esp
   10a66:	ff 75 f0             	pushl  -0x10(%ebp)
   10a69:	e8 02 08 00 00       	call   11270 <irq_leave_protection>
   10a6e:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a74:	c1 e0 03             	shl    $0x3,%eax
   10a77:	eb 20                	jmp    10a99 <gdt_alloc_desc+0x67>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10a79:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a7d:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10a84:	7e c3                	jle    10a49 <gdt_alloc_desc+0x17>
        }
    }
    irq_leave_protection(state);
   10a86:	83 ec 0c             	sub    $0xc,%esp
   10a89:	ff 75 f0             	pushl  -0x10(%ebp)
   10a8c:	e8 df 07 00 00       	call   11270 <irq_leave_protection>
   10a91:	83 c4 10             	add    $0x10,%esp

    return -1;
   10a94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   10a99:	c9                   	leave  
   10a9a:	c3                   	ret    

00010a9b <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   10a9b:	55                   	push   %ebp
   10a9c:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   10a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa1:	6a 00                	push   $0x0
   10aa3:	50                   	push   %eax
   10aa4:	e8 2d fe ff ff       	call   108d6 <far_jump>
   10aa9:	83 c4 08             	add    $0x8,%esp
   10aac:	90                   	nop
   10aad:	c9                   	leave  
   10aae:	c3                   	ret    

00010aaf <inb>:
static inline uint8_t inb(uint16_t port) {
   10aaf:	55                   	push   %ebp
   10ab0:	89 e5                	mov    %esp,%ebp
   10ab2:	83 ec 14             	sub    $0x14,%esp
   10ab5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10abc:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ac0:	89 c2                	mov    %eax,%edx
   10ac2:	ec                   	in     (%dx),%al
   10ac3:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10ac6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10aca:	c9                   	leave  
   10acb:	c3                   	ret    

00010acc <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10acc:	55                   	push   %ebp
   10acd:	89 e5                	mov    %esp,%ebp
   10acf:	83 ec 08             	sub    $0x8,%esp
   10ad2:	8b 55 08             	mov    0x8(%ebp),%edx
   10ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ad8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10adc:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10adf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10ae3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10ae7:	ee                   	out    %al,(%dx)
}
   10ae8:	90                   	nop
   10ae9:	c9                   	leave  
   10aea:	c3                   	ret    

00010aeb <cli>:
static inline void cli(void){
   10aeb:	55                   	push   %ebp
   10aec:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10aee:	fa                   	cli    
}
   10aef:	90                   	nop
   10af0:	5d                   	pop    %ebp
   10af1:	c3                   	ret    

00010af2 <sti>:
static inline void sti(void){
   10af2:	55                   	push   %ebp
   10af3:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10af5:	fb                   	sti    
}
   10af6:	90                   	nop
   10af7:	5d                   	pop    %ebp
   10af8:	c3                   	ret    

00010af9 <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   10af9:	55                   	push   %ebp
   10afa:	89 e5                	mov    %esp,%ebp
   10afc:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   10aff:	8b 45 08             	mov    0x8(%ebp),%eax
   10b02:	c1 e8 10             	shr    $0x10,%eax
   10b05:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10b09:	8b 45 08             	mov    0x8(%ebp),%eax
   10b0c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10b10:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b13:	83 e8 01             	sub    $0x1,%eax
   10b16:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10b1a:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10b1e:	90                   	nop
   10b1f:	c9                   	leave  
   10b20:	c3                   	ret    

00010b21 <hlt>:
static inline void hlt (void) {
   10b21:	55                   	push   %ebp
   10b22:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10b24:	f4                   	hlt    
}
   10b25:	90                   	nop
   10b26:	5d                   	pop    %ebp
   10b27:	c3                   	ret    

00010b28 <read_eflags>:

static inline uint32_t read_eflags (void) {
   10b28:	55                   	push   %ebp
   10b29:	89 e5                	mov    %esp,%ebp
   10b2b:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__ ("pushf\n\tpop %%eax":"=a"(eflags));    
   10b2e:	9c                   	pushf  
   10b2f:	58                   	pop    %eax
   10b30:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10b33:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10b36:	c9                   	leave  
   10b37:	c3                   	ret    

00010b38 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   10b38:	55                   	push   %ebp
   10b39:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__ ("push %%eax\n\tpopf"::"a"(eflags));  
   10b3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b3e:	50                   	push   %eax
   10b3f:	9d                   	popf   
}
   10b40:	90                   	nop
   10b41:	5d                   	pop    %ebp
   10b42:	c3                   	ret    

00010b43 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   10b43:	55                   	push   %ebp
   10b44:	89 e5                	mov    %esp,%ebp
   10b46:	57                   	push   %edi
   10b47:	56                   	push   %esi
   10b48:	53                   	push   %ebx
   10b49:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   10b4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4f:	8b 50 34             	mov    0x34(%eax),%edx
   10b52:	8b 45 08             	mov    0x8(%ebp),%eax
   10b55:	8b 40 30             	mov    0x30(%eax),%eax
   10b58:	83 ec 04             	sub    $0x4,%esp
   10b5b:	52                   	push   %edx
   10b5c:	50                   	push   %eax
   10b5d:	68 84 1d 01 00       	push   $0x11d84
   10b62:	e8 d9 10 00 00       	call   11c40 <log_printf>
   10b67:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   10b6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6d:	8b 38                	mov    (%eax),%edi
   10b6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b72:	8b 70 04             	mov    0x4(%eax),%esi
   10b75:	8b 45 08             	mov    0x8(%ebp),%eax
   10b78:	8b 58 0c             	mov    0xc(%eax),%ebx
   10b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7e:	8b 48 08             	mov    0x8(%eax),%ecx
   10b81:	8b 45 08             	mov    0x8(%ebp),%eax
   10b84:	8b 50 0c             	mov    0xc(%eax),%edx
   10b87:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8a:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b8d:	83 ec 04             	sub    $0x4,%esp
   10b90:	57                   	push   %edi
   10b91:	56                   	push   %esi
   10b92:	53                   	push   %ebx
   10b93:	51                   	push   %ecx
   10b94:	52                   	push   %edx
   10b95:	50                   	push   %eax
   10b96:	68 9c 1d 01 00       	push   $0x11d9c
   10b9b:	e8 a0 10 00 00       	call   11c40 <log_printf>
   10ba0:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   10ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba6:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bac:	8b 40 18             	mov    0x18(%eax),%eax
   10baf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb5:	8b 58 14             	mov    0x14(%eax),%ebx
   10bb8:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10bbb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbe:	8b 78 10             	mov    0x10(%eax),%edi
   10bc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc4:	8b 70 24             	mov    0x24(%eax),%esi
   10bc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bca:	8b 58 28             	mov    0x28(%eax),%ebx
   10bcd:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd0:	8b 50 20             	mov    0x20(%eax),%edx
   10bd3:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd6:	8b 40 2c             	mov    0x2c(%eax),%eax
   10bd9:	83 ec 0c             	sub    $0xc,%esp
   10bdc:	51                   	push   %ecx
   10bdd:	ff 75 e4             	pushl  -0x1c(%ebp)
   10be0:	ff 75 e0             	pushl  -0x20(%ebp)
   10be3:	57                   	push   %edi
   10be4:	56                   	push   %esi
   10be5:	53                   	push   %ebx
   10be6:	52                   	push   %edx
   10be7:	50                   	push   %eax
   10be8:	68 c8 1d 01 00       	push   $0x11dc8
   10bed:	e8 4e 10 00 00       	call   11c40 <log_printf>
   10bf2:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf8:	8b 50 40             	mov    0x40(%eax),%edx
   10bfb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfe:	8b 40 38             	mov    0x38(%eax),%eax
   10c01:	83 ec 04             	sub    $0x4,%esp
   10c04:	52                   	push   %edx
   10c05:	50                   	push   %eax
   10c06:	68 11 1e 01 00       	push   $0x11e11
   10c0b:	e8 30 10 00 00       	call   11c40 <log_printf>
   10c10:	83 c4 10             	add    $0x10,%esp
}
   10c13:	90                   	nop
   10c14:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10c17:	5b                   	pop    %ebx
   10c18:	5e                   	pop    %esi
   10c19:	5f                   	pop    %edi
   10c1a:	5d                   	pop    %ebp
   10c1b:	c3                   	ret    

00010c1c <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   10c1c:	55                   	push   %ebp
   10c1d:	89 e5                	mov    %esp,%ebp
   10c1f:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10c22:	83 ec 0c             	sub    $0xc,%esp
   10c25:	68 27 1e 01 00       	push   $0x11e27
   10c2a:	e8 11 10 00 00       	call   11c40 <log_printf>
   10c2f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10c32:	83 ec 08             	sub    $0x8,%esp
   10c35:	ff 75 0c             	pushl  0xc(%ebp)
   10c38:	68 44 1e 01 00       	push   $0x11e44
   10c3d:	e8 fe 0f 00 00       	call   11c40 <log_printf>
   10c42:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10c45:	83 ec 0c             	sub    $0xc,%esp
   10c48:	ff 75 08             	pushl  0x8(%ebp)
   10c4b:	e8 f3 fe ff ff       	call   10b43 <dump_core_regs>
   10c50:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   10c53:	e8 c9 fe ff ff       	call   10b21 <hlt>
   10c58:	eb f9                	jmp    10c53 <do_default_handler+0x37>

00010c5a <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   10c5a:	55                   	push   %ebp
   10c5b:	89 e5                	mov    %esp,%ebp
   10c5d:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   10c60:	83 ec 08             	sub    $0x8,%esp
   10c63:	68 5e 1e 01 00       	push   $0x11e5e
   10c68:	ff 75 08             	pushl  0x8(%ebp)
   10c6b:	e8 ac ff ff ff       	call   10c1c <do_default_handler>
   10c70:	83 c4 10             	add    $0x10,%esp

}
   10c73:	90                   	nop
   10c74:	c9                   	leave  
   10c75:	c3                   	ret    

00010c76 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   10c76:	55                   	push   %ebp
   10c77:	89 e5                	mov    %esp,%ebp
   10c79:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   10c7c:	83 ec 08             	sub    $0x8,%esp
   10c7f:	68 70 1e 01 00       	push   $0x11e70
   10c84:	ff 75 08             	pushl  0x8(%ebp)
   10c87:	e8 90 ff ff ff       	call   10c1c <do_default_handler>
   10c8c:	83 c4 10             	add    $0x10,%esp
}
   10c8f:	90                   	nop
   10c90:	c9                   	leave  
   10c91:	c3                   	ret    

00010c92 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   10c92:	55                   	push   %ebp
   10c93:	89 e5                	mov    %esp,%ebp
   10c95:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   10c98:	83 ec 08             	sub    $0x8,%esp
   10c9b:	68 81 1e 01 00       	push   $0x11e81
   10ca0:	ff 75 08             	pushl  0x8(%ebp)
   10ca3:	e8 74 ff ff ff       	call   10c1c <do_default_handler>
   10ca8:	83 c4 10             	add    $0x10,%esp
}
   10cab:	90                   	nop
   10cac:	c9                   	leave  
   10cad:	c3                   	ret    

00010cae <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   10cae:	55                   	push   %ebp
   10caf:	89 e5                	mov    %esp,%ebp
   10cb1:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   10cb4:	83 ec 08             	sub    $0x8,%esp
   10cb7:	68 91 1e 01 00       	push   $0x11e91
   10cbc:	ff 75 08             	pushl  0x8(%ebp)
   10cbf:	e8 58 ff ff ff       	call   10c1c <do_default_handler>
   10cc4:	83 c4 10             	add    $0x10,%esp
}
   10cc7:	90                   	nop
   10cc8:	c9                   	leave  
   10cc9:	c3                   	ret    

00010cca <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   10cca:	55                   	push   %ebp
   10ccb:	89 e5                	mov    %esp,%ebp
   10ccd:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10cd0:	83 ec 08             	sub    $0x8,%esp
   10cd3:	68 a0 1e 01 00       	push   $0x11ea0
   10cd8:	ff 75 08             	pushl  0x8(%ebp)
   10cdb:	e8 3c ff ff ff       	call   10c1c <do_default_handler>
   10ce0:	83 c4 10             	add    $0x10,%esp
}
   10ce3:	90                   	nop
   10ce4:	c9                   	leave  
   10ce5:	c3                   	ret    

00010ce6 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10ce6:	55                   	push   %ebp
   10ce7:	89 e5                	mov    %esp,%ebp
   10ce9:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   10cec:	83 ec 08             	sub    $0x8,%esp
   10cef:	68 ac 1e 01 00       	push   $0x11eac
   10cf4:	ff 75 08             	pushl  0x8(%ebp)
   10cf7:	e8 20 ff ff ff       	call   10c1c <do_default_handler>
   10cfc:	83 c4 10             	add    $0x10,%esp
}
   10cff:	90                   	nop
   10d00:	c9                   	leave  
   10d01:	c3                   	ret    

00010d02 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10d02:	55                   	push   %ebp
   10d03:	89 e5                	mov    %esp,%ebp
   10d05:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10d08:	83 ec 08             	sub    $0x8,%esp
   10d0b:	68 b6 1e 01 00       	push   $0x11eb6
   10d10:	ff 75 08             	pushl  0x8(%ebp)
   10d13:	e8 04 ff ff ff       	call   10c1c <do_default_handler>
   10d18:	83 c4 10             	add    $0x10,%esp
}
   10d1b:	90                   	nop
   10d1c:	c9                   	leave  
   10d1d:	c3                   	ret    

00010d1e <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   10d1e:	55                   	push   %ebp
   10d1f:	89 e5                	mov    %esp,%ebp
   10d21:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10d24:	83 ec 08             	sub    $0x8,%esp
   10d27:	68 cc 1e 01 00       	push   $0x11ecc
   10d2c:	ff 75 08             	pushl  0x8(%ebp)
   10d2f:	e8 e8 fe ff ff       	call   10c1c <do_default_handler>
   10d34:	83 c4 10             	add    $0x10,%esp
}
   10d37:	90                   	nop
   10d38:	c9                   	leave  
   10d39:	c3                   	ret    

00010d3a <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   10d3a:	55                   	push   %ebp
   10d3b:	89 e5                	mov    %esp,%ebp
   10d3d:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   10d40:	83 ec 08             	sub    $0x8,%esp
   10d43:	68 dc 1e 01 00       	push   $0x11edc
   10d48:	ff 75 08             	pushl  0x8(%ebp)
   10d4b:	e8 cc fe ff ff       	call   10c1c <do_default_handler>
   10d50:	83 c4 10             	add    $0x10,%esp
}
   10d53:	90                   	nop
   10d54:	c9                   	leave  
   10d55:	c3                   	ret    

00010d56 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10d56:	55                   	push   %ebp
   10d57:	89 e5                	mov    %esp,%ebp
   10d59:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   10d5c:	83 ec 08             	sub    $0x8,%esp
   10d5f:	68 f2 1e 01 00       	push   $0x11ef2
   10d64:	ff 75 08             	pushl  0x8(%ebp)
   10d67:	e8 b0 fe ff ff       	call   10c1c <do_default_handler>
   10d6c:	83 c4 10             	add    $0x10,%esp
}
   10d6f:	90                   	nop
   10d70:	c9                   	leave  
   10d71:	c3                   	ret    

00010d72 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   10d72:	55                   	push   %ebp
   10d73:	89 e5                	mov    %esp,%ebp
   10d75:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   10d78:	83 ec 08             	sub    $0x8,%esp
   10d7b:	68 00 1f 01 00       	push   $0x11f00
   10d80:	ff 75 08             	pushl  0x8(%ebp)
   10d83:	e8 94 fe ff ff       	call   10c1c <do_default_handler>
   10d88:	83 c4 10             	add    $0x10,%esp
}
   10d8b:	90                   	nop
   10d8c:	c9                   	leave  
   10d8d:	c3                   	ret    

00010d8e <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   10d8e:	55                   	push   %ebp
   10d8f:	89 e5                	mov    %esp,%ebp
   10d91:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10d94:	83 ec 08             	sub    $0x8,%esp
   10d97:	68 0c 1f 01 00       	push   $0x11f0c
   10d9c:	ff 75 08             	pushl  0x8(%ebp)
   10d9f:	e8 78 fe ff ff       	call   10c1c <do_default_handler>
   10da4:	83 c4 10             	add    $0x10,%esp
}
   10da7:	90                   	nop
   10da8:	c9                   	leave  
   10da9:	c3                   	ret    

00010daa <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   10daa:	55                   	push   %ebp
   10dab:	89 e5                	mov    %esp,%ebp
   10dad:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   10db0:	83 ec 08             	sub    $0x8,%esp
   10db3:	68 21 1f 01 00       	push   $0x11f21
   10db8:	ff 75 08             	pushl  0x8(%ebp)
   10dbb:	e8 5c fe ff ff       	call   10c1c <do_default_handler>
   10dc0:	83 c4 10             	add    $0x10,%esp
}
   10dc3:	90                   	nop
   10dc4:	c9                   	leave  
   10dc5:	c3                   	ret    

00010dc6 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   10dc6:	55                   	push   %ebp
   10dc7:	89 e5                	mov    %esp,%ebp
   10dc9:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   10dcc:	83 ec 08             	sub    $0x8,%esp
   10dcf:	68 36 1f 01 00       	push   $0x11f36
   10dd4:	ff 75 08             	pushl  0x8(%ebp)
   10dd7:	e8 40 fe ff ff       	call   10c1c <do_default_handler>
   10ddc:	83 c4 10             	add    $0x10,%esp
}
   10ddf:	90                   	nop
   10de0:	c9                   	leave  
   10de1:	c3                   	ret    

00010de2 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10de2:	55                   	push   %ebp
   10de3:	89 e5                	mov    %esp,%ebp
   10de5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10de8:	83 ec 08             	sub    $0x8,%esp
   10deb:	68 4a 1f 01 00       	push   $0x11f4a
   10df0:	ff 75 08             	pushl  0x8(%ebp)
   10df3:	e8 24 fe ff ff       	call   10c1c <do_default_handler>
   10df8:	83 c4 10             	add    $0x10,%esp
}
   10dfb:	90                   	nop
   10dfc:	c9                   	leave  
   10dfd:	c3                   	ret    

00010dfe <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   10dfe:	55                   	push   %ebp
   10dff:	89 e5                	mov    %esp,%ebp
   10e01:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10e04:	83 ec 08             	sub    $0x8,%esp
   10e07:	68 56 1f 01 00       	push   $0x11f56
   10e0c:	ff 75 08             	pushl  0x8(%ebp)
   10e0f:	e8 08 fe ff ff       	call   10c1c <do_default_handler>
   10e14:	83 c4 10             	add    $0x10,%esp
}
   10e17:	90                   	nop
   10e18:	c9                   	leave  
   10e19:	c3                   	ret    

00010e1a <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   10e1a:	55                   	push   %ebp
   10e1b:	89 e5                	mov    %esp,%ebp
   10e1d:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10e20:	83 ec 08             	sub    $0x8,%esp
   10e23:	68 74 1f 01 00       	push   $0x11f74
   10e28:	ff 75 08             	pushl  0x8(%ebp)
   10e2b:	e8 ec fd ff ff       	call   10c1c <do_default_handler>
   10e30:	83 c4 10             	add    $0x10,%esp
}
   10e33:	90                   	nop
   10e34:	c9                   	leave  
   10e35:	c3                   	ret    

00010e36 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10e36:	55                   	push   %ebp
   10e37:	89 e5                	mov    %esp,%ebp
   10e39:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   10e3c:	83 ec 08             	sub    $0x8,%esp
   10e3f:	68 85 1f 01 00       	push   $0x11f85
   10e44:	ff 75 08             	pushl  0x8(%ebp)
   10e47:	e8 d0 fd ff ff       	call   10c1c <do_default_handler>
   10e4c:	83 c4 10             	add    $0x10,%esp
}
   10e4f:	90                   	nop
   10e50:	c9                   	leave  
   10e51:	c3                   	ret    

00010e52 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10e52:	55                   	push   %ebp
   10e53:	89 e5                	mov    %esp,%ebp
   10e55:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10e58:	83 ec 08             	sub    $0x8,%esp
   10e5b:	68 94 1f 01 00       	push   $0x11f94
   10e60:	ff 75 08             	pushl  0x8(%ebp)
   10e63:	e8 b4 fd ff ff       	call   10c1c <do_default_handler>
   10e68:	83 c4 10             	add    $0x10,%esp
}
   10e6b:	90                   	nop
   10e6c:	c9                   	leave  
   10e6d:	c3                   	ret    

00010e6e <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   10e6e:	55                   	push   %ebp
   10e6f:	89 e5                	mov    %esp,%ebp
   10e71:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10e74:	83 ec 08             	sub    $0x8,%esp
   10e77:	68 b3 1f 01 00       	push   $0x11fb3
   10e7c:	ff 75 08             	pushl  0x8(%ebp)
   10e7f:	e8 98 fd ff ff       	call   10c1c <do_default_handler>
   10e84:	83 c4 10             	add    $0x10,%esp
}
   10e87:	90                   	nop
   10e88:	c9                   	leave  
   10e89:	c3                   	ret    

00010e8a <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   10e8a:	55                   	push   %ebp
   10e8b:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10e8d:	6a 11                	push   $0x11
   10e8f:	6a 20                	push   $0x20
   10e91:	e8 36 fc ff ff       	call   10acc <outb>
   10e96:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10e99:	6a 20                	push   $0x20
   10e9b:	6a 21                	push   $0x21
   10e9d:	e8 2a fc ff ff       	call   10acc <outb>
   10ea2:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10ea5:	6a 04                	push   $0x4
   10ea7:	6a 21                	push   $0x21
   10ea9:	e8 1e fc ff ff       	call   10acc <outb>
   10eae:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10eb1:	6a 01                	push   $0x1
   10eb3:	6a 21                	push   $0x21
   10eb5:	e8 12 fc ff ff       	call   10acc <outb>
   10eba:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10ebd:	6a 11                	push   $0x11
   10ebf:	68 a0 00 00 00       	push   $0xa0
   10ec4:	e8 03 fc ff ff       	call   10acc <outb>
   10ec9:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10ecc:	6a 28                	push   $0x28
   10ece:	68 a1 00 00 00       	push   $0xa1
   10ed3:	e8 f4 fb ff ff       	call   10acc <outb>
   10ed8:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10edb:	6a 02                	push   $0x2
   10edd:	68 a1 00 00 00       	push   $0xa1
   10ee2:	e8 e5 fb ff ff       	call   10acc <outb>
   10ee7:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10eea:	6a 01                	push   $0x1
   10eec:	68 a1 00 00 00       	push   $0xa1
   10ef1:	e8 d6 fb ff ff       	call   10acc <outb>
   10ef6:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10ef9:	68 fb 00 00 00       	push   $0xfb
   10efe:	6a 21                	push   $0x21
   10f00:	e8 c7 fb ff ff       	call   10acc <outb>
   10f05:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10f08:	68 ff 00 00 00       	push   $0xff
   10f0d:	68 a1 00 00 00       	push   $0xa1
   10f12:	e8 b5 fb ff ff       	call   10acc <outb>
   10f17:	83 c4 08             	add    $0x8,%esp
}
   10f1a:	90                   	nop
   10f1b:	c9                   	leave  
   10f1c:	c3                   	ret    

00010f1d <irq_init>:


void irq_init(void){ 
   10f1d:	55                   	push   %ebp
   10f1e:	89 e5                	mov    %esp,%ebp
   10f20:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10f23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10f2a:	eb 25                	jmp    10f51 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10f2c:	ba 28 00 01 00       	mov    $0x10028,%edx
   10f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f34:	c1 e0 03             	shl    $0x3,%eax
   10f37:	05 20 3a 01 00       	add    $0x13a20,%eax
   10f3c:	68 00 8e 00 00       	push   $0x8e00
   10f41:	52                   	push   %edx
   10f42:	6a 08                	push   $0x8
   10f44:	50                   	push   %eax
   10f45:	e8 96 fa ff ff       	call   109e0 <gate_desc_set>
   10f4a:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10f4d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f51:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10f55:	7e d5                	jle    10f2c <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10f57:	83 ec 08             	sub    $0x8,%esp
   10f5a:	68 47 00 01 00       	push   $0x10047
   10f5f:	6a 00                	push   $0x0
   10f61:	e8 65 01 00 00       	call   110cb <irq_install>
   10f66:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10f69:	83 ec 08             	sub    $0x8,%esp
   10f6c:	68 66 00 01 00       	push   $0x10066
   10f71:	6a 01                	push   $0x1
   10f73:	e8 53 01 00 00       	call   110cb <irq_install>
   10f78:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10f7b:	83 ec 08             	sub    $0x8,%esp
   10f7e:	68 85 00 01 00       	push   $0x10085
   10f83:	6a 02                	push   $0x2
   10f85:	e8 41 01 00 00       	call   110cb <irq_install>
   10f8a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10f8d:	83 ec 08             	sub    $0x8,%esp
   10f90:	68 a4 00 01 00       	push   $0x100a4
   10f95:	6a 03                	push   $0x3
   10f97:	e8 2f 01 00 00       	call   110cb <irq_install>
   10f9c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10f9f:	83 ec 08             	sub    $0x8,%esp
   10fa2:	68 c3 00 01 00       	push   $0x100c3
   10fa7:	6a 04                	push   $0x4
   10fa9:	e8 1d 01 00 00       	call   110cb <irq_install>
   10fae:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10fb1:	83 ec 08             	sub    $0x8,%esp
   10fb4:	68 e2 00 01 00       	push   $0x100e2
   10fb9:	6a 05                	push   $0x5
   10fbb:	e8 0b 01 00 00       	call   110cb <irq_install>
   10fc0:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10fc3:	83 ec 08             	sub    $0x8,%esp
   10fc6:	68 01 01 01 00       	push   $0x10101
   10fcb:	6a 06                	push   $0x6
   10fcd:	e8 f9 00 00 00       	call   110cb <irq_install>
   10fd2:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10fd5:	83 ec 08             	sub    $0x8,%esp
   10fd8:	68 20 01 01 00       	push   $0x10120
   10fdd:	6a 07                	push   $0x7
   10fdf:	e8 e7 00 00 00       	call   110cb <irq_install>
   10fe4:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10fe7:	83 ec 08             	sub    $0x8,%esp
   10fea:	68 3f 01 01 00       	push   $0x1013f
   10fef:	6a 08                	push   $0x8
   10ff1:	e8 d5 00 00 00       	call   110cb <irq_install>
   10ff6:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10ff9:	83 ec 08             	sub    $0x8,%esp
   10ffc:	68 5c 01 01 00       	push   $0x1015c
   11001:	6a 0a                	push   $0xa
   11003:	e8 c3 00 00 00       	call   110cb <irq_install>
   11008:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   1100b:	83 ec 08             	sub    $0x8,%esp
   1100e:	68 79 01 01 00       	push   $0x10179
   11013:	6a 0b                	push   $0xb
   11015:	e8 b1 00 00 00       	call   110cb <irq_install>
   1101a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   1101d:	83 ec 08             	sub    $0x8,%esp
   11020:	68 96 01 01 00       	push   $0x10196
   11025:	6a 0c                	push   $0xc
   11027:	e8 9f 00 00 00       	call   110cb <irq_install>
   1102c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   1102f:	83 ec 08             	sub    $0x8,%esp
   11032:	68 b3 01 01 00       	push   $0x101b3
   11037:	6a 0d                	push   $0xd
   11039:	e8 8d 00 00 00       	call   110cb <irq_install>
   1103e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   11041:	83 ec 08             	sub    $0x8,%esp
   11044:	68 d0 01 01 00       	push   $0x101d0
   11049:	6a 0e                	push   $0xe
   1104b:	e8 7b 00 00 00       	call   110cb <irq_install>
   11050:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   11053:	83 ec 08             	sub    $0x8,%esp
   11056:	68 ed 01 01 00       	push   $0x101ed
   1105b:	6a 10                	push   $0x10
   1105d:	e8 69 00 00 00       	call   110cb <irq_install>
   11062:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   11065:	83 ec 08             	sub    $0x8,%esp
   11068:	68 0c 02 01 00       	push   $0x1020c
   1106d:	6a 11                	push   $0x11
   1106f:	e8 57 00 00 00       	call   110cb <irq_install>
   11074:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   11077:	83 ec 08             	sub    $0x8,%esp
   1107a:	68 29 02 01 00       	push   $0x10229
   1107f:	6a 12                	push   $0x12
   11081:	e8 45 00 00 00       	call   110cb <irq_install>
   11086:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   11089:	83 ec 08             	sub    $0x8,%esp
   1108c:	68 48 02 01 00       	push   $0x10248
   11091:	6a 13                	push   $0x13
   11093:	e8 33 00 00 00       	call   110cb <irq_install>
   11098:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   1109b:	83 ec 08             	sub    $0x8,%esp
   1109e:	68 67 02 01 00       	push   $0x10267
   110a3:	6a 14                	push   $0x14
   110a5:	e8 21 00 00 00       	call   110cb <irq_install>
   110aa:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   110ad:	b8 20 3a 01 00       	mov    $0x13a20,%eax
   110b2:	83 ec 08             	sub    $0x8,%esp
   110b5:	68 00 04 00 00       	push   $0x400
   110ba:	50                   	push   %eax
   110bb:	e8 39 fa ff ff       	call   10af9 <lidt>
   110c0:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   110c3:	e8 c2 fd ff ff       	call   10e8a <init_pic>
}
   110c8:	90                   	nop
   110c9:	c9                   	leave  
   110ca:	c3                   	ret    

000110cb <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   110cb:	55                   	push   %ebp
   110cc:	89 e5                	mov    %esp,%ebp
   110ce:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   110d1:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   110d5:	7e 07                	jle    110de <irq_install+0x13>
        return -1;
   110d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110dc:	eb 25                	jmp    11103 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   110de:	8b 45 0c             	mov    0xc(%ebp),%eax
   110e1:	8b 55 08             	mov    0x8(%ebp),%edx
   110e4:	c1 e2 03             	shl    $0x3,%edx
   110e7:	81 c2 20 3a 01 00    	add    $0x13a20,%edx
   110ed:	68 00 8e 00 00       	push   $0x8e00
   110f2:	50                   	push   %eax
   110f3:	6a 08                	push   $0x8
   110f5:	52                   	push   %edx
   110f6:	e8 e5 f8 ff ff       	call   109e0 <gate_desc_set>
   110fb:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   110fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11103:	c9                   	leave  
   11104:	c3                   	ret    

00011105 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   11105:	55                   	push   %ebp
   11106:	89 e5                	mov    %esp,%ebp
   11108:	53                   	push   %ebx
   11109:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   1110c:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11110:	7e 78                	jle    1118a <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   11112:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11116:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1111a:	7f 32                	jg     1114e <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   1111c:	6a 21                	push   $0x21
   1111e:	e8 8c f9 ff ff       	call   10aaf <inb>
   11123:	83 c4 04             	add    $0x4,%esp
   11126:	89 c2                	mov    %eax,%edx
   11128:	8b 45 08             	mov    0x8(%ebp),%eax
   1112b:	bb 01 00 00 00       	mov    $0x1,%ebx
   11130:	89 c1                	mov    %eax,%ecx
   11132:	d3 e3                	shl    %cl,%ebx
   11134:	89 d8                	mov    %ebx,%eax
   11136:	f7 d0                	not    %eax
   11138:	21 d0                	and    %edx,%eax
   1113a:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   1113d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11141:	50                   	push   %eax
   11142:	6a 21                	push   $0x21
   11144:	e8 83 f9 ff ff       	call   10acc <outb>
   11149:	83 c4 08             	add    $0x8,%esp
   1114c:	eb 3d                	jmp    1118b <irq_enable+0x86>
    }else{
        irq_num -= 8;
   1114e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11152:	68 a1 00 00 00       	push   $0xa1
   11157:	e8 53 f9 ff ff       	call   10aaf <inb>
   1115c:	83 c4 04             	add    $0x4,%esp
   1115f:	89 c2                	mov    %eax,%edx
   11161:	8b 45 08             	mov    0x8(%ebp),%eax
   11164:	bb 01 00 00 00       	mov    $0x1,%ebx
   11169:	89 c1                	mov    %eax,%ecx
   1116b:	d3 e3                	shl    %cl,%ebx
   1116d:	89 d8                	mov    %ebx,%eax
   1116f:	f7 d0                	not    %eax
   11171:	21 d0                	and    %edx,%eax
   11173:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11176:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1117a:	50                   	push   %eax
   1117b:	68 a1 00 00 00       	push   $0xa1
   11180:	e8 47 f9 ff ff       	call   10acc <outb>
   11185:	83 c4 08             	add    $0x8,%esp
   11188:	eb 01                	jmp    1118b <irq_enable+0x86>
        return;
   1118a:	90                   	nop
    }
}
   1118b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1118e:	c9                   	leave  
   1118f:	c3                   	ret    

00011190 <irq_disable>:
void irq_disable (int irq_num) {
   11190:	55                   	push   %ebp
   11191:	89 e5                	mov    %esp,%ebp
   11193:	53                   	push   %ebx
   11194:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   11197:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1119b:	7e 74                	jle    11211 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   1119d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   111a1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   111a5:	7f 30                	jg     111d7 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   111a7:	6a 21                	push   $0x21
   111a9:	e8 01 f9 ff ff       	call   10aaf <inb>
   111ae:	83 c4 04             	add    $0x4,%esp
   111b1:	89 c3                	mov    %eax,%ebx
   111b3:	8b 45 08             	mov    0x8(%ebp),%eax
   111b6:	ba 01 00 00 00       	mov    $0x1,%edx
   111bb:	89 c1                	mov    %eax,%ecx
   111bd:	d3 e2                	shl    %cl,%edx
   111bf:	89 d0                	mov    %edx,%eax
   111c1:	09 d8                	or     %ebx,%eax
   111c3:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   111c6:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   111ca:	50                   	push   %eax
   111cb:	6a 21                	push   $0x21
   111cd:	e8 fa f8 ff ff       	call   10acc <outb>
   111d2:	83 c4 08             	add    $0x8,%esp
   111d5:	eb 3b                	jmp    11212 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   111d7:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   111db:	68 a1 00 00 00       	push   $0xa1
   111e0:	e8 ca f8 ff ff       	call   10aaf <inb>
   111e5:	83 c4 04             	add    $0x4,%esp
   111e8:	89 c3                	mov    %eax,%ebx
   111ea:	8b 45 08             	mov    0x8(%ebp),%eax
   111ed:	ba 01 00 00 00       	mov    $0x1,%edx
   111f2:	89 c1                	mov    %eax,%ecx
   111f4:	d3 e2                	shl    %cl,%edx
   111f6:	89 d0                	mov    %edx,%eax
   111f8:	09 d8                	or     %ebx,%eax
   111fa:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   111fd:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11201:	50                   	push   %eax
   11202:	68 a1 00 00 00       	push   $0xa1
   11207:	e8 c0 f8 ff ff       	call   10acc <outb>
   1120c:	83 c4 08             	add    $0x8,%esp
   1120f:	eb 01                	jmp    11212 <irq_disable+0x82>
        return;
   11211:	90                   	nop
    }
}
   11212:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11215:	c9                   	leave  
   11216:	c3                   	ret    

00011217 <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   11217:	55                   	push   %ebp
   11218:	89 e5                	mov    %esp,%ebp
    cli();
   1121a:	e8 cc f8 ff ff       	call   10aeb <cli>
}
   1121f:	90                   	nop
   11220:	5d                   	pop    %ebp
   11221:	c3                   	ret    

00011222 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   11222:	55                   	push   %ebp
   11223:	89 e5                	mov    %esp,%ebp
    sti();
   11225:	e8 c8 f8 ff ff       	call   10af2 <sti>
}
   1122a:	90                   	nop
   1122b:	5d                   	pop    %ebp
   1122c:	c3                   	ret    

0001122d <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   1122d:	55                   	push   %ebp
   1122e:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   11230:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   11234:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11238:	7e 0f                	jle    11249 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   1123a:	6a 20                	push   $0x20
   1123c:	68 a0 00 00 00       	push   $0xa0
   11241:	e8 86 f8 ff ff       	call   10acc <outb>
   11246:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   11249:	6a 20                	push   $0x20
   1124b:	6a 20                	push   $0x20
   1124d:	e8 7a f8 ff ff       	call   10acc <outb>
   11252:	83 c4 08             	add    $0x8,%esp

}
   11255:	90                   	nop
   11256:	c9                   	leave  
   11257:	c3                   	ret    

00011258 <irq_enter_protection>:
/**
 * @brief 进入临界区
 * 
 * @return irq_state_t 
 */
irq_state_t irq_enter_protection (void) {
   11258:	55                   	push   %ebp
   11259:	89 e5                	mov    %esp,%ebp
   1125b:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   1125e:	e8 c5 f8 ff ff       	call   10b28 <read_eflags>
   11263:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11266:	e8 ac ff ff ff       	call   11217 <irq_disable_global>
    return state;
   1126b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1126e:	c9                   	leave  
   1126f:	c3                   	ret    

00011270 <irq_leave_protection>:
/**
 * @brief 退出临界区
 * 
 * @param state eflags寄存器的值
 */
void irq_leave_protection (irq_state_t state) {
   11270:	55                   	push   %ebp
   11271:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11273:	ff 75 08             	pushl  0x8(%ebp)
   11276:	e8 bd f8 ff ff       	call   10b38 <write_eflags>
   1127b:	83 c4 04             	add    $0x4,%esp
}
   1127e:	90                   	nop
   1127f:	c9                   	leave  
   11280:	c3                   	ret    

00011281 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11281:	55                   	push   %ebp
   11282:	89 e5                	mov    %esp,%ebp
   11284:	83 ec 08             	sub    $0x8,%esp
   11287:	8b 55 08             	mov    0x8(%ebp),%edx
   1128a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1128d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11291:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11294:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11298:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1129c:	ee                   	out    %al,(%dx)
}
   1129d:	90                   	nop
   1129e:	c9                   	leave  
   1129f:	c3                   	ret    

000112a0 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   112a0:	55                   	push   %ebp
   112a1:	89 e5                	mov    %esp,%ebp
   112a3:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   112a6:	a1 20 3e 01 00       	mov    0x13e20,%eax
   112ab:	83 c0 01             	add    $0x1,%eax
   112ae:	a3 20 3e 01 00       	mov    %eax,0x13e20
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   112b3:	83 ec 0c             	sub    $0xc,%esp
   112b6:	6a 20                	push   $0x20
   112b8:	e8 70 ff ff ff       	call   1122d <pic_send_eoi>
   112bd:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   112c0:	e8 5f f4 ff ff       	call   10724 <task_time_tick>
}
   112c5:	90                   	nop
   112c6:	c9                   	leave  
   112c7:	c3                   	ret    

000112c8 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   112c8:	55                   	push   %ebp
   112c9:	89 e5                	mov    %esp,%ebp
   112cb:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   112ce:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   112d5:	6a 36                	push   $0x36
   112d7:	6a 43                	push   $0x43
   112d9:	e8 a3 ff ff ff       	call   11281 <outb>
   112de:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   112e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112e4:	0f b6 c0             	movzbl %al,%eax
   112e7:	50                   	push   %eax
   112e8:	6a 40                	push   $0x40
   112ea:	e8 92 ff ff ff       	call   11281 <outb>
   112ef:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   112f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112f5:	c1 e8 08             	shr    $0x8,%eax
   112f8:	0f b6 c0             	movzbl %al,%eax
   112fb:	50                   	push   %eax
   112fc:	6a 40                	push   $0x40
   112fe:	e8 7e ff ff ff       	call   11281 <outb>
   11303:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11306:	83 ec 08             	sub    $0x8,%esp
   11309:	68 86 02 01 00       	push   $0x10286
   1130e:	6a 20                	push   $0x20
   11310:	e8 b6 fd ff ff       	call   110cb <irq_install>
   11315:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11318:	83 ec 0c             	sub    $0xc,%esp
   1131b:	6a 20                	push   $0x20
   1131d:	e8 e3 fd ff ff       	call   11105 <irq_enable>
   11322:	83 c4 10             	add    $0x10,%esp
}
   11325:	90                   	nop
   11326:	c9                   	leave  
   11327:	c3                   	ret    

00011328 <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   11328:	55                   	push   %ebp
   11329:	89 e5                	mov    %esp,%ebp
   1132b:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1132e:	c7 05 20 3e 01 00 00 	movl   $0x0,0x13e20
   11335:	00 00 00 

    init_pit();
   11338:	e8 8b ff ff ff       	call   112c8 <init_pit>
   1133d:	90                   	nop
   1133e:	c9                   	leave  
   1133f:	c3                   	ret    

00011340 <kernel_init>:
#include "tools/list.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   11340:	55                   	push   %ebp
   11341:	89 e5                	mov    %esp,%ebp
   11343:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   11346:	e8 dc f6 ff ff       	call   10a27 <cpu_init>
    log_init();
   1134b:	e8 7b 08 00 00       	call   11bcb <log_init>
    irq_init();
   11350:	e8 c8 fb ff ff       	call   10f1d <irq_init>
    time_init();
   11355:	e8 ce ff ff ff       	call   11328 <time_init>

    task_manager_init();
   1135a:	e8 fa f1 ff ff       	call   10559 <task_manager_init>

}
   1135f:	90                   	nop
   11360:	c9                   	leave  
   11361:	c3                   	ret    

00011362 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   11362:	55                   	push   %ebp
   11363:	89 e5                	mov    %esp,%ebp
   11365:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   11368:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int task: %d",count++);
   1136f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11372:	8d 50 01             	lea    0x1(%eax),%edx
   11375:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11378:	83 ec 08             	sub    $0x8,%esp
   1137b:	50                   	push   %eax
   1137c:	68 cd 1f 01 00       	push   $0x11fcd
   11381:	e8 ba 08 00 00       	call   11c40 <log_printf>
   11386:	83 c4 10             	add    $0x10,%esp
        sys_sleep(5000);
   11389:	83 ec 0c             	sub    $0xc,%esp
   1138c:	68 88 13 00 00       	push   $0x1388
   11391:	e8 c1 f4 ff ff       	call   10857 <sys_sleep>
   11396:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d",count++);
   11399:	eb d4                	jmp    1136f <init_task_entry+0xd>

0001139b <init_main>:
    }    

}

void init_main(void) {
   1139b:	55                   	push   %ebp
   1139c:	89 e5                	mov    %esp,%ebp
   1139e:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   113a1:	83 ec 0c             	sub    $0xc,%esp
   113a4:	68 da 1f 01 00       	push   $0x11fda
   113a9:	e8 92 08 00 00       	call   11c40 <log_printf>
   113ae:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   113b1:	83 ec 04             	sub    $0x4,%esp
   113b4:	68 f0 1f 01 00       	push   $0x11ff0
   113b9:	68 f9 1f 01 00       	push   $0x11ff9
   113be:	68 ff 1f 01 00       	push   $0x11fff
   113c3:	e8 78 08 00 00       	call   11c40 <log_printf>
   113c8:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   113cb:	83 ec 0c             	sub    $0xc,%esp
   113ce:	6a 61                	push   $0x61
   113d0:	68 45 23 01 00       	push   $0x12345
   113d5:	6a 85                	push   $0xffffff85
   113d7:	68 40 e2 01 00       	push   $0x1e240
   113dc:	68 0e 20 01 00       	push   $0x1200e
   113e1:	e8 5a 08 00 00       	call   11c40 <log_printf>
   113e6:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task,"init task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   113e9:	ba 40 4e 01 00       	mov    $0x14e40,%edx
   113ee:	b8 62 13 01 00       	mov    $0x11362,%eax
   113f3:	52                   	push   %edx
   113f4:	50                   	push   %eax
   113f5:	68 1a 20 01 00       	push   $0x1201a
   113fa:	68 40 4e 01 00       	push   $0x14e40
   113ff:	e8 29 f0 ff ff       	call   1042d <task_init>
   11404:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11407:	e8 fc f0 ff ff       	call   10508 <task_first_init>

    irq_enable_global();
   1140c:	e8 11 fe ff ff       	call   11222 <irq_enable_global>
    int count = 0; 
   11411:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("first main: %d",count++);
   11418:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1141b:	8d 50 01             	lea    0x1(%eax),%edx
   1141e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11421:	83 ec 08             	sub    $0x8,%esp
   11424:	50                   	push   %eax
   11425:	68 24 20 01 00       	push   $0x12024
   1142a:	e8 11 08 00 00       	call   11c40 <log_printf>
   1142f:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11432:	83 ec 0c             	sub    $0xc,%esp
   11435:	68 e8 03 00 00       	push   $0x3e8
   1143a:	e8 18 f4 ff ff       	call   10857 <sys_sleep>
   1143f:	83 c4 10             	add    $0x10,%esp
        log_printf("first main: %d",count++);
   11442:	eb d4                	jmp    11418 <init_main+0x7d>

00011444 <sem_init>:
#include "ipc/sem.h"


void sem_init (sem_t *sem, int init_count) {
   11444:	55                   	push   %ebp
   11445:	89 e5                	mov    %esp,%ebp
    
}
   11447:	90                   	nop
   11448:	5d                   	pop    %ebp
   11449:	c3                   	ret    

0001144a <hlt>:
static inline void hlt (void) {
   1144a:	55                   	push   %ebp
   1144b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1144d:	f4                   	hlt    
}
   1144e:	90                   	nop
   1144f:	5d                   	pop    %ebp
   11450:	c3                   	ret    

00011451 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   11451:	55                   	push   %ebp
   11452:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   11454:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11458:	74 3b                	je     11495 <kernel_strcpy+0x44>
   1145a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1145e:	74 35                	je     11495 <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   11460:	eb 17                	jmp    11479 <kernel_strcpy+0x28>
        *dest++ = *src++;
   11462:	8b 55 0c             	mov    0xc(%ebp),%edx
   11465:	8d 42 01             	lea    0x1(%edx),%eax
   11468:	89 45 0c             	mov    %eax,0xc(%ebp)
   1146b:	8b 45 08             	mov    0x8(%ebp),%eax
   1146e:	8d 48 01             	lea    0x1(%eax),%ecx
   11471:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11474:	0f b6 12             	movzbl (%edx),%edx
   11477:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   11479:	8b 45 08             	mov    0x8(%ebp),%eax
   1147c:	0f b6 00             	movzbl (%eax),%eax
   1147f:	84 c0                	test   %al,%al
   11481:	74 0a                	je     1148d <kernel_strcpy+0x3c>
   11483:	8b 45 0c             	mov    0xc(%ebp),%eax
   11486:	0f b6 00             	movzbl (%eax),%eax
   11489:	84 c0                	test   %al,%al
   1148b:	75 d5                	jne    11462 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   1148d:	8b 45 08             	mov    0x8(%ebp),%eax
   11490:	c6 00 00             	movb   $0x0,(%eax)
   11493:	eb 01                	jmp    11496 <kernel_strcpy+0x45>
        return;
   11495:	90                   	nop
}
   11496:	5d                   	pop    %ebp
   11497:	c3                   	ret    

00011498 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   11498:	55                   	push   %ebp
   11499:	89 e5                	mov    %esp,%ebp
   1149b:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   1149e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   114a2:	74 61                	je     11505 <kernel_strncpy+0x6d>
   114a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114a8:	74 5b                	je     11505 <kernel_strncpy+0x6d>
   114aa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   114ae:	74 55                	je     11505 <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   114b0:	8b 45 08             	mov    0x8(%ebp),%eax
   114b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   114b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   114b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   114bc:	eb 17                	jmp    114d5 <kernel_strncpy+0x3d>
        *d++ = *s++;
   114be:	8b 55 f8             	mov    -0x8(%ebp),%edx
   114c1:	8d 42 01             	lea    0x1(%edx),%eax
   114c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
   114c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114ca:	8d 48 01             	lea    0x1(%eax),%ecx
   114cd:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   114d0:	0f b6 12             	movzbl (%edx),%edx
   114d3:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   114d5:	8b 45 10             	mov    0x10(%ebp),%eax
   114d8:	8d 50 ff             	lea    -0x1(%eax),%edx
   114db:	89 55 10             	mov    %edx,0x10(%ebp)
   114de:	85 c0                	test   %eax,%eax
   114e0:	7e 0a                	jle    114ec <kernel_strncpy+0x54>
   114e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114e5:	0f b6 00             	movzbl (%eax),%eax
   114e8:	84 c0                	test   %al,%al
   114ea:	75 d2                	jne    114be <kernel_strncpy+0x26>
    }
    if (size == 0) {
   114ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   114f0:	75 0b                	jne    114fd <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   114f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114f5:	83 e8 01             	sub    $0x1,%eax
   114f8:	c6 00 00             	movb   $0x0,(%eax)
   114fb:	eb 09                	jmp    11506 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   114fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11500:	c6 00 00             	movb   $0x0,(%eax)
   11503:	eb 01                	jmp    11506 <kernel_strncpy+0x6e>
        return;
   11505:	90                   	nop
    }
}
   11506:	c9                   	leave  
   11507:	c3                   	ret    

00011508 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   11508:	55                   	push   %ebp
   11509:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   1150b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1150f:	74 06                	je     11517 <kernel_strncmp+0xf>
   11511:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11515:	75 0f                	jne    11526 <kernel_strncmp+0x1e>
        return -1;
   11517:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1151c:	eb 62                	jmp    11580 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   1151e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11522:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   11526:	8b 45 08             	mov    0x8(%ebp),%eax
   11529:	0f b6 00             	movzbl (%eax),%eax
   1152c:	84 c0                	test   %al,%al
   1152e:	74 20                	je     11550 <kernel_strncmp+0x48>
   11530:	8b 45 0c             	mov    0xc(%ebp),%eax
   11533:	0f b6 00             	movzbl (%eax),%eax
   11536:	84 c0                	test   %al,%al
   11538:	74 16                	je     11550 <kernel_strncmp+0x48>
   1153a:	8b 45 08             	mov    0x8(%ebp),%eax
   1153d:	0f b6 10             	movzbl (%eax),%edx
   11540:	8b 45 0c             	mov    0xc(%ebp),%eax
   11543:	0f b6 00             	movzbl (%eax),%eax
   11546:	38 c2                	cmp    %al,%dl
   11548:	75 06                	jne    11550 <kernel_strncmp+0x48>
   1154a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1154e:	75 ce                	jne    1151e <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11550:	8b 45 08             	mov    0x8(%ebp),%eax
   11553:	0f b6 00             	movzbl (%eax),%eax
   11556:	84 c0                	test   %al,%al
   11558:	74 21                	je     1157b <kernel_strncmp+0x73>
   1155a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1155d:	0f b6 00             	movzbl (%eax),%eax
   11560:	84 c0                	test   %al,%al
   11562:	74 17                	je     1157b <kernel_strncmp+0x73>
   11564:	8b 45 08             	mov    0x8(%ebp),%eax
   11567:	0f b6 10             	movzbl (%eax),%edx
   1156a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1156d:	0f b6 00             	movzbl (%eax),%eax
   11570:	38 c2                	cmp    %al,%dl
   11572:	74 07                	je     1157b <kernel_strncmp+0x73>
   11574:	b8 01 00 00 00       	mov    $0x1,%eax
   11579:	eb 05                	jmp    11580 <kernel_strncmp+0x78>
   1157b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11580:	5d                   	pop    %ebp
   11581:	c3                   	ret    

00011582 <kernel_strlen>:
int kernel_strlen(const char * str){
   11582:	55                   	push   %ebp
   11583:	89 e5                	mov    %esp,%ebp
   11585:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   11588:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1158c:	75 07                	jne    11595 <kernel_strlen+0x13>
        return 0;
   1158e:	b8 00 00 00 00       	mov    $0x0,%eax
   11593:	eb 26                	jmp    115bb <kernel_strlen+0x39>
    }

    const char * c = str;
   11595:	8b 45 08             	mov    0x8(%ebp),%eax
   11598:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   1159b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   115a2:	eb 04                	jmp    115a8 <kernel_strlen+0x26>
        len++;
   115a4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   115a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115ab:	8d 50 01             	lea    0x1(%eax),%edx
   115ae:	89 55 fc             	mov    %edx,-0x4(%ebp)
   115b1:	0f b6 00             	movzbl (%eax),%eax
   115b4:	84 c0                	test   %al,%al
   115b6:	75 ec                	jne    115a4 <kernel_strlen+0x22>
    }
    return len;
   115b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   115bb:	c9                   	leave  
   115bc:	c3                   	ret    

000115bd <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   115bd:	55                   	push   %ebp
   115be:	89 e5                	mov    %esp,%ebp
   115c0:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   115c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   115c7:	74 40                	je     11609 <kernel_memcpy+0x4c>
   115c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   115cd:	74 3a                	je     11609 <kernel_memcpy+0x4c>
   115cf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   115d3:	74 34                	je     11609 <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   115d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   115d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   115db:	8b 45 08             	mov    0x8(%ebp),%eax
   115de:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   115e1:	eb 17                	jmp    115fa <kernel_memcpy+0x3d>
        *d++ = *s++;
   115e3:	8b 55 fc             	mov    -0x4(%ebp),%edx
   115e6:	8d 42 01             	lea    0x1(%edx),%eax
   115e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
   115ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115ef:	8d 48 01             	lea    0x1(%eax),%ecx
   115f2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   115f5:	0f b6 12             	movzbl (%edx),%edx
   115f8:	88 10                	mov    %dl,(%eax)
    while(size--){
   115fa:	8b 45 10             	mov    0x10(%ebp),%eax
   115fd:	8d 50 ff             	lea    -0x1(%eax),%edx
   11600:	89 55 10             	mov    %edx,0x10(%ebp)
   11603:	85 c0                	test   %eax,%eax
   11605:	75 dc                	jne    115e3 <kernel_memcpy+0x26>
   11607:	eb 01                	jmp    1160a <kernel_memcpy+0x4d>
        return;
   11609:	90                   	nop
    }

}
   1160a:	c9                   	leave  
   1160b:	c3                   	ret    

0001160c <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   1160c:	55                   	push   %ebp
   1160d:	89 e5                	mov    %esp,%ebp
   1160f:	83 ec 14             	sub    $0x14,%esp
   11612:	8b 45 0c             	mov    0xc(%ebp),%eax
   11615:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   11618:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1161c:	74 2c                	je     1164a <kernel_memset+0x3e>
   1161e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11622:	74 26                	je     1164a <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11624:	8b 45 08             	mov    0x8(%ebp),%eax
   11627:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   1162a:	eb 0f                	jmp    1163b <kernel_memset+0x2f>
       *d++ = v; 
   1162c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1162f:	8d 50 01             	lea    0x1(%eax),%edx
   11632:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11635:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11639:	88 10                	mov    %dl,(%eax)
    while(size--){
   1163b:	8b 45 10             	mov    0x10(%ebp),%eax
   1163e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11641:	89 55 10             	mov    %edx,0x10(%ebp)
   11644:	85 c0                	test   %eax,%eax
   11646:	75 e4                	jne    1162c <kernel_memset+0x20>
   11648:	eb 01                	jmp    1164b <kernel_memset+0x3f>
        return;
   1164a:	90                   	nop
    }
}
   1164b:	c9                   	leave  
   1164c:	c3                   	ret    

0001164d <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   1164d:	55                   	push   %ebp
   1164e:	89 e5                	mov    %esp,%ebp
   11650:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   11653:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11657:	74 0c                	je     11665 <kernel_memcmp+0x18>
   11659:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1165d:	74 06                	je     11665 <kernel_memcmp+0x18>
   1165f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11663:	75 07                	jne    1166c <kernel_memcmp+0x1f>
        return -1;
   11665:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1166a:	eb 43                	jmp    116af <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   1166c:	8b 45 08             	mov    0x8(%ebp),%eax
   1166f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   11672:	8b 45 0c             	mov    0xc(%ebp),%eax
   11675:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11678:	eb 23                	jmp    1169d <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   1167a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1167d:	8d 50 01             	lea    0x1(%eax),%edx
   11680:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11683:	0f b6 08             	movzbl (%eax),%ecx
   11686:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11689:	8d 50 01             	lea    0x1(%eax),%edx
   1168c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1168f:	0f b6 00             	movzbl (%eax),%eax
   11692:	38 c1                	cmp    %al,%cl
   11694:	74 07                	je     1169d <kernel_memcmp+0x50>
            return -1;
   11696:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1169b:	eb 12                	jmp    116af <kernel_memcmp+0x62>
    while(size--){
   1169d:	8b 45 10             	mov    0x10(%ebp),%eax
   116a0:	8d 50 ff             	lea    -0x1(%eax),%edx
   116a3:	89 55 10             	mov    %edx,0x10(%ebp)
   116a6:	85 c0                	test   %eax,%eax
   116a8:	75 d0                	jne    1167a <kernel_memcmp+0x2d>
        }
    }
    return 0;
   116aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116af:	c9                   	leave  
   116b0:	c3                   	ret    

000116b1 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   116b1:	55                   	push   %ebp
   116b2:	89 e5                	mov    %esp,%ebp
   116b4:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   116b7:	8d 45 10             	lea    0x10(%ebp),%eax
   116ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   116bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116c0:	83 ec 04             	sub    $0x4,%esp
   116c3:	50                   	push   %eax
   116c4:	ff 75 0c             	pushl  0xc(%ebp)
   116c7:	ff 75 08             	pushl  0x8(%ebp)
   116ca:	e8 45 01 00 00       	call   11814 <kernel_vsprintf>
   116cf:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   116d2:	90                   	nop
   116d3:	c9                   	leave  
   116d4:	c3                   	ret    

000116d5 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   116d5:	55                   	push   %ebp
   116d6:	89 e5                	mov    %esp,%ebp
   116d8:	53                   	push   %ebx
   116d9:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   116dc:	8b 45 08             	mov    0x8(%ebp),%eax
   116df:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   116e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   116e5:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   116e8:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   116ec:	74 1d                	je     1170b <kernel_itoa+0x36>
   116ee:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   116f2:	74 17                	je     1170b <kernel_itoa+0x36>
   116f4:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   116f8:	74 11                	je     1170b <kernel_itoa+0x36>
   116fa:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   116fe:	74 0b                	je     1170b <kernel_itoa+0x36>
        *p = '\0';
   11700:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11703:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11706:	e9 03 01 00 00       	jmp    1180e <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1170b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11712:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11716:	79 19                	jns    11731 <kernel_itoa+0x5c>
   11718:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1171c:	75 13                	jne    11731 <kernel_itoa+0x5c>
        *p++ = '-';
   1171e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11721:	8d 50 01             	lea    0x1(%eax),%edx
   11724:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11727:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   1172a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11731:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11735:	74 3b                	je     11772 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   11737:	8b 0d 84 20 01 00    	mov    0x12084,%ecx
   1173d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11740:	99                   	cltd   
   11741:	f7 7d 10             	idivl  0x10(%ebp)
   11744:	89 d0                	mov    %edx,%eax
   11746:	83 c0 0f             	add    $0xf,%eax
   11749:	01 c8                	add    %ecx,%eax
   1174b:	0f b6 00             	movzbl (%eax),%eax
   1174e:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   11751:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11754:	8d 50 01             	lea    0x1(%eax),%edx
   11757:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1175a:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1175e:	88 10                	mov    %dl,(%eax)
            num /= base;
   11760:	8b 45 0c             	mov    0xc(%ebp),%eax
   11763:	99                   	cltd   
   11764:	f7 7d 10             	idivl  0x10(%ebp)
   11767:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   1176a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1176e:	75 c7                	jne    11737 <kernel_itoa+0x62>
   11770:	eb 4b                	jmp    117bd <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   11772:	8b 45 0c             	mov    0xc(%ebp),%eax
   11775:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   11778:	8b 0d 84 20 01 00    	mov    0x12084,%ecx
   1177e:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11781:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11784:	ba 00 00 00 00       	mov    $0x0,%edx
   11789:	f7 f3                	div    %ebx
   1178b:	89 d0                	mov    %edx,%eax
   1178d:	83 c0 0f             	add    $0xf,%eax
   11790:	01 c8                	add    %ecx,%eax
   11792:	0f b6 00             	movzbl (%eax),%eax
   11795:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11798:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1179b:	8d 50 01             	lea    0x1(%eax),%edx
   1179e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   117a1:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   117a5:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   117a7:	8b 5d 10             	mov    0x10(%ebp),%ebx
   117aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117ad:	ba 00 00 00 00       	mov    $0x0,%edx
   117b2:	f7 f3                	div    %ebx
   117b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   117b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   117bb:	75 bb                	jne    11778 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   117bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   117c0:	8d 50 ff             	lea    -0x1(%eax),%edx
   117c3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   117c6:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   117c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   117cd:	74 08                	je     117d7 <kernel_itoa+0x102>
   117cf:	8b 45 08             	mov    0x8(%ebp),%eax
   117d2:	83 c0 01             	add    $0x1,%eax
   117d5:	eb 03                	jmp    117da <kernel_itoa+0x105>
   117d7:	8b 45 08             	mov    0x8(%ebp),%eax
   117da:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   117dd:	eb 27                	jmp    11806 <kernel_itoa+0x131>
        char ch = *start;
   117df:	8b 45 ec             	mov    -0x14(%ebp),%eax
   117e2:	0f b6 00             	movzbl (%eax),%eax
   117e5:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   117e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   117eb:	0f b6 10             	movzbl (%eax),%edx
   117ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
   117f1:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   117f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   117f6:	8d 50 ff             	lea    -0x1(%eax),%edx
   117f9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   117fc:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11800:	88 10                	mov    %dl,(%eax)
        start++;
   11802:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   11806:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11809:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1180c:	72 d1                	jb     117df <kernel_itoa+0x10a>
    }
}
   1180e:	83 c4 20             	add    $0x20,%esp
   11811:	5b                   	pop    %ebx
   11812:	5d                   	pop    %ebp
   11813:	c3                   	ret    

00011814 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   11814:	55                   	push   %ebp
   11815:	89 e5                	mov    %esp,%ebp
   11817:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   1181a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11821:	8b 45 08             	mov    0x8(%ebp),%eax
   11824:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   11827:	e9 17 01 00 00       	jmp    11943 <kernel_vsprintf+0x12f>
        switch(state) {
   1182c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1182f:	85 c0                	test   %eax,%eax
   11831:	74 0a                	je     1183d <kernel_vsprintf+0x29>
   11833:	83 f8 01             	cmp    $0x1,%eax
   11836:	74 2b                	je     11863 <kernel_vsprintf+0x4f>
   11838:	e9 06 01 00 00       	jmp    11943 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   1183d:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11841:	75 0c                	jne    1184f <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   11843:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1184a:	e9 f4 00 00 00       	jmp    11943 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   1184f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11852:	8d 50 01             	lea    0x1(%eax),%edx
   11855:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11858:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1185c:	88 10                	mov    %dl,(%eax)
                }
                break;
   1185e:	e9 e0 00 00 00       	jmp    11943 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   11863:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11867:	75 47                	jne    118b0 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   11869:	8b 45 10             	mov    0x10(%ebp),%eax
   1186c:	8d 50 04             	lea    0x4(%eax),%edx
   1186f:	89 55 10             	mov    %edx,0x10(%ebp)
   11872:	8b 00                	mov    (%eax),%eax
   11874:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   11877:	ff 75 f4             	pushl  -0xc(%ebp)
   1187a:	e8 03 fd ff ff       	call   11582 <kernel_strlen>
   1187f:	83 c4 04             	add    $0x4,%esp
   11882:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   11885:	eb 17                	jmp    1189e <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   11887:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1188a:	8d 42 01             	lea    0x1(%edx),%eax
   1188d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11890:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11893:	8d 48 01             	lea    0x1(%eax),%ecx
   11896:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11899:	0f b6 12             	movzbl (%edx),%edx
   1189c:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   1189e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118a1:	8d 50 ff             	lea    -0x1(%eax),%edx
   118a4:	89 55 f0             	mov    %edx,-0x10(%ebp)
   118a7:	85 c0                	test   %eax,%eax
   118a9:	75 dc                	jne    11887 <kernel_vsprintf+0x73>
   118ab:	e9 8b 00 00 00       	jmp    1193b <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   118b0:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   118b4:	75 2e                	jne    118e4 <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   118b6:	8b 45 10             	mov    0x10(%ebp),%eax
   118b9:	8d 50 04             	lea    0x4(%eax),%edx
   118bc:	89 55 10             	mov    %edx,0x10(%ebp)
   118bf:	8b 00                	mov    (%eax),%eax
   118c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   118c4:	6a 0a                	push   $0xa
   118c6:	ff 75 e4             	pushl  -0x1c(%ebp)
   118c9:	ff 75 f8             	pushl  -0x8(%ebp)
   118cc:	e8 04 fe ff ff       	call   116d5 <kernel_itoa>
   118d1:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   118d4:	ff 75 f8             	pushl  -0x8(%ebp)
   118d7:	e8 a6 fc ff ff       	call   11582 <kernel_strlen>
   118dc:	83 c4 04             	add    $0x4,%esp
   118df:	01 45 f8             	add    %eax,-0x8(%ebp)
   118e2:	eb 57                	jmp    1193b <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   118e4:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   118e8:	75 2e                	jne    11918 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   118ea:	8b 45 10             	mov    0x10(%ebp),%eax
   118ed:	8d 50 04             	lea    0x4(%eax),%edx
   118f0:	89 55 10             	mov    %edx,0x10(%ebp)
   118f3:	8b 00                	mov    (%eax),%eax
   118f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   118f8:	6a 10                	push   $0x10
   118fa:	ff 75 e8             	pushl  -0x18(%ebp)
   118fd:	ff 75 f8             	pushl  -0x8(%ebp)
   11900:	e8 d0 fd ff ff       	call   116d5 <kernel_itoa>
   11905:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   11908:	ff 75 f8             	pushl  -0x8(%ebp)
   1190b:	e8 72 fc ff ff       	call   11582 <kernel_strlen>
   11910:	83 c4 04             	add    $0x4,%esp
   11913:	01 45 f8             	add    %eax,-0x8(%ebp)
   11916:	eb 23                	jmp    1193b <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   11918:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1191c:	75 1d                	jne    1193b <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   1191e:	8b 45 10             	mov    0x10(%ebp),%eax
   11921:	8d 50 04             	lea    0x4(%eax),%edx
   11924:	89 55 10             	mov    %edx,0x10(%ebp)
   11927:	8b 00                	mov    (%eax),%eax
   11929:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   1192c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1192f:	8d 50 01             	lea    0x1(%eax),%edx
   11932:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11935:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11939:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   1193b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   11942:	90                   	nop
    while ((ch = *fmt++)) {
   11943:	8b 45 0c             	mov    0xc(%ebp),%eax
   11946:	8d 50 01             	lea    0x1(%eax),%edx
   11949:	89 55 0c             	mov    %edx,0xc(%ebp)
   1194c:	0f b6 00             	movzbl (%eax),%eax
   1194f:	88 45 ef             	mov    %al,-0x11(%ebp)
   11952:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11956:	0f 85 d0 fe ff ff    	jne    1182c <kernel_vsprintf+0x18>
        }
    }
}
   1195c:	90                   	nop
   1195d:	c9                   	leave  
   1195e:	c3                   	ret    

0001195f <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   1195f:	55                   	push   %ebp
   11960:	89 e5                	mov    %esp,%ebp
   11962:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   11965:	83 ec 08             	sub    $0x8,%esp
   11968:	ff 75 14             	pushl  0x14(%ebp)
   1196b:	68 34 20 01 00       	push   $0x12034
   11970:	e8 cb 02 00 00       	call   11c40 <log_printf>
   11975:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   11978:	ff 75 10             	pushl  0x10(%ebp)
   1197b:	ff 75 0c             	pushl  0xc(%ebp)
   1197e:	ff 75 08             	pushl  0x8(%ebp)
   11981:	68 46 20 01 00       	push   $0x12046
   11986:	e8 b5 02 00 00       	call   11c40 <log_printf>
   1198b:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1198e:	e8 b7 fa ff ff       	call   1144a <hlt>
   11993:	eb f9                	jmp    1198e <panic+0x2f>

00011995 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11995:	55                   	push   %ebp
   11996:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11998:	8b 45 08             	mov    0x8(%ebp),%eax
   1199b:	8b 40 08             	mov    0x8(%eax),%eax
   1199e:	85 c0                	test   %eax,%eax
   119a0:	0f 94 c0             	sete   %al
   119a3:	0f b6 c0             	movzbl %al,%eax
}
   119a6:	5d                   	pop    %ebp
   119a7:	c3                   	ret    

000119a8 <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   119a8:	55                   	push   %ebp
   119a9:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   119ab:	8b 45 08             	mov    0x8(%ebp),%eax
   119ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   119b5:	8b 45 08             	mov    0x8(%ebp),%eax
   119b8:	8b 50 04             	mov    0x4(%eax),%edx
   119bb:	8b 45 08             	mov    0x8(%ebp),%eax
   119be:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   119c0:	8b 45 08             	mov    0x8(%ebp),%eax
   119c3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   119ca:	90                   	nop
   119cb:	5d                   	pop    %ebp
   119cc:	c3                   	ret    

000119cd <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   119cd:	55                   	push   %ebp
   119ce:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   119d0:	8b 45 08             	mov    0x8(%ebp),%eax
   119d3:	8b 10                	mov    (%eax),%edx
   119d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   119d8:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   119db:	8b 45 0c             	mov    0xc(%ebp),%eax
   119de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   119e4:	ff 75 08             	pushl  0x8(%ebp)
   119e7:	e8 a9 ff ff ff       	call   11995 <list_is_empty>
   119ec:	83 c4 04             	add    $0x4,%esp
   119ef:	85 c0                	test   %eax,%eax
   119f1:	74 16                	je     11a09 <list_insert_first+0x3c>
        list->first = list->last = node;
   119f3:	8b 45 08             	mov    0x8(%ebp),%eax
   119f6:	8b 55 0c             	mov    0xc(%ebp),%edx
   119f9:	89 50 04             	mov    %edx,0x4(%eax)
   119fc:	8b 45 08             	mov    0x8(%ebp),%eax
   119ff:	8b 50 04             	mov    0x4(%eax),%edx
   11a02:	8b 45 08             	mov    0x8(%ebp),%eax
   11a05:	89 10                	mov    %edx,(%eax)
   11a07:	eb 12                	jmp    11a1b <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   11a09:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0c:	8b 00                	mov    (%eax),%eax
   11a0e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a11:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11a13:	8b 45 08             	mov    0x8(%ebp),%eax
   11a16:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a19:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11a1b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a1e:	8b 40 08             	mov    0x8(%eax),%eax
   11a21:	8d 50 01             	lea    0x1(%eax),%edx
   11a24:	8b 45 08             	mov    0x8(%ebp),%eax
   11a27:	89 50 08             	mov    %edx,0x8(%eax)
}
   11a2a:	90                   	nop
   11a2b:	c9                   	leave  
   11a2c:	c3                   	ret    

00011a2d <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11a2d:	55                   	push   %ebp
   11a2e:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11a30:	8b 45 08             	mov    0x8(%ebp),%eax
   11a33:	8b 50 04             	mov    0x4(%eax),%edx
   11a36:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a39:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   11a3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a3e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   11a45:	ff 75 08             	pushl  0x8(%ebp)
   11a48:	e8 48 ff ff ff       	call   11995 <list_is_empty>
   11a4d:	83 c4 04             	add    $0x4,%esp
   11a50:	85 c0                	test   %eax,%eax
   11a52:	74 16                	je     11a6a <list_insert_last+0x3d>
        list->first = list->last = node;
   11a54:	8b 45 08             	mov    0x8(%ebp),%eax
   11a57:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a5a:	89 50 04             	mov    %edx,0x4(%eax)
   11a5d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a60:	8b 50 04             	mov    0x4(%eax),%edx
   11a63:	8b 45 08             	mov    0x8(%ebp),%eax
   11a66:	89 10                	mov    %edx,(%eax)
   11a68:	eb 15                	jmp    11a7f <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11a6a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6d:	8b 40 04             	mov    0x4(%eax),%eax
   11a70:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a73:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11a76:	8b 45 08             	mov    0x8(%ebp),%eax
   11a79:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a7c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   11a7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a82:	8b 40 08             	mov    0x8(%eax),%eax
   11a85:	8d 50 01             	lea    0x1(%eax),%edx
   11a88:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8b:	89 50 08             	mov    %edx,0x8(%eax)
}
   11a8e:	90                   	nop
   11a8f:	c9                   	leave  
   11a90:	c3                   	ret    

00011a91 <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   11a91:	55                   	push   %ebp
   11a92:	89 e5                	mov    %esp,%ebp
   11a94:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   11a97:	ff 75 08             	pushl  0x8(%ebp)
   11a9a:	e8 f6 fe ff ff       	call   11995 <list_is_empty>
   11a9f:	83 c4 04             	add    $0x4,%esp
   11aa2:	85 c0                	test   %eax,%eax
   11aa4:	74 07                	je     11aad <list_remove_first+0x1c>
        return (list_node_t *)0;
   11aa6:	b8 00 00 00 00       	mov    $0x0,%eax
   11aab:	eb 5b                	jmp    11b08 <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   11aad:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab0:	8b 00                	mov    (%eax),%eax
   11ab2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   11ab5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ab8:	8b 50 04             	mov    0x4(%eax),%edx
   11abb:	8b 45 08             	mov    0x8(%ebp),%eax
   11abe:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   11ac0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac3:	8b 00                	mov    (%eax),%eax
   11ac5:	85 c0                	test   %eax,%eax
   11ac7:	75 0c                	jne    11ad5 <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   11ac9:	8b 45 08             	mov    0x8(%ebp),%eax
   11acc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ad3:	eb 0c                	jmp    11ae1 <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   11ad5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ad8:	8b 40 04             	mov    0x4(%eax),%eax
   11adb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   11ae1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ae4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11aeb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11aee:	8b 50 04             	mov    0x4(%eax),%edx
   11af1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11af4:	89 10                	mov    %edx,(%eax)
    list->count--;
   11af6:	8b 45 08             	mov    0x8(%ebp),%eax
   11af9:	8b 40 08             	mov    0x8(%eax),%eax
   11afc:	8d 50 ff             	lea    -0x1(%eax),%edx
   11aff:	8b 45 08             	mov    0x8(%ebp),%eax
   11b02:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11b05:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11b08:	c9                   	leave  
   11b09:	c3                   	ret    

00011b0a <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   11b0a:	55                   	push   %ebp
   11b0b:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   11b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b10:	8b 00                	mov    (%eax),%eax
   11b12:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11b15:	75 0b                	jne    11b22 <list_remove+0x18>
        list->first = node->next;
   11b17:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b1a:	8b 50 04             	mov    0x4(%eax),%edx
   11b1d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b20:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   11b22:	8b 45 08             	mov    0x8(%ebp),%eax
   11b25:	8b 40 04             	mov    0x4(%eax),%eax
   11b28:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11b2b:	75 0b                	jne    11b38 <list_remove+0x2e>
        list->last = node->pre;
   11b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b30:	8b 10                	mov    (%eax),%edx
   11b32:	8b 45 08             	mov    0x8(%ebp),%eax
   11b35:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   11b38:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b3b:	8b 00                	mov    (%eax),%eax
   11b3d:	85 c0                	test   %eax,%eax
   11b3f:	74 0e                	je     11b4f <list_remove+0x45>
        node->pre->next = node->next;
   11b41:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b44:	8b 00                	mov    (%eax),%eax
   11b46:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b49:	8b 52 04             	mov    0x4(%edx),%edx
   11b4c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   11b4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b52:	8b 40 04             	mov    0x4(%eax),%eax
   11b55:	85 c0                	test   %eax,%eax
   11b57:	74 0d                	je     11b66 <list_remove+0x5c>
        node->next->pre = node->pre;
   11b59:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b5c:	8b 40 04             	mov    0x4(%eax),%eax
   11b5f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b62:	8b 12                	mov    (%edx),%edx
   11b64:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   11b66:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b69:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11b70:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b73:	8b 50 04             	mov    0x4(%eax),%edx
   11b76:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b79:	89 10                	mov    %edx,(%eax)

    list->count--;
   11b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7e:	8b 40 08             	mov    0x8(%eax),%eax
   11b81:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b84:	8b 45 08             	mov    0x8(%ebp),%eax
   11b87:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11b8a:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11b8d:	5d                   	pop    %ebp
   11b8e:	c3                   	ret    

00011b8f <inb>:
static inline uint8_t inb(uint16_t port) {
   11b8f:	55                   	push   %ebp
   11b90:	89 e5                	mov    %esp,%ebp
   11b92:	83 ec 14             	sub    $0x14,%esp
   11b95:	8b 45 08             	mov    0x8(%ebp),%eax
   11b98:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   11b9c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11ba0:	89 c2                	mov    %eax,%edx
   11ba2:	ec                   	in     (%dx),%al
   11ba3:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11ba6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11baa:	c9                   	leave  
   11bab:	c3                   	ret    

00011bac <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11bac:	55                   	push   %ebp
   11bad:	89 e5                	mov    %esp,%ebp
   11baf:	83 ec 08             	sub    $0x8,%esp
   11bb2:	8b 55 08             	mov    0x8(%ebp),%edx
   11bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bb8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11bbc:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11bbf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11bc3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11bc7:	ee                   	out    %al,(%dx)
}
   11bc8:	90                   	nop
   11bc9:	c9                   	leave  
   11bca:	c3                   	ret    

00011bcb <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值
#include "cpu/irq.h"
#define COM1_PORT 0x3f8

void log_init(void) {
   11bcb:	55                   	push   %ebp
   11bcc:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   11bce:	6a 00                	push   $0x0
   11bd0:	68 f9 03 00 00       	push   $0x3f9
   11bd5:	e8 d2 ff ff ff       	call   11bac <outb>
   11bda:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11bdd:	68 80 00 00 00       	push   $0x80
   11be2:	68 fb 03 00 00       	push   $0x3fb
   11be7:	e8 c0 ff ff ff       	call   11bac <outb>
   11bec:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11bef:	6a 03                	push   $0x3
   11bf1:	68 f8 03 00 00       	push   $0x3f8
   11bf6:	e8 b1 ff ff ff       	call   11bac <outb>
   11bfb:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11bfe:	6a 00                	push   $0x0
   11c00:	68 f9 03 00 00       	push   $0x3f9
   11c05:	e8 a2 ff ff ff       	call   11bac <outb>
   11c0a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11c0d:	6a 03                	push   $0x3
   11c0f:	68 fb 03 00 00       	push   $0x3fb
   11c14:	e8 93 ff ff ff       	call   11bac <outb>
   11c19:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11c1c:	68 c7 00 00 00       	push   $0xc7
   11c21:	68 fa 03 00 00       	push   $0x3fa
   11c26:	e8 81 ff ff ff       	call   11bac <outb>
   11c2b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11c2e:	6a 0f                	push   $0xf
   11c30:	68 fc 03 00 00       	push   $0x3fc
   11c35:	e8 72 ff ff ff       	call   11bac <outb>
   11c3a:	83 c4 08             	add    $0x8,%esp

}
   11c3d:	90                   	nop
   11c3e:	c9                   	leave  
   11c3f:	c3                   	ret    

00011c40 <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   11c40:	55                   	push   %ebp
   11c41:	89 e5                	mov    %esp,%ebp
   11c43:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   11c49:	83 ec 04             	sub    $0x4,%esp
   11c4c:	68 80 00 00 00       	push   $0x80
   11c51:	6a 00                	push   $0x0
   11c53:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11c59:	50                   	push   %eax
   11c5a:	e8 ad f9 ff ff       	call   1160c <kernel_memset>
   11c5f:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   11c62:	8d 45 0c             	lea    0xc(%ebp),%eax
   11c65:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf,fmt,args);
   11c6b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   11c71:	83 ec 04             	sub    $0x4,%esp
   11c74:	50                   	push   %eax
   11c75:	ff 75 08             	pushl  0x8(%ebp)
   11c78:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11c7e:	50                   	push   %eax
   11c7f:	e8 90 fb ff ff       	call   11814 <kernel_vsprintf>
   11c84:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    irq_state_t state = irq_enter_protection();
   11c87:	e8 cc f5 ff ff       	call   11258 <irq_enter_protection>
   11c8c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    const char * p = str_buf;
   11c8f:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11c95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11c98:	eb 31                	jmp    11ccb <log_printf+0x8b>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   11c9a:	90                   	nop
   11c9b:	83 ec 0c             	sub    $0xc,%esp
   11c9e:	68 fd 03 00 00       	push   $0x3fd
   11ca3:	e8 e7 fe ff ff       	call   11b8f <inb>
   11ca8:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   11cab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11cae:	8d 50 01             	lea    0x1(%eax),%edx
   11cb1:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11cb4:	0f b6 00             	movzbl (%eax),%eax
   11cb7:	0f b6 c0             	movzbl %al,%eax
   11cba:	83 ec 08             	sub    $0x8,%esp
   11cbd:	50                   	push   %eax
   11cbe:	68 f8 03 00 00       	push   $0x3f8
   11cc3:	e8 e4 fe ff ff       	call   11bac <outb>
   11cc8:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11ccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11cce:	0f b6 00             	movzbl (%eax),%eax
   11cd1:	84 c0                	test   %al,%al
   11cd3:	75 c5                	jne    11c9a <log_printf+0x5a>
    }
// 变列
    outb(COM1_PORT,'\r');
   11cd5:	83 ec 08             	sub    $0x8,%esp
   11cd8:	6a 0d                	push   $0xd
   11cda:	68 f8 03 00 00       	push   $0x3f8
   11cdf:	e8 c8 fe ff ff       	call   11bac <outb>
   11ce4:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   11ce7:	83 ec 08             	sub    $0x8,%esp
   11cea:	6a 0a                	push   $0xa
   11cec:	68 f8 03 00 00       	push   $0x3f8
   11cf1:	e8 b6 fe ff ff       	call   11bac <outb>
   11cf6:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   11cf9:	83 ec 0c             	sub    $0xc,%esp
   11cfc:	ff 75 f0             	pushl  -0x10(%ebp)
   11cff:	e8 6c f5 ff ff       	call   11270 <irq_leave_protection>
   11d04:	83 c4 10             	add    $0x10,%esp
}
   11d07:	90                   	nop
   11d08:	c9                   	leave  
   11d09:	c3                   	ret    
