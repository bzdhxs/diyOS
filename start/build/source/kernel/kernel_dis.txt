
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001e34 memsz 0x00005bf0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ac4  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000036c  00011ac4  00011ac4  00002ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011e30  00011e30  00002e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003db0  00011e40  00011e40  00002e34  2**5
                  ALLOC
  4 .debug_line   00000bfb  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002013  00000000  00000000  00003a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e0  00000000  00000000  00005a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  00006428  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000aba  00000000  00000000  00006548  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00007002  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000c58  00000000  00000000  00007014  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011ac4 l    d  .rodata	00000000 .rodata
00011e30 l    d  .data	00000000 .data
00011e40 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	0000001b list_node_init
000102c0 l     F .text	0000000b list_count
000102cb l     F .text	0000000a list_first
000102d5 l     F .text	00000017 write_tr
00011e40 l     O .bss	000000c4 task_manager
000102ec l     F .text	00000111 tss_init
00011b24 l     O .rodata	0000000a __func__.1998
00000000 l    df *ABS*	00000000 cpu.c
000106b2 l     F .text	00000028 lgdt
000106da l     F .text	0000001a far_jump
00011f20 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001088f l     F .text	0000001d inb
000108ac l     F .text	0000001f outb
000108cb l     F .text	00000007 cli
000108d2 l     F .text	00000007 sti
000108d9 l     F .text	00000028 lidt
00010901 l     F .text	00000007 hlt
00010908 l     F .text	00000010 read_eflags
00010918 l     F .text	0000000b write_eflags
00010923 l     F .text	000000d9 dump_core_regs
000109fc l     F .text	0000003e do_default_handler
00012720 l     O .bss	00000400 idt_table
00010c6a l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011061 l     F .text	0000001f outb
00012b20 l     O .bss	00000004 sys_tick
000110a8 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012b40 l     O .bss	00001000 init_task_stack
00013b40 l     O .bss	000000a8 init_task
00000000 l    df *ABS*	00000000 klib.c
00011204 l     F .text	00000007 hlt
00011e30 l     O .data	00000004 num2ch.1907
00000000 l    df *ABS*	00000000 list.c
0001174f l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011949 l     F .text	0000001d inb
00011966 l     F .text	0000001f outb
00011377 g     F .text	0000004f kernel_memcpy
000105c4 g     F .text	0000000a task_current
00011002 g     F .text	0000000b irq_enable_global
000117e7 g     F .text	00000064 list_insert_last
00010b6e g     F .text	0000001c do_handler_segment_not_present
00010550 g     F .text	00000029 task_set_ready
000113c6 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
0001082b g     F .text	0000000b cpu_init
00011985 g     F .text	00000075 log_init
0001116b g     F .text	00000099 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
0001120b g     F .text	00000047 kernel_strcpy
00010ee5 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010ac6 g     F .text	0000001c do_handler_overflow
00010bfa g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010ba6 g     F .text	0000001c do_handler_general_protection
00010a56 g     F .text	0000001c do_handler_divider
00010b36 g     F .text	0000001c do_handler_double_fault
00011142 g     F .text	00000029 init_task_entry
00010bc2 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
0001100d g     F .text	0000002b pic_send_eoi
00010513 g     F .text	0000000a task_first_task
00011080 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010c4e g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00013bf0 g     O .bss	00002000 stack
000100e2 g       .text	00000000 exception_handler_bound_range
00010afe g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010bde g     F .text	0000001c do_handler_fpu_error
000104d6 g     F .text	0000003d task_first_init
00010c16 g     F .text	0000001c do_handler_machine_check
00010a72 g     F .text	0000001c do_handler_Debug
00011787 g     F .text	00000060 list_insert_first
00010a8e g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00011252 g     F .text	00000070 kernel_strncpy
00010ff7 g     F .text	0000000b irq_disable_global
00010613 g     F .text	00000048 sys_sched_yield
00011120 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
000115ce g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
00010b52 g     F .text	0000001c do_handler_invalid_tss
00011719 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00010eab g     F .text	0000003a irq_install
00010777 g     F .text	0000006d init_gdt
00011038 g     F .text	00000018 irq_enter_protection
00010f70 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00010b1a g     F .text	0000001c do_handler_device_unavailable
000105ce g     F .text	00000045 task_dispatch
0001087b g     F .text	00000014 switch_to_tss
00010599 g     F .text	0000002b task_next_run
00011407 g     F .text	00000064 kernel_memcmp
00011762 g     F .text	00000025 list_init
00010c32 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00010579 g     F .text	00000020 task_set_block
00010a3a g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
000103fd g     F .text	0000001e task_switch_from_to
00010cfd g     F .text	000001ae irq_init
00011050 g     F .text	00000011 irq_leave_protection
0001133c g     F .text	0000003b kernel_strlen
000106f4 g     F .text	00000083 segment_desc_set
00010ae2 g     F .text	0000001c do_handler_bound_range
0001184b g     F .text	00000079 list_remove_first
000112c2 g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
0001051d g     F .text	00000033 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
0001065b g     F .text	00000057 task_time_tick
00010b8a g     F .text	0000001c do_handler_stack_segment_fault
00010aaa g     F .text	0000001c do_handler_breakpoint
000119fa g     F .text	000000ca log_printf
0001041b g     F .text	000000bb task_init
0001146b g     F .text	00000024 kernel_sprintf
00010836 g     F .text	00000045 gdt_alloc_desc
0001148f g     F .text	0000013f kernel_itoa
000118c4 g     F .text	00000085 list_remove
000107e4 g     F .text	00000047 gate_desc_set
00011108 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 17 11 00 00       	call   11120 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc f0 5b 01 00       	mov    $0x15bf0,%esp
    jmp init_main
   10023:	e9 43 11 00 00       	jmp    1116b <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 01 0a 00 00       	call   10a3a <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 fe 09 00 00       	call   10a56 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 fb 09 00 00       	call   10a72 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 f8 09 00 00       	call   10a8e <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 f5 09 00 00       	call   10aaa <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 f2 09 00 00       	call   10ac6 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 ef 09 00 00       	call   10ae2 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 ec 09 00 00       	call   10afe <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 e9 09 00 00       	call   10b1a <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 e8 09 00 00       	call   10b36 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 e7 09 00 00       	call   10b52 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 e6 09 00 00       	call   10b6e <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 e5 09 00 00       	call   10b8a <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 e4 09 00 00       	call   10ba6 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 e3 09 00 00       	call   10bc2 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 e0 09 00 00       	call   10bde <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 df 09 00 00       	call   10bfa <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 dc 09 00 00       	call   10c16 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 d9 09 00 00       	call   10c32 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 d6 09 00 00       	call   10c4e <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 e9 0d 00 00       	call   11080 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102b2:	8b 45 08             	mov    0x8(%ebp),%eax
   102b5:	8b 50 04             	mov    0x4(%eax),%edx
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	89 10                	mov    %edx,(%eax)
}
   102bd:	90                   	nop
   102be:	5d                   	pop    %ebp
   102bf:	c3                   	ret    

000102c0 <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
    return list->count;
   102c3:	8b 45 08             	mov    0x8(%ebp),%eax
   102c6:	8b 40 08             	mov    0x8(%eax),%eax
}
   102c9:	5d                   	pop    %ebp
   102ca:	c3                   	ret    

000102cb <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   102cb:	55                   	push   %ebp
   102cc:	89 e5                	mov    %esp,%ebp
    return list->first;
   102ce:	8b 45 08             	mov    0x8(%ebp),%eax
   102d1:	8b 00                	mov    (%eax),%eax
}
   102d3:	5d                   	pop    %ebp
   102d4:	c3                   	ret    

000102d5 <write_tr>:

static inline void hlt (void) {
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel) {
   102d5:	55                   	push   %ebp
   102d6:	89 e5                	mov    %esp,%ebp
   102d8:	83 ec 04             	sub    $0x4,%esp
   102db:	8b 45 08             	mov    0x8(%ebp),%eax
   102de:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   102e2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102e6:	0f 00 d8             	ltr    %ax
}
   102e9:	90                   	nop
   102ea:	c9                   	leave  
   102eb:	c3                   	ret    

000102ec <tss_init>:
#include "tools/log.h"
#include "comm/cpu_instr.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102ec:	55                   	push   %ebp
   102ed:	89 e5                	mov    %esp,%ebp
   102ef:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102f2:	e8 3f 05 00 00       	call   10836 <gdt_alloc_desc>
   102f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   102fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102fe:	79 1a                	jns    1031a <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   10300:	83 ec 0c             	sub    $0xc,%esp
   10303:	68 c4 1a 01 00       	push   $0x11ac4
   10308:	e8 ed 16 00 00       	call   119fa <log_printf>
   1030d:	83 c4 10             	add    $0x10,%esp
        return -1;
   10310:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10315:	e9 e1 00 00 00       	jmp    103fb <tss_init+0x10f>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   1031a:	8b 45 08             	mov    0x8(%ebp),%eax
   1031d:	83 c0 3c             	add    $0x3c,%eax
   10320:	68 89 00 00 00       	push   $0x89
   10325:	6a 68                	push   $0x68
   10327:	50                   	push   %eax
   10328:	ff 75 f4             	pushl  -0xc(%ebp)
   1032b:	e8 c4 03 00 00       	call   106f4 <segment_desc_set>
   10330:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10333:	8b 45 08             	mov    0x8(%ebp),%eax
   10336:	83 c0 3c             	add    $0x3c,%eax
   10339:	83 ec 04             	sub    $0x4,%esp
   1033c:	6a 68                	push   $0x68
   1033e:	6a 00                	push   $0x0
   10340:	50                   	push   %eax
   10341:	e8 80 10 00 00       	call   113c6 <kernel_memset>
   10346:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1034f:	89 50 5c             	mov    %edx,0x5c(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10352:	8b 45 08             	mov    0x8(%ebp),%eax
   10355:	8b 55 10             	mov    0x10(%ebp),%edx
   10358:	89 50 40             	mov    %edx,0x40(%eax)
   1035b:	8b 45 08             	mov    0x8(%ebp),%eax
   1035e:	8b 50 40             	mov    0x40(%eax),%edx
   10361:	8b 45 08             	mov    0x8(%ebp),%eax
   10364:	89 50 74             	mov    %edx,0x74(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10367:	8b 45 08             	mov    0x8(%ebp),%eax
   1036a:	c7 40 44 10 00 00 00 	movl   $0x10,0x44(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10371:	8b 45 08             	mov    0x8(%ebp),%eax
   10374:	c7 40 60 02 02 00 00 	movl   $0x202,0x60(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   1037b:	8b 45 08             	mov    0x8(%ebp),%eax
   1037e:	c7 80 98 00 00 00 10 	movl   $0x10,0x98(%eax)
   10385:	00 00 00 
   10388:	8b 45 08             	mov    0x8(%ebp),%eax
   1038b:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
   1039a:	8b 45 08             	mov    0x8(%ebp),%eax
   1039d:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   103a3:	8b 45 08             	mov    0x8(%ebp),%eax
   103a6:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   103ac:	8b 45 08             	mov    0x8(%ebp),%eax
   103af:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   103b5:	8b 45 08             	mov    0x8(%ebp),%eax
   103b8:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
   103c7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ca:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   103d0:	8b 45 08             	mov    0x8(%ebp),%eax
   103d3:	c7 80 88 00 00 00 08 	movl   $0x8,0x88(%eax)
   103da:	00 00 00 
    task->tss.iomap = 0;
   103dd:	8b 45 08             	mov    0x8(%ebp),%eax
   103e0:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
   103e7:	00 00 00 

    task->tss_sel = tss_sel;
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103f0:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    return 0;
   103f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103fb:	c9                   	leave  
   103fc:	c3                   	ret    

000103fd <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   103fd:	55                   	push   %ebp
   103fe:	89 e5                	mov    %esp,%ebp
   10400:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10403:	8b 45 0c             	mov    0xc(%ebp),%eax
   10406:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
   1040c:	83 ec 0c             	sub    $0xc,%esp
   1040f:	50                   	push   %eax
   10410:	e8 66 04 00 00       	call   1087b <switch_to_tss>
   10415:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   10418:	90                   	nop
   10419:	c9                   	leave  
   1041a:	c3                   	ret    

0001041b <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   1041b:	55                   	push   %ebp
   1041c:	89 e5                	mov    %esp,%ebp
   1041e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10421:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10425:	75 19                	jne    10440 <task_init+0x25>
   10427:	68 d7 1a 01 00       	push   $0x11ad7
   1042c:	68 24 1b 01 00       	push   $0x11b24
   10431:	6a 36                	push   $0x36
   10433:	68 ec 1a 01 00       	push   $0x11aec
   10438:	e8 dc 12 00 00       	call   11719 <panic>
   1043d:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   10440:	83 ec 04             	sub    $0x4,%esp
   10443:	ff 75 14             	pushl  0x14(%ebp)
   10446:	ff 75 10             	pushl  0x10(%ebp)
   10449:	ff 75 08             	pushl  0x8(%ebp)
   1044c:	e8 9b fe ff ff       	call   102ec <tss_init>
   10451:	83 c4 10             	add    $0x10,%esp


    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10454:	8b 45 08             	mov    0x8(%ebp),%eax
   10457:	83 c0 0c             	add    $0xc,%eax
   1045a:	83 ec 04             	sub    $0x4,%esp
   1045d:	6a 20                	push   $0x20
   1045f:	ff 75 0c             	pushl  0xc(%ebp)
   10462:	50                   	push   %eax
   10463:	e8 ea 0d 00 00       	call   11252 <kernel_strncpy>
   10468:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1046b:	8b 45 08             	mov    0x8(%ebp),%eax
   1046e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	c7 40 04 0a 00 00 00 	movl   $0xa,0x4(%eax)
    task->slice_ticks = task->time_ticks;
   1047e:	8b 45 08             	mov    0x8(%ebp),%eax
   10481:	8b 50 04             	mov    0x4(%eax),%edx
   10484:	8b 45 08             	mov    0x8(%ebp),%eax
   10487:	89 50 08             	mov    %edx,0x8(%eax)
    list_node_init(&task->all_node);
   1048a:	8b 45 08             	mov    0x8(%ebp),%eax
   1048d:	83 c0 34             	add    $0x34,%eax
   10490:	83 ec 0c             	sub    $0xc,%esp
   10493:	50                   	push   %eax
   10494:	e8 0c fe ff ff       	call   102a5 <list_node_init>
   10499:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   1049c:	8b 45 08             	mov    0x8(%ebp),%eax
   1049f:	83 c0 2c             	add    $0x2c,%eax
   104a2:	83 ec 0c             	sub    $0xc,%esp
   104a5:	50                   	push   %eax
   104a6:	e8 fa fd ff ff       	call   102a5 <list_node_init>
   104ab:	83 c4 10             	add    $0x10,%esp
    task_set_ready(task);
   104ae:	83 ec 0c             	sub    $0xc,%esp
   104b1:	ff 75 08             	pushl  0x8(%ebp)
   104b4:	e8 97 00 00 00       	call   10550 <task_set_ready>
   104b9:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   104bc:	8b 45 08             	mov    0x8(%ebp),%eax
   104bf:	83 c0 34             	add    $0x34,%eax
   104c2:	83 ec 08             	sub    $0x8,%esp
   104c5:	50                   	push   %eax
   104c6:	68 50 1e 01 00       	push   $0x11e50
   104cb:	e8 17 13 00 00       	call   117e7 <list_insert_last>
   104d0:	83 c4 10             	add    $0x10,%esp

}
   104d3:	90                   	nop
   104d4:	c9                   	leave  
   104d5:	c3                   	ret    

000104d6 <task_first_init>:

void task_first_init (void) {
   104d6:	55                   	push   %ebp
   104d7:	89 e5                	mov    %esp,%ebp
   104d9:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   104dc:	6a 00                	push   $0x0
   104de:	6a 00                	push   $0x0
   104e0:	68 19 1b 01 00       	push   $0x11b19
   104e5:	68 5c 1e 01 00       	push   $0x11e5c
   104ea:	e8 2c ff ff ff       	call   1041b <task_init>
   104ef:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   104f2:	a1 00 1f 01 00       	mov    0x11f00,%eax
   104f7:	0f b7 c0             	movzwl %ax,%eax
   104fa:	83 ec 0c             	sub    $0xc,%esp
   104fd:	50                   	push   %eax
   104fe:	e8 d2 fd ff ff       	call   102d5 <write_tr>
   10503:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10506:	c7 05 40 1e 01 00 5c 	movl   $0x11e5c,0x11e40
   1050d:	1e 01 00 
}
   10510:	90                   	nop
   10511:	c9                   	leave  
   10512:	c3                   	ret    

00010513 <task_first_task>:

task_t * task_first_task (void) {
   10513:	55                   	push   %ebp
   10514:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10516:	b8 5c 1e 01 00       	mov    $0x11e5c,%eax
}
   1051b:	5d                   	pop    %ebp
   1051c:	c3                   	ret    

0001051d <task_manager_init>:

void task_manager_init (void) {
   1051d:	55                   	push   %ebp
   1051e:	89 e5                	mov    %esp,%ebp
   10520:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10523:	83 ec 0c             	sub    $0xc,%esp
   10526:	68 44 1e 01 00       	push   $0x11e44
   1052b:	e8 32 12 00 00       	call   11762 <list_init>
   10530:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10533:	83 ec 0c             	sub    $0xc,%esp
   10536:	68 50 1e 01 00       	push   $0x11e50
   1053b:	e8 22 12 00 00       	call   11762 <list_init>
   10540:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10543:	c7 05 40 1e 01 00 00 	movl   $0x0,0x11e40
   1054a:	00 00 00 
}
   1054d:	90                   	nop
   1054e:	c9                   	leave  
   1054f:	c3                   	ret    

00010550 <task_set_ready>:

void task_set_ready(task_t * task) {
   10550:	55                   	push   %ebp
   10551:	89 e5                	mov    %esp,%ebp
   10553:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list,&task->run_node);
   10556:	8b 45 08             	mov    0x8(%ebp),%eax
   10559:	83 c0 2c             	add    $0x2c,%eax
   1055c:	83 ec 08             	sub    $0x8,%esp
   1055f:	50                   	push   %eax
   10560:	68 44 1e 01 00       	push   $0x11e44
   10565:	e8 7d 12 00 00       	call   117e7 <list_insert_last>
   1056a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1056d:	8b 45 08             	mov    0x8(%ebp),%eax
   10570:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10576:	90                   	nop
   10577:	c9                   	leave  
   10578:	c3                   	ret    

00010579 <task_set_block>:

void task_set_block(task_t * task) {
   10579:	55                   	push   %ebp
   1057a:	89 e5                	mov    %esp,%ebp
   1057c:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list,&task->run_node);
   1057f:	8b 45 08             	mov    0x8(%ebp),%eax
   10582:	83 c0 2c             	add    $0x2c,%eax
   10585:	83 ec 08             	sub    $0x8,%esp
   10588:	50                   	push   %eax
   10589:	68 44 1e 01 00       	push   $0x11e44
   1058e:	e8 31 13 00 00       	call   118c4 <list_remove>
   10593:	83 c4 10             	add    $0x10,%esp

}
   10596:	90                   	nop
   10597:	c9                   	leave  
   10598:	c3                   	ret    

00010599 <task_next_run>:


task_t * task_next_run(void) {
   10599:	55                   	push   %ebp
   1059a:	89 e5                	mov    %esp,%ebp
   1059c:	83 ec 10             	sub    $0x10,%esp
    list_node_t * task_node = list_first(&task_manager.ready_list);
   1059f:	68 44 1e 01 00       	push   $0x11e44
   105a4:	e8 22 fd ff ff       	call   102cb <list_first>
   105a9:	83 c4 04             	add    $0x4,%esp
   105ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   105af:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   105b3:	74 08                	je     105bd <task_next_run+0x24>
   105b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105b8:	83 e8 2c             	sub    $0x2c,%eax
   105bb:	eb 05                	jmp    105c2 <task_next_run+0x29>
   105bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105c2:	c9                   	leave  
   105c3:	c3                   	ret    

000105c4 <task_current>:

task_t * task_current (void) {
   105c4:	55                   	push   %ebp
   105c5:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   105c7:	a1 40 1e 01 00       	mov    0x11e40,%eax
}
   105cc:	5d                   	pop    %ebp
   105cd:	c3                   	ret    

000105ce <task_dispatch>:


void task_dispatch(void) {
   105ce:	55                   	push   %ebp
   105cf:	89 e5                	mov    %esp,%ebp
   105d1:	83 ec 18             	sub    $0x18,%esp
    task_t * to = task_next_run();
   105d4:	e8 c0 ff ff ff       	call   10599 <task_next_run>
   105d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if( to != task_manager.curr_task) {
   105dc:	a1 40 1e 01 00       	mov    0x11e40,%eax
   105e1:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   105e4:	74 2a                	je     10610 <task_dispatch+0x42>
        task_t * from = task_current();
   105e6:	e8 d9 ff ff ff       	call   105c4 <task_current>
   105eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.curr_task = to;
   105ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105f1:	a3 40 1e 01 00       	mov    %eax,0x11e40
        to->state = TASK_RUNNING;
   105f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105f9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from,to);
   105ff:	83 ec 08             	sub    $0x8,%esp
   10602:	ff 75 f4             	pushl  -0xc(%ebp)
   10605:	ff 75 f0             	pushl  -0x10(%ebp)
   10608:	e8 f0 fd ff ff       	call   103fd <task_switch_from_to>
   1060d:	83 c4 10             	add    $0x10,%esp
    }
}
   10610:	90                   	nop
   10611:	c9                   	leave  
   10612:	c3                   	ret    

00010613 <sys_sched_yield>:

int sys_sched_yield(void) {
   10613:	55                   	push   %ebp
   10614:	89 e5                	mov    %esp,%ebp
   10616:	83 ec 18             	sub    $0x18,%esp
    
    if (list_count(&task_manager.ready_list) > 1) {
   10619:	68 44 1e 01 00       	push   $0x11e44
   1061e:	e8 9d fc ff ff       	call   102c0 <list_count>
   10623:	83 c4 04             	add    $0x4,%esp
   10626:	83 f8 01             	cmp    $0x1,%eax
   10629:	7e 29                	jle    10654 <sys_sched_yield+0x41>
        task_t * curr_task = task_current();
   1062b:	e8 94 ff ff ff       	call   105c4 <task_current>
   10630:	89 45 f4             	mov    %eax,-0xc(%ebp)

        task_set_block(curr_task);
   10633:	83 ec 0c             	sub    $0xc,%esp
   10636:	ff 75 f4             	pushl  -0xc(%ebp)
   10639:	e8 3b ff ff ff       	call   10579 <task_set_block>
   1063e:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10641:	83 ec 0c             	sub    $0xc,%esp
   10644:	ff 75 f4             	pushl  -0xc(%ebp)
   10647:	e8 04 ff ff ff       	call   10550 <task_set_ready>
   1064c:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   1064f:	e8 7a ff ff ff       	call   105ce <task_dispatch>
    }

    return 0;
   10654:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10659:	c9                   	leave  
   1065a:	c3                   	ret    

0001065b <task_time_tick>:

void task_time_tick(void) {
   1065b:	55                   	push   %ebp
   1065c:	89 e5                	mov    %esp,%ebp
   1065e:	83 ec 18             	sub    $0x18,%esp
    
    task_t * curr_task = task_current();
   10661:	e8 5e ff ff ff       	call   105c4 <task_current>
   10666:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (--curr_task->slice_ticks == 0) {
   10669:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1066c:	8b 40 08             	mov    0x8(%eax),%eax
   1066f:	8d 50 ff             	lea    -0x1(%eax),%edx
   10672:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10675:	89 50 08             	mov    %edx,0x8(%eax)
   10678:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067b:	8b 40 08             	mov    0x8(%eax),%eax
   1067e:	85 c0                	test   %eax,%eax
   10680:	75 2d                	jne    106af <task_time_tick+0x54>
        
        curr_task->slice_ticks = curr_task->time_ticks;
   10682:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10685:	8b 50 04             	mov    0x4(%eax),%edx
   10688:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1068b:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_block(curr_task);
   1068e:	83 ec 0c             	sub    $0xc,%esp
   10691:	ff 75 f4             	pushl  -0xc(%ebp)
   10694:	e8 e0 fe ff ff       	call   10579 <task_set_block>
   10699:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);      
   1069c:	83 ec 0c             	sub    $0xc,%esp
   1069f:	ff 75 f4             	pushl  -0xc(%ebp)
   106a2:	e8 a9 fe ff ff       	call   10550 <task_set_ready>
   106a7:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   106aa:	e8 1f ff ff ff       	call   105ce <task_dispatch>

    }
}
   106af:	90                   	nop
   106b0:	c9                   	leave  
   106b1:	c3                   	ret    

000106b2 <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   106b2:	55                   	push   %ebp
   106b3:	89 e5                	mov    %esp,%ebp
   106b5:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   106b8:	8b 45 08             	mov    0x8(%ebp),%eax
   106bb:	c1 e8 10             	shr    $0x10,%eax
   106be:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   106c2:	8b 45 08             	mov    0x8(%ebp),%eax
   106c5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   106c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   106cc:	83 e8 01             	sub    $0x1,%eax
   106cf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   106d3:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   106d7:	90                   	nop
   106d8:	c9                   	leave  
   106d9:	c3                   	ret    

000106da <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   106da:	55                   	push   %ebp
   106db:	89 e5                	mov    %esp,%ebp
   106dd:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   106e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   106e3:	89 45 f8             	mov    %eax,-0x8(%ebp)
   106e6:	8b 45 08             	mov    0x8(%ebp),%eax
   106e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   106ec:	8d 45 f8             	lea    -0x8(%ebp),%eax
   106ef:	ff 28                	ljmp   *(%eax)
}
   106f1:	90                   	nop
   106f2:	c9                   	leave  
   106f3:	c3                   	ret    

000106f4 <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   106f4:	55                   	push   %ebp
   106f5:	89 e5                	mov    %esp,%ebp
   106f7:	83 ec 14             	sub    $0x14,%esp
   106fa:	8b 45 14             	mov    0x14(%ebp),%eax
   106fd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   10701:	8b 45 08             	mov    0x8(%ebp),%eax
   10704:	83 e0 f8             	and    $0xfffffff8,%eax
   10707:	05 20 1f 01 00       	add    $0x11f20,%eax
   1070c:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   1070f:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10716:	76 0f                	jbe    10727 <segment_desc_set+0x33>
		attr |= SEG_G;
   10718:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1071e:	8b 45 10             	mov    0x10(%ebp),%eax
   10721:	c1 e8 0c             	shr    $0xc,%eax
   10724:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   10727:	8b 45 10             	mov    0x10(%ebp),%eax
   1072a:	89 c2                	mov    %eax,%edx
   1072c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1072f:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10732:	8b 45 0c             	mov    0xc(%ebp),%eax
   10735:	89 c2                	mov    %eax,%edx
   10737:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1073a:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1073e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10741:	c1 e8 10             	shr    $0x10,%eax
   10744:	89 c2                	mov    %eax,%edx
   10746:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10749:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1074c:	8b 45 10             	mov    0x10(%ebp),%eax
   1074f:	c1 e8 10             	shr    $0x10,%eax
   10752:	c1 e0 08             	shl    $0x8,%eax
   10755:	66 25 00 0f          	and    $0xf00,%ax
   10759:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1075d:	89 c2                	mov    %eax,%edx
   1075f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10762:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10766:	8b 45 0c             	mov    0xc(%ebp),%eax
   10769:	c1 e8 18             	shr    $0x18,%eax
   1076c:	89 c2                	mov    %eax,%edx
   1076e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10771:	88 50 07             	mov    %dl,0x7(%eax)

}
   10774:	90                   	nop
   10775:	c9                   	leave  
   10776:	c3                   	ret    

00010777 <init_gdt>:

void init_gdt(void){
   10777:	55                   	push   %ebp
   10778:	89 e5                	mov    %esp,%ebp
   1077a:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1077d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10784:	eb 19                	jmp    1079f <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10786:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10789:	c1 e0 03             	shl    $0x3,%eax
   1078c:	6a 00                	push   $0x0
   1078e:	6a 00                	push   $0x0
   10790:	6a 00                	push   $0x0
   10792:	50                   	push   %eax
   10793:	e8 5c ff ff ff       	call   106f4 <segment_desc_set>
   10798:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1079b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1079f:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   107a6:	7e de                	jle    10786 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   107a8:	68 9a 40 00 00       	push   $0x409a
   107ad:	6a ff                	push   $0xffffffff
   107af:	6a 00                	push   $0x0
   107b1:	6a 08                	push   $0x8
   107b3:	e8 3c ff ff ff       	call   106f4 <segment_desc_set>
   107b8:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   107bb:	68 92 40 00 00       	push   $0x4092
   107c0:	6a ff                	push   $0xffffffff
   107c2:	6a 00                	push   $0x0
   107c4:	6a 10                	push   $0x10
   107c6:	e8 29 ff ff ff       	call   106f4 <segment_desc_set>
   107cb:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   107ce:	b8 20 1f 01 00       	mov    $0x11f20,%eax
   107d3:	68 00 08 00 00       	push   $0x800
   107d8:	50                   	push   %eax
   107d9:	e8 d4 fe ff ff       	call   106b2 <lgdt>
   107de:	83 c4 08             	add    $0x8,%esp
}
   107e1:	90                   	nop
   107e2:	c9                   	leave  
   107e3:	c3                   	ret    

000107e4 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   107e4:	55                   	push   %ebp
   107e5:	89 e5                	mov    %esp,%ebp
   107e7:	83 ec 08             	sub    $0x8,%esp
   107ea:	8b 55 0c             	mov    0xc(%ebp),%edx
   107ed:	8b 45 14             	mov    0x14(%ebp),%eax
   107f0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   107f4:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   107f8:	8b 45 10             	mov    0x10(%ebp),%eax
   107fb:	89 c2                	mov    %eax,%edx
   107fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10800:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10803:	8b 45 08             	mov    0x8(%ebp),%eax
   10806:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1080a:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1080e:	8b 45 08             	mov    0x8(%ebp),%eax
   10811:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10815:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10819:	8b 45 10             	mov    0x10(%ebp),%eax
   1081c:	c1 e8 10             	shr    $0x10,%eax
   1081f:	89 c2                	mov    %eax,%edx
   10821:	8b 45 08             	mov    0x8(%ebp),%eax
   10824:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10828:	90                   	nop
   10829:	c9                   	leave  
   1082a:	c3                   	ret    

0001082b <cpu_init>:

void cpu_init (void){
   1082b:	55                   	push   %ebp
   1082c:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   1082e:	e8 44 ff ff ff       	call   10777 <init_gdt>
}
   10833:	90                   	nop
   10834:	5d                   	pop    %ebp
   10835:	c3                   	ret    

00010836 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   10836:	55                   	push   %ebp
   10837:	89 e5                	mov    %esp,%ebp
   10839:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   1083c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10843:	eb 26                	jmp    1086b <gdt_alloc_desc+0x35>

        segment_desc_t * desc = gdt_table + i;
   10845:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10848:	c1 e0 03             	shl    $0x3,%eax
   1084b:	05 20 1f 01 00       	add    $0x11f20,%eax
   10850:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   10853:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10856:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1085a:	66 85 c0             	test   %ax,%ax
   1085d:	75 08                	jne    10867 <gdt_alloc_desc+0x31>
            return i * sizeof(segment_desc_t);
   1085f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10862:	c1 e0 03             	shl    $0x3,%eax
   10865:	eb 12                	jmp    10879 <gdt_alloc_desc+0x43>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10867:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1086b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10872:	7e d1                	jle    10845 <gdt_alloc_desc+0xf>
        }
    }
    return -1;
   10874:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10879:	c9                   	leave  
   1087a:	c3                   	ret    

0001087b <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   1087b:	55                   	push   %ebp
   1087c:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   1087e:	8b 45 08             	mov    0x8(%ebp),%eax
   10881:	6a 00                	push   $0x0
   10883:	50                   	push   %eax
   10884:	e8 51 fe ff ff       	call   106da <far_jump>
   10889:	83 c4 08             	add    $0x8,%esp
   1088c:	90                   	nop
   1088d:	c9                   	leave  
   1088e:	c3                   	ret    

0001088f <inb>:
static inline uint8_t inb(uint16_t port) {
   1088f:	55                   	push   %ebp
   10890:	89 e5                	mov    %esp,%ebp
   10892:	83 ec 14             	sub    $0x14,%esp
   10895:	8b 45 08             	mov    0x8(%ebp),%eax
   10898:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   1089c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   108a0:	89 c2                	mov    %eax,%edx
   108a2:	ec                   	in     (%dx),%al
   108a3:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   108a6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <outb>:
static inline void outb(uint16_t port,uint8_t data){
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 08             	sub    $0x8,%esp
   108b2:	8b 55 08             	mov    0x8(%ebp),%edx
   108b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   108b8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   108bc:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   108bf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   108c3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   108c7:	ee                   	out    %al,(%dx)
}
   108c8:	90                   	nop
   108c9:	c9                   	leave  
   108ca:	c3                   	ret    

000108cb <cli>:
static inline void cli(void){
   108cb:	55                   	push   %ebp
   108cc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   108ce:	fa                   	cli    
}
   108cf:	90                   	nop
   108d0:	5d                   	pop    %ebp
   108d1:	c3                   	ret    

000108d2 <sti>:
static inline void sti(void){
   108d2:	55                   	push   %ebp
   108d3:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   108d5:	fb                   	sti    
}
   108d6:	90                   	nop
   108d7:	5d                   	pop    %ebp
   108d8:	c3                   	ret    

000108d9 <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   108d9:	55                   	push   %ebp
   108da:	89 e5                	mov    %esp,%ebp
   108dc:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   108df:	8b 45 08             	mov    0x8(%ebp),%eax
   108e2:	c1 e8 10             	shr    $0x10,%eax
   108e5:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   108e9:	8b 45 08             	mov    0x8(%ebp),%eax
   108ec:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   108f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   108f3:	83 e8 01             	sub    $0x1,%eax
   108f6:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   108fa:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   108fe:	90                   	nop
   108ff:	c9                   	leave  
   10900:	c3                   	ret    

00010901 <hlt>:
static inline void hlt (void) {
   10901:	55                   	push   %ebp
   10902:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10904:	f4                   	hlt    
}
   10905:	90                   	nop
   10906:	5d                   	pop    %ebp
   10907:	c3                   	ret    

00010908 <read_eflags>:

static inline uint32_t read_eflags (void) {
   10908:	55                   	push   %ebp
   10909:	89 e5                	mov    %esp,%ebp
   1090b:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__ ("pushf\n\tpop %%eax":"=a"(eflags));    
   1090e:	9c                   	pushf  
   1090f:	58                   	pop    %eax
   10910:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10913:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10916:	c9                   	leave  
   10917:	c3                   	ret    

00010918 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   10918:	55                   	push   %ebp
   10919:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__ ("push %%eax\n\tpopf"::"a"(eflags));  
   1091b:	8b 45 08             	mov    0x8(%ebp),%eax
   1091e:	50                   	push   %eax
   1091f:	9d                   	popf   
}
   10920:	90                   	nop
   10921:	5d                   	pop    %ebp
   10922:	c3                   	ret    

00010923 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   10923:	55                   	push   %ebp
   10924:	89 e5                	mov    %esp,%ebp
   10926:	57                   	push   %edi
   10927:	56                   	push   %esi
   10928:	53                   	push   %ebx
   10929:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   1092c:	8b 45 08             	mov    0x8(%ebp),%eax
   1092f:	8b 50 34             	mov    0x34(%eax),%edx
   10932:	8b 45 08             	mov    0x8(%ebp),%eax
   10935:	8b 40 30             	mov    0x30(%eax),%eax
   10938:	83 ec 04             	sub    $0x4,%esp
   1093b:	52                   	push   %edx
   1093c:	50                   	push   %eax
   1093d:	68 30 1b 01 00       	push   $0x11b30
   10942:	e8 b3 10 00 00       	call   119fa <log_printf>
   10947:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   1094a:	8b 45 08             	mov    0x8(%ebp),%eax
   1094d:	8b 38                	mov    (%eax),%edi
   1094f:	8b 45 08             	mov    0x8(%ebp),%eax
   10952:	8b 70 04             	mov    0x4(%eax),%esi
   10955:	8b 45 08             	mov    0x8(%ebp),%eax
   10958:	8b 58 0c             	mov    0xc(%eax),%ebx
   1095b:	8b 45 08             	mov    0x8(%ebp),%eax
   1095e:	8b 48 08             	mov    0x8(%eax),%ecx
   10961:	8b 45 08             	mov    0x8(%ebp),%eax
   10964:	8b 50 0c             	mov    0xc(%eax),%edx
   10967:	8b 45 08             	mov    0x8(%ebp),%eax
   1096a:	8b 40 3c             	mov    0x3c(%eax),%eax
   1096d:	83 ec 04             	sub    $0x4,%esp
   10970:	57                   	push   %edi
   10971:	56                   	push   %esi
   10972:	53                   	push   %ebx
   10973:	51                   	push   %ecx
   10974:	52                   	push   %edx
   10975:	50                   	push   %eax
   10976:	68 48 1b 01 00       	push   $0x11b48
   1097b:	e8 7a 10 00 00       	call   119fa <log_printf>
   10980:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   10983:	8b 45 08             	mov    0x8(%ebp),%eax
   10986:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10989:	8b 45 08             	mov    0x8(%ebp),%eax
   1098c:	8b 40 18             	mov    0x18(%eax),%eax
   1098f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10992:	8b 45 08             	mov    0x8(%ebp),%eax
   10995:	8b 58 14             	mov    0x14(%eax),%ebx
   10998:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1099b:	8b 45 08             	mov    0x8(%ebp),%eax
   1099e:	8b 78 10             	mov    0x10(%eax),%edi
   109a1:	8b 45 08             	mov    0x8(%ebp),%eax
   109a4:	8b 70 24             	mov    0x24(%eax),%esi
   109a7:	8b 45 08             	mov    0x8(%ebp),%eax
   109aa:	8b 58 28             	mov    0x28(%eax),%ebx
   109ad:	8b 45 08             	mov    0x8(%ebp),%eax
   109b0:	8b 50 20             	mov    0x20(%eax),%edx
   109b3:	8b 45 08             	mov    0x8(%ebp),%eax
   109b6:	8b 40 2c             	mov    0x2c(%eax),%eax
   109b9:	83 ec 0c             	sub    $0xc,%esp
   109bc:	51                   	push   %ecx
   109bd:	ff 75 e4             	pushl  -0x1c(%ebp)
   109c0:	ff 75 e0             	pushl  -0x20(%ebp)
   109c3:	57                   	push   %edi
   109c4:	56                   	push   %esi
   109c5:	53                   	push   %ebx
   109c6:	52                   	push   %edx
   109c7:	50                   	push   %eax
   109c8:	68 74 1b 01 00       	push   $0x11b74
   109cd:	e8 28 10 00 00       	call   119fa <log_printf>
   109d2:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   109d5:	8b 45 08             	mov    0x8(%ebp),%eax
   109d8:	8b 50 40             	mov    0x40(%eax),%edx
   109db:	8b 45 08             	mov    0x8(%ebp),%eax
   109de:	8b 40 38             	mov    0x38(%eax),%eax
   109e1:	83 ec 04             	sub    $0x4,%esp
   109e4:	52                   	push   %edx
   109e5:	50                   	push   %eax
   109e6:	68 bd 1b 01 00       	push   $0x11bbd
   109eb:	e8 0a 10 00 00       	call   119fa <log_printf>
   109f0:	83 c4 10             	add    $0x10,%esp
}
   109f3:	90                   	nop
   109f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
   109f7:	5b                   	pop    %ebx
   109f8:	5e                   	pop    %esi
   109f9:	5f                   	pop    %edi
   109fa:	5d                   	pop    %ebp
   109fb:	c3                   	ret    

000109fc <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   109fc:	55                   	push   %ebp
   109fd:	89 e5                	mov    %esp,%ebp
   109ff:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10a02:	83 ec 0c             	sub    $0xc,%esp
   10a05:	68 d3 1b 01 00       	push   $0x11bd3
   10a0a:	e8 eb 0f 00 00       	call   119fa <log_printf>
   10a0f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10a12:	83 ec 08             	sub    $0x8,%esp
   10a15:	ff 75 0c             	pushl  0xc(%ebp)
   10a18:	68 f0 1b 01 00       	push   $0x11bf0
   10a1d:	e8 d8 0f 00 00       	call   119fa <log_printf>
   10a22:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10a25:	83 ec 0c             	sub    $0xc,%esp
   10a28:	ff 75 08             	pushl  0x8(%ebp)
   10a2b:	e8 f3 fe ff ff       	call   10923 <dump_core_regs>
   10a30:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   10a33:	e8 c9 fe ff ff       	call   10901 <hlt>
   10a38:	eb f9                	jmp    10a33 <do_default_handler+0x37>

00010a3a <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   10a3a:	55                   	push   %ebp
   10a3b:	89 e5                	mov    %esp,%ebp
   10a3d:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   10a40:	83 ec 08             	sub    $0x8,%esp
   10a43:	68 0a 1c 01 00       	push   $0x11c0a
   10a48:	ff 75 08             	pushl  0x8(%ebp)
   10a4b:	e8 ac ff ff ff       	call   109fc <do_default_handler>
   10a50:	83 c4 10             	add    $0x10,%esp

}
   10a53:	90                   	nop
   10a54:	c9                   	leave  
   10a55:	c3                   	ret    

00010a56 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   10a56:	55                   	push   %ebp
   10a57:	89 e5                	mov    %esp,%ebp
   10a59:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   10a5c:	83 ec 08             	sub    $0x8,%esp
   10a5f:	68 1c 1c 01 00       	push   $0x11c1c
   10a64:	ff 75 08             	pushl  0x8(%ebp)
   10a67:	e8 90 ff ff ff       	call   109fc <do_default_handler>
   10a6c:	83 c4 10             	add    $0x10,%esp
}
   10a6f:	90                   	nop
   10a70:	c9                   	leave  
   10a71:	c3                   	ret    

00010a72 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   10a72:	55                   	push   %ebp
   10a73:	89 e5                	mov    %esp,%ebp
   10a75:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   10a78:	83 ec 08             	sub    $0x8,%esp
   10a7b:	68 2d 1c 01 00       	push   $0x11c2d
   10a80:	ff 75 08             	pushl  0x8(%ebp)
   10a83:	e8 74 ff ff ff       	call   109fc <do_default_handler>
   10a88:	83 c4 10             	add    $0x10,%esp
}
   10a8b:	90                   	nop
   10a8c:	c9                   	leave  
   10a8d:	c3                   	ret    

00010a8e <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   10a8e:	55                   	push   %ebp
   10a8f:	89 e5                	mov    %esp,%ebp
   10a91:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   10a94:	83 ec 08             	sub    $0x8,%esp
   10a97:	68 3d 1c 01 00       	push   $0x11c3d
   10a9c:	ff 75 08             	pushl  0x8(%ebp)
   10a9f:	e8 58 ff ff ff       	call   109fc <do_default_handler>
   10aa4:	83 c4 10             	add    $0x10,%esp
}
   10aa7:	90                   	nop
   10aa8:	c9                   	leave  
   10aa9:	c3                   	ret    

00010aaa <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   10aaa:	55                   	push   %ebp
   10aab:	89 e5                	mov    %esp,%ebp
   10aad:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10ab0:	83 ec 08             	sub    $0x8,%esp
   10ab3:	68 4c 1c 01 00       	push   $0x11c4c
   10ab8:	ff 75 08             	pushl  0x8(%ebp)
   10abb:	e8 3c ff ff ff       	call   109fc <do_default_handler>
   10ac0:	83 c4 10             	add    $0x10,%esp
}
   10ac3:	90                   	nop
   10ac4:	c9                   	leave  
   10ac5:	c3                   	ret    

00010ac6 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10ac6:	55                   	push   %ebp
   10ac7:	89 e5                	mov    %esp,%ebp
   10ac9:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   10acc:	83 ec 08             	sub    $0x8,%esp
   10acf:	68 58 1c 01 00       	push   $0x11c58
   10ad4:	ff 75 08             	pushl  0x8(%ebp)
   10ad7:	e8 20 ff ff ff       	call   109fc <do_default_handler>
   10adc:	83 c4 10             	add    $0x10,%esp
}
   10adf:	90                   	nop
   10ae0:	c9                   	leave  
   10ae1:	c3                   	ret    

00010ae2 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10ae2:	55                   	push   %ebp
   10ae3:	89 e5                	mov    %esp,%ebp
   10ae5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10ae8:	83 ec 08             	sub    $0x8,%esp
   10aeb:	68 62 1c 01 00       	push   $0x11c62
   10af0:	ff 75 08             	pushl  0x8(%ebp)
   10af3:	e8 04 ff ff ff       	call   109fc <do_default_handler>
   10af8:	83 c4 10             	add    $0x10,%esp
}
   10afb:	90                   	nop
   10afc:	c9                   	leave  
   10afd:	c3                   	ret    

00010afe <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   10afe:	55                   	push   %ebp
   10aff:	89 e5                	mov    %esp,%ebp
   10b01:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10b04:	83 ec 08             	sub    $0x8,%esp
   10b07:	68 78 1c 01 00       	push   $0x11c78
   10b0c:	ff 75 08             	pushl  0x8(%ebp)
   10b0f:	e8 e8 fe ff ff       	call   109fc <do_default_handler>
   10b14:	83 c4 10             	add    $0x10,%esp
}
   10b17:	90                   	nop
   10b18:	c9                   	leave  
   10b19:	c3                   	ret    

00010b1a <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   10b1a:	55                   	push   %ebp
   10b1b:	89 e5                	mov    %esp,%ebp
   10b1d:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   10b20:	83 ec 08             	sub    $0x8,%esp
   10b23:	68 88 1c 01 00       	push   $0x11c88
   10b28:	ff 75 08             	pushl  0x8(%ebp)
   10b2b:	e8 cc fe ff ff       	call   109fc <do_default_handler>
   10b30:	83 c4 10             	add    $0x10,%esp
}
   10b33:	90                   	nop
   10b34:	c9                   	leave  
   10b35:	c3                   	ret    

00010b36 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10b36:	55                   	push   %ebp
   10b37:	89 e5                	mov    %esp,%ebp
   10b39:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   10b3c:	83 ec 08             	sub    $0x8,%esp
   10b3f:	68 9e 1c 01 00       	push   $0x11c9e
   10b44:	ff 75 08             	pushl  0x8(%ebp)
   10b47:	e8 b0 fe ff ff       	call   109fc <do_default_handler>
   10b4c:	83 c4 10             	add    $0x10,%esp
}
   10b4f:	90                   	nop
   10b50:	c9                   	leave  
   10b51:	c3                   	ret    

00010b52 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   10b52:	55                   	push   %ebp
   10b53:	89 e5                	mov    %esp,%ebp
   10b55:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   10b58:	83 ec 08             	sub    $0x8,%esp
   10b5b:	68 ac 1c 01 00       	push   $0x11cac
   10b60:	ff 75 08             	pushl  0x8(%ebp)
   10b63:	e8 94 fe ff ff       	call   109fc <do_default_handler>
   10b68:	83 c4 10             	add    $0x10,%esp
}
   10b6b:	90                   	nop
   10b6c:	c9                   	leave  
   10b6d:	c3                   	ret    

00010b6e <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   10b6e:	55                   	push   %ebp
   10b6f:	89 e5                	mov    %esp,%ebp
   10b71:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10b74:	83 ec 08             	sub    $0x8,%esp
   10b77:	68 b8 1c 01 00       	push   $0x11cb8
   10b7c:	ff 75 08             	pushl  0x8(%ebp)
   10b7f:	e8 78 fe ff ff       	call   109fc <do_default_handler>
   10b84:	83 c4 10             	add    $0x10,%esp
}
   10b87:	90                   	nop
   10b88:	c9                   	leave  
   10b89:	c3                   	ret    

00010b8a <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   10b8a:	55                   	push   %ebp
   10b8b:	89 e5                	mov    %esp,%ebp
   10b8d:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   10b90:	83 ec 08             	sub    $0x8,%esp
   10b93:	68 cd 1c 01 00       	push   $0x11ccd
   10b98:	ff 75 08             	pushl  0x8(%ebp)
   10b9b:	e8 5c fe ff ff       	call   109fc <do_default_handler>
   10ba0:	83 c4 10             	add    $0x10,%esp
}
   10ba3:	90                   	nop
   10ba4:	c9                   	leave  
   10ba5:	c3                   	ret    

00010ba6 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   10ba6:	55                   	push   %ebp
   10ba7:	89 e5                	mov    %esp,%ebp
   10ba9:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   10bac:	83 ec 08             	sub    $0x8,%esp
   10baf:	68 e2 1c 01 00       	push   $0x11ce2
   10bb4:	ff 75 08             	pushl  0x8(%ebp)
   10bb7:	e8 40 fe ff ff       	call   109fc <do_default_handler>
   10bbc:	83 c4 10             	add    $0x10,%esp
}
   10bbf:	90                   	nop
   10bc0:	c9                   	leave  
   10bc1:	c3                   	ret    

00010bc2 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10bc2:	55                   	push   %ebp
   10bc3:	89 e5                	mov    %esp,%ebp
   10bc5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10bc8:	83 ec 08             	sub    $0x8,%esp
   10bcb:	68 f6 1c 01 00       	push   $0x11cf6
   10bd0:	ff 75 08             	pushl  0x8(%ebp)
   10bd3:	e8 24 fe ff ff       	call   109fc <do_default_handler>
   10bd8:	83 c4 10             	add    $0x10,%esp
}
   10bdb:	90                   	nop
   10bdc:	c9                   	leave  
   10bdd:	c3                   	ret    

00010bde <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   10bde:	55                   	push   %ebp
   10bdf:	89 e5                	mov    %esp,%ebp
   10be1:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10be4:	83 ec 08             	sub    $0x8,%esp
   10be7:	68 02 1d 01 00       	push   $0x11d02
   10bec:	ff 75 08             	pushl  0x8(%ebp)
   10bef:	e8 08 fe ff ff       	call   109fc <do_default_handler>
   10bf4:	83 c4 10             	add    $0x10,%esp
}
   10bf7:	90                   	nop
   10bf8:	c9                   	leave  
   10bf9:	c3                   	ret    

00010bfa <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   10bfa:	55                   	push   %ebp
   10bfb:	89 e5                	mov    %esp,%ebp
   10bfd:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10c00:	83 ec 08             	sub    $0x8,%esp
   10c03:	68 20 1d 01 00       	push   $0x11d20
   10c08:	ff 75 08             	pushl  0x8(%ebp)
   10c0b:	e8 ec fd ff ff       	call   109fc <do_default_handler>
   10c10:	83 c4 10             	add    $0x10,%esp
}
   10c13:	90                   	nop
   10c14:	c9                   	leave  
   10c15:	c3                   	ret    

00010c16 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10c16:	55                   	push   %ebp
   10c17:	89 e5                	mov    %esp,%ebp
   10c19:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   10c1c:	83 ec 08             	sub    $0x8,%esp
   10c1f:	68 31 1d 01 00       	push   $0x11d31
   10c24:	ff 75 08             	pushl  0x8(%ebp)
   10c27:	e8 d0 fd ff ff       	call   109fc <do_default_handler>
   10c2c:	83 c4 10             	add    $0x10,%esp
}
   10c2f:	90                   	nop
   10c30:	c9                   	leave  
   10c31:	c3                   	ret    

00010c32 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10c32:	55                   	push   %ebp
   10c33:	89 e5                	mov    %esp,%ebp
   10c35:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10c38:	83 ec 08             	sub    $0x8,%esp
   10c3b:	68 40 1d 01 00       	push   $0x11d40
   10c40:	ff 75 08             	pushl  0x8(%ebp)
   10c43:	e8 b4 fd ff ff       	call   109fc <do_default_handler>
   10c48:	83 c4 10             	add    $0x10,%esp
}
   10c4b:	90                   	nop
   10c4c:	c9                   	leave  
   10c4d:	c3                   	ret    

00010c4e <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   10c4e:	55                   	push   %ebp
   10c4f:	89 e5                	mov    %esp,%ebp
   10c51:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10c54:	83 ec 08             	sub    $0x8,%esp
   10c57:	68 5f 1d 01 00       	push   $0x11d5f
   10c5c:	ff 75 08             	pushl  0x8(%ebp)
   10c5f:	e8 98 fd ff ff       	call   109fc <do_default_handler>
   10c64:	83 c4 10             	add    $0x10,%esp
}
   10c67:	90                   	nop
   10c68:	c9                   	leave  
   10c69:	c3                   	ret    

00010c6a <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   10c6a:	55                   	push   %ebp
   10c6b:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c6d:	6a 11                	push   $0x11
   10c6f:	6a 20                	push   $0x20
   10c71:	e8 36 fc ff ff       	call   108ac <outb>
   10c76:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10c79:	6a 20                	push   $0x20
   10c7b:	6a 21                	push   $0x21
   10c7d:	e8 2a fc ff ff       	call   108ac <outb>
   10c82:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10c85:	6a 04                	push   $0x4
   10c87:	6a 21                	push   $0x21
   10c89:	e8 1e fc ff ff       	call   108ac <outb>
   10c8e:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10c91:	6a 01                	push   $0x1
   10c93:	6a 21                	push   $0x21
   10c95:	e8 12 fc ff ff       	call   108ac <outb>
   10c9a:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10c9d:	6a 11                	push   $0x11
   10c9f:	68 a0 00 00 00       	push   $0xa0
   10ca4:	e8 03 fc ff ff       	call   108ac <outb>
   10ca9:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10cac:	6a 28                	push   $0x28
   10cae:	68 a1 00 00 00       	push   $0xa1
   10cb3:	e8 f4 fb ff ff       	call   108ac <outb>
   10cb8:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10cbb:	6a 02                	push   $0x2
   10cbd:	68 a1 00 00 00       	push   $0xa1
   10cc2:	e8 e5 fb ff ff       	call   108ac <outb>
   10cc7:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10cca:	6a 01                	push   $0x1
   10ccc:	68 a1 00 00 00       	push   $0xa1
   10cd1:	e8 d6 fb ff ff       	call   108ac <outb>
   10cd6:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10cd9:	68 fb 00 00 00       	push   $0xfb
   10cde:	6a 21                	push   $0x21
   10ce0:	e8 c7 fb ff ff       	call   108ac <outb>
   10ce5:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10ce8:	68 ff 00 00 00       	push   $0xff
   10ced:	68 a1 00 00 00       	push   $0xa1
   10cf2:	e8 b5 fb ff ff       	call   108ac <outb>
   10cf7:	83 c4 08             	add    $0x8,%esp
}
   10cfa:	90                   	nop
   10cfb:	c9                   	leave  
   10cfc:	c3                   	ret    

00010cfd <irq_init>:


void irq_init(void){ 
   10cfd:	55                   	push   %ebp
   10cfe:	89 e5                	mov    %esp,%ebp
   10d00:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10d0a:	eb 25                	jmp    10d31 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10d0c:	ba 28 00 01 00       	mov    $0x10028,%edx
   10d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d14:	c1 e0 03             	shl    $0x3,%eax
   10d17:	05 20 27 01 00       	add    $0x12720,%eax
   10d1c:	68 00 8e 00 00       	push   $0x8e00
   10d21:	52                   	push   %edx
   10d22:	6a 08                	push   $0x8
   10d24:	50                   	push   %eax
   10d25:	e8 ba fa ff ff       	call   107e4 <gate_desc_set>
   10d2a:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10d2d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10d31:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10d35:	7e d5                	jle    10d0c <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10d37:	83 ec 08             	sub    $0x8,%esp
   10d3a:	68 47 00 01 00       	push   $0x10047
   10d3f:	6a 00                	push   $0x0
   10d41:	e8 65 01 00 00       	call   10eab <irq_install>
   10d46:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10d49:	83 ec 08             	sub    $0x8,%esp
   10d4c:	68 66 00 01 00       	push   $0x10066
   10d51:	6a 01                	push   $0x1
   10d53:	e8 53 01 00 00       	call   10eab <irq_install>
   10d58:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10d5b:	83 ec 08             	sub    $0x8,%esp
   10d5e:	68 85 00 01 00       	push   $0x10085
   10d63:	6a 02                	push   $0x2
   10d65:	e8 41 01 00 00       	call   10eab <irq_install>
   10d6a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10d6d:	83 ec 08             	sub    $0x8,%esp
   10d70:	68 a4 00 01 00       	push   $0x100a4
   10d75:	6a 03                	push   $0x3
   10d77:	e8 2f 01 00 00       	call   10eab <irq_install>
   10d7c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10d7f:	83 ec 08             	sub    $0x8,%esp
   10d82:	68 c3 00 01 00       	push   $0x100c3
   10d87:	6a 04                	push   $0x4
   10d89:	e8 1d 01 00 00       	call   10eab <irq_install>
   10d8e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10d91:	83 ec 08             	sub    $0x8,%esp
   10d94:	68 e2 00 01 00       	push   $0x100e2
   10d99:	6a 05                	push   $0x5
   10d9b:	e8 0b 01 00 00       	call   10eab <irq_install>
   10da0:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10da3:	83 ec 08             	sub    $0x8,%esp
   10da6:	68 01 01 01 00       	push   $0x10101
   10dab:	6a 06                	push   $0x6
   10dad:	e8 f9 00 00 00       	call   10eab <irq_install>
   10db2:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10db5:	83 ec 08             	sub    $0x8,%esp
   10db8:	68 20 01 01 00       	push   $0x10120
   10dbd:	6a 07                	push   $0x7
   10dbf:	e8 e7 00 00 00       	call   10eab <irq_install>
   10dc4:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10dc7:	83 ec 08             	sub    $0x8,%esp
   10dca:	68 3f 01 01 00       	push   $0x1013f
   10dcf:	6a 08                	push   $0x8
   10dd1:	e8 d5 00 00 00       	call   10eab <irq_install>
   10dd6:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10dd9:	83 ec 08             	sub    $0x8,%esp
   10ddc:	68 5c 01 01 00       	push   $0x1015c
   10de1:	6a 0a                	push   $0xa
   10de3:	e8 c3 00 00 00       	call   10eab <irq_install>
   10de8:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10deb:	83 ec 08             	sub    $0x8,%esp
   10dee:	68 79 01 01 00       	push   $0x10179
   10df3:	6a 0b                	push   $0xb
   10df5:	e8 b1 00 00 00       	call   10eab <irq_install>
   10dfa:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10dfd:	83 ec 08             	sub    $0x8,%esp
   10e00:	68 96 01 01 00       	push   $0x10196
   10e05:	6a 0c                	push   $0xc
   10e07:	e8 9f 00 00 00       	call   10eab <irq_install>
   10e0c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10e0f:	83 ec 08             	sub    $0x8,%esp
   10e12:	68 b3 01 01 00       	push   $0x101b3
   10e17:	6a 0d                	push   $0xd
   10e19:	e8 8d 00 00 00       	call   10eab <irq_install>
   10e1e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10e21:	83 ec 08             	sub    $0x8,%esp
   10e24:	68 d0 01 01 00       	push   $0x101d0
   10e29:	6a 0e                	push   $0xe
   10e2b:	e8 7b 00 00 00       	call   10eab <irq_install>
   10e30:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10e33:	83 ec 08             	sub    $0x8,%esp
   10e36:	68 ed 01 01 00       	push   $0x101ed
   10e3b:	6a 10                	push   $0x10
   10e3d:	e8 69 00 00 00       	call   10eab <irq_install>
   10e42:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10e45:	83 ec 08             	sub    $0x8,%esp
   10e48:	68 0c 02 01 00       	push   $0x1020c
   10e4d:	6a 11                	push   $0x11
   10e4f:	e8 57 00 00 00       	call   10eab <irq_install>
   10e54:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10e57:	83 ec 08             	sub    $0x8,%esp
   10e5a:	68 29 02 01 00       	push   $0x10229
   10e5f:	6a 12                	push   $0x12
   10e61:	e8 45 00 00 00       	call   10eab <irq_install>
   10e66:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10e69:	83 ec 08             	sub    $0x8,%esp
   10e6c:	68 48 02 01 00       	push   $0x10248
   10e71:	6a 13                	push   $0x13
   10e73:	e8 33 00 00 00       	call   10eab <irq_install>
   10e78:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10e7b:	83 ec 08             	sub    $0x8,%esp
   10e7e:	68 67 02 01 00       	push   $0x10267
   10e83:	6a 14                	push   $0x14
   10e85:	e8 21 00 00 00       	call   10eab <irq_install>
   10e8a:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10e8d:	b8 20 27 01 00       	mov    $0x12720,%eax
   10e92:	83 ec 08             	sub    $0x8,%esp
   10e95:	68 00 04 00 00       	push   $0x400
   10e9a:	50                   	push   %eax
   10e9b:	e8 39 fa ff ff       	call   108d9 <lidt>
   10ea0:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10ea3:	e8 c2 fd ff ff       	call   10c6a <init_pic>
}
   10ea8:	90                   	nop
   10ea9:	c9                   	leave  
   10eaa:	c3                   	ret    

00010eab <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   10eab:	55                   	push   %ebp
   10eac:	89 e5                	mov    %esp,%ebp
   10eae:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10eb1:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10eb5:	7e 07                	jle    10ebe <irq_install+0x13>
        return -1;
   10eb7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ebc:	eb 25                	jmp    10ee3 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   10ebe:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ec1:	8b 55 08             	mov    0x8(%ebp),%edx
   10ec4:	c1 e2 03             	shl    $0x3,%edx
   10ec7:	81 c2 20 27 01 00    	add    $0x12720,%edx
   10ecd:	68 00 8e 00 00       	push   $0x8e00
   10ed2:	50                   	push   %eax
   10ed3:	6a 08                	push   $0x8
   10ed5:	52                   	push   %edx
   10ed6:	e8 09 f9 ff ff       	call   107e4 <gate_desc_set>
   10edb:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   10ede:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ee3:	c9                   	leave  
   10ee4:	c3                   	ret    

00010ee5 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   10ee5:	55                   	push   %ebp
   10ee6:	89 e5                	mov    %esp,%ebp
   10ee8:	53                   	push   %ebx
   10ee9:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10eec:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ef0:	7e 78                	jle    10f6a <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10ef2:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10ef6:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10efa:	7f 32                	jg     10f2e <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10efc:	6a 21                	push   $0x21
   10efe:	e8 8c f9 ff ff       	call   1088f <inb>
   10f03:	83 c4 04             	add    $0x4,%esp
   10f06:	89 c2                	mov    %eax,%edx
   10f08:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0b:	bb 01 00 00 00       	mov    $0x1,%ebx
   10f10:	89 c1                	mov    %eax,%ecx
   10f12:	d3 e3                	shl    %cl,%ebx
   10f14:	89 d8                	mov    %ebx,%eax
   10f16:	f7 d0                	not    %eax
   10f18:	21 d0                	and    %edx,%eax
   10f1a:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10f1d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f21:	50                   	push   %eax
   10f22:	6a 21                	push   $0x21
   10f24:	e8 83 f9 ff ff       	call   108ac <outb>
   10f29:	83 c4 08             	add    $0x8,%esp
   10f2c:	eb 3d                	jmp    10f6b <irq_enable+0x86>
    }else{
        irq_num -= 8;
   10f2e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10f32:	68 a1 00 00 00       	push   $0xa1
   10f37:	e8 53 f9 ff ff       	call   1088f <inb>
   10f3c:	83 c4 04             	add    $0x4,%esp
   10f3f:	89 c2                	mov    %eax,%edx
   10f41:	8b 45 08             	mov    0x8(%ebp),%eax
   10f44:	bb 01 00 00 00       	mov    $0x1,%ebx
   10f49:	89 c1                	mov    %eax,%ecx
   10f4b:	d3 e3                	shl    %cl,%ebx
   10f4d:	89 d8                	mov    %ebx,%eax
   10f4f:	f7 d0                	not    %eax
   10f51:	21 d0                	and    %edx,%eax
   10f53:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10f56:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f5a:	50                   	push   %eax
   10f5b:	68 a1 00 00 00       	push   $0xa1
   10f60:	e8 47 f9 ff ff       	call   108ac <outb>
   10f65:	83 c4 08             	add    $0x8,%esp
   10f68:	eb 01                	jmp    10f6b <irq_enable+0x86>
        return;
   10f6a:	90                   	nop
    }
}
   10f6b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f6e:	c9                   	leave  
   10f6f:	c3                   	ret    

00010f70 <irq_disable>:
void irq_disable (int irq_num) {
   10f70:	55                   	push   %ebp
   10f71:	89 e5                	mov    %esp,%ebp
   10f73:	53                   	push   %ebx
   10f74:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10f77:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10f7b:	7e 74                	jle    10ff1 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10f7d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10f81:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f85:	7f 30                	jg     10fb7 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10f87:	6a 21                	push   $0x21
   10f89:	e8 01 f9 ff ff       	call   1088f <inb>
   10f8e:	83 c4 04             	add    $0x4,%esp
   10f91:	89 c3                	mov    %eax,%ebx
   10f93:	8b 45 08             	mov    0x8(%ebp),%eax
   10f96:	ba 01 00 00 00       	mov    $0x1,%edx
   10f9b:	89 c1                	mov    %eax,%ecx
   10f9d:	d3 e2                	shl    %cl,%edx
   10f9f:	89 d0                	mov    %edx,%eax
   10fa1:	09 d8                	or     %ebx,%eax
   10fa3:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10fa6:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10faa:	50                   	push   %eax
   10fab:	6a 21                	push   $0x21
   10fad:	e8 fa f8 ff ff       	call   108ac <outb>
   10fb2:	83 c4 08             	add    $0x8,%esp
   10fb5:	eb 3b                	jmp    10ff2 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10fb7:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10fbb:	68 a1 00 00 00       	push   $0xa1
   10fc0:	e8 ca f8 ff ff       	call   1088f <inb>
   10fc5:	83 c4 04             	add    $0x4,%esp
   10fc8:	89 c3                	mov    %eax,%ebx
   10fca:	8b 45 08             	mov    0x8(%ebp),%eax
   10fcd:	ba 01 00 00 00       	mov    $0x1,%edx
   10fd2:	89 c1                	mov    %eax,%ecx
   10fd4:	d3 e2                	shl    %cl,%edx
   10fd6:	89 d0                	mov    %edx,%eax
   10fd8:	09 d8                	or     %ebx,%eax
   10fda:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10fdd:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10fe1:	50                   	push   %eax
   10fe2:	68 a1 00 00 00       	push   $0xa1
   10fe7:	e8 c0 f8 ff ff       	call   108ac <outb>
   10fec:	83 c4 08             	add    $0x8,%esp
   10fef:	eb 01                	jmp    10ff2 <irq_disable+0x82>
        return;
   10ff1:	90                   	nop
    }
}
   10ff2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ff5:	c9                   	leave  
   10ff6:	c3                   	ret    

00010ff7 <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   10ff7:	55                   	push   %ebp
   10ff8:	89 e5                	mov    %esp,%ebp
    cli();
   10ffa:	e8 cc f8 ff ff       	call   108cb <cli>
}
   10fff:	90                   	nop
   11000:	5d                   	pop    %ebp
   11001:	c3                   	ret    

00011002 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   11002:	55                   	push   %ebp
   11003:	89 e5                	mov    %esp,%ebp
    sti();
   11005:	e8 c8 f8 ff ff       	call   108d2 <sti>
}
   1100a:	90                   	nop
   1100b:	5d                   	pop    %ebp
   1100c:	c3                   	ret    

0001100d <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   1100d:	55                   	push   %ebp
   1100e:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   11010:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   11014:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11018:	7e 0f                	jle    11029 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   1101a:	6a 20                	push   $0x20
   1101c:	68 a0 00 00 00       	push   $0xa0
   11021:	e8 86 f8 ff ff       	call   108ac <outb>
   11026:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   11029:	6a 20                	push   $0x20
   1102b:	6a 20                	push   $0x20
   1102d:	e8 7a f8 ff ff       	call   108ac <outb>
   11032:	83 c4 08             	add    $0x8,%esp

}
   11035:	90                   	nop
   11036:	c9                   	leave  
   11037:	c3                   	ret    

00011038 <irq_enter_protection>:



irq_state_t irq_enter_protection (void) {
   11038:	55                   	push   %ebp
   11039:	89 e5                	mov    %esp,%ebp
   1103b:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   1103e:	e8 c5 f8 ff ff       	call   10908 <read_eflags>
   11043:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11046:	e8 ac ff ff ff       	call   10ff7 <irq_disable_global>
    return state;
   1104b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1104e:	c9                   	leave  
   1104f:	c3                   	ret    

00011050 <irq_leave_protection>:
void irq_leave_protection (irq_state_t state) {
   11050:	55                   	push   %ebp
   11051:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11053:	ff 75 08             	pushl  0x8(%ebp)
   11056:	e8 bd f8 ff ff       	call   10918 <write_eflags>
   1105b:	83 c4 04             	add    $0x4,%esp
}
   1105e:	90                   	nop
   1105f:	c9                   	leave  
   11060:	c3                   	ret    

00011061 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11061:	55                   	push   %ebp
   11062:	89 e5                	mov    %esp,%ebp
   11064:	83 ec 08             	sub    $0x8,%esp
   11067:	8b 55 08             	mov    0x8(%ebp),%edx
   1106a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1106d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11071:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11074:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11078:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1107c:	ee                   	out    %al,(%dx)
}
   1107d:	90                   	nop
   1107e:	c9                   	leave  
   1107f:	c3                   	ret    

00011080 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   11080:	55                   	push   %ebp
   11081:	89 e5                	mov    %esp,%ebp
   11083:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11086:	a1 20 2b 01 00       	mov    0x12b20,%eax
   1108b:	83 c0 01             	add    $0x1,%eax
   1108e:	a3 20 2b 01 00       	mov    %eax,0x12b20
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   11093:	83 ec 0c             	sub    $0xc,%esp
   11096:	6a 20                	push   $0x20
   11098:	e8 70 ff ff ff       	call   1100d <pic_send_eoi>
   1109d:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   110a0:	e8 b6 f5 ff ff       	call   1065b <task_time_tick>
}
   110a5:	90                   	nop
   110a6:	c9                   	leave  
   110a7:	c3                   	ret    

000110a8 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   110a8:	55                   	push   %ebp
   110a9:	89 e5                	mov    %esp,%ebp
   110ab:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   110ae:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   110b5:	6a 36                	push   $0x36
   110b7:	6a 43                	push   $0x43
   110b9:	e8 a3 ff ff ff       	call   11061 <outb>
   110be:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   110c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110c4:	0f b6 c0             	movzbl %al,%eax
   110c7:	50                   	push   %eax
   110c8:	6a 40                	push   $0x40
   110ca:	e8 92 ff ff ff       	call   11061 <outb>
   110cf:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   110d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110d5:	c1 e8 08             	shr    $0x8,%eax
   110d8:	0f b6 c0             	movzbl %al,%eax
   110db:	50                   	push   %eax
   110dc:	6a 40                	push   $0x40
   110de:	e8 7e ff ff ff       	call   11061 <outb>
   110e3:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   110e6:	83 ec 08             	sub    $0x8,%esp
   110e9:	68 86 02 01 00       	push   $0x10286
   110ee:	6a 20                	push   $0x20
   110f0:	e8 b6 fd ff ff       	call   10eab <irq_install>
   110f5:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   110f8:	83 ec 0c             	sub    $0xc,%esp
   110fb:	6a 20                	push   $0x20
   110fd:	e8 e3 fd ff ff       	call   10ee5 <irq_enable>
   11102:	83 c4 10             	add    $0x10,%esp
}
   11105:	90                   	nop
   11106:	c9                   	leave  
   11107:	c3                   	ret    

00011108 <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   11108:	55                   	push   %ebp
   11109:	89 e5                	mov    %esp,%ebp
   1110b:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1110e:	c7 05 20 2b 01 00 00 	movl   $0x0,0x12b20
   11115:	00 00 00 

    init_pit();
   11118:	e8 8b ff ff ff       	call   110a8 <init_pit>
   1111d:	90                   	nop
   1111e:	c9                   	leave  
   1111f:	c3                   	ret    

00011120 <kernel_init>:
#include "tools/list.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   11120:	55                   	push   %ebp
   11121:	89 e5                	mov    %esp,%ebp
   11123:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   11126:	e8 00 f7 ff ff       	call   1082b <cpu_init>
    log_init();
   1112b:	e8 55 08 00 00       	call   11985 <log_init>
    irq_init();
   11130:	e8 c8 fb ff ff       	call   10cfd <irq_init>
    time_init();
   11135:	e8 ce ff ff ff       	call   11108 <time_init>

    task_manager_init();
   1113a:	e8 de f3 ff ff       	call   1051d <task_manager_init>

}
   1113f:	90                   	nop
   11140:	c9                   	leave  
   11141:	c3                   	ret    

00011142 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   11142:	55                   	push   %ebp
   11143:	89 e5                	mov    %esp,%ebp
   11145:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   11148:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int task: %d",count++);
   1114f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11152:	8d 50 01             	lea    0x1(%eax),%edx
   11155:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11158:	83 ec 08             	sub    $0x8,%esp
   1115b:	50                   	push   %eax
   1115c:	68 79 1d 01 00       	push   $0x11d79
   11161:	e8 94 08 00 00       	call   119fa <log_printf>
   11166:	83 c4 10             	add    $0x10,%esp
   11169:	eb e4                	jmp    1114f <init_task_entry+0xd>

0001116b <init_main>:
        // sys_sched_yield();
    }    

}

void init_main(void) {
   1116b:	55                   	push   %ebp
   1116c:	89 e5                	mov    %esp,%ebp
   1116e:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   11171:	83 ec 0c             	sub    $0xc,%esp
   11174:	68 86 1d 01 00       	push   $0x11d86
   11179:	e8 7c 08 00 00       	call   119fa <log_printf>
   1117e:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   11181:	83 ec 04             	sub    $0x4,%esp
   11184:	68 9c 1d 01 00       	push   $0x11d9c
   11189:	68 a5 1d 01 00       	push   $0x11da5
   1118e:	68 ab 1d 01 00       	push   $0x11dab
   11193:	e8 62 08 00 00       	call   119fa <log_printf>
   11198:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   1119b:	83 ec 0c             	sub    $0xc,%esp
   1119e:	6a 61                	push   $0x61
   111a0:	68 45 23 01 00       	push   $0x12345
   111a5:	6a 85                	push   $0xffffff85
   111a7:	68 40 e2 01 00       	push   $0x1e240
   111ac:	68 ba 1d 01 00       	push   $0x11dba
   111b1:	e8 44 08 00 00       	call   119fa <log_printf>
   111b6:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task,"init task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   111b9:	ba 40 3b 01 00       	mov    $0x13b40,%edx
   111be:	b8 42 11 01 00       	mov    $0x11142,%eax
   111c3:	52                   	push   %edx
   111c4:	50                   	push   %eax
   111c5:	68 c6 1d 01 00       	push   $0x11dc6
   111ca:	68 40 3b 01 00       	push   $0x13b40
   111cf:	e8 47 f2 ff ff       	call   1041b <task_init>
   111d4:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   111d7:	e8 fa f2 ff ff       	call   104d6 <task_first_init>

    irq_enable_global();
   111dc:	e8 21 fe ff ff       	call   11002 <irq_enable_global>
    int count = 0; 
   111e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("first main: %d",count++);
   111e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111eb:	8d 50 01             	lea    0x1(%eax),%edx
   111ee:	89 55 f4             	mov    %edx,-0xc(%ebp)
   111f1:	83 ec 08             	sub    $0x8,%esp
   111f4:	50                   	push   %eax
   111f5:	68 d0 1d 01 00       	push   $0x11dd0
   111fa:	e8 fb 07 00 00       	call   119fa <log_printf>
   111ff:	83 c4 10             	add    $0x10,%esp
   11202:	eb e4                	jmp    111e8 <init_main+0x7d>

00011204 <hlt>:
static inline void hlt (void) {
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11207:	f4                   	hlt    
}
   11208:	90                   	nop
   11209:	5d                   	pop    %ebp
   1120a:	c3                   	ret    

0001120b <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   1120b:	55                   	push   %ebp
   1120c:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   1120e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11212:	74 3b                	je     1124f <kernel_strcpy+0x44>
   11214:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11218:	74 35                	je     1124f <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   1121a:	eb 17                	jmp    11233 <kernel_strcpy+0x28>
        *dest++ = *src++;
   1121c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1121f:	8d 42 01             	lea    0x1(%edx),%eax
   11222:	89 45 0c             	mov    %eax,0xc(%ebp)
   11225:	8b 45 08             	mov    0x8(%ebp),%eax
   11228:	8d 48 01             	lea    0x1(%eax),%ecx
   1122b:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1122e:	0f b6 12             	movzbl (%edx),%edx
   11231:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   11233:	8b 45 08             	mov    0x8(%ebp),%eax
   11236:	0f b6 00             	movzbl (%eax),%eax
   11239:	84 c0                	test   %al,%al
   1123b:	74 0a                	je     11247 <kernel_strcpy+0x3c>
   1123d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11240:	0f b6 00             	movzbl (%eax),%eax
   11243:	84 c0                	test   %al,%al
   11245:	75 d5                	jne    1121c <kernel_strcpy+0x11>
    }

    *dest = '\0';
   11247:	8b 45 08             	mov    0x8(%ebp),%eax
   1124a:	c6 00 00             	movb   $0x0,(%eax)
   1124d:	eb 01                	jmp    11250 <kernel_strcpy+0x45>
        return;
   1124f:	90                   	nop
}
   11250:	5d                   	pop    %ebp
   11251:	c3                   	ret    

00011252 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   11252:	55                   	push   %ebp
   11253:	89 e5                	mov    %esp,%ebp
   11255:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   11258:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1125c:	74 61                	je     112bf <kernel_strncpy+0x6d>
   1125e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11262:	74 5b                	je     112bf <kernel_strncpy+0x6d>
   11264:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11268:	74 55                	je     112bf <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   1126a:	8b 45 08             	mov    0x8(%ebp),%eax
   1126d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   11270:	8b 45 0c             	mov    0xc(%ebp),%eax
   11273:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   11276:	eb 17                	jmp    1128f <kernel_strncpy+0x3d>
        *d++ = *s++;
   11278:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1127b:	8d 42 01             	lea    0x1(%edx),%eax
   1127e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11281:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11284:	8d 48 01             	lea    0x1(%eax),%ecx
   11287:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1128a:	0f b6 12             	movzbl (%edx),%edx
   1128d:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1128f:	8b 45 10             	mov    0x10(%ebp),%eax
   11292:	8d 50 ff             	lea    -0x1(%eax),%edx
   11295:	89 55 10             	mov    %edx,0x10(%ebp)
   11298:	85 c0                	test   %eax,%eax
   1129a:	7e 0a                	jle    112a6 <kernel_strncpy+0x54>
   1129c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1129f:	0f b6 00             	movzbl (%eax),%eax
   112a2:	84 c0                	test   %al,%al
   112a4:	75 d2                	jne    11278 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   112a6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112aa:	75 0b                	jne    112b7 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   112ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112af:	83 e8 01             	sub    $0x1,%eax
   112b2:	c6 00 00             	movb   $0x0,(%eax)
   112b5:	eb 09                	jmp    112c0 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   112b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112ba:	c6 00 00             	movb   $0x0,(%eax)
   112bd:	eb 01                	jmp    112c0 <kernel_strncpy+0x6e>
        return;
   112bf:	90                   	nop
    }
}
   112c0:	c9                   	leave  
   112c1:	c3                   	ret    

000112c2 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   112c2:	55                   	push   %ebp
   112c3:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   112c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112c9:	74 06                	je     112d1 <kernel_strncmp+0xf>
   112cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112cf:	75 0f                	jne    112e0 <kernel_strncmp+0x1e>
        return -1;
   112d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   112d6:	eb 62                	jmp    1133a <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   112d8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   112dc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   112e0:	8b 45 08             	mov    0x8(%ebp),%eax
   112e3:	0f b6 00             	movzbl (%eax),%eax
   112e6:	84 c0                	test   %al,%al
   112e8:	74 20                	je     1130a <kernel_strncmp+0x48>
   112ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ed:	0f b6 00             	movzbl (%eax),%eax
   112f0:	84 c0                	test   %al,%al
   112f2:	74 16                	je     1130a <kernel_strncmp+0x48>
   112f4:	8b 45 08             	mov    0x8(%ebp),%eax
   112f7:	0f b6 10             	movzbl (%eax),%edx
   112fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   112fd:	0f b6 00             	movzbl (%eax),%eax
   11300:	38 c2                	cmp    %al,%dl
   11302:	75 06                	jne    1130a <kernel_strncmp+0x48>
   11304:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11308:	75 ce                	jne    112d8 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1130a:	8b 45 08             	mov    0x8(%ebp),%eax
   1130d:	0f b6 00             	movzbl (%eax),%eax
   11310:	84 c0                	test   %al,%al
   11312:	74 21                	je     11335 <kernel_strncmp+0x73>
   11314:	8b 45 0c             	mov    0xc(%ebp),%eax
   11317:	0f b6 00             	movzbl (%eax),%eax
   1131a:	84 c0                	test   %al,%al
   1131c:	74 17                	je     11335 <kernel_strncmp+0x73>
   1131e:	8b 45 08             	mov    0x8(%ebp),%eax
   11321:	0f b6 10             	movzbl (%eax),%edx
   11324:	8b 45 0c             	mov    0xc(%ebp),%eax
   11327:	0f b6 00             	movzbl (%eax),%eax
   1132a:	38 c2                	cmp    %al,%dl
   1132c:	74 07                	je     11335 <kernel_strncmp+0x73>
   1132e:	b8 01 00 00 00       	mov    $0x1,%eax
   11333:	eb 05                	jmp    1133a <kernel_strncmp+0x78>
   11335:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1133a:	5d                   	pop    %ebp
   1133b:	c3                   	ret    

0001133c <kernel_strlen>:
int kernel_strlen(const char * str){
   1133c:	55                   	push   %ebp
   1133d:	89 e5                	mov    %esp,%ebp
   1133f:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   11342:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11346:	75 07                	jne    1134f <kernel_strlen+0x13>
        return 0;
   11348:	b8 00 00 00 00       	mov    $0x0,%eax
   1134d:	eb 26                	jmp    11375 <kernel_strlen+0x39>
    }

    const char * c = str;
   1134f:	8b 45 08             	mov    0x8(%ebp),%eax
   11352:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11355:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   1135c:	eb 04                	jmp    11362 <kernel_strlen+0x26>
        len++;
   1135e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   11362:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11365:	8d 50 01             	lea    0x1(%eax),%edx
   11368:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1136b:	0f b6 00             	movzbl (%eax),%eax
   1136e:	84 c0                	test   %al,%al
   11370:	75 ec                	jne    1135e <kernel_strlen+0x22>
    }
    return len;
   11372:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11375:	c9                   	leave  
   11376:	c3                   	ret    

00011377 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   11377:	55                   	push   %ebp
   11378:	89 e5                	mov    %esp,%ebp
   1137a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1137d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11381:	74 40                	je     113c3 <kernel_memcpy+0x4c>
   11383:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11387:	74 3a                	je     113c3 <kernel_memcpy+0x4c>
   11389:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1138d:	74 34                	je     113c3 <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   1138f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11392:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   11395:	8b 45 08             	mov    0x8(%ebp),%eax
   11398:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   1139b:	eb 17                	jmp    113b4 <kernel_memcpy+0x3d>
        *d++ = *s++;
   1139d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   113a0:	8d 42 01             	lea    0x1(%edx),%eax
   113a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
   113a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113a9:	8d 48 01             	lea    0x1(%eax),%ecx
   113ac:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113af:	0f b6 12             	movzbl (%edx),%edx
   113b2:	88 10                	mov    %dl,(%eax)
    while(size--){
   113b4:	8b 45 10             	mov    0x10(%ebp),%eax
   113b7:	8d 50 ff             	lea    -0x1(%eax),%edx
   113ba:	89 55 10             	mov    %edx,0x10(%ebp)
   113bd:	85 c0                	test   %eax,%eax
   113bf:	75 dc                	jne    1139d <kernel_memcpy+0x26>
   113c1:	eb 01                	jmp    113c4 <kernel_memcpy+0x4d>
        return;
   113c3:	90                   	nop
    }

}
   113c4:	c9                   	leave  
   113c5:	c3                   	ret    

000113c6 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   113c6:	55                   	push   %ebp
   113c7:	89 e5                	mov    %esp,%ebp
   113c9:	83 ec 14             	sub    $0x14,%esp
   113cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   113cf:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   113d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113d6:	74 2c                	je     11404 <kernel_memset+0x3e>
   113d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113dc:	74 26                	je     11404 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   113de:	8b 45 08             	mov    0x8(%ebp),%eax
   113e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   113e4:	eb 0f                	jmp    113f5 <kernel_memset+0x2f>
       *d++ = v; 
   113e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113e9:	8d 50 01             	lea    0x1(%eax),%edx
   113ec:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113ef:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   113f3:	88 10                	mov    %dl,(%eax)
    while(size--){
   113f5:	8b 45 10             	mov    0x10(%ebp),%eax
   113f8:	8d 50 ff             	lea    -0x1(%eax),%edx
   113fb:	89 55 10             	mov    %edx,0x10(%ebp)
   113fe:	85 c0                	test   %eax,%eax
   11400:	75 e4                	jne    113e6 <kernel_memset+0x20>
   11402:	eb 01                	jmp    11405 <kernel_memset+0x3f>
        return;
   11404:	90                   	nop
    }
}
   11405:	c9                   	leave  
   11406:	c3                   	ret    

00011407 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   11407:	55                   	push   %ebp
   11408:	89 e5                	mov    %esp,%ebp
   1140a:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   1140d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11411:	74 0c                	je     1141f <kernel_memcmp+0x18>
   11413:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11417:	74 06                	je     1141f <kernel_memcmp+0x18>
   11419:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1141d:	75 07                	jne    11426 <kernel_memcmp+0x1f>
        return -1;
   1141f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11424:	eb 43                	jmp    11469 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11426:	8b 45 08             	mov    0x8(%ebp),%eax
   11429:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   1142c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1142f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11432:	eb 23                	jmp    11457 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   11434:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11437:	8d 50 01             	lea    0x1(%eax),%edx
   1143a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1143d:	0f b6 08             	movzbl (%eax),%ecx
   11440:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11443:	8d 50 01             	lea    0x1(%eax),%edx
   11446:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11449:	0f b6 00             	movzbl (%eax),%eax
   1144c:	38 c1                	cmp    %al,%cl
   1144e:	74 07                	je     11457 <kernel_memcmp+0x50>
            return -1;
   11450:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11455:	eb 12                	jmp    11469 <kernel_memcmp+0x62>
    while(size--){
   11457:	8b 45 10             	mov    0x10(%ebp),%eax
   1145a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1145d:	89 55 10             	mov    %edx,0x10(%ebp)
   11460:	85 c0                	test   %eax,%eax
   11462:	75 d0                	jne    11434 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11464:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11469:	c9                   	leave  
   1146a:	c3                   	ret    

0001146b <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   1146b:	55                   	push   %ebp
   1146c:	89 e5                	mov    %esp,%ebp
   1146e:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   11471:	8d 45 10             	lea    0x10(%ebp),%eax
   11474:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   11477:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1147a:	83 ec 04             	sub    $0x4,%esp
   1147d:	50                   	push   %eax
   1147e:	ff 75 0c             	pushl  0xc(%ebp)
   11481:	ff 75 08             	pushl  0x8(%ebp)
   11484:	e8 45 01 00 00       	call   115ce <kernel_vsprintf>
   11489:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1148c:	90                   	nop
   1148d:	c9                   	leave  
   1148e:	c3                   	ret    

0001148f <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   1148f:	55                   	push   %ebp
   11490:	89 e5                	mov    %esp,%ebp
   11492:	53                   	push   %ebx
   11493:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11496:	8b 45 08             	mov    0x8(%ebp),%eax
   11499:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   1149c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1149f:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   114a2:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   114a6:	74 1d                	je     114c5 <kernel_itoa+0x36>
   114a8:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   114ac:	74 17                	je     114c5 <kernel_itoa+0x36>
   114ae:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114b2:	74 11                	je     114c5 <kernel_itoa+0x36>
   114b4:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   114b8:	74 0b                	je     114c5 <kernel_itoa+0x36>
        *p = '\0';
   114ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114bd:	c6 00 00             	movb   $0x0,(%eax)
        return;
   114c0:	e9 03 01 00 00       	jmp    115c8 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   114c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   114cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114d0:	79 19                	jns    114eb <kernel_itoa+0x5c>
   114d2:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114d6:	75 13                	jne    114eb <kernel_itoa+0x5c>
        *p++ = '-';
   114d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114db:	8d 50 01             	lea    0x1(%eax),%edx
   114de:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114e1:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   114e4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   114eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   114ef:	74 3b                	je     1152c <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   114f1:	8b 0d 30 1e 01 00    	mov    0x11e30,%ecx
   114f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   114fa:	99                   	cltd   
   114fb:	f7 7d 10             	idivl  0x10(%ebp)
   114fe:	89 d0                	mov    %edx,%eax
   11500:	83 c0 0f             	add    $0xf,%eax
   11503:	01 c8                	add    %ecx,%eax
   11505:	0f b6 00             	movzbl (%eax),%eax
   11508:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1150b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1150e:	8d 50 01             	lea    0x1(%eax),%edx
   11511:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11514:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11518:	88 10                	mov    %dl,(%eax)
            num /= base;
   1151a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1151d:	99                   	cltd   
   1151e:	f7 7d 10             	idivl  0x10(%ebp)
   11521:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11524:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11528:	75 c7                	jne    114f1 <kernel_itoa+0x62>
   1152a:	eb 4b                	jmp    11577 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   1152c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1152f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   11532:	8b 0d 30 1e 01 00    	mov    0x11e30,%ecx
   11538:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1153b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1153e:	ba 00 00 00 00       	mov    $0x0,%edx
   11543:	f7 f3                	div    %ebx
   11545:	89 d0                	mov    %edx,%eax
   11547:	83 c0 0f             	add    $0xf,%eax
   1154a:	01 c8                	add    %ecx,%eax
   1154c:	0f b6 00             	movzbl (%eax),%eax
   1154f:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11552:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11555:	8d 50 01             	lea    0x1(%eax),%edx
   11558:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1155b:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1155f:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11561:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11564:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11567:	ba 00 00 00 00       	mov    $0x0,%edx
   1156c:	f7 f3                	div    %ebx
   1156e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11571:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11575:	75 bb                	jne    11532 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11577:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1157a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1157d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11580:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   11583:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11587:	74 08                	je     11591 <kernel_itoa+0x102>
   11589:	8b 45 08             	mov    0x8(%ebp),%eax
   1158c:	83 c0 01             	add    $0x1,%eax
   1158f:	eb 03                	jmp    11594 <kernel_itoa+0x105>
   11591:	8b 45 08             	mov    0x8(%ebp),%eax
   11594:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   11597:	eb 27                	jmp    115c0 <kernel_itoa+0x131>
        char ch = *start;
   11599:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1159c:	0f b6 00             	movzbl (%eax),%eax
   1159f:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   115a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115a5:	0f b6 10             	movzbl (%eax),%edx
   115a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115ab:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   115ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115b0:	8d 50 ff             	lea    -0x1(%eax),%edx
   115b3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   115b6:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   115ba:	88 10                	mov    %dl,(%eax)
        start++;
   115bc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   115c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115c3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   115c6:	72 d1                	jb     11599 <kernel_itoa+0x10a>
    }
}
   115c8:	83 c4 20             	add    $0x20,%esp
   115cb:	5b                   	pop    %ebx
   115cc:	5d                   	pop    %ebp
   115cd:	c3                   	ret    

000115ce <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   115ce:	55                   	push   %ebp
   115cf:	89 e5                	mov    %esp,%ebp
   115d1:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   115d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   115db:	8b 45 08             	mov    0x8(%ebp),%eax
   115de:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   115e1:	e9 17 01 00 00       	jmp    116fd <kernel_vsprintf+0x12f>
        switch(state) {
   115e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115e9:	85 c0                	test   %eax,%eax
   115eb:	74 0a                	je     115f7 <kernel_vsprintf+0x29>
   115ed:	83 f8 01             	cmp    $0x1,%eax
   115f0:	74 2b                	je     1161d <kernel_vsprintf+0x4f>
   115f2:	e9 06 01 00 00       	jmp    116fd <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   115f7:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   115fb:	75 0c                	jne    11609 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   115fd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11604:	e9 f4 00 00 00       	jmp    116fd <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   11609:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1160c:	8d 50 01             	lea    0x1(%eax),%edx
   1160f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11612:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11616:	88 10                	mov    %dl,(%eax)
                }
                break;
   11618:	e9 e0 00 00 00       	jmp    116fd <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   1161d:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11621:	75 47                	jne    1166a <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   11623:	8b 45 10             	mov    0x10(%ebp),%eax
   11626:	8d 50 04             	lea    0x4(%eax),%edx
   11629:	89 55 10             	mov    %edx,0x10(%ebp)
   1162c:	8b 00                	mov    (%eax),%eax
   1162e:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   11631:	ff 75 f4             	pushl  -0xc(%ebp)
   11634:	e8 03 fd ff ff       	call   1133c <kernel_strlen>
   11639:	83 c4 04             	add    $0x4,%esp
   1163c:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   1163f:	eb 17                	jmp    11658 <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   11641:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11644:	8d 42 01             	lea    0x1(%edx),%eax
   11647:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1164a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1164d:	8d 48 01             	lea    0x1(%eax),%ecx
   11650:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11653:	0f b6 12             	movzbl (%edx),%edx
   11656:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   11658:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1165b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1165e:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11661:	85 c0                	test   %eax,%eax
   11663:	75 dc                	jne    11641 <kernel_vsprintf+0x73>
   11665:	e9 8b 00 00 00       	jmp    116f5 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   1166a:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1166e:	75 2e                	jne    1169e <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   11670:	8b 45 10             	mov    0x10(%ebp),%eax
   11673:	8d 50 04             	lea    0x4(%eax),%edx
   11676:	89 55 10             	mov    %edx,0x10(%ebp)
   11679:	8b 00                	mov    (%eax),%eax
   1167b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   1167e:	6a 0a                	push   $0xa
   11680:	ff 75 e4             	pushl  -0x1c(%ebp)
   11683:	ff 75 f8             	pushl  -0x8(%ebp)
   11686:	e8 04 fe ff ff       	call   1148f <kernel_itoa>
   1168b:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   1168e:	ff 75 f8             	pushl  -0x8(%ebp)
   11691:	e8 a6 fc ff ff       	call   1133c <kernel_strlen>
   11696:	83 c4 04             	add    $0x4,%esp
   11699:	01 45 f8             	add    %eax,-0x8(%ebp)
   1169c:	eb 57                	jmp    116f5 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   1169e:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   116a2:	75 2e                	jne    116d2 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   116a4:	8b 45 10             	mov    0x10(%ebp),%eax
   116a7:	8d 50 04             	lea    0x4(%eax),%edx
   116aa:	89 55 10             	mov    %edx,0x10(%ebp)
   116ad:	8b 00                	mov    (%eax),%eax
   116af:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   116b2:	6a 10                	push   $0x10
   116b4:	ff 75 e8             	pushl  -0x18(%ebp)
   116b7:	ff 75 f8             	pushl  -0x8(%ebp)
   116ba:	e8 d0 fd ff ff       	call   1148f <kernel_itoa>
   116bf:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   116c2:	ff 75 f8             	pushl  -0x8(%ebp)
   116c5:	e8 72 fc ff ff       	call   1133c <kernel_strlen>
   116ca:	83 c4 04             	add    $0x4,%esp
   116cd:	01 45 f8             	add    %eax,-0x8(%ebp)
   116d0:	eb 23                	jmp    116f5 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   116d2:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   116d6:	75 1d                	jne    116f5 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   116d8:	8b 45 10             	mov    0x10(%ebp),%eax
   116db:	8d 50 04             	lea    0x4(%eax),%edx
   116de:	89 55 10             	mov    %edx,0x10(%ebp)
   116e1:	8b 00                	mov    (%eax),%eax
   116e3:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   116e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   116e9:	8d 50 01             	lea    0x1(%eax),%edx
   116ec:	89 55 f8             	mov    %edx,-0x8(%ebp)
   116ef:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   116f3:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   116f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   116fc:	90                   	nop
    while ((ch = *fmt++)) {
   116fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11700:	8d 50 01             	lea    0x1(%eax),%edx
   11703:	89 55 0c             	mov    %edx,0xc(%ebp)
   11706:	0f b6 00             	movzbl (%eax),%eax
   11709:	88 45 ef             	mov    %al,-0x11(%ebp)
   1170c:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11710:	0f 85 d0 fe ff ff    	jne    115e6 <kernel_vsprintf+0x18>
        }
    }
}
   11716:	90                   	nop
   11717:	c9                   	leave  
   11718:	c3                   	ret    

00011719 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   11719:	55                   	push   %ebp
   1171a:	89 e5                	mov    %esp,%ebp
   1171c:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   1171f:	83 ec 08             	sub    $0x8,%esp
   11722:	ff 75 14             	pushl  0x14(%ebp)
   11725:	68 e0 1d 01 00       	push   $0x11de0
   1172a:	e8 cb 02 00 00       	call   119fa <log_printf>
   1172f:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   11732:	ff 75 10             	pushl  0x10(%ebp)
   11735:	ff 75 0c             	pushl  0xc(%ebp)
   11738:	ff 75 08             	pushl  0x8(%ebp)
   1173b:	68 f2 1d 01 00       	push   $0x11df2
   11740:	e8 b5 02 00 00       	call   119fa <log_printf>
   11745:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   11748:	e8 b7 fa ff ff       	call   11204 <hlt>
   1174d:	eb f9                	jmp    11748 <panic+0x2f>

0001174f <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1174f:	55                   	push   %ebp
   11750:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11752:	8b 45 08             	mov    0x8(%ebp),%eax
   11755:	8b 40 08             	mov    0x8(%eax),%eax
   11758:	85 c0                	test   %eax,%eax
   1175a:	0f 94 c0             	sete   %al
   1175d:	0f b6 c0             	movzbl %al,%eax
}
   11760:	5d                   	pop    %ebp
   11761:	c3                   	ret    

00011762 <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   11762:	55                   	push   %ebp
   11763:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11765:	8b 45 08             	mov    0x8(%ebp),%eax
   11768:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1176f:	8b 45 08             	mov    0x8(%ebp),%eax
   11772:	8b 50 04             	mov    0x4(%eax),%edx
   11775:	8b 45 08             	mov    0x8(%ebp),%eax
   11778:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1177a:	8b 45 08             	mov    0x8(%ebp),%eax
   1177d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11784:	90                   	nop
   11785:	5d                   	pop    %ebp
   11786:	c3                   	ret    

00011787 <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   11787:	55                   	push   %ebp
   11788:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   1178a:	8b 45 08             	mov    0x8(%ebp),%eax
   1178d:	8b 10                	mov    (%eax),%edx
   1178f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11792:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11795:	8b 45 0c             	mov    0xc(%ebp),%eax
   11798:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1179e:	ff 75 08             	pushl  0x8(%ebp)
   117a1:	e8 a9 ff ff ff       	call   1174f <list_is_empty>
   117a6:	83 c4 04             	add    $0x4,%esp
   117a9:	85 c0                	test   %eax,%eax
   117ab:	74 16                	je     117c3 <list_insert_first+0x3c>
        list->first = list->last = node;
   117ad:	8b 45 08             	mov    0x8(%ebp),%eax
   117b0:	8b 55 0c             	mov    0xc(%ebp),%edx
   117b3:	89 50 04             	mov    %edx,0x4(%eax)
   117b6:	8b 45 08             	mov    0x8(%ebp),%eax
   117b9:	8b 50 04             	mov    0x4(%eax),%edx
   117bc:	8b 45 08             	mov    0x8(%ebp),%eax
   117bf:	89 10                	mov    %edx,(%eax)
   117c1:	eb 12                	jmp    117d5 <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   117c3:	8b 45 08             	mov    0x8(%ebp),%eax
   117c6:	8b 00                	mov    (%eax),%eax
   117c8:	8b 55 0c             	mov    0xc(%ebp),%edx
   117cb:	89 10                	mov    %edx,(%eax)
        list->first = node;
   117cd:	8b 45 08             	mov    0x8(%ebp),%eax
   117d0:	8b 55 0c             	mov    0xc(%ebp),%edx
   117d3:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   117d5:	8b 45 08             	mov    0x8(%ebp),%eax
   117d8:	8b 40 08             	mov    0x8(%eax),%eax
   117db:	8d 50 01             	lea    0x1(%eax),%edx
   117de:	8b 45 08             	mov    0x8(%ebp),%eax
   117e1:	89 50 08             	mov    %edx,0x8(%eax)
}
   117e4:	90                   	nop
   117e5:	c9                   	leave  
   117e6:	c3                   	ret    

000117e7 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   117e7:	55                   	push   %ebp
   117e8:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   117ea:	8b 45 08             	mov    0x8(%ebp),%eax
   117ed:	8b 50 04             	mov    0x4(%eax),%edx
   117f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   117f3:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   117f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   117f8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   117ff:	ff 75 08             	pushl  0x8(%ebp)
   11802:	e8 48 ff ff ff       	call   1174f <list_is_empty>
   11807:	83 c4 04             	add    $0x4,%esp
   1180a:	85 c0                	test   %eax,%eax
   1180c:	74 16                	je     11824 <list_insert_last+0x3d>
        list->first = list->last = node;
   1180e:	8b 45 08             	mov    0x8(%ebp),%eax
   11811:	8b 55 0c             	mov    0xc(%ebp),%edx
   11814:	89 50 04             	mov    %edx,0x4(%eax)
   11817:	8b 45 08             	mov    0x8(%ebp),%eax
   1181a:	8b 50 04             	mov    0x4(%eax),%edx
   1181d:	8b 45 08             	mov    0x8(%ebp),%eax
   11820:	89 10                	mov    %edx,(%eax)
   11822:	eb 15                	jmp    11839 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11824:	8b 45 08             	mov    0x8(%ebp),%eax
   11827:	8b 40 04             	mov    0x4(%eax),%eax
   1182a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1182d:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11830:	8b 45 08             	mov    0x8(%ebp),%eax
   11833:	8b 55 0c             	mov    0xc(%ebp),%edx
   11836:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   11839:	8b 45 08             	mov    0x8(%ebp),%eax
   1183c:	8b 40 08             	mov    0x8(%eax),%eax
   1183f:	8d 50 01             	lea    0x1(%eax),%edx
   11842:	8b 45 08             	mov    0x8(%ebp),%eax
   11845:	89 50 08             	mov    %edx,0x8(%eax)
}
   11848:	90                   	nop
   11849:	c9                   	leave  
   1184a:	c3                   	ret    

0001184b <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   1184b:	55                   	push   %ebp
   1184c:	89 e5                	mov    %esp,%ebp
   1184e:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   11851:	ff 75 08             	pushl  0x8(%ebp)
   11854:	e8 f6 fe ff ff       	call   1174f <list_is_empty>
   11859:	83 c4 04             	add    $0x4,%esp
   1185c:	85 c0                	test   %eax,%eax
   1185e:	74 07                	je     11867 <list_remove_first+0x1c>
        return (list_node_t *)0;
   11860:	b8 00 00 00 00       	mov    $0x0,%eax
   11865:	eb 5b                	jmp    118c2 <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   11867:	8b 45 08             	mov    0x8(%ebp),%eax
   1186a:	8b 00                	mov    (%eax),%eax
   1186c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   1186f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11872:	8b 50 04             	mov    0x4(%eax),%edx
   11875:	8b 45 08             	mov    0x8(%ebp),%eax
   11878:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   1187a:	8b 45 08             	mov    0x8(%ebp),%eax
   1187d:	8b 00                	mov    (%eax),%eax
   1187f:	85 c0                	test   %eax,%eax
   11881:	75 0c                	jne    1188f <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   11883:	8b 45 08             	mov    0x8(%ebp),%eax
   11886:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1188d:	eb 0c                	jmp    1189b <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   1188f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11892:	8b 40 04             	mov    0x4(%eax),%eax
   11895:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   1189b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1189e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   118a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118a8:	8b 50 04             	mov    0x4(%eax),%edx
   118ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118ae:	89 10                	mov    %edx,(%eax)
    list->count--;
   118b0:	8b 45 08             	mov    0x8(%ebp),%eax
   118b3:	8b 40 08             	mov    0x8(%eax),%eax
   118b6:	8d 50 ff             	lea    -0x1(%eax),%edx
   118b9:	8b 45 08             	mov    0x8(%ebp),%eax
   118bc:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   118bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   118c2:	c9                   	leave  
   118c3:	c3                   	ret    

000118c4 <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   118c4:	55                   	push   %ebp
   118c5:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   118c7:	8b 45 08             	mov    0x8(%ebp),%eax
   118ca:	8b 00                	mov    (%eax),%eax
   118cc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   118cf:	75 0b                	jne    118dc <list_remove+0x18>
        list->first = node->next;
   118d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   118d4:	8b 50 04             	mov    0x4(%eax),%edx
   118d7:	8b 45 08             	mov    0x8(%ebp),%eax
   118da:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   118dc:	8b 45 08             	mov    0x8(%ebp),%eax
   118df:	8b 40 04             	mov    0x4(%eax),%eax
   118e2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   118e5:	75 0b                	jne    118f2 <list_remove+0x2e>
        list->last = node->pre;
   118e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   118ea:	8b 10                	mov    (%eax),%edx
   118ec:	8b 45 08             	mov    0x8(%ebp),%eax
   118ef:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   118f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   118f5:	8b 00                	mov    (%eax),%eax
   118f7:	85 c0                	test   %eax,%eax
   118f9:	74 0e                	je     11909 <list_remove+0x45>
        node->pre->next = node->next;
   118fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   118fe:	8b 00                	mov    (%eax),%eax
   11900:	8b 55 0c             	mov    0xc(%ebp),%edx
   11903:	8b 52 04             	mov    0x4(%edx),%edx
   11906:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   11909:	8b 45 0c             	mov    0xc(%ebp),%eax
   1190c:	8b 40 04             	mov    0x4(%eax),%eax
   1190f:	85 c0                	test   %eax,%eax
   11911:	74 0d                	je     11920 <list_remove+0x5c>
        node->next->pre = node->pre;
   11913:	8b 45 0c             	mov    0xc(%ebp),%eax
   11916:	8b 40 04             	mov    0x4(%eax),%eax
   11919:	8b 55 0c             	mov    0xc(%ebp),%edx
   1191c:	8b 12                	mov    (%edx),%edx
   1191e:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   11920:	8b 45 0c             	mov    0xc(%ebp),%eax
   11923:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1192a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1192d:	8b 50 04             	mov    0x4(%eax),%edx
   11930:	8b 45 0c             	mov    0xc(%ebp),%eax
   11933:	89 10                	mov    %edx,(%eax)

    list->count--;
   11935:	8b 45 08             	mov    0x8(%ebp),%eax
   11938:	8b 40 08             	mov    0x8(%eax),%eax
   1193b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1193e:	8b 45 08             	mov    0x8(%ebp),%eax
   11941:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11944:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11947:	5d                   	pop    %ebp
   11948:	c3                   	ret    

00011949 <inb>:
static inline uint8_t inb(uint16_t port) {
   11949:	55                   	push   %ebp
   1194a:	89 e5                	mov    %esp,%ebp
   1194c:	83 ec 14             	sub    $0x14,%esp
   1194f:	8b 45 08             	mov    0x8(%ebp),%eax
   11952:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   11956:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1195a:	89 c2                	mov    %eax,%edx
   1195c:	ec                   	in     (%dx),%al
   1195d:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11960:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11964:	c9                   	leave  
   11965:	c3                   	ret    

00011966 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11966:	55                   	push   %ebp
   11967:	89 e5                	mov    %esp,%ebp
   11969:	83 ec 08             	sub    $0x8,%esp
   1196c:	8b 55 08             	mov    0x8(%ebp),%edx
   1196f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11972:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11976:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11979:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1197d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11981:	ee                   	out    %al,(%dx)
}
   11982:	90                   	nop
   11983:	c9                   	leave  
   11984:	c3                   	ret    

00011985 <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值
#include "cpu/irq.h"
#define COM1_PORT 0x3f8

void log_init(void) {
   11985:	55                   	push   %ebp
   11986:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   11988:	6a 00                	push   $0x0
   1198a:	68 f9 03 00 00       	push   $0x3f9
   1198f:	e8 d2 ff ff ff       	call   11966 <outb>
   11994:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11997:	68 80 00 00 00       	push   $0x80
   1199c:	68 fb 03 00 00       	push   $0x3fb
   119a1:	e8 c0 ff ff ff       	call   11966 <outb>
   119a6:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   119a9:	6a 03                	push   $0x3
   119ab:	68 f8 03 00 00       	push   $0x3f8
   119b0:	e8 b1 ff ff ff       	call   11966 <outb>
   119b5:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   119b8:	6a 00                	push   $0x0
   119ba:	68 f9 03 00 00       	push   $0x3f9
   119bf:	e8 a2 ff ff ff       	call   11966 <outb>
   119c4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   119c7:	6a 03                	push   $0x3
   119c9:	68 fb 03 00 00       	push   $0x3fb
   119ce:	e8 93 ff ff ff       	call   11966 <outb>
   119d3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   119d6:	68 c7 00 00 00       	push   $0xc7
   119db:	68 fa 03 00 00       	push   $0x3fa
   119e0:	e8 81 ff ff ff       	call   11966 <outb>
   119e5:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   119e8:	6a 0f                	push   $0xf
   119ea:	68 fc 03 00 00       	push   $0x3fc
   119ef:	e8 72 ff ff ff       	call   11966 <outb>
   119f4:	83 c4 08             	add    $0x8,%esp

}
   119f7:	90                   	nop
   119f8:	c9                   	leave  
   119f9:	c3                   	ret    

000119fa <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   119fa:	55                   	push   %ebp
   119fb:	89 e5                	mov    %esp,%ebp
   119fd:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   11a03:	83 ec 04             	sub    $0x4,%esp
   11a06:	68 80 00 00 00       	push   $0x80
   11a0b:	6a 00                	push   $0x0
   11a0d:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11a13:	50                   	push   %eax
   11a14:	e8 ad f9 ff ff       	call   113c6 <kernel_memset>
   11a19:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   11a1c:	8d 45 0c             	lea    0xc(%ebp),%eax
   11a1f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf,fmt,args);
   11a25:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   11a2b:	83 ec 04             	sub    $0x4,%esp
   11a2e:	50                   	push   %eax
   11a2f:	ff 75 08             	pushl  0x8(%ebp)
   11a32:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11a38:	50                   	push   %eax
   11a39:	e8 90 fb ff ff       	call   115ce <kernel_vsprintf>
   11a3e:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    irq_state_t state = irq_enter_protection();
   11a41:	e8 f2 f5 ff ff       	call   11038 <irq_enter_protection>
   11a46:	89 45 f0             	mov    %eax,-0x10(%ebp)

    const char * p = str_buf;
   11a49:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11a4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11a52:	eb 31                	jmp    11a85 <log_printf+0x8b>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   11a54:	90                   	nop
   11a55:	83 ec 0c             	sub    $0xc,%esp
   11a58:	68 fd 03 00 00       	push   $0x3fd
   11a5d:	e8 e7 fe ff ff       	call   11949 <inb>
   11a62:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   11a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a68:	8d 50 01             	lea    0x1(%eax),%edx
   11a6b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11a6e:	0f b6 00             	movzbl (%eax),%eax
   11a71:	0f b6 c0             	movzbl %al,%eax
   11a74:	83 ec 08             	sub    $0x8,%esp
   11a77:	50                   	push   %eax
   11a78:	68 f8 03 00 00       	push   $0x3f8
   11a7d:	e8 e4 fe ff ff       	call   11966 <outb>
   11a82:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a88:	0f b6 00             	movzbl (%eax),%eax
   11a8b:	84 c0                	test   %al,%al
   11a8d:	75 c5                	jne    11a54 <log_printf+0x5a>
    }
// 变列
    outb(COM1_PORT,'\r');
   11a8f:	83 ec 08             	sub    $0x8,%esp
   11a92:	6a 0d                	push   $0xd
   11a94:	68 f8 03 00 00       	push   $0x3f8
   11a99:	e8 c8 fe ff ff       	call   11966 <outb>
   11a9e:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   11aa1:	83 ec 08             	sub    $0x8,%esp
   11aa4:	6a 0a                	push   $0xa
   11aa6:	68 f8 03 00 00       	push   $0x3f8
   11aab:	e8 b6 fe ff ff       	call   11966 <outb>
   11ab0:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   11ab3:	83 ec 0c             	sub    $0xc,%esp
   11ab6:	ff 75 f0             	pushl  -0x10(%ebp)
   11ab9:	e8 92 f5 ff ff       	call   11050 <irq_leave_protection>
   11abe:	83 c4 10             	add    $0x10,%esp

}
   11ac1:	90                   	nop
   11ac2:	c9                   	leave  
   11ac3:	c3                   	ret    
