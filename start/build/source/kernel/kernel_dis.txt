
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001960 memsz 0x00005670 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001601  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000358  00011604  00011604  00002604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  0001195c  0001195c  0000295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d10  00011960  00011960  00002960  2**5
                  ALLOC
  4 .debug_line   00000a24  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001982  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fa  00000000  00000000  00004d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000100  00000000  00000000  00005500  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000861  00000000  00000000  00005600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00005e61  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000964  00000000  00000000  00005e74  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011604 l    d  .rodata	00000000 .rodata
0001195c l    d  .data	00000000 .data
00011960 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	000000f0 tss_init
0001165c l     O .rodata	0000000a __func__.1856
00000000 l    df *ABS*	00000000 cpu.c
000103f0 l     F .text	00000028 lgdt
00010418 l     F .text	0000001a far_jump
00011960 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000105cd l     F .text	0000001d inb
000105ea l     F .text	0000001f outb
00010609 l     F .text	00000007 cli
00010610 l     F .text	00000007 sti
00010617 l     F .text	00000028 lidt
0001063f l     F .text	00000007 hlt
00010646 l     F .text	000000d9 dump_core_regs
0001071f l     F .text	0000003e do_default_handler
00012160 l     O .bss	00000400 idt_table
0001098d l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010d5b l     F .text	0000001f outb
00012560 l     O .bss	00000004 sys_tick
00010d9d l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00010e15 l     F .text	00000017 write_tr
00012580 l     O .bss	0000006c first_task
00012600 l     O .bss	00001000 init_task_stack
00013600 l     O .bss	0000006c init_task
00000000 l    df *ABS*	00000000 klib.c
00010f51 l     F .text	00000007 hlt
0001195c l     O .data	00000004 num2ch.1900
00000000 l    df *ABS*	00000000 log.c
0001149c l     F .text	0000001d inb
000114b9 l     F .text	0000001f outb
000110c4 g     F .text	0000004f kernel_memcpy
00010d25 g     F .text	0000000b irq_enable_global
00010891 g     F .text	0000001c do_handler_segment_not_present
00011113 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
00010569 g     F .text	0000000b cpu_init
000114d8 g     F .text	00000075 log_init
00010e87 g     F .text	000000ca init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00010f58 g     F .text	00000047 kernel_strcpy
00010c08 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
000107e9 g     F .text	0000001c do_handler_overflow
0001091d g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
000108c9 g     F .text	0000001c do_handler_general_protection
00010779 g     F .text	0000001c do_handler_divider
00010859 g     F .text	0000001c do_handler_double_fault
00010e49 g     F .text	0000003e init_task_entry
000108e5 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010d30 g     F .text	0000002b pic_send_eoi
00010d7a g     F .text	00000023 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010971 g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00013670 g     O .bss	00002000 stack
000100e2 g       .text	00000000 exception_handler_bound_range
00010821 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010901 g     F .text	0000001c do_handler_fpu_error
00010939 g     F .text	0000001c do_handler_machine_check
00010795 g     F .text	0000001c do_handler_Debug
000107b1 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00010f9f g     F .text	00000070 kernel_strncpy
00010d1a g     F .text	0000000b irq_disable_global
00010e2c g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
0001131b g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
00010875 g     F .text	0000001c do_handler_invalid_tss
00011466 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00010bce g     F .text	0000003a irq_install
000104b5 g     F .text	0000006d init_gdt
00010c93 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
0001083d g     F .text	0000001c do_handler_device_unavailable
000105b9 g     F .text	00000014 switch_to_tss
00011154 g     F .text	00000064 kernel_memcmp
00010955 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
0001075d g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
00010395 g     F .text	0000001b task_switch_from_to
00010a20 g     F .text	000001ae irq_init
00011089 g     F .text	0000003b kernel_strlen
00010432 g     F .text	00000083 segment_desc_set
00010805 g     F .text	0000001c do_handler_bound_range
0001100f g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010066 g       .text	00000000 exception_handler_Debug
000108ad g     F .text	0000001c do_handler_stack_segment_fault
000107cd g     F .text	0000001c do_handler_breakpoint
0001154d g     F .text	000000b4 log_printf
000103b0 g     F .text	00000040 task_init
000111b8 g     F .text	00000024 kernel_sprintf
00010574 g     F .text	00000045 gdt_alloc_desc
000111dc g     F .text	0000013f kernel_itoa
00010522 g     F .text	00000047 gate_desc_set
00010dfd g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 23 0e 00 00       	call   10e2c <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 70 56 01 00       	mov    $0x15670,%esp
    jmp init_main
   10023:	e9 5f 0e 00 00       	jmp    10e87 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 24 07 00 00       	call   1075d <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 21 07 00 00       	call   10779 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 1e 07 00 00       	call   10795 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 1b 07 00 00       	call   107b1 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 18 07 00 00       	call   107cd <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 15 07 00 00       	call   107e9 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 12 07 00 00       	call   10805 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 0f 07 00 00       	call   10821 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 0c 07 00 00       	call   1083d <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 0b 07 00 00       	call   10859 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 0a 07 00 00       	call   10875 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 09 07 00 00       	call   10891 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 08 07 00 00       	call   108ad <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 07 07 00 00       	call   108c9 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 06 07 00 00       	call   108e5 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 03 07 00 00       	call   10901 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 02 07 00 00       	call   1091d <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 ff 06 00 00       	call   10939 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 fc 06 00 00       	call   10955 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 f9 06 00 00       	call   10971 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 e3 0a 00 00       	call   10d7a <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <tss_init>:
#include "cpu/cpu.h"
#include "os_cfg.h"
#include "tools/log.h"


static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
   102a8:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102ab:	e8 c4 02 00 00       	call   10574 <gdt_alloc_desc>
   102b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   102b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102b7:	79 1a                	jns    102d3 <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   102b9:	83 ec 0c             	sub    $0xc,%esp
   102bc:	68 04 16 01 00       	push   $0x11604
   102c1:	e8 87 12 00 00       	call   1154d <log_printf>
   102c6:	83 c4 10             	add    $0x10,%esp
        return -1;
   102c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102ce:	e9 c0 00 00 00       	jmp    10393 <tss_init+0xee>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   102d3:	8b 45 08             	mov    0x8(%ebp),%eax
   102d6:	68 89 00 00 00       	push   $0x89
   102db:	6a 68                	push   $0x68
   102dd:	50                   	push   %eax
   102de:	ff 75 f4             	pushl  -0xc(%ebp)
   102e1:	e8 4c 01 00 00       	call   10432 <segment_desc_set>
   102e6:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   102e9:	8b 45 08             	mov    0x8(%ebp),%eax
   102ec:	83 ec 04             	sub    $0x4,%esp
   102ef:	6a 68                	push   $0x68
   102f1:	6a 00                	push   $0x0
   102f3:	50                   	push   %eax
   102f4:	e8 1a 0e 00 00       	call   11113 <kernel_memset>
   102f9:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   102fc:	8b 45 08             	mov    0x8(%ebp),%eax
   102ff:	8b 55 0c             	mov    0xc(%ebp),%edx
   10302:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	8b 55 10             	mov    0x10(%ebp),%edx
   1030b:	89 50 04             	mov    %edx,0x4(%eax)
   1030e:	8b 45 08             	mov    0x8(%ebp),%eax
   10311:	8b 50 04             	mov    0x4(%eax),%edx
   10314:	8b 45 08             	mov    0x8(%ebp),%eax
   10317:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   1031a:	8b 45 08             	mov    0x8(%ebp),%eax
   1031d:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
    task->tss.eip = entry;
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	8b 55 0c             	mov    0xc(%ebp),%edx
   1032a:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   1032d:	8b 45 08             	mov    0x8(%ebp),%eax
   10330:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   10337:	8b 45 08             	mov    0x8(%ebp),%eax
   1033a:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
   10341:	8b 45 08             	mov    0x8(%ebp),%eax
   10344:	8b 50 5c             	mov    0x5c(%eax),%edx
   10347:	8b 45 08             	mov    0x8(%ebp),%eax
   1034a:	89 50 58             	mov    %edx,0x58(%eax)
   1034d:	8b 45 08             	mov    0x8(%ebp),%eax
   10350:	8b 50 58             	mov    0x58(%eax),%edx
   10353:	8b 45 08             	mov    0x8(%ebp),%eax
   10356:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	8b 50 54             	mov    0x54(%eax),%edx
   1035f:	8b 45 08             	mov    0x8(%ebp),%eax
   10362:	89 50 50             	mov    %edx,0x50(%eax)
   10365:	8b 45 08             	mov    0x8(%ebp),%eax
   10368:	8b 50 50             	mov    0x50(%eax),%edx
   1036b:	8b 45 08             	mov    0x8(%ebp),%eax
   1036e:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   10371:	8b 45 08             	mov    0x8(%ebp),%eax
   10374:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)
    task->tss.iomap = 0;
   1037b:	8b 45 08             	mov    0x8(%ebp),%eax
   1037e:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)

    task->tss_sel = tss_sel;
   10385:	8b 45 08             	mov    0x8(%ebp),%eax
   10388:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1038b:	89 50 68             	mov    %edx,0x68(%eax)
    return 0;
   1038e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10393:	c9                   	leave  
   10394:	c3                   	ret    

00010395 <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void task_switch_from_to(task_t * from,task_t * to) {
   10395:	55                   	push   %ebp
   10396:	89 e5                	mov    %esp,%ebp
   10398:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   1039b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1039e:	8b 40 68             	mov    0x68(%eax),%eax
   103a1:	83 ec 0c             	sub    $0xc,%esp
   103a4:	50                   	push   %eax
   103a5:	e8 0f 02 00 00       	call   105b9 <switch_to_tss>
   103aa:	83 c4 10             	add    $0x10,%esp
}
   103ad:	90                   	nop
   103ae:	c9                   	leave  
   103af:	c3                   	ret    

000103b0 <task_init>:

/**
 * @brief 初始化任务
 */
int task_init (task_t * task, uint32_t entry, uint32_t esp){
   103b0:	55                   	push   %ebp
   103b1:	89 e5                	mov    %esp,%ebp
   103b3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   103b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103ba:	75 19                	jne    103d5 <task_init+0x25>
   103bc:	68 17 16 01 00       	push   $0x11617
   103c1:	68 5c 16 01 00       	push   $0x1165c
   103c6:	6a 30                	push   $0x30
   103c8:	68 2c 16 01 00       	push   $0x1162c
   103cd:	e8 94 10 00 00       	call   11466 <panic>
   103d2:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   103d5:	83 ec 04             	sub    $0x4,%esp
   103d8:	ff 75 10             	pushl  0x10(%ebp)
   103db:	ff 75 0c             	pushl  0xc(%ebp)
   103de:	ff 75 08             	pushl  0x8(%ebp)
   103e1:	e8 bf fe ff ff       	call   102a5 <tss_init>
   103e6:	83 c4 10             	add    $0x10,%esp
    return 0;
   103e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103ee:	c9                   	leave  
   103ef:	c3                   	ret    

000103f0 <lgdt>:
static inline void sti(void){
    __asm__ __volatile__("sti");    
}


static inline void lgdt(uint32_t start,uint32_t size){
   103f0:	55                   	push   %ebp
   103f1:	89 e5                	mov    %esp,%ebp
   103f3:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }gdt;
    
    gdt.start32_16 = start >> 16;
   103f6:	8b 45 08             	mov    0x8(%ebp),%eax
   103f9:	c1 e8 10             	shr    $0x10,%eax
   103fc:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   10400:	8b 45 08             	mov    0x8(%ebp),%eax
   10403:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10407:	8b 45 0c             	mov    0xc(%ebp),%eax
   1040a:	83 e8 01             	sub    $0x1,%eax
   1040d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10411:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10415:	90                   	nop
   10416:	c9                   	leave  
   10417:	c3                   	ret    

00010418 <far_jump>:

    __asm__ __volatile__("mov %[v],%%cr0"::[v]"r"(v));
}


static inline void far_jump(uint32_t selector,uint32_t offset){
   10418:	55                   	push   %ebp
   10419:	89 e5                	mov    %esp,%ebp
   1041b:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   1041e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10421:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10424:	8b 45 08             	mov    0x8(%ebp),%eax
   10427:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   1042a:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1042d:	ff 28                	ljmp   *(%eax)
}
   1042f:	90                   	nop
   10430:	c9                   	leave  
   10431:	c3                   	ret    

00010432 <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   10432:	55                   	push   %ebp
   10433:	89 e5                	mov    %esp,%ebp
   10435:	83 ec 14             	sub    $0x14,%esp
   10438:	8b 45 14             	mov    0x14(%ebp),%eax
   1043b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   1043f:	8b 45 08             	mov    0x8(%ebp),%eax
   10442:	83 e0 f8             	and    $0xfffffff8,%eax
   10445:	05 60 19 01 00       	add    $0x11960,%eax
   1044a:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   1044d:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10454:	76 0f                	jbe    10465 <segment_desc_set+0x33>
		attr |= SEG_G;
   10456:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1045c:	8b 45 10             	mov    0x10(%ebp),%eax
   1045f:	c1 e8 0c             	shr    $0xc,%eax
   10462:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   10465:	8b 45 10             	mov    0x10(%ebp),%eax
   10468:	89 c2                	mov    %eax,%edx
   1046a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1046d:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10470:	8b 45 0c             	mov    0xc(%ebp),%eax
   10473:	89 c2                	mov    %eax,%edx
   10475:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10478:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1047c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1047f:	c1 e8 10             	shr    $0x10,%eax
   10482:	89 c2                	mov    %eax,%edx
   10484:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10487:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1048a:	8b 45 10             	mov    0x10(%ebp),%eax
   1048d:	c1 e8 10             	shr    $0x10,%eax
   10490:	c1 e0 08             	shl    $0x8,%eax
   10493:	66 25 00 0f          	and    $0xf00,%ax
   10497:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1049b:	89 c2                	mov    %eax,%edx
   1049d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104a0:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   104a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   104a7:	c1 e8 18             	shr    $0x18,%eax
   104aa:	89 c2                	mov    %eax,%edx
   104ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104af:	88 50 07             	mov    %dl,0x7(%eax)

}
   104b2:	90                   	nop
   104b3:	c9                   	leave  
   104b4:	c3                   	ret    

000104b5 <init_gdt>:

void init_gdt(void){
   104b5:	55                   	push   %ebp
   104b6:	89 e5                	mov    %esp,%ebp
   104b8:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   104bb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   104c2:	eb 19                	jmp    104dd <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   104c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104c7:	c1 e0 03             	shl    $0x3,%eax
   104ca:	6a 00                	push   $0x0
   104cc:	6a 00                	push   $0x0
   104ce:	6a 00                	push   $0x0
   104d0:	50                   	push   %eax
   104d1:	e8 5c ff ff ff       	call   10432 <segment_desc_set>
   104d6:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   104d9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104dd:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   104e4:	7e de                	jle    104c4 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   104e6:	68 9a 40 00 00       	push   $0x409a
   104eb:	6a ff                	push   $0xffffffff
   104ed:	6a 00                	push   $0x0
   104ef:	6a 08                	push   $0x8
   104f1:	e8 3c ff ff ff       	call   10432 <segment_desc_set>
   104f6:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   104f9:	68 92 40 00 00       	push   $0x4092
   104fe:	6a ff                	push   $0xffffffff
   10500:	6a 00                	push   $0x0
   10502:	6a 10                	push   $0x10
   10504:	e8 29 ff ff ff       	call   10432 <segment_desc_set>
   10509:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   1050c:	b8 60 19 01 00       	mov    $0x11960,%eax
   10511:	68 00 08 00 00       	push   $0x800
   10516:	50                   	push   %eax
   10517:	e8 d4 fe ff ff       	call   103f0 <lgdt>
   1051c:	83 c4 08             	add    $0x8,%esp
}
   1051f:	90                   	nop
   10520:	c9                   	leave  
   10521:	c3                   	ret    

00010522 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10522:	55                   	push   %ebp
   10523:	89 e5                	mov    %esp,%ebp
   10525:	83 ec 08             	sub    $0x8,%esp
   10528:	8b 55 0c             	mov    0xc(%ebp),%edx
   1052b:	8b 45 14             	mov    0x14(%ebp),%eax
   1052e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10532:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   10536:	8b 45 10             	mov    0x10(%ebp),%eax
   10539:	89 c2                	mov    %eax,%edx
   1053b:	8b 45 08             	mov    0x8(%ebp),%eax
   1053e:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10541:	8b 45 08             	mov    0x8(%ebp),%eax
   10544:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10548:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1054c:	8b 45 08             	mov    0x8(%ebp),%eax
   1054f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10553:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10557:	8b 45 10             	mov    0x10(%ebp),%eax
   1055a:	c1 e8 10             	shr    $0x10,%eax
   1055d:	89 c2                	mov    %eax,%edx
   1055f:	8b 45 08             	mov    0x8(%ebp),%eax
   10562:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10566:	90                   	nop
   10567:	c9                   	leave  
   10568:	c3                   	ret    

00010569 <cpu_init>:

void cpu_init (void){
   10569:	55                   	push   %ebp
   1056a:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   1056c:	e8 44 ff ff ff       	call   104b5 <init_gdt>
}
   10571:	90                   	nop
   10572:	5d                   	pop    %ebp
   10573:	c3                   	ret    

00010574 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   10574:	55                   	push   %ebp
   10575:	89 e5                	mov    %esp,%ebp
   10577:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   1057a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10581:	eb 26                	jmp    105a9 <gdt_alloc_desc+0x35>

        segment_desc_t * desc = gdt_table + i;
   10583:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10586:	c1 e0 03             	shl    $0x3,%eax
   10589:	05 60 19 01 00       	add    $0x11960,%eax
   1058e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   10591:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10594:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10598:	66 85 c0             	test   %ax,%ax
   1059b:	75 08                	jne    105a5 <gdt_alloc_desc+0x31>
            return i * sizeof(segment_desc_t);
   1059d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105a0:	c1 e0 03             	shl    $0x3,%eax
   105a3:	eb 12                	jmp    105b7 <gdt_alloc_desc+0x43>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   105a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   105a9:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   105b0:	7e d1                	jle    10583 <gdt_alloc_desc+0xf>
        }
    }
    return -1;
   105b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   105b7:	c9                   	leave  
   105b8:	c3                   	ret    

000105b9 <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   105b9:	55                   	push   %ebp
   105ba:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   105bc:	8b 45 08             	mov    0x8(%ebp),%eax
   105bf:	6a 00                	push   $0x0
   105c1:	50                   	push   %eax
   105c2:	e8 51 fe ff ff       	call   10418 <far_jump>
   105c7:	83 c4 08             	add    $0x8,%esp
   105ca:	90                   	nop
   105cb:	c9                   	leave  
   105cc:	c3                   	ret    

000105cd <inb>:
static inline uint8_t inb(uint16_t port) {
   105cd:	55                   	push   %ebp
   105ce:	89 e5                	mov    %esp,%ebp
   105d0:	83 ec 14             	sub    $0x14,%esp
   105d3:	8b 45 08             	mov    0x8(%ebp),%eax
   105d6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   105da:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   105de:	89 c2                	mov    %eax,%edx
   105e0:	ec                   	in     (%dx),%al
   105e1:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   105e4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   105e8:	c9                   	leave  
   105e9:	c3                   	ret    

000105ea <outb>:
static inline void outb(uint16_t port,uint8_t data){
   105ea:	55                   	push   %ebp
   105eb:	89 e5                	mov    %esp,%ebp
   105ed:	83 ec 08             	sub    $0x8,%esp
   105f0:	8b 55 08             	mov    0x8(%ebp),%edx
   105f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   105f6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   105fa:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   105fd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10601:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10605:	ee                   	out    %al,(%dx)
}
   10606:	90                   	nop
   10607:	c9                   	leave  
   10608:	c3                   	ret    

00010609 <cli>:
static inline void cli(void){
   10609:	55                   	push   %ebp
   1060a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   1060c:	fa                   	cli    
}
   1060d:	90                   	nop
   1060e:	5d                   	pop    %ebp
   1060f:	c3                   	ret    

00010610 <sti>:
static inline void sti(void){
   10610:	55                   	push   %ebp
   10611:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10613:	fb                   	sti    
}
   10614:	90                   	nop
   10615:	5d                   	pop    %ebp
   10616:	c3                   	ret    

00010617 <lidt>:



static inline void lidt(uint32_t start,uint32_t size){
   10617:	55                   	push   %ebp
   10618:	89 e5                	mov    %esp,%ebp
   1061a:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }idt;
    
    idt.start32_16 = start >> 16;
   1061d:	8b 45 08             	mov    0x8(%ebp),%eax
   10620:	c1 e8 10             	shr    $0x10,%eax
   10623:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10627:	8b 45 08             	mov    0x8(%ebp),%eax
   1062a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   1062e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10631:	83 e8 01             	sub    $0x1,%eax
   10634:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10638:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1063c:	90                   	nop
   1063d:	c9                   	leave  
   1063e:	c3                   	ret    

0001063f <hlt>:

static inline void hlt (void) {
   1063f:	55                   	push   %ebp
   10640:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10642:	f4                   	hlt    
}
   10643:	90                   	nop
   10644:	5d                   	pop    %ebp
   10645:	c3                   	ret    

00010646 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   10646:	55                   	push   %ebp
   10647:	89 e5                	mov    %esp,%ebp
   10649:	57                   	push   %edi
   1064a:	56                   	push   %esi
   1064b:	53                   	push   %ebx
   1064c:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   1064f:	8b 45 08             	mov    0x8(%ebp),%eax
   10652:	8b 50 34             	mov    0x34(%eax),%edx
   10655:	8b 45 08             	mov    0x8(%ebp),%eax
   10658:	8b 40 30             	mov    0x30(%eax),%eax
   1065b:	83 ec 04             	sub    $0x4,%esp
   1065e:	52                   	push   %edx
   1065f:	50                   	push   %eax
   10660:	68 68 16 01 00       	push   $0x11668
   10665:	e8 e3 0e 00 00       	call   1154d <log_printf>
   1066a:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   1066d:	8b 45 08             	mov    0x8(%ebp),%eax
   10670:	8b 38                	mov    (%eax),%edi
   10672:	8b 45 08             	mov    0x8(%ebp),%eax
   10675:	8b 70 04             	mov    0x4(%eax),%esi
   10678:	8b 45 08             	mov    0x8(%ebp),%eax
   1067b:	8b 58 0c             	mov    0xc(%eax),%ebx
   1067e:	8b 45 08             	mov    0x8(%ebp),%eax
   10681:	8b 48 08             	mov    0x8(%eax),%ecx
   10684:	8b 45 08             	mov    0x8(%ebp),%eax
   10687:	8b 50 0c             	mov    0xc(%eax),%edx
   1068a:	8b 45 08             	mov    0x8(%ebp),%eax
   1068d:	8b 40 3c             	mov    0x3c(%eax),%eax
   10690:	83 ec 04             	sub    $0x4,%esp
   10693:	57                   	push   %edi
   10694:	56                   	push   %esi
   10695:	53                   	push   %ebx
   10696:	51                   	push   %ecx
   10697:	52                   	push   %edx
   10698:	50                   	push   %eax
   10699:	68 80 16 01 00       	push   $0x11680
   1069e:	e8 aa 0e 00 00       	call   1154d <log_printf>
   106a3:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   106a6:	8b 45 08             	mov    0x8(%ebp),%eax
   106a9:	8b 48 1c             	mov    0x1c(%eax),%ecx
   106ac:	8b 45 08             	mov    0x8(%ebp),%eax
   106af:	8b 40 18             	mov    0x18(%eax),%eax
   106b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   106b5:	8b 45 08             	mov    0x8(%ebp),%eax
   106b8:	8b 58 14             	mov    0x14(%eax),%ebx
   106bb:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   106be:	8b 45 08             	mov    0x8(%ebp),%eax
   106c1:	8b 78 10             	mov    0x10(%eax),%edi
   106c4:	8b 45 08             	mov    0x8(%ebp),%eax
   106c7:	8b 70 24             	mov    0x24(%eax),%esi
   106ca:	8b 45 08             	mov    0x8(%ebp),%eax
   106cd:	8b 58 28             	mov    0x28(%eax),%ebx
   106d0:	8b 45 08             	mov    0x8(%ebp),%eax
   106d3:	8b 50 20             	mov    0x20(%eax),%edx
   106d6:	8b 45 08             	mov    0x8(%ebp),%eax
   106d9:	8b 40 2c             	mov    0x2c(%eax),%eax
   106dc:	83 ec 0c             	sub    $0xc,%esp
   106df:	51                   	push   %ecx
   106e0:	ff 75 e4             	pushl  -0x1c(%ebp)
   106e3:	ff 75 e0             	pushl  -0x20(%ebp)
   106e6:	57                   	push   %edi
   106e7:	56                   	push   %esi
   106e8:	53                   	push   %ebx
   106e9:	52                   	push   %edx
   106ea:	50                   	push   %eax
   106eb:	68 ac 16 01 00       	push   $0x116ac
   106f0:	e8 58 0e 00 00       	call   1154d <log_printf>
   106f5:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   106f8:	8b 45 08             	mov    0x8(%ebp),%eax
   106fb:	8b 50 40             	mov    0x40(%eax),%edx
   106fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10701:	8b 40 38             	mov    0x38(%eax),%eax
   10704:	83 ec 04             	sub    $0x4,%esp
   10707:	52                   	push   %edx
   10708:	50                   	push   %eax
   10709:	68 f5 16 01 00       	push   $0x116f5
   1070e:	e8 3a 0e 00 00       	call   1154d <log_printf>
   10713:	83 c4 10             	add    $0x10,%esp
}
   10716:	90                   	nop
   10717:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1071a:	5b                   	pop    %ebx
   1071b:	5e                   	pop    %esi
   1071c:	5f                   	pop    %edi
   1071d:	5d                   	pop    %ebp
   1071e:	c3                   	ret    

0001071f <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   1071f:	55                   	push   %ebp
   10720:	89 e5                	mov    %esp,%ebp
   10722:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10725:	83 ec 0c             	sub    $0xc,%esp
   10728:	68 0b 17 01 00       	push   $0x1170b
   1072d:	e8 1b 0e 00 00       	call   1154d <log_printf>
   10732:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10735:	83 ec 08             	sub    $0x8,%esp
   10738:	ff 75 0c             	pushl  0xc(%ebp)
   1073b:	68 28 17 01 00       	push   $0x11728
   10740:	e8 08 0e 00 00       	call   1154d <log_printf>
   10745:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10748:	83 ec 0c             	sub    $0xc,%esp
   1074b:	ff 75 08             	pushl  0x8(%ebp)
   1074e:	e8 f3 fe ff ff       	call   10646 <dump_core_regs>
   10753:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   10756:	e8 e4 fe ff ff       	call   1063f <hlt>
   1075b:	eb f9                	jmp    10756 <do_default_handler+0x37>

0001075d <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   1075d:	55                   	push   %ebp
   1075e:	89 e5                	mov    %esp,%ebp
   10760:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   10763:	83 ec 08             	sub    $0x8,%esp
   10766:	68 42 17 01 00       	push   $0x11742
   1076b:	ff 75 08             	pushl  0x8(%ebp)
   1076e:	e8 ac ff ff ff       	call   1071f <do_default_handler>
   10773:	83 c4 10             	add    $0x10,%esp

}
   10776:	90                   	nop
   10777:	c9                   	leave  
   10778:	c3                   	ret    

00010779 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   10779:	55                   	push   %ebp
   1077a:	89 e5                	mov    %esp,%ebp
   1077c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   1077f:	83 ec 08             	sub    $0x8,%esp
   10782:	68 54 17 01 00       	push   $0x11754
   10787:	ff 75 08             	pushl  0x8(%ebp)
   1078a:	e8 90 ff ff ff       	call   1071f <do_default_handler>
   1078f:	83 c4 10             	add    $0x10,%esp
}
   10792:	90                   	nop
   10793:	c9                   	leave  
   10794:	c3                   	ret    

00010795 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   10795:	55                   	push   %ebp
   10796:	89 e5                	mov    %esp,%ebp
   10798:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   1079b:	83 ec 08             	sub    $0x8,%esp
   1079e:	68 65 17 01 00       	push   $0x11765
   107a3:	ff 75 08             	pushl  0x8(%ebp)
   107a6:	e8 74 ff ff ff       	call   1071f <do_default_handler>
   107ab:	83 c4 10             	add    $0x10,%esp
}
   107ae:	90                   	nop
   107af:	c9                   	leave  
   107b0:	c3                   	ret    

000107b1 <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   107b1:	55                   	push   %ebp
   107b2:	89 e5                	mov    %esp,%ebp
   107b4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   107b7:	83 ec 08             	sub    $0x8,%esp
   107ba:	68 75 17 01 00       	push   $0x11775
   107bf:	ff 75 08             	pushl  0x8(%ebp)
   107c2:	e8 58 ff ff ff       	call   1071f <do_default_handler>
   107c7:	83 c4 10             	add    $0x10,%esp
}
   107ca:	90                   	nop
   107cb:	c9                   	leave  
   107cc:	c3                   	ret    

000107cd <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   107cd:	55                   	push   %ebp
   107ce:	89 e5                	mov    %esp,%ebp
   107d0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   107d3:	83 ec 08             	sub    $0x8,%esp
   107d6:	68 84 17 01 00       	push   $0x11784
   107db:	ff 75 08             	pushl  0x8(%ebp)
   107de:	e8 3c ff ff ff       	call   1071f <do_default_handler>
   107e3:	83 c4 10             	add    $0x10,%esp
}
   107e6:	90                   	nop
   107e7:	c9                   	leave  
   107e8:	c3                   	ret    

000107e9 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   107e9:	55                   	push   %ebp
   107ea:	89 e5                	mov    %esp,%ebp
   107ec:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   107ef:	83 ec 08             	sub    $0x8,%esp
   107f2:	68 90 17 01 00       	push   $0x11790
   107f7:	ff 75 08             	pushl  0x8(%ebp)
   107fa:	e8 20 ff ff ff       	call   1071f <do_default_handler>
   107ff:	83 c4 10             	add    $0x10,%esp
}
   10802:	90                   	nop
   10803:	c9                   	leave  
   10804:	c3                   	ret    

00010805 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10805:	55                   	push   %ebp
   10806:	89 e5                	mov    %esp,%ebp
   10808:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   1080b:	83 ec 08             	sub    $0x8,%esp
   1080e:	68 9a 17 01 00       	push   $0x1179a
   10813:	ff 75 08             	pushl  0x8(%ebp)
   10816:	e8 04 ff ff ff       	call   1071f <do_default_handler>
   1081b:	83 c4 10             	add    $0x10,%esp
}
   1081e:	90                   	nop
   1081f:	c9                   	leave  
   10820:	c3                   	ret    

00010821 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   10821:	55                   	push   %ebp
   10822:	89 e5                	mov    %esp,%ebp
   10824:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10827:	83 ec 08             	sub    $0x8,%esp
   1082a:	68 b0 17 01 00       	push   $0x117b0
   1082f:	ff 75 08             	pushl  0x8(%ebp)
   10832:	e8 e8 fe ff ff       	call   1071f <do_default_handler>
   10837:	83 c4 10             	add    $0x10,%esp
}
   1083a:	90                   	nop
   1083b:	c9                   	leave  
   1083c:	c3                   	ret    

0001083d <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   1083d:	55                   	push   %ebp
   1083e:	89 e5                	mov    %esp,%ebp
   10840:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   10843:	83 ec 08             	sub    $0x8,%esp
   10846:	68 c0 17 01 00       	push   $0x117c0
   1084b:	ff 75 08             	pushl  0x8(%ebp)
   1084e:	e8 cc fe ff ff       	call   1071f <do_default_handler>
   10853:	83 c4 10             	add    $0x10,%esp
}
   10856:	90                   	nop
   10857:	c9                   	leave  
   10858:	c3                   	ret    

00010859 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10859:	55                   	push   %ebp
   1085a:	89 e5                	mov    %esp,%ebp
   1085c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   1085f:	83 ec 08             	sub    $0x8,%esp
   10862:	68 d6 17 01 00       	push   $0x117d6
   10867:	ff 75 08             	pushl  0x8(%ebp)
   1086a:	e8 b0 fe ff ff       	call   1071f <do_default_handler>
   1086f:	83 c4 10             	add    $0x10,%esp
}
   10872:	90                   	nop
   10873:	c9                   	leave  
   10874:	c3                   	ret    

00010875 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   10875:	55                   	push   %ebp
   10876:	89 e5                	mov    %esp,%ebp
   10878:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   1087b:	83 ec 08             	sub    $0x8,%esp
   1087e:	68 e4 17 01 00       	push   $0x117e4
   10883:	ff 75 08             	pushl  0x8(%ebp)
   10886:	e8 94 fe ff ff       	call   1071f <do_default_handler>
   1088b:	83 c4 10             	add    $0x10,%esp
}
   1088e:	90                   	nop
   1088f:	c9                   	leave  
   10890:	c3                   	ret    

00010891 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   10891:	55                   	push   %ebp
   10892:	89 e5                	mov    %esp,%ebp
   10894:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10897:	83 ec 08             	sub    $0x8,%esp
   1089a:	68 f0 17 01 00       	push   $0x117f0
   1089f:	ff 75 08             	pushl  0x8(%ebp)
   108a2:	e8 78 fe ff ff       	call   1071f <do_default_handler>
   108a7:	83 c4 10             	add    $0x10,%esp
}
   108aa:	90                   	nop
   108ab:	c9                   	leave  
   108ac:	c3                   	ret    

000108ad <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   108ad:	55                   	push   %ebp
   108ae:	89 e5                	mov    %esp,%ebp
   108b0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   108b3:	83 ec 08             	sub    $0x8,%esp
   108b6:	68 05 18 01 00       	push   $0x11805
   108bb:	ff 75 08             	pushl  0x8(%ebp)
   108be:	e8 5c fe ff ff       	call   1071f <do_default_handler>
   108c3:	83 c4 10             	add    $0x10,%esp
}
   108c6:	90                   	nop
   108c7:	c9                   	leave  
   108c8:	c3                   	ret    

000108c9 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   108c9:	55                   	push   %ebp
   108ca:	89 e5                	mov    %esp,%ebp
   108cc:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   108cf:	83 ec 08             	sub    $0x8,%esp
   108d2:	68 1a 18 01 00       	push   $0x1181a
   108d7:	ff 75 08             	pushl  0x8(%ebp)
   108da:	e8 40 fe ff ff       	call   1071f <do_default_handler>
   108df:	83 c4 10             	add    $0x10,%esp
}
   108e2:	90                   	nop
   108e3:	c9                   	leave  
   108e4:	c3                   	ret    

000108e5 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   108e5:	55                   	push   %ebp
   108e6:	89 e5                	mov    %esp,%ebp
   108e8:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   108eb:	83 ec 08             	sub    $0x8,%esp
   108ee:	68 2e 18 01 00       	push   $0x1182e
   108f3:	ff 75 08             	pushl  0x8(%ebp)
   108f6:	e8 24 fe ff ff       	call   1071f <do_default_handler>
   108fb:	83 c4 10             	add    $0x10,%esp
}
   108fe:	90                   	nop
   108ff:	c9                   	leave  
   10900:	c3                   	ret    

00010901 <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   10901:	55                   	push   %ebp
   10902:	89 e5                	mov    %esp,%ebp
   10904:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10907:	83 ec 08             	sub    $0x8,%esp
   1090a:	68 3a 18 01 00       	push   $0x1183a
   1090f:	ff 75 08             	pushl  0x8(%ebp)
   10912:	e8 08 fe ff ff       	call   1071f <do_default_handler>
   10917:	83 c4 10             	add    $0x10,%esp
}
   1091a:	90                   	nop
   1091b:	c9                   	leave  
   1091c:	c3                   	ret    

0001091d <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   1091d:	55                   	push   %ebp
   1091e:	89 e5                	mov    %esp,%ebp
   10920:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10923:	83 ec 08             	sub    $0x8,%esp
   10926:	68 58 18 01 00       	push   $0x11858
   1092b:	ff 75 08             	pushl  0x8(%ebp)
   1092e:	e8 ec fd ff ff       	call   1071f <do_default_handler>
   10933:	83 c4 10             	add    $0x10,%esp
}
   10936:	90                   	nop
   10937:	c9                   	leave  
   10938:	c3                   	ret    

00010939 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10939:	55                   	push   %ebp
   1093a:	89 e5                	mov    %esp,%ebp
   1093c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   1093f:	83 ec 08             	sub    $0x8,%esp
   10942:	68 69 18 01 00       	push   $0x11869
   10947:	ff 75 08             	pushl  0x8(%ebp)
   1094a:	e8 d0 fd ff ff       	call   1071f <do_default_handler>
   1094f:	83 c4 10             	add    $0x10,%esp
}
   10952:	90                   	nop
   10953:	c9                   	leave  
   10954:	c3                   	ret    

00010955 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10955:	55                   	push   %ebp
   10956:	89 e5                	mov    %esp,%ebp
   10958:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   1095b:	83 ec 08             	sub    $0x8,%esp
   1095e:	68 78 18 01 00       	push   $0x11878
   10963:	ff 75 08             	pushl  0x8(%ebp)
   10966:	e8 b4 fd ff ff       	call   1071f <do_default_handler>
   1096b:	83 c4 10             	add    $0x10,%esp
}
   1096e:	90                   	nop
   1096f:	c9                   	leave  
   10970:	c3                   	ret    

00010971 <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   10971:	55                   	push   %ebp
   10972:	89 e5                	mov    %esp,%ebp
   10974:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10977:	83 ec 08             	sub    $0x8,%esp
   1097a:	68 97 18 01 00       	push   $0x11897
   1097f:	ff 75 08             	pushl  0x8(%ebp)
   10982:	e8 98 fd ff ff       	call   1071f <do_default_handler>
   10987:	83 c4 10             	add    $0x10,%esp
}
   1098a:	90                   	nop
   1098b:	c9                   	leave  
   1098c:	c3                   	ret    

0001098d <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   1098d:	55                   	push   %ebp
   1098e:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10990:	6a 11                	push   $0x11
   10992:	6a 20                	push   $0x20
   10994:	e8 51 fc ff ff       	call   105ea <outb>
   10999:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   1099c:	6a 20                	push   $0x20
   1099e:	6a 21                	push   $0x21
   109a0:	e8 45 fc ff ff       	call   105ea <outb>
   109a5:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   109a8:	6a 04                	push   $0x4
   109aa:	6a 21                	push   $0x21
   109ac:	e8 39 fc ff ff       	call   105ea <outb>
   109b1:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   109b4:	6a 01                	push   $0x1
   109b6:	6a 21                	push   $0x21
   109b8:	e8 2d fc ff ff       	call   105ea <outb>
   109bd:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   109c0:	6a 11                	push   $0x11
   109c2:	68 a0 00 00 00       	push   $0xa0
   109c7:	e8 1e fc ff ff       	call   105ea <outb>
   109cc:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   109cf:	6a 28                	push   $0x28
   109d1:	68 a1 00 00 00       	push   $0xa1
   109d6:	e8 0f fc ff ff       	call   105ea <outb>
   109db:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   109de:	6a 02                	push   $0x2
   109e0:	68 a1 00 00 00       	push   $0xa1
   109e5:	e8 00 fc ff ff       	call   105ea <outb>
   109ea:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   109ed:	6a 01                	push   $0x1
   109ef:	68 a1 00 00 00       	push   $0xa1
   109f4:	e8 f1 fb ff ff       	call   105ea <outb>
   109f9:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   109fc:	68 fb 00 00 00       	push   $0xfb
   10a01:	6a 21                	push   $0x21
   10a03:	e8 e2 fb ff ff       	call   105ea <outb>
   10a08:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10a0b:	68 ff 00 00 00       	push   $0xff
   10a10:	68 a1 00 00 00       	push   $0xa1
   10a15:	e8 d0 fb ff ff       	call   105ea <outb>
   10a1a:	83 c4 08             	add    $0x8,%esp
}
   10a1d:	90                   	nop
   10a1e:	c9                   	leave  
   10a1f:	c3                   	ret    

00010a20 <irq_init>:


void irq_init(void){ 
   10a20:	55                   	push   %ebp
   10a21:	89 e5                	mov    %esp,%ebp
   10a23:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10a26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10a2d:	eb 25                	jmp    10a54 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10a2f:	ba 28 00 01 00       	mov    $0x10028,%edx
   10a34:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a37:	c1 e0 03             	shl    $0x3,%eax
   10a3a:	05 60 21 01 00       	add    $0x12160,%eax
   10a3f:	68 00 8e 00 00       	push   $0x8e00
   10a44:	52                   	push   %edx
   10a45:	6a 08                	push   $0x8
   10a47:	50                   	push   %eax
   10a48:	e8 d5 fa ff ff       	call   10522 <gate_desc_set>
   10a4d:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10a50:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a54:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10a58:	7e d5                	jle    10a2f <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10a5a:	83 ec 08             	sub    $0x8,%esp
   10a5d:	68 47 00 01 00       	push   $0x10047
   10a62:	6a 00                	push   $0x0
   10a64:	e8 65 01 00 00       	call   10bce <irq_install>
   10a69:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10a6c:	83 ec 08             	sub    $0x8,%esp
   10a6f:	68 66 00 01 00       	push   $0x10066
   10a74:	6a 01                	push   $0x1
   10a76:	e8 53 01 00 00       	call   10bce <irq_install>
   10a7b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10a7e:	83 ec 08             	sub    $0x8,%esp
   10a81:	68 85 00 01 00       	push   $0x10085
   10a86:	6a 02                	push   $0x2
   10a88:	e8 41 01 00 00       	call   10bce <irq_install>
   10a8d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10a90:	83 ec 08             	sub    $0x8,%esp
   10a93:	68 a4 00 01 00       	push   $0x100a4
   10a98:	6a 03                	push   $0x3
   10a9a:	e8 2f 01 00 00       	call   10bce <irq_install>
   10a9f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10aa2:	83 ec 08             	sub    $0x8,%esp
   10aa5:	68 c3 00 01 00       	push   $0x100c3
   10aaa:	6a 04                	push   $0x4
   10aac:	e8 1d 01 00 00       	call   10bce <irq_install>
   10ab1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10ab4:	83 ec 08             	sub    $0x8,%esp
   10ab7:	68 e2 00 01 00       	push   $0x100e2
   10abc:	6a 05                	push   $0x5
   10abe:	e8 0b 01 00 00       	call   10bce <irq_install>
   10ac3:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10ac6:	83 ec 08             	sub    $0x8,%esp
   10ac9:	68 01 01 01 00       	push   $0x10101
   10ace:	6a 06                	push   $0x6
   10ad0:	e8 f9 00 00 00       	call   10bce <irq_install>
   10ad5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10ad8:	83 ec 08             	sub    $0x8,%esp
   10adb:	68 20 01 01 00       	push   $0x10120
   10ae0:	6a 07                	push   $0x7
   10ae2:	e8 e7 00 00 00       	call   10bce <irq_install>
   10ae7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10aea:	83 ec 08             	sub    $0x8,%esp
   10aed:	68 3f 01 01 00       	push   $0x1013f
   10af2:	6a 08                	push   $0x8
   10af4:	e8 d5 00 00 00       	call   10bce <irq_install>
   10af9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10afc:	83 ec 08             	sub    $0x8,%esp
   10aff:	68 5c 01 01 00       	push   $0x1015c
   10b04:	6a 0a                	push   $0xa
   10b06:	e8 c3 00 00 00       	call   10bce <irq_install>
   10b0b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10b0e:	83 ec 08             	sub    $0x8,%esp
   10b11:	68 79 01 01 00       	push   $0x10179
   10b16:	6a 0b                	push   $0xb
   10b18:	e8 b1 00 00 00       	call   10bce <irq_install>
   10b1d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10b20:	83 ec 08             	sub    $0x8,%esp
   10b23:	68 96 01 01 00       	push   $0x10196
   10b28:	6a 0c                	push   $0xc
   10b2a:	e8 9f 00 00 00       	call   10bce <irq_install>
   10b2f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10b32:	83 ec 08             	sub    $0x8,%esp
   10b35:	68 b3 01 01 00       	push   $0x101b3
   10b3a:	6a 0d                	push   $0xd
   10b3c:	e8 8d 00 00 00       	call   10bce <irq_install>
   10b41:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10b44:	83 ec 08             	sub    $0x8,%esp
   10b47:	68 d0 01 01 00       	push   $0x101d0
   10b4c:	6a 0e                	push   $0xe
   10b4e:	e8 7b 00 00 00       	call   10bce <irq_install>
   10b53:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10b56:	83 ec 08             	sub    $0x8,%esp
   10b59:	68 ed 01 01 00       	push   $0x101ed
   10b5e:	6a 10                	push   $0x10
   10b60:	e8 69 00 00 00       	call   10bce <irq_install>
   10b65:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10b68:	83 ec 08             	sub    $0x8,%esp
   10b6b:	68 0c 02 01 00       	push   $0x1020c
   10b70:	6a 11                	push   $0x11
   10b72:	e8 57 00 00 00       	call   10bce <irq_install>
   10b77:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10b7a:	83 ec 08             	sub    $0x8,%esp
   10b7d:	68 29 02 01 00       	push   $0x10229
   10b82:	6a 12                	push   $0x12
   10b84:	e8 45 00 00 00       	call   10bce <irq_install>
   10b89:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10b8c:	83 ec 08             	sub    $0x8,%esp
   10b8f:	68 48 02 01 00       	push   $0x10248
   10b94:	6a 13                	push   $0x13
   10b96:	e8 33 00 00 00       	call   10bce <irq_install>
   10b9b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10b9e:	83 ec 08             	sub    $0x8,%esp
   10ba1:	68 67 02 01 00       	push   $0x10267
   10ba6:	6a 14                	push   $0x14
   10ba8:	e8 21 00 00 00       	call   10bce <irq_install>
   10bad:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10bb0:	b8 60 21 01 00       	mov    $0x12160,%eax
   10bb5:	83 ec 08             	sub    $0x8,%esp
   10bb8:	68 00 04 00 00       	push   $0x400
   10bbd:	50                   	push   %eax
   10bbe:	e8 54 fa ff ff       	call   10617 <lidt>
   10bc3:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10bc6:	e8 c2 fd ff ff       	call   1098d <init_pic>
}
   10bcb:	90                   	nop
   10bcc:	c9                   	leave  
   10bcd:	c3                   	ret    

00010bce <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   10bce:	55                   	push   %ebp
   10bcf:	89 e5                	mov    %esp,%ebp
   10bd1:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10bd4:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10bd8:	7e 07                	jle    10be1 <irq_install+0x13>
        return -1;
   10bda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bdf:	eb 25                	jmp    10c06 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   10be1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10be4:	8b 55 08             	mov    0x8(%ebp),%edx
   10be7:	c1 e2 03             	shl    $0x3,%edx
   10bea:	81 c2 60 21 01 00    	add    $0x12160,%edx
   10bf0:	68 00 8e 00 00       	push   $0x8e00
   10bf5:	50                   	push   %eax
   10bf6:	6a 08                	push   $0x8
   10bf8:	52                   	push   %edx
   10bf9:	e8 24 f9 ff ff       	call   10522 <gate_desc_set>
   10bfe:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   10c01:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c06:	c9                   	leave  
   10c07:	c3                   	ret    

00010c08 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   10c08:	55                   	push   %ebp
   10c09:	89 e5                	mov    %esp,%ebp
   10c0b:	53                   	push   %ebx
   10c0c:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10c0f:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c13:	7e 78                	jle    10c8d <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10c15:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10c19:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c1d:	7f 32                	jg     10c51 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c1f:	6a 21                	push   $0x21
   10c21:	e8 a7 f9 ff ff       	call   105cd <inb>
   10c26:	83 c4 04             	add    $0x4,%esp
   10c29:	89 c2                	mov    %eax,%edx
   10c2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2e:	bb 01 00 00 00       	mov    $0x1,%ebx
   10c33:	89 c1                	mov    %eax,%ecx
   10c35:	d3 e3                	shl    %cl,%ebx
   10c37:	89 d8                	mov    %ebx,%eax
   10c39:	f7 d0                	not    %eax
   10c3b:	21 d0                	and    %edx,%eax
   10c3d:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10c40:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c44:	50                   	push   %eax
   10c45:	6a 21                	push   $0x21
   10c47:	e8 9e f9 ff ff       	call   105ea <outb>
   10c4c:	83 c4 08             	add    $0x8,%esp
   10c4f:	eb 3d                	jmp    10c8e <irq_enable+0x86>
    }else{
        irq_num -= 8;
   10c51:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10c55:	68 a1 00 00 00       	push   $0xa1
   10c5a:	e8 6e f9 ff ff       	call   105cd <inb>
   10c5f:	83 c4 04             	add    $0x4,%esp
   10c62:	89 c2                	mov    %eax,%edx
   10c64:	8b 45 08             	mov    0x8(%ebp),%eax
   10c67:	bb 01 00 00 00       	mov    $0x1,%ebx
   10c6c:	89 c1                	mov    %eax,%ecx
   10c6e:	d3 e3                	shl    %cl,%ebx
   10c70:	89 d8                	mov    %ebx,%eax
   10c72:	f7 d0                	not    %eax
   10c74:	21 d0                	and    %edx,%eax
   10c76:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10c79:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c7d:	50                   	push   %eax
   10c7e:	68 a1 00 00 00       	push   $0xa1
   10c83:	e8 62 f9 ff ff       	call   105ea <outb>
   10c88:	83 c4 08             	add    $0x8,%esp
   10c8b:	eb 01                	jmp    10c8e <irq_enable+0x86>
        return;
   10c8d:	90                   	nop
    }
}
   10c8e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c91:	c9                   	leave  
   10c92:	c3                   	ret    

00010c93 <irq_disable>:
void irq_disable (int irq_num) {
   10c93:	55                   	push   %ebp
   10c94:	89 e5                	mov    %esp,%ebp
   10c96:	53                   	push   %ebx
   10c97:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10c9a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c9e:	7e 74                	jle    10d14 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10ca0:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10ca4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ca8:	7f 30                	jg     10cda <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10caa:	6a 21                	push   $0x21
   10cac:	e8 1c f9 ff ff       	call   105cd <inb>
   10cb1:	83 c4 04             	add    $0x4,%esp
   10cb4:	89 c3                	mov    %eax,%ebx
   10cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb9:	ba 01 00 00 00       	mov    $0x1,%edx
   10cbe:	89 c1                	mov    %eax,%ecx
   10cc0:	d3 e2                	shl    %cl,%edx
   10cc2:	89 d0                	mov    %edx,%eax
   10cc4:	09 d8                	or     %ebx,%eax
   10cc6:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10cc9:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ccd:	50                   	push   %eax
   10cce:	6a 21                	push   $0x21
   10cd0:	e8 15 f9 ff ff       	call   105ea <outb>
   10cd5:	83 c4 08             	add    $0x8,%esp
   10cd8:	eb 3b                	jmp    10d15 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10cda:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10cde:	68 a1 00 00 00       	push   $0xa1
   10ce3:	e8 e5 f8 ff ff       	call   105cd <inb>
   10ce8:	83 c4 04             	add    $0x4,%esp
   10ceb:	89 c3                	mov    %eax,%ebx
   10ced:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf0:	ba 01 00 00 00       	mov    $0x1,%edx
   10cf5:	89 c1                	mov    %eax,%ecx
   10cf7:	d3 e2                	shl    %cl,%edx
   10cf9:	89 d0                	mov    %edx,%eax
   10cfb:	09 d8                	or     %ebx,%eax
   10cfd:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10d00:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d04:	50                   	push   %eax
   10d05:	68 a1 00 00 00       	push   $0xa1
   10d0a:	e8 db f8 ff ff       	call   105ea <outb>
   10d0f:	83 c4 08             	add    $0x8,%esp
   10d12:	eb 01                	jmp    10d15 <irq_disable+0x82>
        return;
   10d14:	90                   	nop
    }
}
   10d15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d18:	c9                   	leave  
   10d19:	c3                   	ret    

00010d1a <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   10d1a:	55                   	push   %ebp
   10d1b:	89 e5                	mov    %esp,%ebp
    cli();
   10d1d:	e8 e7 f8 ff ff       	call   10609 <cli>
}
   10d22:	90                   	nop
   10d23:	5d                   	pop    %ebp
   10d24:	c3                   	ret    

00010d25 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   10d25:	55                   	push   %ebp
   10d26:	89 e5                	mov    %esp,%ebp
    sti();
   10d28:	e8 e3 f8 ff ff       	call   10610 <sti>
}
   10d2d:	90                   	nop
   10d2e:	5d                   	pop    %ebp
   10d2f:	c3                   	ret    

00010d30 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10d30:	55                   	push   %ebp
   10d31:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   10d33:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   10d37:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d3b:	7e 0f                	jle    10d4c <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   10d3d:	6a 20                	push   $0x20
   10d3f:	68 a0 00 00 00       	push   $0xa0
   10d44:	e8 a1 f8 ff ff       	call   105ea <outb>
   10d49:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10d4c:	6a 20                	push   $0x20
   10d4e:	6a 20                	push   $0x20
   10d50:	e8 95 f8 ff ff       	call   105ea <outb>
   10d55:	83 c4 08             	add    $0x8,%esp

}
   10d58:	90                   	nop
   10d59:	c9                   	leave  
   10d5a:	c3                   	ret    

00010d5b <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10d5b:	55                   	push   %ebp
   10d5c:	89 e5                	mov    %esp,%ebp
   10d5e:	83 ec 08             	sub    $0x8,%esp
   10d61:	8b 55 08             	mov    0x8(%ebp),%edx
   10d64:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d67:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10d6b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10d6e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10d72:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10d76:	ee                   	out    %al,(%dx)
}
   10d77:	90                   	nop
   10d78:	c9                   	leave  
   10d79:	c3                   	ret    

00010d7a <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   10d7a:	55                   	push   %ebp
   10d7b:	89 e5                	mov    %esp,%ebp
   10d7d:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10d80:	a1 60 25 01 00       	mov    0x12560,%eax
   10d85:	83 c0 01             	add    $0x1,%eax
   10d88:	a3 60 25 01 00       	mov    %eax,0x12560
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   10d8d:	83 ec 0c             	sub    $0xc,%esp
   10d90:	6a 20                	push   $0x20
   10d92:	e8 99 ff ff ff       	call   10d30 <pic_send_eoi>
   10d97:	83 c4 10             	add    $0x10,%esp
}
   10d9a:	90                   	nop
   10d9b:	c9                   	leave  
   10d9c:	c3                   	ret    

00010d9d <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10d9d:	55                   	push   %ebp
   10d9e:	89 e5                	mov    %esp,%ebp
   10da0:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10da3:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   10daa:	6a 36                	push   $0x36
   10dac:	6a 43                	push   $0x43
   10dae:	e8 a8 ff ff ff       	call   10d5b <outb>
   10db3:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   10db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10db9:	0f b6 c0             	movzbl %al,%eax
   10dbc:	50                   	push   %eax
   10dbd:	6a 40                	push   $0x40
   10dbf:	e8 97 ff ff ff       	call   10d5b <outb>
   10dc4:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   10dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dca:	c1 e8 08             	shr    $0x8,%eax
   10dcd:	0f b6 c0             	movzbl %al,%eax
   10dd0:	50                   	push   %eax
   10dd1:	6a 40                	push   $0x40
   10dd3:	e8 83 ff ff ff       	call   10d5b <outb>
   10dd8:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10ddb:	83 ec 08             	sub    $0x8,%esp
   10dde:	68 86 02 01 00       	push   $0x10286
   10de3:	6a 20                	push   $0x20
   10de5:	e8 e4 fd ff ff       	call   10bce <irq_install>
   10dea:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10ded:	83 ec 0c             	sub    $0xc,%esp
   10df0:	6a 20                	push   $0x20
   10df2:	e8 11 fe ff ff       	call   10c08 <irq_enable>
   10df7:	83 c4 10             	add    $0x10,%esp
}
   10dfa:	90                   	nop
   10dfb:	c9                   	leave  
   10dfc:	c3                   	ret    

00010dfd <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   10dfd:	55                   	push   %ebp
   10dfe:	89 e5                	mov    %esp,%ebp
   10e00:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e03:	c7 05 60 25 01 00 00 	movl   $0x0,0x12560
   10e0a:	00 00 00 

    init_pit();
   10e0d:	e8 8b ff ff ff       	call   10d9d <init_pit>
   10e12:	90                   	nop
   10e13:	c9                   	leave  
   10e14:	c3                   	ret    

00010e15 <write_tr>:

static inline void write_tr(uint16_t tss_sel) {
   10e15:	55                   	push   %ebp
   10e16:	89 e5                	mov    %esp,%ebp
   10e18:	83 ec 04             	sub    $0x4,%esp
   10e1b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   10e22:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10e26:	0f 00 d8             	ltr    %ax
}
   10e29:	90                   	nop
   10e2a:	c9                   	leave  
   10e2b:	c3                   	ret    

00010e2c <kernel_init>:
#include "core/task.h" 

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   10e2c:	55                   	push   %ebp
   10e2d:	89 e5                	mov    %esp,%ebp
   10e2f:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10e32:	e8 32 f7 ff ff       	call   10569 <cpu_init>

    log_init();
   10e37:	e8 9c 06 00 00       	call   114d8 <log_init>
    irq_init();
   10e3c:	e8 df fb ff ff       	call   10a20 <irq_init>
    time_init();
   10e41:	e8 b7 ff ff ff       	call   10dfd <time_init>
}
   10e46:	90                   	nop
   10e47:	c9                   	leave  
   10e48:	c3                   	ret    

00010e49 <init_task_entry>:

static task_t first_task;
static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   10e49:	55                   	push   %ebp
   10e4a:	89 e5                	mov    %esp,%ebp
   10e4c:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   10e4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int task: %d",count++);
   10e56:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e59:	8d 50 01             	lea    0x1(%eax),%edx
   10e5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10e5f:	83 ec 08             	sub    $0x8,%esp
   10e62:	50                   	push   %eax
   10e63:	68 b1 18 01 00       	push   $0x118b1
   10e68:	e8 e0 06 00 00       	call   1154d <log_printf>
   10e6d:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task,&first_task);
   10e70:	83 ec 08             	sub    $0x8,%esp
   10e73:	68 80 25 01 00       	push   $0x12580
   10e78:	68 00 36 01 00       	push   $0x13600
   10e7d:	e8 13 f5 ff ff       	call   10395 <task_switch_from_to>
   10e82:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d",count++);
   10e85:	eb cf                	jmp    10e56 <init_task_entry+0xd>

00010e87 <init_main>:
    }    

}

void init_main(void) {
   10e87:	55                   	push   %ebp
   10e88:	89 e5                	mov    %esp,%ebp
   10e8a:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   10e8d:	83 ec 0c             	sub    $0xc,%esp
   10e90:	68 be 18 01 00       	push   $0x118be
   10e95:	e8 b3 06 00 00       	call   1154d <log_printf>
   10e9a:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   10e9d:	83 ec 04             	sub    $0x4,%esp
   10ea0:	68 d4 18 01 00       	push   $0x118d4
   10ea5:	68 dd 18 01 00       	push   $0x118dd
   10eaa:	68 e3 18 01 00       	push   $0x118e3
   10eaf:	e8 99 06 00 00       	call   1154d <log_printf>
   10eb4:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   10eb7:	83 ec 0c             	sub    $0xc,%esp
   10eba:	6a 61                	push   $0x61
   10ebc:	68 45 23 01 00       	push   $0x12345
   10ec1:	6a 85                	push   $0xffffff85
   10ec3:	68 40 e2 01 00       	push   $0x1e240
   10ec8:	68 f2 18 01 00       	push   $0x118f2
   10ecd:	e8 7b 06 00 00       	call   1154d <log_printf>
   10ed2:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, (uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   10ed5:	ba 00 36 01 00       	mov    $0x13600,%edx
   10eda:	b8 49 0e 01 00       	mov    $0x10e49,%eax
   10edf:	83 ec 04             	sub    $0x4,%esp
   10ee2:	52                   	push   %edx
   10ee3:	50                   	push   %eax
   10ee4:	68 00 36 01 00       	push   $0x13600
   10ee9:	e8 c2 f4 ff ff       	call   103b0 <task_init>
   10eee:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0,0);
   10ef1:	83 ec 04             	sub    $0x4,%esp
   10ef4:	6a 00                	push   $0x0
   10ef6:	6a 00                	push   $0x0
   10ef8:	68 80 25 01 00       	push   $0x12580
   10efd:	e8 ae f4 ff ff       	call   103b0 <task_init>
   10f02:	83 c4 10             	add    $0x10,%esp
    write_tr(first_task.tss_sel); // 初始化任务寄存器 task register
   10f05:	a1 e8 25 01 00       	mov    0x125e8,%eax
   10f0a:	0f b7 c0             	movzwl %ax,%eax
   10f0d:	83 ec 0c             	sub    $0xc,%esp
   10f10:	50                   	push   %eax
   10f11:	e8 ff fe ff ff       	call   10e15 <write_tr>
   10f16:	83 c4 10             	add    $0x10,%esp

    int count = 0;
   10f19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int main: %d",count++);
   10f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f23:	8d 50 01             	lea    0x1(%eax),%edx
   10f26:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f29:	83 ec 08             	sub    $0x8,%esp
   10f2c:	50                   	push   %eax
   10f2d:	68 fe 18 01 00       	push   $0x118fe
   10f32:	e8 16 06 00 00       	call   1154d <log_printf>
   10f37:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&first_task,&init_task);
   10f3a:	83 ec 08             	sub    $0x8,%esp
   10f3d:	68 00 36 01 00       	push   $0x13600
   10f42:	68 80 25 01 00       	push   $0x12580
   10f47:	e8 49 f4 ff ff       	call   10395 <task_switch_from_to>
   10f4c:	83 c4 10             	add    $0x10,%esp
        log_printf("int main: %d",count++);
   10f4f:	eb cf                	jmp    10f20 <init_main+0x99>

00010f51 <hlt>:
static inline void hlt (void) {
   10f51:	55                   	push   %ebp
   10f52:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10f54:	f4                   	hlt    
}
   10f55:	90                   	nop
   10f56:	5d                   	pop    %ebp
   10f57:	c3                   	ret    

00010f58 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   10f58:	55                   	push   %ebp
   10f59:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   10f5b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f5f:	74 3b                	je     10f9c <kernel_strcpy+0x44>
   10f61:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f65:	74 35                	je     10f9c <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   10f67:	eb 17                	jmp    10f80 <kernel_strcpy+0x28>
        *dest++ = *src++;
   10f69:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f6c:	8d 42 01             	lea    0x1(%edx),%eax
   10f6f:	89 45 0c             	mov    %eax,0xc(%ebp)
   10f72:	8b 45 08             	mov    0x8(%ebp),%eax
   10f75:	8d 48 01             	lea    0x1(%eax),%ecx
   10f78:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10f7b:	0f b6 12             	movzbl (%edx),%edx
   10f7e:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   10f80:	8b 45 08             	mov    0x8(%ebp),%eax
   10f83:	0f b6 00             	movzbl (%eax),%eax
   10f86:	84 c0                	test   %al,%al
   10f88:	74 0a                	je     10f94 <kernel_strcpy+0x3c>
   10f8a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f8d:	0f b6 00             	movzbl (%eax),%eax
   10f90:	84 c0                	test   %al,%al
   10f92:	75 d5                	jne    10f69 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   10f94:	8b 45 08             	mov    0x8(%ebp),%eax
   10f97:	c6 00 00             	movb   $0x0,(%eax)
   10f9a:	eb 01                	jmp    10f9d <kernel_strcpy+0x45>
        return;
   10f9c:	90                   	nop
}
   10f9d:	5d                   	pop    %ebp
   10f9e:	c3                   	ret    

00010f9f <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   10f9f:	55                   	push   %ebp
   10fa0:	89 e5                	mov    %esp,%ebp
   10fa2:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   10fa5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fa9:	74 61                	je     1100c <kernel_strncpy+0x6d>
   10fab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10faf:	74 5b                	je     1100c <kernel_strncpy+0x6d>
   10fb1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fb5:	74 55                	je     1100c <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   10fb7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   10fbd:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fc0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   10fc3:	eb 17                	jmp    10fdc <kernel_strncpy+0x3d>
        *d++ = *s++;
   10fc5:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10fc8:	8d 42 01             	lea    0x1(%edx),%eax
   10fcb:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10fce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fd1:	8d 48 01             	lea    0x1(%eax),%ecx
   10fd4:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10fd7:	0f b6 12             	movzbl (%edx),%edx
   10fda:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   10fdc:	8b 45 10             	mov    0x10(%ebp),%eax
   10fdf:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fe2:	89 55 10             	mov    %edx,0x10(%ebp)
   10fe5:	85 c0                	test   %eax,%eax
   10fe7:	7e 0a                	jle    10ff3 <kernel_strncpy+0x54>
   10fe9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fec:	0f b6 00             	movzbl (%eax),%eax
   10fef:	84 c0                	test   %al,%al
   10ff1:	75 d2                	jne    10fc5 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   10ff3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ff7:	75 0b                	jne    11004 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   10ff9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ffc:	83 e8 01             	sub    $0x1,%eax
   10fff:	c6 00 00             	movb   $0x0,(%eax)
   11002:	eb 09                	jmp    1100d <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   11004:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11007:	c6 00 00             	movb   $0x0,(%eax)
   1100a:	eb 01                	jmp    1100d <kernel_strncpy+0x6e>
        return;
   1100c:	90                   	nop
    }
}
   1100d:	c9                   	leave  
   1100e:	c3                   	ret    

0001100f <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   1100f:	55                   	push   %ebp
   11010:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   11012:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11016:	74 06                	je     1101e <kernel_strncmp+0xf>
   11018:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1101c:	75 0f                	jne    1102d <kernel_strncmp+0x1e>
        return -1;
   1101e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11023:	eb 62                	jmp    11087 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   11025:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11029:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   1102d:	8b 45 08             	mov    0x8(%ebp),%eax
   11030:	0f b6 00             	movzbl (%eax),%eax
   11033:	84 c0                	test   %al,%al
   11035:	74 20                	je     11057 <kernel_strncmp+0x48>
   11037:	8b 45 0c             	mov    0xc(%ebp),%eax
   1103a:	0f b6 00             	movzbl (%eax),%eax
   1103d:	84 c0                	test   %al,%al
   1103f:	74 16                	je     11057 <kernel_strncmp+0x48>
   11041:	8b 45 08             	mov    0x8(%ebp),%eax
   11044:	0f b6 10             	movzbl (%eax),%edx
   11047:	8b 45 0c             	mov    0xc(%ebp),%eax
   1104a:	0f b6 00             	movzbl (%eax),%eax
   1104d:	38 c2                	cmp    %al,%dl
   1104f:	75 06                	jne    11057 <kernel_strncmp+0x48>
   11051:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11055:	75 ce                	jne    11025 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11057:	8b 45 08             	mov    0x8(%ebp),%eax
   1105a:	0f b6 00             	movzbl (%eax),%eax
   1105d:	84 c0                	test   %al,%al
   1105f:	74 21                	je     11082 <kernel_strncmp+0x73>
   11061:	8b 45 0c             	mov    0xc(%ebp),%eax
   11064:	0f b6 00             	movzbl (%eax),%eax
   11067:	84 c0                	test   %al,%al
   11069:	74 17                	je     11082 <kernel_strncmp+0x73>
   1106b:	8b 45 08             	mov    0x8(%ebp),%eax
   1106e:	0f b6 10             	movzbl (%eax),%edx
   11071:	8b 45 0c             	mov    0xc(%ebp),%eax
   11074:	0f b6 00             	movzbl (%eax),%eax
   11077:	38 c2                	cmp    %al,%dl
   11079:	74 07                	je     11082 <kernel_strncmp+0x73>
   1107b:	b8 01 00 00 00       	mov    $0x1,%eax
   11080:	eb 05                	jmp    11087 <kernel_strncmp+0x78>
   11082:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11087:	5d                   	pop    %ebp
   11088:	c3                   	ret    

00011089 <kernel_strlen>:
int kernel_strlen(const char * str){
   11089:	55                   	push   %ebp
   1108a:	89 e5                	mov    %esp,%ebp
   1108c:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   1108f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11093:	75 07                	jne    1109c <kernel_strlen+0x13>
        return 0;
   11095:	b8 00 00 00 00       	mov    $0x0,%eax
   1109a:	eb 26                	jmp    110c2 <kernel_strlen+0x39>
    }

    const char * c = str;
   1109c:	8b 45 08             	mov    0x8(%ebp),%eax
   1109f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   110a2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   110a9:	eb 04                	jmp    110af <kernel_strlen+0x26>
        len++;
   110ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   110af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110b2:	8d 50 01             	lea    0x1(%eax),%edx
   110b5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110b8:	0f b6 00             	movzbl (%eax),%eax
   110bb:	84 c0                	test   %al,%al
   110bd:	75 ec                	jne    110ab <kernel_strlen+0x22>
    }
    return len;
   110bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   110c2:	c9                   	leave  
   110c3:	c3                   	ret    

000110c4 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   110c4:	55                   	push   %ebp
   110c5:	89 e5                	mov    %esp,%ebp
   110c7:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   110ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110ce:	74 40                	je     11110 <kernel_memcpy+0x4c>
   110d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110d4:	74 3a                	je     11110 <kernel_memcpy+0x4c>
   110d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110da:	74 34                	je     11110 <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   110dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   110df:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   110e2:	8b 45 08             	mov    0x8(%ebp),%eax
   110e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   110e8:	eb 17                	jmp    11101 <kernel_memcpy+0x3d>
        *d++ = *s++;
   110ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
   110ed:	8d 42 01             	lea    0x1(%edx),%eax
   110f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
   110f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110f6:	8d 48 01             	lea    0x1(%eax),%ecx
   110f9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   110fc:	0f b6 12             	movzbl (%edx),%edx
   110ff:	88 10                	mov    %dl,(%eax)
    while(size--){
   11101:	8b 45 10             	mov    0x10(%ebp),%eax
   11104:	8d 50 ff             	lea    -0x1(%eax),%edx
   11107:	89 55 10             	mov    %edx,0x10(%ebp)
   1110a:	85 c0                	test   %eax,%eax
   1110c:	75 dc                	jne    110ea <kernel_memcpy+0x26>
   1110e:	eb 01                	jmp    11111 <kernel_memcpy+0x4d>
        return;
   11110:	90                   	nop
    }

}
   11111:	c9                   	leave  
   11112:	c3                   	ret    

00011113 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   11113:	55                   	push   %ebp
   11114:	89 e5                	mov    %esp,%ebp
   11116:	83 ec 14             	sub    $0x14,%esp
   11119:	8b 45 0c             	mov    0xc(%ebp),%eax
   1111c:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   1111f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11123:	74 2c                	je     11151 <kernel_memset+0x3e>
   11125:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11129:	74 26                	je     11151 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   1112b:	8b 45 08             	mov    0x8(%ebp),%eax
   1112e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   11131:	eb 0f                	jmp    11142 <kernel_memset+0x2f>
       *d++ = v; 
   11133:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11136:	8d 50 01             	lea    0x1(%eax),%edx
   11139:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1113c:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11140:	88 10                	mov    %dl,(%eax)
    while(size--){
   11142:	8b 45 10             	mov    0x10(%ebp),%eax
   11145:	8d 50 ff             	lea    -0x1(%eax),%edx
   11148:	89 55 10             	mov    %edx,0x10(%ebp)
   1114b:	85 c0                	test   %eax,%eax
   1114d:	75 e4                	jne    11133 <kernel_memset+0x20>
   1114f:	eb 01                	jmp    11152 <kernel_memset+0x3f>
        return;
   11151:	90                   	nop
    }
}
   11152:	c9                   	leave  
   11153:	c3                   	ret    

00011154 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   11154:	55                   	push   %ebp
   11155:	89 e5                	mov    %esp,%ebp
   11157:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   1115a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1115e:	74 0c                	je     1116c <kernel_memcmp+0x18>
   11160:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11164:	74 06                	je     1116c <kernel_memcmp+0x18>
   11166:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1116a:	75 07                	jne    11173 <kernel_memcmp+0x1f>
        return -1;
   1116c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11171:	eb 43                	jmp    111b6 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11173:	8b 45 08             	mov    0x8(%ebp),%eax
   11176:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   11179:	8b 45 0c             	mov    0xc(%ebp),%eax
   1117c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   1117f:	eb 23                	jmp    111a4 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   11181:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11184:	8d 50 01             	lea    0x1(%eax),%edx
   11187:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1118a:	0f b6 08             	movzbl (%eax),%ecx
   1118d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11190:	8d 50 01             	lea    0x1(%eax),%edx
   11193:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11196:	0f b6 00             	movzbl (%eax),%eax
   11199:	38 c1                	cmp    %al,%cl
   1119b:	74 07                	je     111a4 <kernel_memcmp+0x50>
            return -1;
   1119d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   111a2:	eb 12                	jmp    111b6 <kernel_memcmp+0x62>
    while(size--){
   111a4:	8b 45 10             	mov    0x10(%ebp),%eax
   111a7:	8d 50 ff             	lea    -0x1(%eax),%edx
   111aa:	89 55 10             	mov    %edx,0x10(%ebp)
   111ad:	85 c0                	test   %eax,%eax
   111af:	75 d0                	jne    11181 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   111b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111b6:	c9                   	leave  
   111b7:	c3                   	ret    

000111b8 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   111b8:	55                   	push   %ebp
   111b9:	89 e5                	mov    %esp,%ebp
   111bb:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   111be:	8d 45 10             	lea    0x10(%ebp),%eax
   111c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   111c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111c7:	83 ec 04             	sub    $0x4,%esp
   111ca:	50                   	push   %eax
   111cb:	ff 75 0c             	pushl  0xc(%ebp)
   111ce:	ff 75 08             	pushl  0x8(%ebp)
   111d1:	e8 45 01 00 00       	call   1131b <kernel_vsprintf>
   111d6:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   111d9:	90                   	nop
   111da:	c9                   	leave  
   111db:	c3                   	ret    

000111dc <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   111dc:	55                   	push   %ebp
   111dd:	89 e5                	mov    %esp,%ebp
   111df:	53                   	push   %ebx
   111e0:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   111e3:	8b 45 08             	mov    0x8(%ebp),%eax
   111e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   111e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   111ec:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   111ef:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   111f3:	74 1d                	je     11212 <kernel_itoa+0x36>
   111f5:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   111f9:	74 17                	je     11212 <kernel_itoa+0x36>
   111fb:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   111ff:	74 11                	je     11212 <kernel_itoa+0x36>
   11201:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11205:	74 0b                	je     11212 <kernel_itoa+0x36>
        *p = '\0';
   11207:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1120a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1120d:	e9 03 01 00 00       	jmp    11315 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11212:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11219:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1121d:	79 19                	jns    11238 <kernel_itoa+0x5c>
   1121f:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11223:	75 13                	jne    11238 <kernel_itoa+0x5c>
        *p++ = '-';
   11225:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11228:	8d 50 01             	lea    0x1(%eax),%edx
   1122b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1122e:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11231:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1123c:	74 3b                	je     11279 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   1123e:	8b 0d 5c 19 01 00    	mov    0x1195c,%ecx
   11244:	8b 45 0c             	mov    0xc(%ebp),%eax
   11247:	99                   	cltd   
   11248:	f7 7d 10             	idivl  0x10(%ebp)
   1124b:	89 d0                	mov    %edx,%eax
   1124d:	83 c0 0f             	add    $0xf,%eax
   11250:	01 c8                	add    %ecx,%eax
   11252:	0f b6 00             	movzbl (%eax),%eax
   11255:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   11258:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1125b:	8d 50 01             	lea    0x1(%eax),%edx
   1125e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11261:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11265:	88 10                	mov    %dl,(%eax)
            num /= base;
   11267:	8b 45 0c             	mov    0xc(%ebp),%eax
   1126a:	99                   	cltd   
   1126b:	f7 7d 10             	idivl  0x10(%ebp)
   1126e:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11271:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11275:	75 c7                	jne    1123e <kernel_itoa+0x62>
   11277:	eb 4b                	jmp    112c4 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   11279:	8b 45 0c             	mov    0xc(%ebp),%eax
   1127c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   1127f:	8b 0d 5c 19 01 00    	mov    0x1195c,%ecx
   11285:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11288:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1128b:	ba 00 00 00 00       	mov    $0x0,%edx
   11290:	f7 f3                	div    %ebx
   11292:	89 d0                	mov    %edx,%eax
   11294:	83 c0 0f             	add    $0xf,%eax
   11297:	01 c8                	add    %ecx,%eax
   11299:	0f b6 00             	movzbl (%eax),%eax
   1129c:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   1129f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112a2:	8d 50 01             	lea    0x1(%eax),%edx
   112a5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112a8:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   112ac:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   112ae:	8b 5d 10             	mov    0x10(%ebp),%ebx
   112b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112b4:	ba 00 00 00 00       	mov    $0x0,%edx
   112b9:	f7 f3                	div    %ebx
   112bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   112be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   112c2:	75 bb                	jne    1127f <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   112c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112c7:	8d 50 ff             	lea    -0x1(%eax),%edx
   112ca:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112cd:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   112d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112d4:	74 08                	je     112de <kernel_itoa+0x102>
   112d6:	8b 45 08             	mov    0x8(%ebp),%eax
   112d9:	83 c0 01             	add    $0x1,%eax
   112dc:	eb 03                	jmp    112e1 <kernel_itoa+0x105>
   112de:	8b 45 08             	mov    0x8(%ebp),%eax
   112e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   112e4:	eb 27                	jmp    1130d <kernel_itoa+0x131>
        char ch = *start;
   112e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112e9:	0f b6 00             	movzbl (%eax),%eax
   112ec:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   112ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112f2:	0f b6 10             	movzbl (%eax),%edx
   112f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112f8:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   112fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112fd:	8d 50 ff             	lea    -0x1(%eax),%edx
   11300:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11303:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11307:	88 10                	mov    %dl,(%eax)
        start++;
   11309:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1130d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11310:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11313:	72 d1                	jb     112e6 <kernel_itoa+0x10a>
    }
}
   11315:	83 c4 20             	add    $0x20,%esp
   11318:	5b                   	pop    %ebx
   11319:	5d                   	pop    %ebp
   1131a:	c3                   	ret    

0001131b <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   1131b:	55                   	push   %ebp
   1131c:	89 e5                	mov    %esp,%ebp
   1131e:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   11321:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11328:	8b 45 08             	mov    0x8(%ebp),%eax
   1132b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   1132e:	e9 17 01 00 00       	jmp    1144a <kernel_vsprintf+0x12f>
        switch(state) {
   11333:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11336:	85 c0                	test   %eax,%eax
   11338:	74 0a                	je     11344 <kernel_vsprintf+0x29>
   1133a:	83 f8 01             	cmp    $0x1,%eax
   1133d:	74 2b                	je     1136a <kernel_vsprintf+0x4f>
   1133f:	e9 06 01 00 00       	jmp    1144a <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   11344:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11348:	75 0c                	jne    11356 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   1134a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11351:	e9 f4 00 00 00       	jmp    1144a <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   11356:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11359:	8d 50 01             	lea    0x1(%eax),%edx
   1135c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1135f:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11363:	88 10                	mov    %dl,(%eax)
                }
                break;
   11365:	e9 e0 00 00 00       	jmp    1144a <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   1136a:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1136e:	75 47                	jne    113b7 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   11370:	8b 45 10             	mov    0x10(%ebp),%eax
   11373:	8d 50 04             	lea    0x4(%eax),%edx
   11376:	89 55 10             	mov    %edx,0x10(%ebp)
   11379:	8b 00                	mov    (%eax),%eax
   1137b:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   1137e:	ff 75 f4             	pushl  -0xc(%ebp)
   11381:	e8 03 fd ff ff       	call   11089 <kernel_strlen>
   11386:	83 c4 04             	add    $0x4,%esp
   11389:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   1138c:	eb 17                	jmp    113a5 <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   1138e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11391:	8d 42 01             	lea    0x1(%edx),%eax
   11394:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11397:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1139a:	8d 48 01             	lea    0x1(%eax),%ecx
   1139d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113a0:	0f b6 12             	movzbl (%edx),%edx
   113a3:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   113a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   113a8:	8d 50 ff             	lea    -0x1(%eax),%edx
   113ab:	89 55 f0             	mov    %edx,-0x10(%ebp)
   113ae:	85 c0                	test   %eax,%eax
   113b0:	75 dc                	jne    1138e <kernel_vsprintf+0x73>
   113b2:	e9 8b 00 00 00       	jmp    11442 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   113b7:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   113bb:	75 2e                	jne    113eb <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   113bd:	8b 45 10             	mov    0x10(%ebp),%eax
   113c0:	8d 50 04             	lea    0x4(%eax),%edx
   113c3:	89 55 10             	mov    %edx,0x10(%ebp)
   113c6:	8b 00                	mov    (%eax),%eax
   113c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   113cb:	6a 0a                	push   $0xa
   113cd:	ff 75 e4             	pushl  -0x1c(%ebp)
   113d0:	ff 75 f8             	pushl  -0x8(%ebp)
   113d3:	e8 04 fe ff ff       	call   111dc <kernel_itoa>
   113d8:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   113db:	ff 75 f8             	pushl  -0x8(%ebp)
   113de:	e8 a6 fc ff ff       	call   11089 <kernel_strlen>
   113e3:	83 c4 04             	add    $0x4,%esp
   113e6:	01 45 f8             	add    %eax,-0x8(%ebp)
   113e9:	eb 57                	jmp    11442 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   113eb:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   113ef:	75 2e                	jne    1141f <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   113f1:	8b 45 10             	mov    0x10(%ebp),%eax
   113f4:	8d 50 04             	lea    0x4(%eax),%edx
   113f7:	89 55 10             	mov    %edx,0x10(%ebp)
   113fa:	8b 00                	mov    (%eax),%eax
   113fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   113ff:	6a 10                	push   $0x10
   11401:	ff 75 e8             	pushl  -0x18(%ebp)
   11404:	ff 75 f8             	pushl  -0x8(%ebp)
   11407:	e8 d0 fd ff ff       	call   111dc <kernel_itoa>
   1140c:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   1140f:	ff 75 f8             	pushl  -0x8(%ebp)
   11412:	e8 72 fc ff ff       	call   11089 <kernel_strlen>
   11417:	83 c4 04             	add    $0x4,%esp
   1141a:	01 45 f8             	add    %eax,-0x8(%ebp)
   1141d:	eb 23                	jmp    11442 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   1141f:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11423:	75 1d                	jne    11442 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   11425:	8b 45 10             	mov    0x10(%ebp),%eax
   11428:	8d 50 04             	lea    0x4(%eax),%edx
   1142b:	89 55 10             	mov    %edx,0x10(%ebp)
   1142e:	8b 00                	mov    (%eax),%eax
   11430:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11433:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11436:	8d 50 01             	lea    0x1(%eax),%edx
   11439:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1143c:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11440:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   11442:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   11449:	90                   	nop
    while ((ch = *fmt++)) {
   1144a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1144d:	8d 50 01             	lea    0x1(%eax),%edx
   11450:	89 55 0c             	mov    %edx,0xc(%ebp)
   11453:	0f b6 00             	movzbl (%eax),%eax
   11456:	88 45 ef             	mov    %al,-0x11(%ebp)
   11459:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1145d:	0f 85 d0 fe ff ff    	jne    11333 <kernel_vsprintf+0x18>
        }
    }
}
   11463:	90                   	nop
   11464:	c9                   	leave  
   11465:	c3                   	ret    

00011466 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   11466:	55                   	push   %ebp
   11467:	89 e5                	mov    %esp,%ebp
   11469:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   1146c:	83 ec 08             	sub    $0x8,%esp
   1146f:	ff 75 14             	pushl  0x14(%ebp)
   11472:	68 0c 19 01 00       	push   $0x1190c
   11477:	e8 d1 00 00 00       	call   1154d <log_printf>
   1147c:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   1147f:	ff 75 10             	pushl  0x10(%ebp)
   11482:	ff 75 0c             	pushl  0xc(%ebp)
   11485:	ff 75 08             	pushl  0x8(%ebp)
   11488:	68 1e 19 01 00       	push   $0x1191e
   1148d:	e8 bb 00 00 00       	call   1154d <log_printf>
   11492:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   11495:	e8 b7 fa ff ff       	call   10f51 <hlt>
   1149a:	eb f9                	jmp    11495 <panic+0x2f>

0001149c <inb>:
static inline uint8_t inb(uint16_t port) {
   1149c:	55                   	push   %ebp
   1149d:	89 e5                	mov    %esp,%ebp
   1149f:	83 ec 14             	sub    $0x14,%esp
   114a2:	8b 45 08             	mov    0x8(%ebp),%eax
   114a5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   114a9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   114ad:	89 c2                	mov    %eax,%edx
   114af:	ec                   	in     (%dx),%al
   114b0:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   114b3:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   114b7:	c9                   	leave  
   114b8:	c3                   	ret    

000114b9 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   114b9:	55                   	push   %ebp
   114ba:	89 e5                	mov    %esp,%ebp
   114bc:	83 ec 08             	sub    $0x8,%esp
   114bf:	8b 55 08             	mov    0x8(%ebp),%edx
   114c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   114c5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   114c9:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   114cc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114d0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   114d4:	ee                   	out    %al,(%dx)
}
   114d5:	90                   	nop
   114d6:	c9                   	leave  
   114d7:	c3                   	ret    

000114d8 <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值

#define COM1_PORT 0x3f8

void log_init(void) {
   114d8:	55                   	push   %ebp
   114d9:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   114db:	6a 00                	push   $0x0
   114dd:	68 f9 03 00 00       	push   $0x3f9
   114e2:	e8 d2 ff ff ff       	call   114b9 <outb>
   114e7:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   114ea:	68 80 00 00 00       	push   $0x80
   114ef:	68 fb 03 00 00       	push   $0x3fb
   114f4:	e8 c0 ff ff ff       	call   114b9 <outb>
   114f9:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   114fc:	6a 03                	push   $0x3
   114fe:	68 f8 03 00 00       	push   $0x3f8
   11503:	e8 b1 ff ff ff       	call   114b9 <outb>
   11508:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   1150b:	6a 00                	push   $0x0
   1150d:	68 f9 03 00 00       	push   $0x3f9
   11512:	e8 a2 ff ff ff       	call   114b9 <outb>
   11517:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   1151a:	6a 03                	push   $0x3
   1151c:	68 fb 03 00 00       	push   $0x3fb
   11521:	e8 93 ff ff ff       	call   114b9 <outb>
   11526:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11529:	68 c7 00 00 00       	push   $0xc7
   1152e:	68 fa 03 00 00       	push   $0x3fa
   11533:	e8 81 ff ff ff       	call   114b9 <outb>
   11538:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   1153b:	6a 0f                	push   $0xf
   1153d:	68 fc 03 00 00       	push   $0x3fc
   11542:	e8 72 ff ff ff       	call   114b9 <outb>
   11547:	83 c4 08             	add    $0x8,%esp

}
   1154a:	90                   	nop
   1154b:	c9                   	leave  
   1154c:	c3                   	ret    

0001154d <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   1154d:	55                   	push   %ebp
   1154e:	89 e5                	mov    %esp,%ebp
   11550:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   11556:	83 ec 04             	sub    $0x4,%esp
   11559:	68 80 00 00 00       	push   $0x80
   1155e:	6a 00                	push   $0x0
   11560:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11566:	50                   	push   %eax
   11567:	e8 a7 fb ff ff       	call   11113 <kernel_memset>
   1156c:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   1156f:	8d 45 0c             	lea    0xc(%ebp),%eax
   11572:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(str_buf,fmt,args);
   11578:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1157e:	83 ec 04             	sub    $0x4,%esp
   11581:	50                   	push   %eax
   11582:	ff 75 08             	pushl  0x8(%ebp)
   11585:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1158b:	50                   	push   %eax
   1158c:	e8 8a fd ff ff       	call   1131b <kernel_vsprintf>
   11591:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;
   11594:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1159a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   1159d:	eb 31                	jmp    115d0 <log_printf+0x83>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   1159f:	90                   	nop
   115a0:	83 ec 0c             	sub    $0xc,%esp
   115a3:	68 fd 03 00 00       	push   $0x3fd
   115a8:	e8 ef fe ff ff       	call   1149c <inb>
   115ad:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   115b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115b3:	8d 50 01             	lea    0x1(%eax),%edx
   115b6:	89 55 f4             	mov    %edx,-0xc(%ebp)
   115b9:	0f b6 00             	movzbl (%eax),%eax
   115bc:	0f b6 c0             	movzbl %al,%eax
   115bf:	83 ec 08             	sub    $0x8,%esp
   115c2:	50                   	push   %eax
   115c3:	68 f8 03 00 00       	push   $0x3f8
   115c8:	e8 ec fe ff ff       	call   114b9 <outb>
   115cd:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   115d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115d3:	0f b6 00             	movzbl (%eax),%eax
   115d6:	84 c0                	test   %al,%al
   115d8:	75 c5                	jne    1159f <log_printf+0x52>
    }

// 变列
    outb(COM1_PORT,'\r');
   115da:	83 ec 08             	sub    $0x8,%esp
   115dd:	6a 0d                	push   $0xd
   115df:	68 f8 03 00 00       	push   $0x3f8
   115e4:	e8 d0 fe ff ff       	call   114b9 <outb>
   115e9:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   115ec:	83 ec 08             	sub    $0x8,%esp
   115ef:	6a 0a                	push   $0xa
   115f1:	68 f8 03 00 00       	push   $0x3f8
   115f6:	e8 be fe ff ff       	call   114b9 <outb>
   115fb:	83 c4 10             	add    $0x10,%esp
   115fe:	90                   	nop
   115ff:	c9                   	leave  
   11600:	c3                   	ret    
