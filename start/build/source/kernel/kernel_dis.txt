
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001f50 memsz 0x00005c70 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b5a  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000003f0  00011b5c  00011b5c  00002b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011f4c  00011f4c  00002f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d10  00011f60  00011f60  00002f50  2**5
                  ALLOC
  4 .debug_line   00000bff  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dda  00000000  00000000  00003b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000946  00000000  00000000  00005929  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  00006270  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000094c  00000000  00000000  00006390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00006cdc  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000ac0  00000000  00000000  00006cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011b5c l    d  .rodata	00000000 .rodata
00011f4c l    d  .data	00000000 .data
00011f60 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	000000f0 tss_init
00011bb4 l     O .rodata	0000000a __func__.1859
00000000 l    df *ABS*	00000000 cpu.c
000103ec l     F .text	00000028 lgdt
00010414 l     F .text	0000001a far_jump
00011f60 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000105c9 l     F .text	0000001d inb
000105e6 l     F .text	0000001f outb
00010605 l     F .text	00000007 cli
0001060c l     F .text	00000007 sti
00010613 l     F .text	00000028 lidt
0001063b l     F .text	00000007 hlt
00010642 l     F .text	000000d9 dump_core_regs
0001071b l     F .text	0000003e do_default_handler
00012760 l     O .bss	00000400 idt_table
00010989 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010d57 l     F .text	0000001f outb
00012b60 l     O .bss	00000004 sys_tick
00010d99 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00010e11 l     F .text	00000017 write_tr
00010e28 l     F .text	0000000b list_count
00010e33 l     F .text	0000000a list_first
00010e3d l     F .text	0000000b list_last
00012b80 l     O .bss	0000006c first_task
00012c00 l     O .bss	00001000 init_task_stack
00013c00 l     O .bss	0000006c init_task
00000000 l    df *ABS*	00000000 klib.c
000112b0 l     F .text	00000007 hlt
00011f4c l     O .data	00000004 num2ch.1900
00000000 l    df *ABS*	00000000 list.c
000117fb l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000119f5 l     F .text	0000001d inb
00011a12 l     F .text	0000001f outb
00011423 g     F .text	0000004f kernel_memcpy
00010d21 g     F .text	0000000b irq_enable_global
00011893 g     F .text	00000064 list_insert_last
0001088d g     F .text	0000001c do_handler_segment_not_present
00011472 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
00010565 g     F .text	0000000b cpu_init
00011a31 g     F .text	00000075 log_init
000111e1 g     F .text	000000cf init_main
0001020c g       .text	00000000 exception_handler_alignment_check
000112b7 g     F .text	00000047 kernel_strcpy
00010c04 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
000107e5 g     F .text	0000001c do_handler_overflow
00010919 g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
000108c5 g     F .text	0000001c do_handler_general_protection
00010775 g     F .text	0000001c do_handler_divider
00010855 g     F .text	0000001c do_handler_double_fault
00010e65 g     F .text	0000003e init_task_entry
000108e1 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010d2c g     F .text	0000002b pic_send_eoi
00010d76 g     F .text	00000023 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
0001096d g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00013c70 g     O .bss	00002000 stack
00010ea3 g     F .text	0000033e list_test
000100e2 g       .text	00000000 exception_handler_bound_range
0001081d g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
000108fd g     F .text	0000001c do_handler_fpu_error
00010935 g     F .text	0000001c do_handler_machine_check
00010791 g     F .text	0000001c do_handler_Debug
00011833 g     F .text	00000060 list_insert_first
000107ad g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
000112fe g     F .text	00000070 kernel_strncpy
00010d16 g     F .text	0000000b irq_disable_global
00010e48 g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
0001167a g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
00010871 g     F .text	0000001c do_handler_invalid_tss
000117c5 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00010bca g     F .text	0000003a irq_install
000104b1 g     F .text	0000006d init_gdt
00010c8f g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00010839 g     F .text	0000001c do_handler_device_unavailable
000105b5 g     F .text	00000014 switch_to_tss
000114b3 g     F .text	00000064 kernel_memcmp
0001180e g     F .text	00000025 list_init
00010951 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00010759 g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
00010395 g     F .text	0000001b task_switch_from_to
00010a1c g     F .text	000001ae irq_init
000113e8 g     F .text	0000003b kernel_strlen
0001042e g     F .text	00000083 segment_desc_set
00010801 g     F .text	0000001c do_handler_bound_range
000118f7 g     F .text	00000079 list_remove_first
0001136e g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010066 g       .text	00000000 exception_handler_Debug
000108a9 g     F .text	0000001c do_handler_stack_segment_fault
000107c9 g     F .text	0000001c do_handler_breakpoint
00011aa6 g     F .text	000000b4 log_printf
000103b0 g     F .text	0000003c task_init
00011517 g     F .text	00000024 kernel_sprintf
00010570 g     F .text	00000045 gdt_alloc_desc
0001153b g     F .text	0000013f kernel_itoa
00011970 g     F .text	00000085 list_remove
0001051e g     F .text	00000047 gate_desc_set
00010df9 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 3f 0e 00 00       	call   10e48 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 70 5c 01 00       	mov    $0x15c70,%esp
    jmp init_main
   10023:	e9 b9 11 00 00       	jmp    111e1 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 20 07 00 00       	call   10759 <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 1d 07 00 00       	call   10775 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 1a 07 00 00       	call   10791 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 17 07 00 00       	call   107ad <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 14 07 00 00       	call   107c9 <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 11 07 00 00       	call   107e5 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 0e 07 00 00       	call   10801 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 0b 07 00 00       	call   1081d <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 08 07 00 00       	call   10839 <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 07 07 00 00       	call   10855 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 06 07 00 00       	call   10871 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 05 07 00 00       	call   1088d <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 04 07 00 00       	call   108a9 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 03 07 00 00       	call   108c5 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 02 07 00 00       	call   108e1 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 ff 06 00 00       	call   108fd <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 fe 06 00 00       	call   10919 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 fb 06 00 00       	call   10935 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 f8 06 00 00       	call   10951 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 f5 06 00 00       	call   1096d <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 df 0a 00 00       	call   10d76 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <tss_init>:
#include "cpu/cpu.h"
#include "os_cfg.h"
#include "tools/log.h"


static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
   102a8:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102ab:	e8 c0 02 00 00       	call   10570 <gdt_alloc_desc>
   102b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   102b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102b7:	79 1a                	jns    102d3 <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   102b9:	83 ec 0c             	sub    $0xc,%esp
   102bc:	68 5c 1b 01 00       	push   $0x11b5c
   102c1:	e8 e0 17 00 00       	call   11aa6 <log_printf>
   102c6:	83 c4 10             	add    $0x10,%esp
        return -1;
   102c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102ce:	e9 c0 00 00 00       	jmp    10393 <tss_init+0xee>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   102d3:	8b 45 08             	mov    0x8(%ebp),%eax
   102d6:	68 89 00 00 00       	push   $0x89
   102db:	6a 68                	push   $0x68
   102dd:	50                   	push   %eax
   102de:	ff 75 f4             	pushl  -0xc(%ebp)
   102e1:	e8 48 01 00 00       	call   1042e <segment_desc_set>
   102e6:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   102e9:	8b 45 08             	mov    0x8(%ebp),%eax
   102ec:	83 ec 04             	sub    $0x4,%esp
   102ef:	6a 68                	push   $0x68
   102f1:	6a 00                	push   $0x0
   102f3:	50                   	push   %eax
   102f4:	e8 79 11 00 00       	call   11472 <kernel_memset>
   102f9:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   102fc:	8b 45 08             	mov    0x8(%ebp),%eax
   102ff:	8b 55 0c             	mov    0xc(%ebp),%edx
   10302:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	8b 55 10             	mov    0x10(%ebp),%edx
   1030b:	89 50 04             	mov    %edx,0x4(%eax)
   1030e:	8b 45 08             	mov    0x8(%ebp),%eax
   10311:	8b 50 04             	mov    0x4(%eax),%edx
   10314:	8b 45 08             	mov    0x8(%ebp),%eax
   10317:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   1031a:	8b 45 08             	mov    0x8(%ebp),%eax
   1031d:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
    task->tss.eip = entry;
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	8b 55 0c             	mov    0xc(%ebp),%edx
   1032a:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   1032d:	8b 45 08             	mov    0x8(%ebp),%eax
   10330:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   10337:	8b 45 08             	mov    0x8(%ebp),%eax
   1033a:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
   10341:	8b 45 08             	mov    0x8(%ebp),%eax
   10344:	8b 50 5c             	mov    0x5c(%eax),%edx
   10347:	8b 45 08             	mov    0x8(%ebp),%eax
   1034a:	89 50 58             	mov    %edx,0x58(%eax)
   1034d:	8b 45 08             	mov    0x8(%ebp),%eax
   10350:	8b 50 58             	mov    0x58(%eax),%edx
   10353:	8b 45 08             	mov    0x8(%ebp),%eax
   10356:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	8b 50 54             	mov    0x54(%eax),%edx
   1035f:	8b 45 08             	mov    0x8(%ebp),%eax
   10362:	89 50 50             	mov    %edx,0x50(%eax)
   10365:	8b 45 08             	mov    0x8(%ebp),%eax
   10368:	8b 50 50             	mov    0x50(%eax),%edx
   1036b:	8b 45 08             	mov    0x8(%ebp),%eax
   1036e:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   10371:	8b 45 08             	mov    0x8(%ebp),%eax
   10374:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)
    task->tss.iomap = 0;
   1037b:	8b 45 08             	mov    0x8(%ebp),%eax
   1037e:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)

    task->tss_sel = tss_sel;
   10385:	8b 45 08             	mov    0x8(%ebp),%eax
   10388:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1038b:	89 50 68             	mov    %edx,0x68(%eax)
    return 0;
   1038e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10393:	c9                   	leave  
   10394:	c3                   	ret    

00010395 <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   10395:	55                   	push   %ebp
   10396:	89 e5                	mov    %esp,%ebp
   10398:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   1039b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1039e:	8b 40 68             	mov    0x68(%eax),%eax
   103a1:	83 ec 0c             	sub    $0xc,%esp
   103a4:	50                   	push   %eax
   103a5:	e8 0b 02 00 00       	call   105b5 <switch_to_tss>
   103aa:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   103ad:	90                   	nop
   103ae:	c9                   	leave  
   103af:	c3                   	ret    

000103b0 <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task, uint32_t entry, uint32_t esp){
   103b0:	55                   	push   %ebp
   103b1:	89 e5                	mov    %esp,%ebp
   103b3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   103b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103ba:	75 19                	jne    103d5 <task_init+0x25>
   103bc:	68 6f 1b 01 00       	push   $0x11b6f
   103c1:	68 b4 1b 01 00       	push   $0x11bb4
   103c6:	6a 35                	push   $0x35
   103c8:	68 84 1b 01 00       	push   $0x11b84
   103cd:	e8 f3 13 00 00       	call   117c5 <panic>
   103d2:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   103d5:	83 ec 04             	sub    $0x4,%esp
   103d8:	ff 75 10             	pushl  0x10(%ebp)
   103db:	ff 75 0c             	pushl  0xc(%ebp)
   103de:	ff 75 08             	pushl  0x8(%ebp)
   103e1:	e8 bf fe ff ff       	call   102a5 <tss_init>
   103e6:	83 c4 10             	add    $0x10,%esp
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     task->stack = pesp;
    // }
    // return 0;
}
   103e9:	90                   	nop
   103ea:	c9                   	leave  
   103eb:	c3                   	ret    

000103ec <lgdt>:
static inline void sti(void){
    __asm__ __volatile__("sti");    
}


static inline void lgdt(uint32_t start,uint32_t size){
   103ec:	55                   	push   %ebp
   103ed:	89 e5                	mov    %esp,%ebp
   103ef:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }gdt;
    
    gdt.start32_16 = start >> 16;
   103f2:	8b 45 08             	mov    0x8(%ebp),%eax
   103f5:	c1 e8 10             	shr    $0x10,%eax
   103f8:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   103fc:	8b 45 08             	mov    0x8(%ebp),%eax
   103ff:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10403:	8b 45 0c             	mov    0xc(%ebp),%eax
   10406:	83 e8 01             	sub    $0x1,%eax
   10409:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1040d:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10411:	90                   	nop
   10412:	c9                   	leave  
   10413:	c3                   	ret    

00010414 <far_jump>:

    __asm__ __volatile__("mov %[v],%%cr0"::[v]"r"(v));
}


static inline void far_jump(uint32_t selector,uint32_t offset){
   10414:	55                   	push   %ebp
   10415:	89 e5                	mov    %esp,%ebp
   10417:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   1041a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10420:	8b 45 08             	mov    0x8(%ebp),%eax
   10423:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10426:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10429:	ff 28                	ljmp   *(%eax)
}
   1042b:	90                   	nop
   1042c:	c9                   	leave  
   1042d:	c3                   	ret    

0001042e <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   1042e:	55                   	push   %ebp
   1042f:	89 e5                	mov    %esp,%ebp
   10431:	83 ec 14             	sub    $0x14,%esp
   10434:	8b 45 14             	mov    0x14(%ebp),%eax
   10437:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   1043b:	8b 45 08             	mov    0x8(%ebp),%eax
   1043e:	83 e0 f8             	and    $0xfffffff8,%eax
   10441:	05 60 1f 01 00       	add    $0x11f60,%eax
   10446:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   10449:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10450:	76 0f                	jbe    10461 <segment_desc_set+0x33>
		attr |= SEG_G;
   10452:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   10458:	8b 45 10             	mov    0x10(%ebp),%eax
   1045b:	c1 e8 0c             	shr    $0xc,%eax
   1045e:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   10461:	8b 45 10             	mov    0x10(%ebp),%eax
   10464:	89 c2                	mov    %eax,%edx
   10466:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10469:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   1046c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1046f:	89 c2                	mov    %eax,%edx
   10471:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10474:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10478:	8b 45 0c             	mov    0xc(%ebp),%eax
   1047b:	c1 e8 10             	shr    $0x10,%eax
   1047e:	89 c2                	mov    %eax,%edx
   10480:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10483:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   10486:	8b 45 10             	mov    0x10(%ebp),%eax
   10489:	c1 e8 10             	shr    $0x10,%eax
   1048c:	c1 e0 08             	shl    $0x8,%eax
   1048f:	66 25 00 0f          	and    $0xf00,%ax
   10493:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10497:	89 c2                	mov    %eax,%edx
   10499:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1049c:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   104a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   104a3:	c1 e8 18             	shr    $0x18,%eax
   104a6:	89 c2                	mov    %eax,%edx
   104a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104ab:	88 50 07             	mov    %dl,0x7(%eax)

}
   104ae:	90                   	nop
   104af:	c9                   	leave  
   104b0:	c3                   	ret    

000104b1 <init_gdt>:

void init_gdt(void){
   104b1:	55                   	push   %ebp
   104b2:	89 e5                	mov    %esp,%ebp
   104b4:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   104b7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   104be:	eb 19                	jmp    104d9 <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   104c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104c3:	c1 e0 03             	shl    $0x3,%eax
   104c6:	6a 00                	push   $0x0
   104c8:	6a 00                	push   $0x0
   104ca:	6a 00                	push   $0x0
   104cc:	50                   	push   %eax
   104cd:	e8 5c ff ff ff       	call   1042e <segment_desc_set>
   104d2:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   104d5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104d9:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   104e0:	7e de                	jle    104c0 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   104e2:	68 9a 40 00 00       	push   $0x409a
   104e7:	6a ff                	push   $0xffffffff
   104e9:	6a 00                	push   $0x0
   104eb:	6a 08                	push   $0x8
   104ed:	e8 3c ff ff ff       	call   1042e <segment_desc_set>
   104f2:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   104f5:	68 92 40 00 00       	push   $0x4092
   104fa:	6a ff                	push   $0xffffffff
   104fc:	6a 00                	push   $0x0
   104fe:	6a 10                	push   $0x10
   10500:	e8 29 ff ff ff       	call   1042e <segment_desc_set>
   10505:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   10508:	b8 60 1f 01 00       	mov    $0x11f60,%eax
   1050d:	68 00 08 00 00       	push   $0x800
   10512:	50                   	push   %eax
   10513:	e8 d4 fe ff ff       	call   103ec <lgdt>
   10518:	83 c4 08             	add    $0x8,%esp
}
   1051b:	90                   	nop
   1051c:	c9                   	leave  
   1051d:	c3                   	ret    

0001051e <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   1051e:	55                   	push   %ebp
   1051f:	89 e5                	mov    %esp,%ebp
   10521:	83 ec 08             	sub    $0x8,%esp
   10524:	8b 55 0c             	mov    0xc(%ebp),%edx
   10527:	8b 45 14             	mov    0x14(%ebp),%eax
   1052a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1052e:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   10532:	8b 45 10             	mov    0x10(%ebp),%eax
   10535:	89 c2                	mov    %eax,%edx
   10537:	8b 45 08             	mov    0x8(%ebp),%eax
   1053a:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10544:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10548:	8b 45 08             	mov    0x8(%ebp),%eax
   1054b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1054f:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10553:	8b 45 10             	mov    0x10(%ebp),%eax
   10556:	c1 e8 10             	shr    $0x10,%eax
   10559:	89 c2                	mov    %eax,%edx
   1055b:	8b 45 08             	mov    0x8(%ebp),%eax
   1055e:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10562:	90                   	nop
   10563:	c9                   	leave  
   10564:	c3                   	ret    

00010565 <cpu_init>:

void cpu_init (void){
   10565:	55                   	push   %ebp
   10566:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   10568:	e8 44 ff ff ff       	call   104b1 <init_gdt>
}
   1056d:	90                   	nop
   1056e:	5d                   	pop    %ebp
   1056f:	c3                   	ret    

00010570 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   10570:	55                   	push   %ebp
   10571:	89 e5                	mov    %esp,%ebp
   10573:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10576:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1057d:	eb 26                	jmp    105a5 <gdt_alloc_desc+0x35>

        segment_desc_t * desc = gdt_table + i;
   1057f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10582:	c1 e0 03             	shl    $0x3,%eax
   10585:	05 60 1f 01 00       	add    $0x11f60,%eax
   1058a:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   1058d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10590:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10594:	66 85 c0             	test   %ax,%ax
   10597:	75 08                	jne    105a1 <gdt_alloc_desc+0x31>
            return i * sizeof(segment_desc_t);
   10599:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1059c:	c1 e0 03             	shl    $0x3,%eax
   1059f:	eb 12                	jmp    105b3 <gdt_alloc_desc+0x43>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   105a1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   105a5:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   105ac:	7e d1                	jle    1057f <gdt_alloc_desc+0xf>
        }
    }
    return -1;
   105ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   105b3:	c9                   	leave  
   105b4:	c3                   	ret    

000105b5 <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   105b5:	55                   	push   %ebp
   105b6:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   105b8:	8b 45 08             	mov    0x8(%ebp),%eax
   105bb:	6a 00                	push   $0x0
   105bd:	50                   	push   %eax
   105be:	e8 51 fe ff ff       	call   10414 <far_jump>
   105c3:	83 c4 08             	add    $0x8,%esp
   105c6:	90                   	nop
   105c7:	c9                   	leave  
   105c8:	c3                   	ret    

000105c9 <inb>:
static inline uint8_t inb(uint16_t port) {
   105c9:	55                   	push   %ebp
   105ca:	89 e5                	mov    %esp,%ebp
   105cc:	83 ec 14             	sub    $0x14,%esp
   105cf:	8b 45 08             	mov    0x8(%ebp),%eax
   105d2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   105d6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   105da:	89 c2                	mov    %eax,%edx
   105dc:	ec                   	in     (%dx),%al
   105dd:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   105e0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   105e4:	c9                   	leave  
   105e5:	c3                   	ret    

000105e6 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   105e6:	55                   	push   %ebp
   105e7:	89 e5                	mov    %esp,%ebp
   105e9:	83 ec 08             	sub    $0x8,%esp
   105ec:	8b 55 08             	mov    0x8(%ebp),%edx
   105ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   105f2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   105f6:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   105f9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   105fd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10601:	ee                   	out    %al,(%dx)
}
   10602:	90                   	nop
   10603:	c9                   	leave  
   10604:	c3                   	ret    

00010605 <cli>:
static inline void cli(void){
   10605:	55                   	push   %ebp
   10606:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10608:	fa                   	cli    
}
   10609:	90                   	nop
   1060a:	5d                   	pop    %ebp
   1060b:	c3                   	ret    

0001060c <sti>:
static inline void sti(void){
   1060c:	55                   	push   %ebp
   1060d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   1060f:	fb                   	sti    
}
   10610:	90                   	nop
   10611:	5d                   	pop    %ebp
   10612:	c3                   	ret    

00010613 <lidt>:



static inline void lidt(uint32_t start,uint32_t size){
   10613:	55                   	push   %ebp
   10614:	89 e5                	mov    %esp,%ebp
   10616:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }idt;
    
    idt.start32_16 = start >> 16;
   10619:	8b 45 08             	mov    0x8(%ebp),%eax
   1061c:	c1 e8 10             	shr    $0x10,%eax
   1061f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10623:	8b 45 08             	mov    0x8(%ebp),%eax
   10626:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   1062a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1062d:	83 e8 01             	sub    $0x1,%eax
   10630:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10634:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10638:	90                   	nop
   10639:	c9                   	leave  
   1063a:	c3                   	ret    

0001063b <hlt>:

static inline void hlt (void) {
   1063b:	55                   	push   %ebp
   1063c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1063e:	f4                   	hlt    
}
   1063f:	90                   	nop
   10640:	5d                   	pop    %ebp
   10641:	c3                   	ret    

00010642 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   10642:	55                   	push   %ebp
   10643:	89 e5                	mov    %esp,%ebp
   10645:	57                   	push   %edi
   10646:	56                   	push   %esi
   10647:	53                   	push   %ebx
   10648:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   1064b:	8b 45 08             	mov    0x8(%ebp),%eax
   1064e:	8b 50 34             	mov    0x34(%eax),%edx
   10651:	8b 45 08             	mov    0x8(%ebp),%eax
   10654:	8b 40 30             	mov    0x30(%eax),%eax
   10657:	83 ec 04             	sub    $0x4,%esp
   1065a:	52                   	push   %edx
   1065b:	50                   	push   %eax
   1065c:	68 c0 1b 01 00       	push   $0x11bc0
   10661:	e8 40 14 00 00       	call   11aa6 <log_printf>
   10666:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   10669:	8b 45 08             	mov    0x8(%ebp),%eax
   1066c:	8b 38                	mov    (%eax),%edi
   1066e:	8b 45 08             	mov    0x8(%ebp),%eax
   10671:	8b 70 04             	mov    0x4(%eax),%esi
   10674:	8b 45 08             	mov    0x8(%ebp),%eax
   10677:	8b 58 0c             	mov    0xc(%eax),%ebx
   1067a:	8b 45 08             	mov    0x8(%ebp),%eax
   1067d:	8b 48 08             	mov    0x8(%eax),%ecx
   10680:	8b 45 08             	mov    0x8(%ebp),%eax
   10683:	8b 50 0c             	mov    0xc(%eax),%edx
   10686:	8b 45 08             	mov    0x8(%ebp),%eax
   10689:	8b 40 3c             	mov    0x3c(%eax),%eax
   1068c:	83 ec 04             	sub    $0x4,%esp
   1068f:	57                   	push   %edi
   10690:	56                   	push   %esi
   10691:	53                   	push   %ebx
   10692:	51                   	push   %ecx
   10693:	52                   	push   %edx
   10694:	50                   	push   %eax
   10695:	68 d8 1b 01 00       	push   $0x11bd8
   1069a:	e8 07 14 00 00       	call   11aa6 <log_printf>
   1069f:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   106a2:	8b 45 08             	mov    0x8(%ebp),%eax
   106a5:	8b 48 1c             	mov    0x1c(%eax),%ecx
   106a8:	8b 45 08             	mov    0x8(%ebp),%eax
   106ab:	8b 40 18             	mov    0x18(%eax),%eax
   106ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   106b1:	8b 45 08             	mov    0x8(%ebp),%eax
   106b4:	8b 58 14             	mov    0x14(%eax),%ebx
   106b7:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   106ba:	8b 45 08             	mov    0x8(%ebp),%eax
   106bd:	8b 78 10             	mov    0x10(%eax),%edi
   106c0:	8b 45 08             	mov    0x8(%ebp),%eax
   106c3:	8b 70 24             	mov    0x24(%eax),%esi
   106c6:	8b 45 08             	mov    0x8(%ebp),%eax
   106c9:	8b 58 28             	mov    0x28(%eax),%ebx
   106cc:	8b 45 08             	mov    0x8(%ebp),%eax
   106cf:	8b 50 20             	mov    0x20(%eax),%edx
   106d2:	8b 45 08             	mov    0x8(%ebp),%eax
   106d5:	8b 40 2c             	mov    0x2c(%eax),%eax
   106d8:	83 ec 0c             	sub    $0xc,%esp
   106db:	51                   	push   %ecx
   106dc:	ff 75 e4             	pushl  -0x1c(%ebp)
   106df:	ff 75 e0             	pushl  -0x20(%ebp)
   106e2:	57                   	push   %edi
   106e3:	56                   	push   %esi
   106e4:	53                   	push   %ebx
   106e5:	52                   	push   %edx
   106e6:	50                   	push   %eax
   106e7:	68 04 1c 01 00       	push   $0x11c04
   106ec:	e8 b5 13 00 00       	call   11aa6 <log_printf>
   106f1:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   106f4:	8b 45 08             	mov    0x8(%ebp),%eax
   106f7:	8b 50 40             	mov    0x40(%eax),%edx
   106fa:	8b 45 08             	mov    0x8(%ebp),%eax
   106fd:	8b 40 38             	mov    0x38(%eax),%eax
   10700:	83 ec 04             	sub    $0x4,%esp
   10703:	52                   	push   %edx
   10704:	50                   	push   %eax
   10705:	68 4d 1c 01 00       	push   $0x11c4d
   1070a:	e8 97 13 00 00       	call   11aa6 <log_printf>
   1070f:	83 c4 10             	add    $0x10,%esp
}
   10712:	90                   	nop
   10713:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10716:	5b                   	pop    %ebx
   10717:	5e                   	pop    %esi
   10718:	5f                   	pop    %edi
   10719:	5d                   	pop    %ebp
   1071a:	c3                   	ret    

0001071b <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   1071b:	55                   	push   %ebp
   1071c:	89 e5                	mov    %esp,%ebp
   1071e:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10721:	83 ec 0c             	sub    $0xc,%esp
   10724:	68 63 1c 01 00       	push   $0x11c63
   10729:	e8 78 13 00 00       	call   11aa6 <log_printf>
   1072e:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10731:	83 ec 08             	sub    $0x8,%esp
   10734:	ff 75 0c             	pushl  0xc(%ebp)
   10737:	68 80 1c 01 00       	push   $0x11c80
   1073c:	e8 65 13 00 00       	call   11aa6 <log_printf>
   10741:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10744:	83 ec 0c             	sub    $0xc,%esp
   10747:	ff 75 08             	pushl  0x8(%ebp)
   1074a:	e8 f3 fe ff ff       	call   10642 <dump_core_regs>
   1074f:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   10752:	e8 e4 fe ff ff       	call   1063b <hlt>
   10757:	eb f9                	jmp    10752 <do_default_handler+0x37>

00010759 <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   10759:	55                   	push   %ebp
   1075a:	89 e5                	mov    %esp,%ebp
   1075c:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   1075f:	83 ec 08             	sub    $0x8,%esp
   10762:	68 9a 1c 01 00       	push   $0x11c9a
   10767:	ff 75 08             	pushl  0x8(%ebp)
   1076a:	e8 ac ff ff ff       	call   1071b <do_default_handler>
   1076f:	83 c4 10             	add    $0x10,%esp

}
   10772:	90                   	nop
   10773:	c9                   	leave  
   10774:	c3                   	ret    

00010775 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   10775:	55                   	push   %ebp
   10776:	89 e5                	mov    %esp,%ebp
   10778:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   1077b:	83 ec 08             	sub    $0x8,%esp
   1077e:	68 ac 1c 01 00       	push   $0x11cac
   10783:	ff 75 08             	pushl  0x8(%ebp)
   10786:	e8 90 ff ff ff       	call   1071b <do_default_handler>
   1078b:	83 c4 10             	add    $0x10,%esp
}
   1078e:	90                   	nop
   1078f:	c9                   	leave  
   10790:	c3                   	ret    

00010791 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   10791:	55                   	push   %ebp
   10792:	89 e5                	mov    %esp,%ebp
   10794:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   10797:	83 ec 08             	sub    $0x8,%esp
   1079a:	68 bd 1c 01 00       	push   $0x11cbd
   1079f:	ff 75 08             	pushl  0x8(%ebp)
   107a2:	e8 74 ff ff ff       	call   1071b <do_default_handler>
   107a7:	83 c4 10             	add    $0x10,%esp
}
   107aa:	90                   	nop
   107ab:	c9                   	leave  
   107ac:	c3                   	ret    

000107ad <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   107ad:	55                   	push   %ebp
   107ae:	89 e5                	mov    %esp,%ebp
   107b0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   107b3:	83 ec 08             	sub    $0x8,%esp
   107b6:	68 cd 1c 01 00       	push   $0x11ccd
   107bb:	ff 75 08             	pushl  0x8(%ebp)
   107be:	e8 58 ff ff ff       	call   1071b <do_default_handler>
   107c3:	83 c4 10             	add    $0x10,%esp
}
   107c6:	90                   	nop
   107c7:	c9                   	leave  
   107c8:	c3                   	ret    

000107c9 <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   107c9:	55                   	push   %ebp
   107ca:	89 e5                	mov    %esp,%ebp
   107cc:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   107cf:	83 ec 08             	sub    $0x8,%esp
   107d2:	68 dc 1c 01 00       	push   $0x11cdc
   107d7:	ff 75 08             	pushl  0x8(%ebp)
   107da:	e8 3c ff ff ff       	call   1071b <do_default_handler>
   107df:	83 c4 10             	add    $0x10,%esp
}
   107e2:	90                   	nop
   107e3:	c9                   	leave  
   107e4:	c3                   	ret    

000107e5 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   107e5:	55                   	push   %ebp
   107e6:	89 e5                	mov    %esp,%ebp
   107e8:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   107eb:	83 ec 08             	sub    $0x8,%esp
   107ee:	68 e8 1c 01 00       	push   $0x11ce8
   107f3:	ff 75 08             	pushl  0x8(%ebp)
   107f6:	e8 20 ff ff ff       	call   1071b <do_default_handler>
   107fb:	83 c4 10             	add    $0x10,%esp
}
   107fe:	90                   	nop
   107ff:	c9                   	leave  
   10800:	c3                   	ret    

00010801 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10801:	55                   	push   %ebp
   10802:	89 e5                	mov    %esp,%ebp
   10804:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10807:	83 ec 08             	sub    $0x8,%esp
   1080a:	68 f2 1c 01 00       	push   $0x11cf2
   1080f:	ff 75 08             	pushl  0x8(%ebp)
   10812:	e8 04 ff ff ff       	call   1071b <do_default_handler>
   10817:	83 c4 10             	add    $0x10,%esp
}
   1081a:	90                   	nop
   1081b:	c9                   	leave  
   1081c:	c3                   	ret    

0001081d <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   1081d:	55                   	push   %ebp
   1081e:	89 e5                	mov    %esp,%ebp
   10820:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10823:	83 ec 08             	sub    $0x8,%esp
   10826:	68 08 1d 01 00       	push   $0x11d08
   1082b:	ff 75 08             	pushl  0x8(%ebp)
   1082e:	e8 e8 fe ff ff       	call   1071b <do_default_handler>
   10833:	83 c4 10             	add    $0x10,%esp
}
   10836:	90                   	nop
   10837:	c9                   	leave  
   10838:	c3                   	ret    

00010839 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   10839:	55                   	push   %ebp
   1083a:	89 e5                	mov    %esp,%ebp
   1083c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   1083f:	83 ec 08             	sub    $0x8,%esp
   10842:	68 18 1d 01 00       	push   $0x11d18
   10847:	ff 75 08             	pushl  0x8(%ebp)
   1084a:	e8 cc fe ff ff       	call   1071b <do_default_handler>
   1084f:	83 c4 10             	add    $0x10,%esp
}
   10852:	90                   	nop
   10853:	c9                   	leave  
   10854:	c3                   	ret    

00010855 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10855:	55                   	push   %ebp
   10856:	89 e5                	mov    %esp,%ebp
   10858:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   1085b:	83 ec 08             	sub    $0x8,%esp
   1085e:	68 2e 1d 01 00       	push   $0x11d2e
   10863:	ff 75 08             	pushl  0x8(%ebp)
   10866:	e8 b0 fe ff ff       	call   1071b <do_default_handler>
   1086b:	83 c4 10             	add    $0x10,%esp
}
   1086e:	90                   	nop
   1086f:	c9                   	leave  
   10870:	c3                   	ret    

00010871 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   10871:	55                   	push   %ebp
   10872:	89 e5                	mov    %esp,%ebp
   10874:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   10877:	83 ec 08             	sub    $0x8,%esp
   1087a:	68 3c 1d 01 00       	push   $0x11d3c
   1087f:	ff 75 08             	pushl  0x8(%ebp)
   10882:	e8 94 fe ff ff       	call   1071b <do_default_handler>
   10887:	83 c4 10             	add    $0x10,%esp
}
   1088a:	90                   	nop
   1088b:	c9                   	leave  
   1088c:	c3                   	ret    

0001088d <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   1088d:	55                   	push   %ebp
   1088e:	89 e5                	mov    %esp,%ebp
   10890:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10893:	83 ec 08             	sub    $0x8,%esp
   10896:	68 48 1d 01 00       	push   $0x11d48
   1089b:	ff 75 08             	pushl  0x8(%ebp)
   1089e:	e8 78 fe ff ff       	call   1071b <do_default_handler>
   108a3:	83 c4 10             	add    $0x10,%esp
}
   108a6:	90                   	nop
   108a7:	c9                   	leave  
   108a8:	c3                   	ret    

000108a9 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   108a9:	55                   	push   %ebp
   108aa:	89 e5                	mov    %esp,%ebp
   108ac:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   108af:	83 ec 08             	sub    $0x8,%esp
   108b2:	68 5d 1d 01 00       	push   $0x11d5d
   108b7:	ff 75 08             	pushl  0x8(%ebp)
   108ba:	e8 5c fe ff ff       	call   1071b <do_default_handler>
   108bf:	83 c4 10             	add    $0x10,%esp
}
   108c2:	90                   	nop
   108c3:	c9                   	leave  
   108c4:	c3                   	ret    

000108c5 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   108c5:	55                   	push   %ebp
   108c6:	89 e5                	mov    %esp,%ebp
   108c8:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   108cb:	83 ec 08             	sub    $0x8,%esp
   108ce:	68 72 1d 01 00       	push   $0x11d72
   108d3:	ff 75 08             	pushl  0x8(%ebp)
   108d6:	e8 40 fe ff ff       	call   1071b <do_default_handler>
   108db:	83 c4 10             	add    $0x10,%esp
}
   108de:	90                   	nop
   108df:	c9                   	leave  
   108e0:	c3                   	ret    

000108e1 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   108e1:	55                   	push   %ebp
   108e2:	89 e5                	mov    %esp,%ebp
   108e4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   108e7:	83 ec 08             	sub    $0x8,%esp
   108ea:	68 86 1d 01 00       	push   $0x11d86
   108ef:	ff 75 08             	pushl  0x8(%ebp)
   108f2:	e8 24 fe ff ff       	call   1071b <do_default_handler>
   108f7:	83 c4 10             	add    $0x10,%esp
}
   108fa:	90                   	nop
   108fb:	c9                   	leave  
   108fc:	c3                   	ret    

000108fd <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   108fd:	55                   	push   %ebp
   108fe:	89 e5                	mov    %esp,%ebp
   10900:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10903:	83 ec 08             	sub    $0x8,%esp
   10906:	68 92 1d 01 00       	push   $0x11d92
   1090b:	ff 75 08             	pushl  0x8(%ebp)
   1090e:	e8 08 fe ff ff       	call   1071b <do_default_handler>
   10913:	83 c4 10             	add    $0x10,%esp
}
   10916:	90                   	nop
   10917:	c9                   	leave  
   10918:	c3                   	ret    

00010919 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   10919:	55                   	push   %ebp
   1091a:	89 e5                	mov    %esp,%ebp
   1091c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   1091f:	83 ec 08             	sub    $0x8,%esp
   10922:	68 b0 1d 01 00       	push   $0x11db0
   10927:	ff 75 08             	pushl  0x8(%ebp)
   1092a:	e8 ec fd ff ff       	call   1071b <do_default_handler>
   1092f:	83 c4 10             	add    $0x10,%esp
}
   10932:	90                   	nop
   10933:	c9                   	leave  
   10934:	c3                   	ret    

00010935 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10935:	55                   	push   %ebp
   10936:	89 e5                	mov    %esp,%ebp
   10938:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   1093b:	83 ec 08             	sub    $0x8,%esp
   1093e:	68 c1 1d 01 00       	push   $0x11dc1
   10943:	ff 75 08             	pushl  0x8(%ebp)
   10946:	e8 d0 fd ff ff       	call   1071b <do_default_handler>
   1094b:	83 c4 10             	add    $0x10,%esp
}
   1094e:	90                   	nop
   1094f:	c9                   	leave  
   10950:	c3                   	ret    

00010951 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10951:	55                   	push   %ebp
   10952:	89 e5                	mov    %esp,%ebp
   10954:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10957:	83 ec 08             	sub    $0x8,%esp
   1095a:	68 d0 1d 01 00       	push   $0x11dd0
   1095f:	ff 75 08             	pushl  0x8(%ebp)
   10962:	e8 b4 fd ff ff       	call   1071b <do_default_handler>
   10967:	83 c4 10             	add    $0x10,%esp
}
   1096a:	90                   	nop
   1096b:	c9                   	leave  
   1096c:	c3                   	ret    

0001096d <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   1096d:	55                   	push   %ebp
   1096e:	89 e5                	mov    %esp,%ebp
   10970:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10973:	83 ec 08             	sub    $0x8,%esp
   10976:	68 ef 1d 01 00       	push   $0x11def
   1097b:	ff 75 08             	pushl  0x8(%ebp)
   1097e:	e8 98 fd ff ff       	call   1071b <do_default_handler>
   10983:	83 c4 10             	add    $0x10,%esp
}
   10986:	90                   	nop
   10987:	c9                   	leave  
   10988:	c3                   	ret    

00010989 <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   10989:	55                   	push   %ebp
   1098a:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1098c:	6a 11                	push   $0x11
   1098e:	6a 20                	push   $0x20
   10990:	e8 51 fc ff ff       	call   105e6 <outb>
   10995:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10998:	6a 20                	push   $0x20
   1099a:	6a 21                	push   $0x21
   1099c:	e8 45 fc ff ff       	call   105e6 <outb>
   109a1:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   109a4:	6a 04                	push   $0x4
   109a6:	6a 21                	push   $0x21
   109a8:	e8 39 fc ff ff       	call   105e6 <outb>
   109ad:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   109b0:	6a 01                	push   $0x1
   109b2:	6a 21                	push   $0x21
   109b4:	e8 2d fc ff ff       	call   105e6 <outb>
   109b9:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   109bc:	6a 11                	push   $0x11
   109be:	68 a0 00 00 00       	push   $0xa0
   109c3:	e8 1e fc ff ff       	call   105e6 <outb>
   109c8:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   109cb:	6a 28                	push   $0x28
   109cd:	68 a1 00 00 00       	push   $0xa1
   109d2:	e8 0f fc ff ff       	call   105e6 <outb>
   109d7:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   109da:	6a 02                	push   $0x2
   109dc:	68 a1 00 00 00       	push   $0xa1
   109e1:	e8 00 fc ff ff       	call   105e6 <outb>
   109e6:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   109e9:	6a 01                	push   $0x1
   109eb:	68 a1 00 00 00       	push   $0xa1
   109f0:	e8 f1 fb ff ff       	call   105e6 <outb>
   109f5:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   109f8:	68 fb 00 00 00       	push   $0xfb
   109fd:	6a 21                	push   $0x21
   109ff:	e8 e2 fb ff ff       	call   105e6 <outb>
   10a04:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10a07:	68 ff 00 00 00       	push   $0xff
   10a0c:	68 a1 00 00 00       	push   $0xa1
   10a11:	e8 d0 fb ff ff       	call   105e6 <outb>
   10a16:	83 c4 08             	add    $0x8,%esp
}
   10a19:	90                   	nop
   10a1a:	c9                   	leave  
   10a1b:	c3                   	ret    

00010a1c <irq_init>:


void irq_init(void){ 
   10a1c:	55                   	push   %ebp
   10a1d:	89 e5                	mov    %esp,%ebp
   10a1f:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10a22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10a29:	eb 25                	jmp    10a50 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10a2b:	ba 28 00 01 00       	mov    $0x10028,%edx
   10a30:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a33:	c1 e0 03             	shl    $0x3,%eax
   10a36:	05 60 27 01 00       	add    $0x12760,%eax
   10a3b:	68 00 8e 00 00       	push   $0x8e00
   10a40:	52                   	push   %edx
   10a41:	6a 08                	push   $0x8
   10a43:	50                   	push   %eax
   10a44:	e8 d5 fa ff ff       	call   1051e <gate_desc_set>
   10a49:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10a4c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a50:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10a54:	7e d5                	jle    10a2b <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10a56:	83 ec 08             	sub    $0x8,%esp
   10a59:	68 47 00 01 00       	push   $0x10047
   10a5e:	6a 00                	push   $0x0
   10a60:	e8 65 01 00 00       	call   10bca <irq_install>
   10a65:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10a68:	83 ec 08             	sub    $0x8,%esp
   10a6b:	68 66 00 01 00       	push   $0x10066
   10a70:	6a 01                	push   $0x1
   10a72:	e8 53 01 00 00       	call   10bca <irq_install>
   10a77:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10a7a:	83 ec 08             	sub    $0x8,%esp
   10a7d:	68 85 00 01 00       	push   $0x10085
   10a82:	6a 02                	push   $0x2
   10a84:	e8 41 01 00 00       	call   10bca <irq_install>
   10a89:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10a8c:	83 ec 08             	sub    $0x8,%esp
   10a8f:	68 a4 00 01 00       	push   $0x100a4
   10a94:	6a 03                	push   $0x3
   10a96:	e8 2f 01 00 00       	call   10bca <irq_install>
   10a9b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10a9e:	83 ec 08             	sub    $0x8,%esp
   10aa1:	68 c3 00 01 00       	push   $0x100c3
   10aa6:	6a 04                	push   $0x4
   10aa8:	e8 1d 01 00 00       	call   10bca <irq_install>
   10aad:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10ab0:	83 ec 08             	sub    $0x8,%esp
   10ab3:	68 e2 00 01 00       	push   $0x100e2
   10ab8:	6a 05                	push   $0x5
   10aba:	e8 0b 01 00 00       	call   10bca <irq_install>
   10abf:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10ac2:	83 ec 08             	sub    $0x8,%esp
   10ac5:	68 01 01 01 00       	push   $0x10101
   10aca:	6a 06                	push   $0x6
   10acc:	e8 f9 00 00 00       	call   10bca <irq_install>
   10ad1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10ad4:	83 ec 08             	sub    $0x8,%esp
   10ad7:	68 20 01 01 00       	push   $0x10120
   10adc:	6a 07                	push   $0x7
   10ade:	e8 e7 00 00 00       	call   10bca <irq_install>
   10ae3:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10ae6:	83 ec 08             	sub    $0x8,%esp
   10ae9:	68 3f 01 01 00       	push   $0x1013f
   10aee:	6a 08                	push   $0x8
   10af0:	e8 d5 00 00 00       	call   10bca <irq_install>
   10af5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10af8:	83 ec 08             	sub    $0x8,%esp
   10afb:	68 5c 01 01 00       	push   $0x1015c
   10b00:	6a 0a                	push   $0xa
   10b02:	e8 c3 00 00 00       	call   10bca <irq_install>
   10b07:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10b0a:	83 ec 08             	sub    $0x8,%esp
   10b0d:	68 79 01 01 00       	push   $0x10179
   10b12:	6a 0b                	push   $0xb
   10b14:	e8 b1 00 00 00       	call   10bca <irq_install>
   10b19:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10b1c:	83 ec 08             	sub    $0x8,%esp
   10b1f:	68 96 01 01 00       	push   $0x10196
   10b24:	6a 0c                	push   $0xc
   10b26:	e8 9f 00 00 00       	call   10bca <irq_install>
   10b2b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10b2e:	83 ec 08             	sub    $0x8,%esp
   10b31:	68 b3 01 01 00       	push   $0x101b3
   10b36:	6a 0d                	push   $0xd
   10b38:	e8 8d 00 00 00       	call   10bca <irq_install>
   10b3d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10b40:	83 ec 08             	sub    $0x8,%esp
   10b43:	68 d0 01 01 00       	push   $0x101d0
   10b48:	6a 0e                	push   $0xe
   10b4a:	e8 7b 00 00 00       	call   10bca <irq_install>
   10b4f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10b52:	83 ec 08             	sub    $0x8,%esp
   10b55:	68 ed 01 01 00       	push   $0x101ed
   10b5a:	6a 10                	push   $0x10
   10b5c:	e8 69 00 00 00       	call   10bca <irq_install>
   10b61:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10b64:	83 ec 08             	sub    $0x8,%esp
   10b67:	68 0c 02 01 00       	push   $0x1020c
   10b6c:	6a 11                	push   $0x11
   10b6e:	e8 57 00 00 00       	call   10bca <irq_install>
   10b73:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10b76:	83 ec 08             	sub    $0x8,%esp
   10b79:	68 29 02 01 00       	push   $0x10229
   10b7e:	6a 12                	push   $0x12
   10b80:	e8 45 00 00 00       	call   10bca <irq_install>
   10b85:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10b88:	83 ec 08             	sub    $0x8,%esp
   10b8b:	68 48 02 01 00       	push   $0x10248
   10b90:	6a 13                	push   $0x13
   10b92:	e8 33 00 00 00       	call   10bca <irq_install>
   10b97:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10b9a:	83 ec 08             	sub    $0x8,%esp
   10b9d:	68 67 02 01 00       	push   $0x10267
   10ba2:	6a 14                	push   $0x14
   10ba4:	e8 21 00 00 00       	call   10bca <irq_install>
   10ba9:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10bac:	b8 60 27 01 00       	mov    $0x12760,%eax
   10bb1:	83 ec 08             	sub    $0x8,%esp
   10bb4:	68 00 04 00 00       	push   $0x400
   10bb9:	50                   	push   %eax
   10bba:	e8 54 fa ff ff       	call   10613 <lidt>
   10bbf:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10bc2:	e8 c2 fd ff ff       	call   10989 <init_pic>
}
   10bc7:	90                   	nop
   10bc8:	c9                   	leave  
   10bc9:	c3                   	ret    

00010bca <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   10bca:	55                   	push   %ebp
   10bcb:	89 e5                	mov    %esp,%ebp
   10bcd:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10bd0:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10bd4:	7e 07                	jle    10bdd <irq_install+0x13>
        return -1;
   10bd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bdb:	eb 25                	jmp    10c02 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   10bdd:	8b 45 0c             	mov    0xc(%ebp),%eax
   10be0:	8b 55 08             	mov    0x8(%ebp),%edx
   10be3:	c1 e2 03             	shl    $0x3,%edx
   10be6:	81 c2 60 27 01 00    	add    $0x12760,%edx
   10bec:	68 00 8e 00 00       	push   $0x8e00
   10bf1:	50                   	push   %eax
   10bf2:	6a 08                	push   $0x8
   10bf4:	52                   	push   %edx
   10bf5:	e8 24 f9 ff ff       	call   1051e <gate_desc_set>
   10bfa:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   10bfd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c02:	c9                   	leave  
   10c03:	c3                   	ret    

00010c04 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   10c04:	55                   	push   %ebp
   10c05:	89 e5                	mov    %esp,%ebp
   10c07:	53                   	push   %ebx
   10c08:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10c0b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c0f:	7e 78                	jle    10c89 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10c11:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10c15:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c19:	7f 32                	jg     10c4d <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c1b:	6a 21                	push   $0x21
   10c1d:	e8 a7 f9 ff ff       	call   105c9 <inb>
   10c22:	83 c4 04             	add    $0x4,%esp
   10c25:	89 c2                	mov    %eax,%edx
   10c27:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2a:	bb 01 00 00 00       	mov    $0x1,%ebx
   10c2f:	89 c1                	mov    %eax,%ecx
   10c31:	d3 e3                	shl    %cl,%ebx
   10c33:	89 d8                	mov    %ebx,%eax
   10c35:	f7 d0                	not    %eax
   10c37:	21 d0                	and    %edx,%eax
   10c39:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10c3c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c40:	50                   	push   %eax
   10c41:	6a 21                	push   $0x21
   10c43:	e8 9e f9 ff ff       	call   105e6 <outb>
   10c48:	83 c4 08             	add    $0x8,%esp
   10c4b:	eb 3d                	jmp    10c8a <irq_enable+0x86>
    }else{
        irq_num -= 8;
   10c4d:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10c51:	68 a1 00 00 00       	push   $0xa1
   10c56:	e8 6e f9 ff ff       	call   105c9 <inb>
   10c5b:	83 c4 04             	add    $0x4,%esp
   10c5e:	89 c2                	mov    %eax,%edx
   10c60:	8b 45 08             	mov    0x8(%ebp),%eax
   10c63:	bb 01 00 00 00       	mov    $0x1,%ebx
   10c68:	89 c1                	mov    %eax,%ecx
   10c6a:	d3 e3                	shl    %cl,%ebx
   10c6c:	89 d8                	mov    %ebx,%eax
   10c6e:	f7 d0                	not    %eax
   10c70:	21 d0                	and    %edx,%eax
   10c72:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10c75:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c79:	50                   	push   %eax
   10c7a:	68 a1 00 00 00       	push   $0xa1
   10c7f:	e8 62 f9 ff ff       	call   105e6 <outb>
   10c84:	83 c4 08             	add    $0x8,%esp
   10c87:	eb 01                	jmp    10c8a <irq_enable+0x86>
        return;
   10c89:	90                   	nop
    }
}
   10c8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c8d:	c9                   	leave  
   10c8e:	c3                   	ret    

00010c8f <irq_disable>:
void irq_disable (int irq_num) {
   10c8f:	55                   	push   %ebp
   10c90:	89 e5                	mov    %esp,%ebp
   10c92:	53                   	push   %ebx
   10c93:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10c96:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c9a:	7e 74                	jle    10d10 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10c9c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10ca0:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ca4:	7f 30                	jg     10cd6 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10ca6:	6a 21                	push   $0x21
   10ca8:	e8 1c f9 ff ff       	call   105c9 <inb>
   10cad:	83 c4 04             	add    $0x4,%esp
   10cb0:	89 c3                	mov    %eax,%ebx
   10cb2:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb5:	ba 01 00 00 00       	mov    $0x1,%edx
   10cba:	89 c1                	mov    %eax,%ecx
   10cbc:	d3 e2                	shl    %cl,%edx
   10cbe:	89 d0                	mov    %edx,%eax
   10cc0:	09 d8                	or     %ebx,%eax
   10cc2:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10cc5:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10cc9:	50                   	push   %eax
   10cca:	6a 21                	push   $0x21
   10ccc:	e8 15 f9 ff ff       	call   105e6 <outb>
   10cd1:	83 c4 08             	add    $0x8,%esp
   10cd4:	eb 3b                	jmp    10d11 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10cd6:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10cda:	68 a1 00 00 00       	push   $0xa1
   10cdf:	e8 e5 f8 ff ff       	call   105c9 <inb>
   10ce4:	83 c4 04             	add    $0x4,%esp
   10ce7:	89 c3                	mov    %eax,%ebx
   10ce9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cec:	ba 01 00 00 00       	mov    $0x1,%edx
   10cf1:	89 c1                	mov    %eax,%ecx
   10cf3:	d3 e2                	shl    %cl,%edx
   10cf5:	89 d0                	mov    %edx,%eax
   10cf7:	09 d8                	or     %ebx,%eax
   10cf9:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10cfc:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d00:	50                   	push   %eax
   10d01:	68 a1 00 00 00       	push   $0xa1
   10d06:	e8 db f8 ff ff       	call   105e6 <outb>
   10d0b:	83 c4 08             	add    $0x8,%esp
   10d0e:	eb 01                	jmp    10d11 <irq_disable+0x82>
        return;
   10d10:	90                   	nop
    }
}
   10d11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d14:	c9                   	leave  
   10d15:	c3                   	ret    

00010d16 <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   10d16:	55                   	push   %ebp
   10d17:	89 e5                	mov    %esp,%ebp
    cli();
   10d19:	e8 e7 f8 ff ff       	call   10605 <cli>
}
   10d1e:	90                   	nop
   10d1f:	5d                   	pop    %ebp
   10d20:	c3                   	ret    

00010d21 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   10d21:	55                   	push   %ebp
   10d22:	89 e5                	mov    %esp,%ebp
    sti();
   10d24:	e8 e3 f8 ff ff       	call   1060c <sti>
}
   10d29:	90                   	nop
   10d2a:	5d                   	pop    %ebp
   10d2b:	c3                   	ret    

00010d2c <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10d2c:	55                   	push   %ebp
   10d2d:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   10d2f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   10d33:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d37:	7e 0f                	jle    10d48 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   10d39:	6a 20                	push   $0x20
   10d3b:	68 a0 00 00 00       	push   $0xa0
   10d40:	e8 a1 f8 ff ff       	call   105e6 <outb>
   10d45:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10d48:	6a 20                	push   $0x20
   10d4a:	6a 20                	push   $0x20
   10d4c:	e8 95 f8 ff ff       	call   105e6 <outb>
   10d51:	83 c4 08             	add    $0x8,%esp

}
   10d54:	90                   	nop
   10d55:	c9                   	leave  
   10d56:	c3                   	ret    

00010d57 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10d57:	55                   	push   %ebp
   10d58:	89 e5                	mov    %esp,%ebp
   10d5a:	83 ec 08             	sub    $0x8,%esp
   10d5d:	8b 55 08             	mov    0x8(%ebp),%edx
   10d60:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d63:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10d67:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10d6a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10d6e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10d72:	ee                   	out    %al,(%dx)
}
   10d73:	90                   	nop
   10d74:	c9                   	leave  
   10d75:	c3                   	ret    

00010d76 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   10d76:	55                   	push   %ebp
   10d77:	89 e5                	mov    %esp,%ebp
   10d79:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10d7c:	a1 60 2b 01 00       	mov    0x12b60,%eax
   10d81:	83 c0 01             	add    $0x1,%eax
   10d84:	a3 60 2b 01 00       	mov    %eax,0x12b60
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   10d89:	83 ec 0c             	sub    $0xc,%esp
   10d8c:	6a 20                	push   $0x20
   10d8e:	e8 99 ff ff ff       	call   10d2c <pic_send_eoi>
   10d93:	83 c4 10             	add    $0x10,%esp
}
   10d96:	90                   	nop
   10d97:	c9                   	leave  
   10d98:	c3                   	ret    

00010d99 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10d99:	55                   	push   %ebp
   10d9a:	89 e5                	mov    %esp,%ebp
   10d9c:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10d9f:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   10da6:	6a 36                	push   $0x36
   10da8:	6a 43                	push   $0x43
   10daa:	e8 a8 ff ff ff       	call   10d57 <outb>
   10daf:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   10db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10db5:	0f b6 c0             	movzbl %al,%eax
   10db8:	50                   	push   %eax
   10db9:	6a 40                	push   $0x40
   10dbb:	e8 97 ff ff ff       	call   10d57 <outb>
   10dc0:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   10dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dc6:	c1 e8 08             	shr    $0x8,%eax
   10dc9:	0f b6 c0             	movzbl %al,%eax
   10dcc:	50                   	push   %eax
   10dcd:	6a 40                	push   $0x40
   10dcf:	e8 83 ff ff ff       	call   10d57 <outb>
   10dd4:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10dd7:	83 ec 08             	sub    $0x8,%esp
   10dda:	68 86 02 01 00       	push   $0x10286
   10ddf:	6a 20                	push   $0x20
   10de1:	e8 e4 fd ff ff       	call   10bca <irq_install>
   10de6:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10de9:	83 ec 0c             	sub    $0xc,%esp
   10dec:	6a 20                	push   $0x20
   10dee:	e8 11 fe ff ff       	call   10c04 <irq_enable>
   10df3:	83 c4 10             	add    $0x10,%esp
}
   10df6:	90                   	nop
   10df7:	c9                   	leave  
   10df8:	c3                   	ret    

00010df9 <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   10df9:	55                   	push   %ebp
   10dfa:	89 e5                	mov    %esp,%ebp
   10dfc:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10dff:	c7 05 60 2b 01 00 00 	movl   $0x0,0x12b60
   10e06:	00 00 00 

    init_pit();
   10e09:	e8 8b ff ff ff       	call   10d99 <init_pit>
   10e0e:	90                   	nop
   10e0f:	c9                   	leave  
   10e10:	c3                   	ret    

00010e11 <write_tr>:

static inline void write_tr(uint16_t tss_sel) {
   10e11:	55                   	push   %ebp
   10e12:	89 e5                	mov    %esp,%ebp
   10e14:	83 ec 04             	sub    $0x4,%esp
   10e17:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   10e1e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10e22:	0f 00 d8             	ltr    %ax
}
   10e25:	90                   	nop
   10e26:	c9                   	leave  
   10e27:	c3                   	ret    

00010e28 <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   10e28:	55                   	push   %ebp
   10e29:	89 e5                	mov    %esp,%ebp
    return list->count;
   10e2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2e:	8b 40 08             	mov    0x8(%eax),%eax
}
   10e31:	5d                   	pop    %ebp
   10e32:	c3                   	ret    

00010e33 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   10e33:	55                   	push   %ebp
   10e34:	89 e5                	mov    %esp,%ebp
    return list->first;
   10e36:	8b 45 08             	mov    0x8(%ebp),%eax
   10e39:	8b 00                	mov    (%eax),%eax
}
   10e3b:	5d                   	pop    %ebp
   10e3c:	c3                   	ret    

00010e3d <list_last>:
/**
 * 获取指定链接的最后一个表项
 * @param list 查询的链表
 * @return 最后一个表项
 */
static inline list_node_t* list_last(list_t *list) {
   10e3d:	55                   	push   %ebp
   10e3e:	89 e5                	mov    %esp,%ebp
    return list->last;
   10e40:	8b 45 08             	mov    0x8(%ebp),%eax
   10e43:	8b 40 04             	mov    0x4(%eax),%eax
}
   10e46:	5d                   	pop    %ebp
   10e47:	c3                   	ret    

00010e48 <kernel_init>:
#include "tools/list.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   10e48:	55                   	push   %ebp
   10e49:	89 e5                	mov    %esp,%ebp
   10e4b:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10e4e:	e8 12 f7 ff ff       	call   10565 <cpu_init>

    log_init();
   10e53:	e8 d9 0b 00 00       	call   11a31 <log_init>
    irq_init();
   10e58:	e8 bf fb ff ff       	call   10a1c <irq_init>
    time_init();
   10e5d:	e8 97 ff ff ff       	call   10df9 <time_init>
}
   10e62:	90                   	nop
   10e63:	c9                   	leave  
   10e64:	c3                   	ret    

00010e65 <init_task_entry>:

static task_t first_task;
static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   10e65:	55                   	push   %ebp
   10e66:	89 e5                	mov    %esp,%ebp
   10e68:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   10e6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int task: %d",count++);
   10e72:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e75:	8d 50 01             	lea    0x1(%eax),%edx
   10e78:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10e7b:	83 ec 08             	sub    $0x8,%esp
   10e7e:	50                   	push   %eax
   10e7f:	68 0c 1e 01 00       	push   $0x11e0c
   10e84:	e8 1d 0c 00 00       	call   11aa6 <log_printf>
   10e89:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task,&first_task);
   10e8c:	83 ec 08             	sub    $0x8,%esp
   10e8f:	68 80 2b 01 00       	push   $0x12b80
   10e94:	68 00 3c 01 00       	push   $0x13c00
   10e99:	e8 f7 f4 ff ff       	call   10395 <task_switch_from_to>
   10e9e:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d",count++);
   10ea1:	eb cf                	jmp    10e72 <init_task_entry+0xd>

00010ea3 <list_test>:
    }    

}

void list_test (void) {
   10ea3:	55                   	push   %ebp
   10ea4:	89 e5                	mov    %esp,%ebp
   10ea6:	56                   	push   %esi
   10ea7:	53                   	push   %ebx
   10ea8:	83 ec 70             	sub    $0x70,%esp
    list_t list;

    list_node_t nodes[5];
    list_init(&list);
   10eab:	83 ec 0c             	sub    $0xc,%esp
   10eae:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10eb1:	50                   	push   %eax
   10eb2:	e8 57 09 00 00       	call   1180e <list_init>
   10eb7:	83 c4 10             	add    $0x10,%esp



    for(int i = 0; i < 5; i++) {
   10eba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10ec1:	eb 3f                	jmp    10f02 <list_test+0x5f>
        list_node_t * node = nodes + i;
   10ec3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ec6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10ecd:	8d 45 94             	lea    -0x6c(%ebp),%eax
   10ed0:	01 d0                	add    %edx,%eax
   10ed2:	89 45 c8             	mov    %eax,-0x38(%ebp)
        log_printf("insert first to last: %d,0x%x",i,(uint32_t)node);
   10ed5:	8b 45 c8             	mov    -0x38(%ebp),%eax
   10ed8:	83 ec 04             	sub    $0x4,%esp
   10edb:	50                   	push   %eax
   10edc:	ff 75 f4             	pushl  -0xc(%ebp)
   10edf:	68 19 1e 01 00       	push   $0x11e19
   10ee4:	e8 bd 0b 00 00       	call   11aa6 <log_printf>
   10ee9:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list,node);
   10eec:	83 ec 08             	sub    $0x8,%esp
   10eef:	ff 75 c8             	pushl  -0x38(%ebp)
   10ef2:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10ef5:	50                   	push   %eax
   10ef6:	e8 38 09 00 00       	call   11833 <list_insert_first>
   10efb:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < 5; i++) {
   10efe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f02:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   10f06:	7e bb                	jle    10ec3 <list_test+0x20>
    }
    log_printf("list: firts=0x%x,last=0x%x,count=%d",
   10f08:	83 ec 0c             	sub    $0xc,%esp
   10f0b:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10f0e:	50                   	push   %eax
   10f0f:	e8 14 ff ff ff       	call   10e28 <list_count>
   10f14:	83 c4 10             	add    $0x10,%esp
   10f17:	89 c6                	mov    %eax,%esi
   10f19:	83 ec 0c             	sub    $0xc,%esp
   10f1c:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10f1f:	50                   	push   %eax
   10f20:	e8 18 ff ff ff       	call   10e3d <list_last>
   10f25:	83 c4 10             	add    $0x10,%esp
   10f28:	89 c3                	mov    %eax,%ebx
   10f2a:	83 ec 0c             	sub    $0xc,%esp
   10f2d:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10f30:	50                   	push   %eax
   10f31:	e8 fd fe ff ff       	call   10e33 <list_first>
   10f36:	83 c4 10             	add    $0x10,%esp
   10f39:	56                   	push   %esi
   10f3a:	53                   	push   %ebx
   10f3b:	50                   	push   %eax
   10f3c:	68 38 1e 01 00       	push   $0x11e38
   10f41:	e8 60 0b 00 00       	call   11aa6 <log_printf>
   10f46:	83 c4 10             	add    $0x10,%esp
        list_first(&list),list_last(&list),list_count(&list));

    list_init(&list);
   10f49:	83 ec 0c             	sub    $0xc,%esp
   10f4c:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10f4f:	50                   	push   %eax
   10f50:	e8 b9 08 00 00       	call   1180e <list_init>
   10f55:	83 c4 10             	add    $0x10,%esp

    for(int i = 0; i < 5; i++) {
   10f58:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10f5f:	eb 3f                	jmp    10fa0 <list_test+0xfd>
        list_node_t * node = nodes + i;
   10f61:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f64:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10f6b:	8d 45 94             	lea    -0x6c(%ebp),%eax
   10f6e:	01 d0                	add    %edx,%eax
   10f70:	89 45 cc             	mov    %eax,-0x34(%ebp)
        log_printf("insert first to last: %d,0x%x",i,(uint32_t)node);
   10f73:	8b 45 cc             	mov    -0x34(%ebp),%eax
   10f76:	83 ec 04             	sub    $0x4,%esp
   10f79:	50                   	push   %eax
   10f7a:	ff 75 f0             	pushl  -0x10(%ebp)
   10f7d:	68 19 1e 01 00       	push   $0x11e19
   10f82:	e8 1f 0b 00 00       	call   11aa6 <log_printf>
   10f87:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list,node);
   10f8a:	83 ec 08             	sub    $0x8,%esp
   10f8d:	ff 75 cc             	pushl  -0x34(%ebp)
   10f90:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10f93:	50                   	push   %eax
   10f94:	e8 fa 08 00 00       	call   11893 <list_insert_last>
   10f99:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < 5; i++) {
   10f9c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10fa0:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   10fa4:	7e bb                	jle    10f61 <list_test+0xbe>
    }
    log_printf("list: firts=0x%x,last=0x%x,count=%d",
   10fa6:	83 ec 0c             	sub    $0xc,%esp
   10fa9:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10fac:	50                   	push   %eax
   10fad:	e8 76 fe ff ff       	call   10e28 <list_count>
   10fb2:	83 c4 10             	add    $0x10,%esp
   10fb5:	89 c6                	mov    %eax,%esi
   10fb7:	83 ec 0c             	sub    $0xc,%esp
   10fba:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10fbd:	50                   	push   %eax
   10fbe:	e8 7a fe ff ff       	call   10e3d <list_last>
   10fc3:	83 c4 10             	add    $0x10,%esp
   10fc6:	89 c3                	mov    %eax,%ebx
   10fc8:	83 ec 0c             	sub    $0xc,%esp
   10fcb:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10fce:	50                   	push   %eax
   10fcf:	e8 5f fe ff ff       	call   10e33 <list_first>
   10fd4:	83 c4 10             	add    $0x10,%esp
   10fd7:	56                   	push   %esi
   10fd8:	53                   	push   %ebx
   10fd9:	50                   	push   %eax
   10fda:	68 38 1e 01 00       	push   $0x11e38
   10fdf:	e8 c2 0a 00 00       	call   11aa6 <log_printf>
   10fe4:	83 c4 10             	add    $0x10,%esp
        list_first(&list),list_last(&list),list_count(&list));
    
    //del first
    for (int i = 0; i < 5; i++) {
   10fe7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10fee:	eb 2d                	jmp    1101d <list_test+0x17a>
        list_node_t * node = list_remove_first(&list);
   10ff0:	83 ec 0c             	sub    $0xc,%esp
   10ff3:	8d 45 bc             	lea    -0x44(%ebp),%eax
   10ff6:	50                   	push   %eax
   10ff7:	e8 fb 08 00 00       	call   118f7 <list_remove_first>
   10ffc:	83 c4 10             	add    $0x10,%esp
   10fff:	89 45 d0             	mov    %eax,-0x30(%ebp)
        log_printf("remove first from list: %d, 0x%x", i, (uint32_t)node);
   11002:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11005:	83 ec 04             	sub    $0x4,%esp
   11008:	50                   	push   %eax
   11009:	ff 75 ec             	pushl  -0x14(%ebp)
   1100c:	68 5c 1e 01 00       	push   $0x11e5c
   11011:	e8 90 0a 00 00       	call   11aa6 <log_printf>
   11016:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11019:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1101d:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11021:	7e cd                	jle    10ff0 <list_test+0x14d>
    }
    log_printf("list: firts=0x%x,last=0x%x,count=%d",
   11023:	83 ec 0c             	sub    $0xc,%esp
   11026:	8d 45 bc             	lea    -0x44(%ebp),%eax
   11029:	50                   	push   %eax
   1102a:	e8 f9 fd ff ff       	call   10e28 <list_count>
   1102f:	83 c4 10             	add    $0x10,%esp
   11032:	89 c6                	mov    %eax,%esi
   11034:	83 ec 0c             	sub    $0xc,%esp
   11037:	8d 45 bc             	lea    -0x44(%ebp),%eax
   1103a:	50                   	push   %eax
   1103b:	e8 fd fd ff ff       	call   10e3d <list_last>
   11040:	83 c4 10             	add    $0x10,%esp
   11043:	89 c3                	mov    %eax,%ebx
   11045:	83 ec 0c             	sub    $0xc,%esp
   11048:	8d 45 bc             	lea    -0x44(%ebp),%eax
   1104b:	50                   	push   %eax
   1104c:	e8 e2 fd ff ff       	call   10e33 <list_first>
   11051:	83 c4 10             	add    $0x10,%esp
   11054:	56                   	push   %esi
   11055:	53                   	push   %ebx
   11056:	50                   	push   %eax
   11057:	68 38 1e 01 00       	push   $0x11e38
   1105c:	e8 45 0a 00 00       	call   11aa6 <log_printf>
   11061:	83 c4 10             	add    $0x10,%esp
        list_first(&list),list_last(&list),list_count(&list));

    for(int i = 0; i < 5; i++) {
   11064:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1106b:	eb 3f                	jmp    110ac <list_test+0x209>
        list_node_t * node = nodes + i;
   1106d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11070:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11077:	8d 45 94             	lea    -0x6c(%ebp),%eax
   1107a:	01 d0                	add    %edx,%eax
   1107c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("insert first to last: %d,0x%x",i,(uint32_t)node);
   1107f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11082:	83 ec 04             	sub    $0x4,%esp
   11085:	50                   	push   %eax
   11086:	ff 75 e8             	pushl  -0x18(%ebp)
   11089:	68 19 1e 01 00       	push   $0x11e19
   1108e:	e8 13 0a 00 00       	call   11aa6 <log_printf>
   11093:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list,node);
   11096:	83 ec 08             	sub    $0x8,%esp
   11099:	ff 75 d4             	pushl  -0x2c(%ebp)
   1109c:	8d 45 bc             	lea    -0x44(%ebp),%eax
   1109f:	50                   	push   %eax
   110a0:	e8 ee 07 00 00       	call   11893 <list_insert_last>
   110a5:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < 5; i++) {
   110a8:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   110ac:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   110b0:	7e bb                	jle    1106d <list_test+0x1ca>
    }
    log_printf("list: firts=0x%x,last=0x%x,count=%d",
   110b2:	83 ec 0c             	sub    $0xc,%esp
   110b5:	8d 45 bc             	lea    -0x44(%ebp),%eax
   110b8:	50                   	push   %eax
   110b9:	e8 6a fd ff ff       	call   10e28 <list_count>
   110be:	83 c4 10             	add    $0x10,%esp
   110c1:	89 c6                	mov    %eax,%esi
   110c3:	83 ec 0c             	sub    $0xc,%esp
   110c6:	8d 45 bc             	lea    -0x44(%ebp),%eax
   110c9:	50                   	push   %eax
   110ca:	e8 6e fd ff ff       	call   10e3d <list_last>
   110cf:	83 c4 10             	add    $0x10,%esp
   110d2:	89 c3                	mov    %eax,%ebx
   110d4:	83 ec 0c             	sub    $0xc,%esp
   110d7:	8d 45 bc             	lea    -0x44(%ebp),%eax
   110da:	50                   	push   %eax
   110db:	e8 53 fd ff ff       	call   10e33 <list_first>
   110e0:	83 c4 10             	add    $0x10,%esp
   110e3:	56                   	push   %esi
   110e4:	53                   	push   %ebx
   110e5:	50                   	push   %eax
   110e6:	68 38 1e 01 00       	push   $0x11e38
   110eb:	e8 b6 09 00 00       	call   11aa6 <log_printf>
   110f0:	83 c4 10             	add    $0x10,%esp
        list_first(&list),list_last(&list),list_count(&list));
// del 
    for (int i = 0; i < 5; i++) {
   110f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   110fa:	eb 3f                	jmp    1113b <list_test+0x298>
        list_node_t * node = nodes + i;
   110fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11106:	8d 45 94             	lea    -0x6c(%ebp),%eax
   11109:	01 d0                	add    %edx,%eax
   1110b:	89 45 d8             	mov    %eax,-0x28(%ebp)
        log_printf("remove first from list: %d, 0x%x", i, (uint32_t)node);
   1110e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11111:	83 ec 04             	sub    $0x4,%esp
   11114:	50                   	push   %eax
   11115:	ff 75 e4             	pushl  -0x1c(%ebp)
   11118:	68 5c 1e 01 00       	push   $0x11e5c
   1111d:	e8 84 09 00 00       	call   11aa6 <log_printf>
   11122:	83 c4 10             	add    $0x10,%esp
        list_remove(&list, node);
   11125:	83 ec 08             	sub    $0x8,%esp
   11128:	ff 75 d8             	pushl  -0x28(%ebp)
   1112b:	8d 45 bc             	lea    -0x44(%ebp),%eax
   1112e:	50                   	push   %eax
   1112f:	e8 3c 08 00 00       	call   11970 <list_remove>
   11134:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11137:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
   1113b:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
   1113f:	7e bb                	jle    110fc <list_test+0x259>
    }
    log_printf("list: first=0x%x, last=0x%x, count=%d", 
   11141:	83 ec 0c             	sub    $0xc,%esp
   11144:	8d 45 bc             	lea    -0x44(%ebp),%eax
   11147:	50                   	push   %eax
   11148:	e8 db fc ff ff       	call   10e28 <list_count>
   1114d:	83 c4 10             	add    $0x10,%esp
   11150:	89 c6                	mov    %eax,%esi
   11152:	83 ec 0c             	sub    $0xc,%esp
   11155:	8d 45 bc             	lea    -0x44(%ebp),%eax
   11158:	50                   	push   %eax
   11159:	e8 df fc ff ff       	call   10e3d <list_last>
   1115e:	83 c4 10             	add    $0x10,%esp
   11161:	89 c3                	mov    %eax,%ebx
   11163:	83 ec 0c             	sub    $0xc,%esp
   11166:	8d 45 bc             	lea    -0x44(%ebp),%eax
   11169:	50                   	push   %eax
   1116a:	e8 c4 fc ff ff       	call   10e33 <list_first>
   1116f:	83 c4 10             	add    $0x10,%esp
   11172:	56                   	push   %esi
   11173:	53                   	push   %ebx
   11174:	50                   	push   %eax
   11175:	68 80 1e 01 00       	push   $0x11e80
   1117a:	e8 27 09 00 00       	call   11aa6 <log_printf>
   1117f:	83 c4 10             	add    $0x10,%esp
        list_first(&list), list_last(&list), list_count(&list));

    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   11182:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%ebp)
   11189:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%ebp)
   11190:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   11197:	c7 45 88 56 34 12 00 	movl   $0x123456,-0x78(%ebp)

    list_node_t * v_node = &v.node;
   1119e:	8d 45 88             	lea    -0x78(%ebp),%eax
   111a1:	83 c0 04             	add    $0x4,%eax
   111a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct type_t * p = list_node_parent(v_node,struct type_t,node);
   111a7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   111ab:	74 08                	je     111b5 <list_test+0x312>
   111ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
   111b0:	83 e8 04             	sub    $0x4,%eax
   111b3:	eb 05                	jmp    111ba <list_test+0x317>
   111b5:	b8 00 00 00 00       	mov    $0x0,%eax
   111ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if(p->i == 0x123456) {
   111bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
   111c0:	8b 00                	mov    (%eax),%eax
   111c2:	3d 56 34 12 00       	cmp    $0x123456,%eax
   111c7:	75 10                	jne    111d9 <list_test+0x336>
        log_printf("ERROR");
   111c9:	83 ec 0c             	sub    $0xc,%esp
   111cc:	68 a6 1e 01 00       	push   $0x11ea6
   111d1:	e8 d0 08 00 00       	call   11aa6 <log_printf>
   111d6:	83 c4 10             	add    $0x10,%esp
    }

}
   111d9:	90                   	nop
   111da:	8d 65 f8             	lea    -0x8(%ebp),%esp
   111dd:	5b                   	pop    %ebx
   111de:	5e                   	pop    %esi
   111df:	5d                   	pop    %ebp
   111e0:	c3                   	ret    

000111e1 <init_main>:


void init_main(void) {
   111e1:	55                   	push   %ebp
   111e2:	89 e5                	mov    %esp,%ebp
   111e4:	83 ec 18             	sub    $0x18,%esp

    list_test();
   111e7:	e8 b7 fc ff ff       	call   10ea3 <list_test>
    log_printf("kernel is running....");
   111ec:	83 ec 0c             	sub    $0xc,%esp
   111ef:	68 ac 1e 01 00       	push   $0x11eac
   111f4:	e8 ad 08 00 00       	call   11aa6 <log_printf>
   111f9:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   111fc:	83 ec 04             	sub    $0x4,%esp
   111ff:	68 c2 1e 01 00       	push   $0x11ec2
   11204:	68 cb 1e 01 00       	push   $0x11ecb
   11209:	68 d1 1e 01 00       	push   $0x11ed1
   1120e:	e8 93 08 00 00       	call   11aa6 <log_printf>
   11213:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   11216:	83 ec 0c             	sub    $0xc,%esp
   11219:	6a 61                	push   $0x61
   1121b:	68 45 23 01 00       	push   $0x12345
   11220:	6a 85                	push   $0xffffff85
   11222:	68 40 e2 01 00       	push   $0x1e240
   11227:	68 e0 1e 01 00       	push   $0x11ee0
   1122c:	e8 75 08 00 00       	call   11aa6 <log_printf>
   11231:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, (uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   11234:	ba 00 3c 01 00       	mov    $0x13c00,%edx
   11239:	b8 65 0e 01 00       	mov    $0x10e65,%eax
   1123e:	83 ec 04             	sub    $0x4,%esp
   11241:	52                   	push   %edx
   11242:	50                   	push   %eax
   11243:	68 00 3c 01 00       	push   $0x13c00
   11248:	e8 63 f1 ff ff       	call   103b0 <task_init>
   1124d:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0,0);
   11250:	83 ec 04             	sub    $0x4,%esp
   11253:	6a 00                	push   $0x0
   11255:	6a 00                	push   $0x0
   11257:	68 80 2b 01 00       	push   $0x12b80
   1125c:	e8 4f f1 ff ff       	call   103b0 <task_init>
   11261:	83 c4 10             	add    $0x10,%esp
    write_tr(first_task.tss_sel); // 初始化任务寄存器 task register
   11264:	a1 e8 2b 01 00       	mov    0x12be8,%eax
   11269:	0f b7 c0             	movzwl %ax,%eax
   1126c:	83 ec 0c             	sub    $0xc,%esp
   1126f:	50                   	push   %eax
   11270:	e8 9c fb ff ff       	call   10e11 <write_tr>
   11275:	83 c4 10             	add    $0x10,%esp

    int count = 0;
   11278:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int main: %d",count++);
   1127f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11282:	8d 50 01             	lea    0x1(%eax),%edx
   11285:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11288:	83 ec 08             	sub    $0x8,%esp
   1128b:	50                   	push   %eax
   1128c:	68 ec 1e 01 00       	push   $0x11eec
   11291:	e8 10 08 00 00       	call   11aa6 <log_printf>
   11296:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&first_task,&init_task);
   11299:	83 ec 08             	sub    $0x8,%esp
   1129c:	68 00 3c 01 00       	push   $0x13c00
   112a1:	68 80 2b 01 00       	push   $0x12b80
   112a6:	e8 ea f0 ff ff       	call   10395 <task_switch_from_to>
   112ab:	83 c4 10             	add    $0x10,%esp
        log_printf("int main: %d",count++);
   112ae:	eb cf                	jmp    1127f <init_main+0x9e>

000112b0 <hlt>:
static inline void hlt (void) {
   112b0:	55                   	push   %ebp
   112b1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   112b3:	f4                   	hlt    
}
   112b4:	90                   	nop
   112b5:	5d                   	pop    %ebp
   112b6:	c3                   	ret    

000112b7 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   112b7:	55                   	push   %ebp
   112b8:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   112ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112be:	74 3b                	je     112fb <kernel_strcpy+0x44>
   112c0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112c4:	74 35                	je     112fb <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   112c6:	eb 17                	jmp    112df <kernel_strcpy+0x28>
        *dest++ = *src++;
   112c8:	8b 55 0c             	mov    0xc(%ebp),%edx
   112cb:	8d 42 01             	lea    0x1(%edx),%eax
   112ce:	89 45 0c             	mov    %eax,0xc(%ebp)
   112d1:	8b 45 08             	mov    0x8(%ebp),%eax
   112d4:	8d 48 01             	lea    0x1(%eax),%ecx
   112d7:	89 4d 08             	mov    %ecx,0x8(%ebp)
   112da:	0f b6 12             	movzbl (%edx),%edx
   112dd:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   112df:	8b 45 08             	mov    0x8(%ebp),%eax
   112e2:	0f b6 00             	movzbl (%eax),%eax
   112e5:	84 c0                	test   %al,%al
   112e7:	74 0a                	je     112f3 <kernel_strcpy+0x3c>
   112e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ec:	0f b6 00             	movzbl (%eax),%eax
   112ef:	84 c0                	test   %al,%al
   112f1:	75 d5                	jne    112c8 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   112f3:	8b 45 08             	mov    0x8(%ebp),%eax
   112f6:	c6 00 00             	movb   $0x0,(%eax)
   112f9:	eb 01                	jmp    112fc <kernel_strcpy+0x45>
        return;
   112fb:	90                   	nop
}
   112fc:	5d                   	pop    %ebp
   112fd:	c3                   	ret    

000112fe <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   112fe:	55                   	push   %ebp
   112ff:	89 e5                	mov    %esp,%ebp
   11301:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   11304:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11308:	74 61                	je     1136b <kernel_strncpy+0x6d>
   1130a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1130e:	74 5b                	je     1136b <kernel_strncpy+0x6d>
   11310:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11314:	74 55                	je     1136b <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   11316:	8b 45 08             	mov    0x8(%ebp),%eax
   11319:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   1131c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1131f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   11322:	eb 17                	jmp    1133b <kernel_strncpy+0x3d>
        *d++ = *s++;
   11324:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11327:	8d 42 01             	lea    0x1(%edx),%eax
   1132a:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1132d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11330:	8d 48 01             	lea    0x1(%eax),%ecx
   11333:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11336:	0f b6 12             	movzbl (%edx),%edx
   11339:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1133b:	8b 45 10             	mov    0x10(%ebp),%eax
   1133e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11341:	89 55 10             	mov    %edx,0x10(%ebp)
   11344:	85 c0                	test   %eax,%eax
   11346:	7e 0a                	jle    11352 <kernel_strncpy+0x54>
   11348:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1134b:	0f b6 00             	movzbl (%eax),%eax
   1134e:	84 c0                	test   %al,%al
   11350:	75 d2                	jne    11324 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   11352:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11356:	75 0b                	jne    11363 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11358:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1135b:	83 e8 01             	sub    $0x1,%eax
   1135e:	c6 00 00             	movb   $0x0,(%eax)
   11361:	eb 09                	jmp    1136c <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   11363:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11366:	c6 00 00             	movb   $0x0,(%eax)
   11369:	eb 01                	jmp    1136c <kernel_strncpy+0x6e>
        return;
   1136b:	90                   	nop
    }
}
   1136c:	c9                   	leave  
   1136d:	c3                   	ret    

0001136e <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   1136e:	55                   	push   %ebp
   1136f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   11371:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11375:	74 06                	je     1137d <kernel_strncmp+0xf>
   11377:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1137b:	75 0f                	jne    1138c <kernel_strncmp+0x1e>
        return -1;
   1137d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11382:	eb 62                	jmp    113e6 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   11384:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11388:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   1138c:	8b 45 08             	mov    0x8(%ebp),%eax
   1138f:	0f b6 00             	movzbl (%eax),%eax
   11392:	84 c0                	test   %al,%al
   11394:	74 20                	je     113b6 <kernel_strncmp+0x48>
   11396:	8b 45 0c             	mov    0xc(%ebp),%eax
   11399:	0f b6 00             	movzbl (%eax),%eax
   1139c:	84 c0                	test   %al,%al
   1139e:	74 16                	je     113b6 <kernel_strncmp+0x48>
   113a0:	8b 45 08             	mov    0x8(%ebp),%eax
   113a3:	0f b6 10             	movzbl (%eax),%edx
   113a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   113a9:	0f b6 00             	movzbl (%eax),%eax
   113ac:	38 c2                	cmp    %al,%dl
   113ae:	75 06                	jne    113b6 <kernel_strncmp+0x48>
   113b0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113b4:	75 ce                	jne    11384 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   113b6:	8b 45 08             	mov    0x8(%ebp),%eax
   113b9:	0f b6 00             	movzbl (%eax),%eax
   113bc:	84 c0                	test   %al,%al
   113be:	74 21                	je     113e1 <kernel_strncmp+0x73>
   113c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113c3:	0f b6 00             	movzbl (%eax),%eax
   113c6:	84 c0                	test   %al,%al
   113c8:	74 17                	je     113e1 <kernel_strncmp+0x73>
   113ca:	8b 45 08             	mov    0x8(%ebp),%eax
   113cd:	0f b6 10             	movzbl (%eax),%edx
   113d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d3:	0f b6 00             	movzbl (%eax),%eax
   113d6:	38 c2                	cmp    %al,%dl
   113d8:	74 07                	je     113e1 <kernel_strncmp+0x73>
   113da:	b8 01 00 00 00       	mov    $0x1,%eax
   113df:	eb 05                	jmp    113e6 <kernel_strncmp+0x78>
   113e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   113e6:	5d                   	pop    %ebp
   113e7:	c3                   	ret    

000113e8 <kernel_strlen>:
int kernel_strlen(const char * str){
   113e8:	55                   	push   %ebp
   113e9:	89 e5                	mov    %esp,%ebp
   113eb:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   113ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113f2:	75 07                	jne    113fb <kernel_strlen+0x13>
        return 0;
   113f4:	b8 00 00 00 00       	mov    $0x0,%eax
   113f9:	eb 26                	jmp    11421 <kernel_strlen+0x39>
    }

    const char * c = str;
   113fb:	8b 45 08             	mov    0x8(%ebp),%eax
   113fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11401:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11408:	eb 04                	jmp    1140e <kernel_strlen+0x26>
        len++;
   1140a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   1140e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11411:	8d 50 01             	lea    0x1(%eax),%edx
   11414:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11417:	0f b6 00             	movzbl (%eax),%eax
   1141a:	84 c0                	test   %al,%al
   1141c:	75 ec                	jne    1140a <kernel_strlen+0x22>
    }
    return len;
   1141e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11421:	c9                   	leave  
   11422:	c3                   	ret    

00011423 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   11423:	55                   	push   %ebp
   11424:	89 e5                	mov    %esp,%ebp
   11426:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11429:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1142d:	74 40                	je     1146f <kernel_memcpy+0x4c>
   1142f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11433:	74 3a                	je     1146f <kernel_memcpy+0x4c>
   11435:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11439:	74 34                	je     1146f <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   1143b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1143e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   11441:	8b 45 08             	mov    0x8(%ebp),%eax
   11444:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11447:	eb 17                	jmp    11460 <kernel_memcpy+0x3d>
        *d++ = *s++;
   11449:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1144c:	8d 42 01             	lea    0x1(%edx),%eax
   1144f:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11452:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11455:	8d 48 01             	lea    0x1(%eax),%ecx
   11458:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1145b:	0f b6 12             	movzbl (%edx),%edx
   1145e:	88 10                	mov    %dl,(%eax)
    while(size--){
   11460:	8b 45 10             	mov    0x10(%ebp),%eax
   11463:	8d 50 ff             	lea    -0x1(%eax),%edx
   11466:	89 55 10             	mov    %edx,0x10(%ebp)
   11469:	85 c0                	test   %eax,%eax
   1146b:	75 dc                	jne    11449 <kernel_memcpy+0x26>
   1146d:	eb 01                	jmp    11470 <kernel_memcpy+0x4d>
        return;
   1146f:	90                   	nop
    }

}
   11470:	c9                   	leave  
   11471:	c3                   	ret    

00011472 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   11472:	55                   	push   %ebp
   11473:	89 e5                	mov    %esp,%ebp
   11475:	83 ec 14             	sub    $0x14,%esp
   11478:	8b 45 0c             	mov    0xc(%ebp),%eax
   1147b:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   1147e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11482:	74 2c                	je     114b0 <kernel_memset+0x3e>
   11484:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11488:	74 26                	je     114b0 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   1148a:	8b 45 08             	mov    0x8(%ebp),%eax
   1148d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   11490:	eb 0f                	jmp    114a1 <kernel_memset+0x2f>
       *d++ = v; 
   11492:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11495:	8d 50 01             	lea    0x1(%eax),%edx
   11498:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1149b:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1149f:	88 10                	mov    %dl,(%eax)
    while(size--){
   114a1:	8b 45 10             	mov    0x10(%ebp),%eax
   114a4:	8d 50 ff             	lea    -0x1(%eax),%edx
   114a7:	89 55 10             	mov    %edx,0x10(%ebp)
   114aa:	85 c0                	test   %eax,%eax
   114ac:	75 e4                	jne    11492 <kernel_memset+0x20>
   114ae:	eb 01                	jmp    114b1 <kernel_memset+0x3f>
        return;
   114b0:	90                   	nop
    }
}
   114b1:	c9                   	leave  
   114b2:	c3                   	ret    

000114b3 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   114b3:	55                   	push   %ebp
   114b4:	89 e5                	mov    %esp,%ebp
   114b6:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   114b9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   114bd:	74 0c                	je     114cb <kernel_memcmp+0x18>
   114bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114c3:	74 06                	je     114cb <kernel_memcmp+0x18>
   114c5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   114c9:	75 07                	jne    114d2 <kernel_memcmp+0x1f>
        return -1;
   114cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   114d0:	eb 43                	jmp    11515 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   114d2:	8b 45 08             	mov    0x8(%ebp),%eax
   114d5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   114d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   114db:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   114de:	eb 23                	jmp    11503 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   114e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114e3:	8d 50 01             	lea    0x1(%eax),%edx
   114e6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114e9:	0f b6 08             	movzbl (%eax),%ecx
   114ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114ef:	8d 50 01             	lea    0x1(%eax),%edx
   114f2:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114f5:	0f b6 00             	movzbl (%eax),%eax
   114f8:	38 c1                	cmp    %al,%cl
   114fa:	74 07                	je     11503 <kernel_memcmp+0x50>
            return -1;
   114fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11501:	eb 12                	jmp    11515 <kernel_memcmp+0x62>
    while(size--){
   11503:	8b 45 10             	mov    0x10(%ebp),%eax
   11506:	8d 50 ff             	lea    -0x1(%eax),%edx
   11509:	89 55 10             	mov    %edx,0x10(%ebp)
   1150c:	85 c0                	test   %eax,%eax
   1150e:	75 d0                	jne    114e0 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11510:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11515:	c9                   	leave  
   11516:	c3                   	ret    

00011517 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   11517:	55                   	push   %ebp
   11518:	89 e5                	mov    %esp,%ebp
   1151a:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   1151d:	8d 45 10             	lea    0x10(%ebp),%eax
   11520:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   11523:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11526:	83 ec 04             	sub    $0x4,%esp
   11529:	50                   	push   %eax
   1152a:	ff 75 0c             	pushl  0xc(%ebp)
   1152d:	ff 75 08             	pushl  0x8(%ebp)
   11530:	e8 45 01 00 00       	call   1167a <kernel_vsprintf>
   11535:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11538:	90                   	nop
   11539:	c9                   	leave  
   1153a:	c3                   	ret    

0001153b <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   1153b:	55                   	push   %ebp
   1153c:	89 e5                	mov    %esp,%ebp
   1153e:	53                   	push   %ebx
   1153f:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11542:	8b 45 08             	mov    0x8(%ebp),%eax
   11545:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11548:	8b 45 0c             	mov    0xc(%ebp),%eax
   1154b:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   1154e:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11552:	74 1d                	je     11571 <kernel_itoa+0x36>
   11554:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11558:	74 17                	je     11571 <kernel_itoa+0x36>
   1155a:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1155e:	74 11                	je     11571 <kernel_itoa+0x36>
   11560:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11564:	74 0b                	je     11571 <kernel_itoa+0x36>
        *p = '\0';
   11566:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11569:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1156c:	e9 03 01 00 00       	jmp    11674 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11571:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11578:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1157c:	79 19                	jns    11597 <kernel_itoa+0x5c>
   1157e:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11582:	75 13                	jne    11597 <kernel_itoa+0x5c>
        *p++ = '-';
   11584:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11587:	8d 50 01             	lea    0x1(%eax),%edx
   1158a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1158d:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11590:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11597:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1159b:	74 3b                	je     115d8 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   1159d:	8b 0d 4c 1f 01 00    	mov    0x11f4c,%ecx
   115a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   115a6:	99                   	cltd   
   115a7:	f7 7d 10             	idivl  0x10(%ebp)
   115aa:	89 d0                	mov    %edx,%eax
   115ac:	83 c0 0f             	add    $0xf,%eax
   115af:	01 c8                	add    %ecx,%eax
   115b1:	0f b6 00             	movzbl (%eax),%eax
   115b4:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   115b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115ba:	8d 50 01             	lea    0x1(%eax),%edx
   115bd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   115c0:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   115c4:	88 10                	mov    %dl,(%eax)
            num /= base;
   115c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   115c9:	99                   	cltd   
   115ca:	f7 7d 10             	idivl  0x10(%ebp)
   115cd:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   115d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   115d4:	75 c7                	jne    1159d <kernel_itoa+0x62>
   115d6:	eb 4b                	jmp    11623 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   115d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   115db:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   115de:	8b 0d 4c 1f 01 00    	mov    0x11f4c,%ecx
   115e4:	8b 5d 10             	mov    0x10(%ebp),%ebx
   115e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115ea:	ba 00 00 00 00       	mov    $0x0,%edx
   115ef:	f7 f3                	div    %ebx
   115f1:	89 d0                	mov    %edx,%eax
   115f3:	83 c0 0f             	add    $0xf,%eax
   115f6:	01 c8                	add    %ecx,%eax
   115f8:	0f b6 00             	movzbl (%eax),%eax
   115fb:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   115fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11601:	8d 50 01             	lea    0x1(%eax),%edx
   11604:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11607:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1160b:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   1160d:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11610:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11613:	ba 00 00 00 00       	mov    $0x0,%edx
   11618:	f7 f3                	div    %ebx
   1161a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   1161d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11621:	75 bb                	jne    115de <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11623:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11626:	8d 50 ff             	lea    -0x1(%eax),%edx
   11629:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1162c:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   1162f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11633:	74 08                	je     1163d <kernel_itoa+0x102>
   11635:	8b 45 08             	mov    0x8(%ebp),%eax
   11638:	83 c0 01             	add    $0x1,%eax
   1163b:	eb 03                	jmp    11640 <kernel_itoa+0x105>
   1163d:	8b 45 08             	mov    0x8(%ebp),%eax
   11640:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   11643:	eb 27                	jmp    1166c <kernel_itoa+0x131>
        char ch = *start;
   11645:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11648:	0f b6 00             	movzbl (%eax),%eax
   1164b:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   1164e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11651:	0f b6 10             	movzbl (%eax),%edx
   11654:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11657:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11659:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1165c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1165f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11662:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11666:	88 10                	mov    %dl,(%eax)
        start++;
   11668:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1166c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1166f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11672:	72 d1                	jb     11645 <kernel_itoa+0x10a>
    }
}
   11674:	83 c4 20             	add    $0x20,%esp
   11677:	5b                   	pop    %ebx
   11678:	5d                   	pop    %ebp
   11679:	c3                   	ret    

0001167a <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   1167a:	55                   	push   %ebp
   1167b:	89 e5                	mov    %esp,%ebp
   1167d:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   11680:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11687:	8b 45 08             	mov    0x8(%ebp),%eax
   1168a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   1168d:	e9 17 01 00 00       	jmp    117a9 <kernel_vsprintf+0x12f>
        switch(state) {
   11692:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11695:	85 c0                	test   %eax,%eax
   11697:	74 0a                	je     116a3 <kernel_vsprintf+0x29>
   11699:	83 f8 01             	cmp    $0x1,%eax
   1169c:	74 2b                	je     116c9 <kernel_vsprintf+0x4f>
   1169e:	e9 06 01 00 00       	jmp    117a9 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   116a3:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   116a7:	75 0c                	jne    116b5 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   116a9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   116b0:	e9 f4 00 00 00       	jmp    117a9 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   116b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   116b8:	8d 50 01             	lea    0x1(%eax),%edx
   116bb:	89 55 f8             	mov    %edx,-0x8(%ebp)
   116be:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   116c2:	88 10                	mov    %dl,(%eax)
                }
                break;
   116c4:	e9 e0 00 00 00       	jmp    117a9 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   116c9:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   116cd:	75 47                	jne    11716 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   116cf:	8b 45 10             	mov    0x10(%ebp),%eax
   116d2:	8d 50 04             	lea    0x4(%eax),%edx
   116d5:	89 55 10             	mov    %edx,0x10(%ebp)
   116d8:	8b 00                	mov    (%eax),%eax
   116da:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   116dd:	ff 75 f4             	pushl  -0xc(%ebp)
   116e0:	e8 03 fd ff ff       	call   113e8 <kernel_strlen>
   116e5:	83 c4 04             	add    $0x4,%esp
   116e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   116eb:	eb 17                	jmp    11704 <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   116ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
   116f0:	8d 42 01             	lea    0x1(%edx),%eax
   116f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   116f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   116f9:	8d 48 01             	lea    0x1(%eax),%ecx
   116fc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   116ff:	0f b6 12             	movzbl (%edx),%edx
   11702:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   11704:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11707:	8d 50 ff             	lea    -0x1(%eax),%edx
   1170a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1170d:	85 c0                	test   %eax,%eax
   1170f:	75 dc                	jne    116ed <kernel_vsprintf+0x73>
   11711:	e9 8b 00 00 00       	jmp    117a1 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   11716:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1171a:	75 2e                	jne    1174a <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   1171c:	8b 45 10             	mov    0x10(%ebp),%eax
   1171f:	8d 50 04             	lea    0x4(%eax),%edx
   11722:	89 55 10             	mov    %edx,0x10(%ebp)
   11725:	8b 00                	mov    (%eax),%eax
   11727:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   1172a:	6a 0a                	push   $0xa
   1172c:	ff 75 e4             	pushl  -0x1c(%ebp)
   1172f:	ff 75 f8             	pushl  -0x8(%ebp)
   11732:	e8 04 fe ff ff       	call   1153b <kernel_itoa>
   11737:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   1173a:	ff 75 f8             	pushl  -0x8(%ebp)
   1173d:	e8 a6 fc ff ff       	call   113e8 <kernel_strlen>
   11742:	83 c4 04             	add    $0x4,%esp
   11745:	01 45 f8             	add    %eax,-0x8(%ebp)
   11748:	eb 57                	jmp    117a1 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   1174a:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1174e:	75 2e                	jne    1177e <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   11750:	8b 45 10             	mov    0x10(%ebp),%eax
   11753:	8d 50 04             	lea    0x4(%eax),%edx
   11756:	89 55 10             	mov    %edx,0x10(%ebp)
   11759:	8b 00                	mov    (%eax),%eax
   1175b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   1175e:	6a 10                	push   $0x10
   11760:	ff 75 e8             	pushl  -0x18(%ebp)
   11763:	ff 75 f8             	pushl  -0x8(%ebp)
   11766:	e8 d0 fd ff ff       	call   1153b <kernel_itoa>
   1176b:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   1176e:	ff 75 f8             	pushl  -0x8(%ebp)
   11771:	e8 72 fc ff ff       	call   113e8 <kernel_strlen>
   11776:	83 c4 04             	add    $0x4,%esp
   11779:	01 45 f8             	add    %eax,-0x8(%ebp)
   1177c:	eb 23                	jmp    117a1 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   1177e:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11782:	75 1d                	jne    117a1 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   11784:	8b 45 10             	mov    0x10(%ebp),%eax
   11787:	8d 50 04             	lea    0x4(%eax),%edx
   1178a:	89 55 10             	mov    %edx,0x10(%ebp)
   1178d:	8b 00                	mov    (%eax),%eax
   1178f:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11792:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11795:	8d 50 01             	lea    0x1(%eax),%edx
   11798:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1179b:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1179f:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   117a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   117a8:	90                   	nop
    while ((ch = *fmt++)) {
   117a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   117ac:	8d 50 01             	lea    0x1(%eax),%edx
   117af:	89 55 0c             	mov    %edx,0xc(%ebp)
   117b2:	0f b6 00             	movzbl (%eax),%eax
   117b5:	88 45 ef             	mov    %al,-0x11(%ebp)
   117b8:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   117bc:	0f 85 d0 fe ff ff    	jne    11692 <kernel_vsprintf+0x18>
        }
    }
}
   117c2:	90                   	nop
   117c3:	c9                   	leave  
   117c4:	c3                   	ret    

000117c5 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   117c5:	55                   	push   %ebp
   117c6:	89 e5                	mov    %esp,%ebp
   117c8:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   117cb:	83 ec 08             	sub    $0x8,%esp
   117ce:	ff 75 14             	pushl  0x14(%ebp)
   117d1:	68 fc 1e 01 00       	push   $0x11efc
   117d6:	e8 cb 02 00 00       	call   11aa6 <log_printf>
   117db:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   117de:	ff 75 10             	pushl  0x10(%ebp)
   117e1:	ff 75 0c             	pushl  0xc(%ebp)
   117e4:	ff 75 08             	pushl  0x8(%ebp)
   117e7:	68 0e 1f 01 00       	push   $0x11f0e
   117ec:	e8 b5 02 00 00       	call   11aa6 <log_printf>
   117f1:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   117f4:	e8 b7 fa ff ff       	call   112b0 <hlt>
   117f9:	eb f9                	jmp    117f4 <panic+0x2f>

000117fb <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   117fb:	55                   	push   %ebp
   117fc:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   117fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11801:	8b 40 08             	mov    0x8(%eax),%eax
   11804:	85 c0                	test   %eax,%eax
   11806:	0f 94 c0             	sete   %al
   11809:	0f b6 c0             	movzbl %al,%eax
}
   1180c:	5d                   	pop    %ebp
   1180d:	c3                   	ret    

0001180e <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   1180e:	55                   	push   %ebp
   1180f:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11811:	8b 45 08             	mov    0x8(%ebp),%eax
   11814:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1181b:	8b 45 08             	mov    0x8(%ebp),%eax
   1181e:	8b 50 04             	mov    0x4(%eax),%edx
   11821:	8b 45 08             	mov    0x8(%ebp),%eax
   11824:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11826:	8b 45 08             	mov    0x8(%ebp),%eax
   11829:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11830:	90                   	nop
   11831:	5d                   	pop    %ebp
   11832:	c3                   	ret    

00011833 <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   11833:	55                   	push   %ebp
   11834:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   11836:	8b 45 08             	mov    0x8(%ebp),%eax
   11839:	8b 10                	mov    (%eax),%edx
   1183b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1183e:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11841:	8b 45 0c             	mov    0xc(%ebp),%eax
   11844:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1184a:	ff 75 08             	pushl  0x8(%ebp)
   1184d:	e8 a9 ff ff ff       	call   117fb <list_is_empty>
   11852:	83 c4 04             	add    $0x4,%esp
   11855:	85 c0                	test   %eax,%eax
   11857:	74 16                	je     1186f <list_insert_first+0x3c>
        list->first = list->last = node;
   11859:	8b 45 08             	mov    0x8(%ebp),%eax
   1185c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1185f:	89 50 04             	mov    %edx,0x4(%eax)
   11862:	8b 45 08             	mov    0x8(%ebp),%eax
   11865:	8b 50 04             	mov    0x4(%eax),%edx
   11868:	8b 45 08             	mov    0x8(%ebp),%eax
   1186b:	89 10                	mov    %edx,(%eax)
   1186d:	eb 12                	jmp    11881 <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   1186f:	8b 45 08             	mov    0x8(%ebp),%eax
   11872:	8b 00                	mov    (%eax),%eax
   11874:	8b 55 0c             	mov    0xc(%ebp),%edx
   11877:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11879:	8b 45 08             	mov    0x8(%ebp),%eax
   1187c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1187f:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11881:	8b 45 08             	mov    0x8(%ebp),%eax
   11884:	8b 40 08             	mov    0x8(%eax),%eax
   11887:	8d 50 01             	lea    0x1(%eax),%edx
   1188a:	8b 45 08             	mov    0x8(%ebp),%eax
   1188d:	89 50 08             	mov    %edx,0x8(%eax)
}
   11890:	90                   	nop
   11891:	c9                   	leave  
   11892:	c3                   	ret    

00011893 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11893:	55                   	push   %ebp
   11894:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11896:	8b 45 08             	mov    0x8(%ebp),%eax
   11899:	8b 50 04             	mov    0x4(%eax),%edx
   1189c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1189f:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   118a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   118a4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   118ab:	ff 75 08             	pushl  0x8(%ebp)
   118ae:	e8 48 ff ff ff       	call   117fb <list_is_empty>
   118b3:	83 c4 04             	add    $0x4,%esp
   118b6:	85 c0                	test   %eax,%eax
   118b8:	74 16                	je     118d0 <list_insert_last+0x3d>
        list->first = list->last = node;
   118ba:	8b 45 08             	mov    0x8(%ebp),%eax
   118bd:	8b 55 0c             	mov    0xc(%ebp),%edx
   118c0:	89 50 04             	mov    %edx,0x4(%eax)
   118c3:	8b 45 08             	mov    0x8(%ebp),%eax
   118c6:	8b 50 04             	mov    0x4(%eax),%edx
   118c9:	8b 45 08             	mov    0x8(%ebp),%eax
   118cc:	89 10                	mov    %edx,(%eax)
   118ce:	eb 15                	jmp    118e5 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   118d0:	8b 45 08             	mov    0x8(%ebp),%eax
   118d3:	8b 40 04             	mov    0x4(%eax),%eax
   118d6:	8b 55 0c             	mov    0xc(%ebp),%edx
   118d9:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   118dc:	8b 45 08             	mov    0x8(%ebp),%eax
   118df:	8b 55 0c             	mov    0xc(%ebp),%edx
   118e2:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   118e5:	8b 45 08             	mov    0x8(%ebp),%eax
   118e8:	8b 40 08             	mov    0x8(%eax),%eax
   118eb:	8d 50 01             	lea    0x1(%eax),%edx
   118ee:	8b 45 08             	mov    0x8(%ebp),%eax
   118f1:	89 50 08             	mov    %edx,0x8(%eax)
}
   118f4:	90                   	nop
   118f5:	c9                   	leave  
   118f6:	c3                   	ret    

000118f7 <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   118f7:	55                   	push   %ebp
   118f8:	89 e5                	mov    %esp,%ebp
   118fa:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   118fd:	ff 75 08             	pushl  0x8(%ebp)
   11900:	e8 f6 fe ff ff       	call   117fb <list_is_empty>
   11905:	83 c4 04             	add    $0x4,%esp
   11908:	85 c0                	test   %eax,%eax
   1190a:	74 07                	je     11913 <list_remove_first+0x1c>
        return (list_node_t *)0;
   1190c:	b8 00 00 00 00       	mov    $0x0,%eax
   11911:	eb 5b                	jmp    1196e <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   11913:	8b 45 08             	mov    0x8(%ebp),%eax
   11916:	8b 00                	mov    (%eax),%eax
   11918:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   1191b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1191e:	8b 50 04             	mov    0x4(%eax),%edx
   11921:	8b 45 08             	mov    0x8(%ebp),%eax
   11924:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   11926:	8b 45 08             	mov    0x8(%ebp),%eax
   11929:	8b 00                	mov    (%eax),%eax
   1192b:	85 c0                	test   %eax,%eax
   1192d:	75 0c                	jne    1193b <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   1192f:	8b 45 08             	mov    0x8(%ebp),%eax
   11932:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11939:	eb 0c                	jmp    11947 <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   1193b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1193e:	8b 40 04             	mov    0x4(%eax),%eax
   11941:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   11947:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1194a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11951:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11954:	8b 50 04             	mov    0x4(%eax),%edx
   11957:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1195a:	89 10                	mov    %edx,(%eax)
    list->count--;
   1195c:	8b 45 08             	mov    0x8(%ebp),%eax
   1195f:	8b 40 08             	mov    0x8(%eax),%eax
   11962:	8d 50 ff             	lea    -0x1(%eax),%edx
   11965:	8b 45 08             	mov    0x8(%ebp),%eax
   11968:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1196b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1196e:	c9                   	leave  
   1196f:	c3                   	ret    

00011970 <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   11970:	55                   	push   %ebp
   11971:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   11973:	8b 45 08             	mov    0x8(%ebp),%eax
   11976:	8b 00                	mov    (%eax),%eax
   11978:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1197b:	75 0b                	jne    11988 <list_remove+0x18>
        list->first = node->next;
   1197d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11980:	8b 50 04             	mov    0x4(%eax),%edx
   11983:	8b 45 08             	mov    0x8(%ebp),%eax
   11986:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   11988:	8b 45 08             	mov    0x8(%ebp),%eax
   1198b:	8b 40 04             	mov    0x4(%eax),%eax
   1198e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11991:	75 0b                	jne    1199e <list_remove+0x2e>
        list->last = node->pre;
   11993:	8b 45 0c             	mov    0xc(%ebp),%eax
   11996:	8b 10                	mov    (%eax),%edx
   11998:	8b 45 08             	mov    0x8(%ebp),%eax
   1199b:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   1199e:	8b 45 0c             	mov    0xc(%ebp),%eax
   119a1:	8b 00                	mov    (%eax),%eax
   119a3:	85 c0                	test   %eax,%eax
   119a5:	74 0e                	je     119b5 <list_remove+0x45>
        node->pre->next = node->next;
   119a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   119aa:	8b 00                	mov    (%eax),%eax
   119ac:	8b 55 0c             	mov    0xc(%ebp),%edx
   119af:	8b 52 04             	mov    0x4(%edx),%edx
   119b2:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   119b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   119b8:	8b 40 04             	mov    0x4(%eax),%eax
   119bb:	85 c0                	test   %eax,%eax
   119bd:	74 0d                	je     119cc <list_remove+0x5c>
        node->next->pre = node->pre;
   119bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   119c2:	8b 40 04             	mov    0x4(%eax),%eax
   119c5:	8b 55 0c             	mov    0xc(%ebp),%edx
   119c8:	8b 12                	mov    (%edx),%edx
   119ca:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   119cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   119cf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   119d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   119d9:	8b 50 04             	mov    0x4(%eax),%edx
   119dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   119df:	89 10                	mov    %edx,(%eax)

    list->count--;
   119e1:	8b 45 08             	mov    0x8(%ebp),%eax
   119e4:	8b 40 08             	mov    0x8(%eax),%eax
   119e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   119ea:	8b 45 08             	mov    0x8(%ebp),%eax
   119ed:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   119f0:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   119f3:	5d                   	pop    %ebp
   119f4:	c3                   	ret    

000119f5 <inb>:
static inline uint8_t inb(uint16_t port) {
   119f5:	55                   	push   %ebp
   119f6:	89 e5                	mov    %esp,%ebp
   119f8:	83 ec 14             	sub    $0x14,%esp
   119fb:	8b 45 08             	mov    0x8(%ebp),%eax
   119fe:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   11a02:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11a06:	89 c2                	mov    %eax,%edx
   11a08:	ec                   	in     (%dx),%al
   11a09:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11a0c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11a10:	c9                   	leave  
   11a11:	c3                   	ret    

00011a12 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11a12:	55                   	push   %ebp
   11a13:	89 e5                	mov    %esp,%ebp
   11a15:	83 ec 08             	sub    $0x8,%esp
   11a18:	8b 55 08             	mov    0x8(%ebp),%edx
   11a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a1e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11a22:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11a25:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11a29:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11a2d:	ee                   	out    %al,(%dx)
}
   11a2e:	90                   	nop
   11a2f:	c9                   	leave  
   11a30:	c3                   	ret    

00011a31 <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值

#define COM1_PORT 0x3f8

void log_init(void) {
   11a31:	55                   	push   %ebp
   11a32:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   11a34:	6a 00                	push   $0x0
   11a36:	68 f9 03 00 00       	push   $0x3f9
   11a3b:	e8 d2 ff ff ff       	call   11a12 <outb>
   11a40:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11a43:	68 80 00 00 00       	push   $0x80
   11a48:	68 fb 03 00 00       	push   $0x3fb
   11a4d:	e8 c0 ff ff ff       	call   11a12 <outb>
   11a52:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11a55:	6a 03                	push   $0x3
   11a57:	68 f8 03 00 00       	push   $0x3f8
   11a5c:	e8 b1 ff ff ff       	call   11a12 <outb>
   11a61:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11a64:	6a 00                	push   $0x0
   11a66:	68 f9 03 00 00       	push   $0x3f9
   11a6b:	e8 a2 ff ff ff       	call   11a12 <outb>
   11a70:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11a73:	6a 03                	push   $0x3
   11a75:	68 fb 03 00 00       	push   $0x3fb
   11a7a:	e8 93 ff ff ff       	call   11a12 <outb>
   11a7f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11a82:	68 c7 00 00 00       	push   $0xc7
   11a87:	68 fa 03 00 00       	push   $0x3fa
   11a8c:	e8 81 ff ff ff       	call   11a12 <outb>
   11a91:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11a94:	6a 0f                	push   $0xf
   11a96:	68 fc 03 00 00       	push   $0x3fc
   11a9b:	e8 72 ff ff ff       	call   11a12 <outb>
   11aa0:	83 c4 08             	add    $0x8,%esp

}
   11aa3:	90                   	nop
   11aa4:	c9                   	leave  
   11aa5:	c3                   	ret    

00011aa6 <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   11aa6:	55                   	push   %ebp
   11aa7:	89 e5                	mov    %esp,%ebp
   11aa9:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   11aaf:	83 ec 04             	sub    $0x4,%esp
   11ab2:	68 80 00 00 00       	push   $0x80
   11ab7:	6a 00                	push   $0x0
   11ab9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11abf:	50                   	push   %eax
   11ac0:	e8 ad f9 ff ff       	call   11472 <kernel_memset>
   11ac5:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   11ac8:	8d 45 0c             	lea    0xc(%ebp),%eax
   11acb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(str_buf,fmt,args);
   11ad1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11ad7:	83 ec 04             	sub    $0x4,%esp
   11ada:	50                   	push   %eax
   11adb:	ff 75 08             	pushl  0x8(%ebp)
   11ade:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11ae4:	50                   	push   %eax
   11ae5:	e8 90 fb ff ff       	call   1167a <kernel_vsprintf>
   11aea:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;
   11aed:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11af3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11af6:	eb 31                	jmp    11b29 <log_printf+0x83>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   11af8:	90                   	nop
   11af9:	83 ec 0c             	sub    $0xc,%esp
   11afc:	68 fd 03 00 00       	push   $0x3fd
   11b01:	e8 ef fe ff ff       	call   119f5 <inb>
   11b06:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   11b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b0c:	8d 50 01             	lea    0x1(%eax),%edx
   11b0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11b12:	0f b6 00             	movzbl (%eax),%eax
   11b15:	0f b6 c0             	movzbl %al,%eax
   11b18:	83 ec 08             	sub    $0x8,%esp
   11b1b:	50                   	push   %eax
   11b1c:	68 f8 03 00 00       	push   $0x3f8
   11b21:	e8 ec fe ff ff       	call   11a12 <outb>
   11b26:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b2c:	0f b6 00             	movzbl (%eax),%eax
   11b2f:	84 c0                	test   %al,%al
   11b31:	75 c5                	jne    11af8 <log_printf+0x52>
    }

// 变列
    outb(COM1_PORT,'\r');
   11b33:	83 ec 08             	sub    $0x8,%esp
   11b36:	6a 0d                	push   $0xd
   11b38:	68 f8 03 00 00       	push   $0x3f8
   11b3d:	e8 d0 fe ff ff       	call   11a12 <outb>
   11b42:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   11b45:	83 ec 08             	sub    $0x8,%esp
   11b48:	6a 0a                	push   $0xa
   11b4a:	68 f8 03 00 00       	push   $0x3f8
   11b4f:	e8 be fe ff ff       	call   11a12 <outb>
   11b54:	83 c4 10             	add    $0x10,%esp
   11b57:	90                   	nop
   11b58:	c9                   	leave  
   11b59:	c3                   	ret    
