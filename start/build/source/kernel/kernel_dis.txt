
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000021fc memsz 0x00007090 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e7f  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000378  00011e80  00011e80  00002e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  000121f8  000121f8  000031f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004e90  00012200  00012200  000031fc  2**5
                  ALLOC
  4 .debug_line   00000e6c  00000000  00000000  000031fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026cc  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7b  00000000  00000000  00006734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000140  00000000  00000000  000072b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000ba6  00000000  00000000  000073f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00007f96  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000dc4  00000000  00000000  00007fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011e80 l    d  .rodata	00000000 .rodata
000121f8 l    d  .data	00000000 .data
00012200 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	0000001b list_node_init
000102c0 l     F .text	0000000b list_node_next
000102cb l     F .text	0000000b list_count
000102d6 l     F .text	0000000a list_first
000102e0 l     F .text	00000007 hlt
000102e7 l     F .text	00000017 write_tr
00012200 l     O .bss	00000190 task_manager
000102fe l     F .text	00000114 tss_init
00011eec l     O .rodata	0000000a __func__.2094
00010564 l     F .text	0000000a idle_task_entry
000123a0 l     O .bss	00001000 idle_task_stack
00000000 l    df *ABS*	00000000 cpu.c
000108c3 l     F .text	00000028 lgdt
000108eb l     F .text	0000001a far_jump
000133a0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010ac4 l     F .text	0000001d inb
00010ae1 l     F .text	0000001f outb
00010b00 l     F .text	00000007 cli
00010b07 l     F .text	00000007 sti
00010b0e l     F .text	00000028 lidt
00010b36 l     F .text	00000007 hlt
00010b3d l     F .text	00000010 read_eflags
00010b4d l     F .text	0000000b write_eflags
00010b58 l     F .text	000000d9 dump_core_regs
00010c31 l     F .text	0000003e do_default_handler
00013ba0 l     O .bss	00000400 idt_table
00010e9f l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011296 l     F .text	0000001f outb
00013fa0 l     O .bss	00000004 sys_tick
000112dd l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00013fc0 l     O .bss	00001000 init_task_stack
00014fc0 l     O .bss	000000b4 init_task
00015074 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 sem.c
0001147b l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 klib.c
000115bf l     F .text	00000007 hlt
000121f8 l     O .data	00000004 num2ch.1907
00000000 l    df *ABS*	00000000 list.c
00011b0a l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011d04 l     F .text	0000001d inb
00011d21 l     F .text	0000001f outb
00011732 g     F .text	0000004f kernel_memcpy
00010673 g     F .text	0000000a task_current
00011237 g     F .text	0000000b irq_enable_global
00011ba2 g     F .text	00000064 list_insert_last
00010da3 g     F .text	0000001c do_handler_segment_not_present
000105d1 g     F .text	00000034 task_set_ready
00011781 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
00010a3c g     F .text	0000000b cpu_init
00011d40 g     F .text	00000075 log_init
000113b0 g     F .text	000000cb init_main
0001020c g       .text	00000000 exception_handler_alignment_check
000115c6 g     F .text	00000047 kernel_strcpy
0001111a g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010cfb g     F .text	0000001c do_handler_overflow
00010e2f g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010ddb g     F .text	0000001c do_handler_general_protection
00011596 g     F .text	00000029 sem_count
00010c8b g     F .text	0000001c do_handler_divider
00010d6b g     F .text	0000001c do_handler_double_fault
00011377 g     F .text	00000039 init_task_entry
00010df7 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00011242 g     F .text	0000002b pic_send_eoi
0001055a g     F .text	0000000a task_first_task
000114a9 g     F .text	0000006b sem_wait
000112b5 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010e83 g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00015090 g     O .bss	00002000 stack
0001086c g     F .text	00000057 sys_sleep
000100e2 g       .text	00000000 exception_handler_bound_range
00011514 g     F .text	00000082 sem_notify
00010d33 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010e13 g     F .text	0000001c do_handler_fpu_error
0001051d g     F .text	0000003d task_first_init
00010e4b g     F .text	0000001c do_handler_machine_check
00010ca7 g     F .text	0000001c do_handler_Debug
00011b42 g     F .text	00000060 list_insert_first
0001084c g     F .text	00000020 task_set_wakeup
00010cc3 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
0001160d g     F .text	00000070 kernel_strncpy
0001122c g     F .text	0000000b irq_disable_global
000106d8 g     F .text	00000061 sys_sched_yield
00011355 g     F .text	00000022 kernel_init
00011486 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00011989 g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
00010d87 g     F .text	0000001c do_handler_invalid_tss
00010812 g     F .text	0000003a task_set_sleep
00011ad4 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
000110e0 g     F .text	0000003a irq_install
00010988 g     F .text	0000006d init_gdt
0001126d g     F .text	00000018 irq_enter_protection
000111a5 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00010d4f g     F .text	0000001c do_handler_device_unavailable
0001067d g     F .text	0000005b task_dispatch
00010ab0 g     F .text	00000014 switch_to_tss
00010630 g     F .text	00000043 task_next_run
000117c2 g     F .text	00000064 kernel_memcmp
00011b1d g     F .text	00000025 list_init
00010e67 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00010605 g     F .text	0000002b task_set_block
00010c6f g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
00010412 g     F .text	0000001e task_switch_from_to
00010f32 g     F .text	000001ae irq_init
00011285 g     F .text	00000011 irq_leave_protection
000116f7 g     F .text	0000003b kernel_strlen
00010905 g     F .text	00000083 segment_desc_set
00010d17 g     F .text	0000001c do_handler_bound_range
00011c06 g     F .text	00000079 list_remove_first
0001167d g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
0001056e g     F .text	00000063 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00010739 g     F .text	000000d9 task_time_tick
00010dbf g     F .text	0000001c do_handler_stack_segment_fault
00010cdf g     F .text	0000001c do_handler_breakpoint
00011db5 g     F .text	000000ca log_printf
00010430 g     F .text	000000ed task_init
00011826 g     F .text	00000024 kernel_sprintf
00010a47 g     F .text	00000069 gdt_alloc_desc
0001184a g     F .text	0000013f kernel_itoa
00011c7f g     F .text	00000085 list_remove
000109f5 g     F .text	00000047 gate_desc_set
0001133d g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 4c 13 00 00       	call   11355 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 90 70 01 00       	mov    $0x17090,%esp
    jmp init_main
   10023:	e9 88 13 00 00       	jmp    113b0 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 36 0c 00 00       	call   10c6f <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 33 0c 00 00       	call   10c8b <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 30 0c 00 00       	call   10ca7 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 2d 0c 00 00       	call   10cc3 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 2a 0c 00 00       	call   10cdf <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 27 0c 00 00       	call   10cfb <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 24 0c 00 00       	call   10d17 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 21 0c 00 00       	call   10d33 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 1e 0c 00 00       	call   10d4f <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 1d 0c 00 00       	call   10d6b <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 1c 0c 00 00       	call   10d87 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 1b 0c 00 00       	call   10da3 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 1a 0c 00 00       	call   10dbf <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 19 0c 00 00       	call   10ddb <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 18 0c 00 00       	call   10df7 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 15 0c 00 00       	call   10e13 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 14 0c 00 00       	call   10e2f <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 11 0c 00 00       	call   10e4b <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 0e 0c 00 00       	call   10e67 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 0b 0c 00 00       	call   10e83 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 1e 10 00 00       	call   112b5 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102b2:	8b 45 08             	mov    0x8(%ebp),%eax
   102b5:	8b 50 04             	mov    0x4(%eax),%edx
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	89 10                	mov    %edx,(%eax)
}
   102bd:	90                   	nop
   102be:	5d                   	pop    %ebp
   102bf:	c3                   	ret    

000102c0 <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
    return node->next;
   102c3:	8b 45 08             	mov    0x8(%ebp),%eax
   102c6:	8b 40 04             	mov    0x4(%eax),%eax
}
   102c9:	5d                   	pop    %ebp
   102ca:	c3                   	ret    

000102cb <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   102cb:	55                   	push   %ebp
   102cc:	89 e5                	mov    %esp,%ebp
    return list->count;
   102ce:	8b 45 08             	mov    0x8(%ebp),%eax
   102d1:	8b 40 08             	mov    0x8(%eax),%eax
}
   102d4:	5d                   	pop    %ebp
   102d5:	c3                   	ret    

000102d6 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   102d6:	55                   	push   %ebp
   102d7:	89 e5                	mov    %esp,%ebp
    return list->first;
   102d9:	8b 45 08             	mov    0x8(%ebp),%eax
   102dc:	8b 00                	mov    (%eax),%eax
}
   102de:	5d                   	pop    %ebp
   102df:	c3                   	ret    

000102e0 <hlt>:

/**
 * @brief 当处理器执行到HLT指令时，它会停止执行并进入一个低功耗状态，直到外部事件唤醒处理器继续执行。
 * 
 */
static inline void hlt (void) {
   102e0:	55                   	push   %ebp
   102e1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   102e3:	f4                   	hlt    
}
   102e4:	90                   	nop
   102e5:	5d                   	pop    %ebp
   102e6:	c3                   	ret    

000102e7 <write_tr>:

static inline void write_tr(uint16_t tss_sel) {
   102e7:	55                   	push   %ebp
   102e8:	89 e5                	mov    %esp,%ebp
   102ea:	83 ec 04             	sub    $0x4,%esp
   102ed:	8b 45 08             	mov    0x8(%ebp),%eax
   102f0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   102f4:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102f8:	0f 00 d8             	ltr    %ax
}
   102fb:	90                   	nop
   102fc:	c9                   	leave  
   102fd:	c3                   	ret    

000102fe <tss_init>:
#include "comm/cpu_instr.h"
#include "cpu/irq.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102fe:	55                   	push   %ebp
   102ff:	89 e5                	mov    %esp,%ebp
   10301:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   10304:	e8 3e 07 00 00       	call   10a47 <gdt_alloc_desc>
   10309:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   1030c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10310:	79 1a                	jns    1032c <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   10312:	83 ec 0c             	sub    $0xc,%esp
   10315:	68 80 1e 01 00       	push   $0x11e80
   1031a:	e8 96 1a 00 00       	call   11db5 <log_printf>
   1031f:	83 c4 10             	add    $0x10,%esp
        return -1;
   10322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10327:	e9 e4 00 00 00       	jmp    10410 <tss_init+0x112>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   1032c:	8b 45 08             	mov    0x8(%ebp),%eax
   1032f:	83 c0 48             	add    $0x48,%eax
   10332:	68 89 00 00 00       	push   $0x89
   10337:	6a 68                	push   $0x68
   10339:	50                   	push   %eax
   1033a:	ff 75 f4             	pushl  -0xc(%ebp)
   1033d:	e8 c3 05 00 00       	call   10905 <segment_desc_set>
   10342:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10345:	8b 45 08             	mov    0x8(%ebp),%eax
   10348:	83 c0 48             	add    $0x48,%eax
   1034b:	83 ec 04             	sub    $0x4,%esp
   1034e:	6a 68                	push   $0x68
   10350:	6a 00                	push   $0x0
   10352:	50                   	push   %eax
   10353:	e8 29 14 00 00       	call   11781 <kernel_memset>
   10358:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   1035b:	8b 45 08             	mov    0x8(%ebp),%eax
   1035e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10361:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	8b 55 10             	mov    0x10(%ebp),%edx
   1036a:	89 50 4c             	mov    %edx,0x4c(%eax)
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	8b 50 4c             	mov    0x4c(%eax),%edx
   10373:	8b 45 08             	mov    0x8(%ebp),%eax
   10376:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   10390:	8b 45 08             	mov    0x8(%ebp),%eax
   10393:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   1039a:	00 00 00 
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   103a6:	8b 45 08             	mov    0x8(%ebp),%eax
   103a9:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   103af:	8b 45 08             	mov    0x8(%ebp),%eax
   103b2:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   103c1:	8b 45 08             	mov    0x8(%ebp),%eax
   103c4:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   103d3:	8b 45 08             	mov    0x8(%ebp),%eax
   103d6:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   103dc:	8b 45 08             	mov    0x8(%ebp),%eax
   103df:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   103e5:	8b 45 08             	mov    0x8(%ebp),%eax
   103e8:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   103ef:	00 00 00 
    task->tss.iomap = 0;
   103f2:	8b 45 08             	mov    0x8(%ebp),%eax
   103f5:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
   103fc:	00 00 00 

    task->tss_sel = tss_sel;
   103ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10402:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10405:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   1040b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10410:	c9                   	leave  
   10411:	c3                   	ret    

00010412 <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   10412:	55                   	push   %ebp
   10413:	89 e5                	mov    %esp,%ebp
   10415:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041b:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10421:	83 ec 0c             	sub    $0xc,%esp
   10424:	50                   	push   %eax
   10425:	e8 86 06 00 00       	call   10ab0 <switch_to_tss>
   1042a:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   1042d:	90                   	nop
   1042e:	c9                   	leave  
   1042f:	c3                   	ret    

00010430 <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   10430:	55                   	push   %ebp
   10431:	89 e5                	mov    %esp,%ebp
   10433:	83 ec 18             	sub    $0x18,%esp

    ASSERT(task != (task_t*)0);
   10436:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1043a:	75 19                	jne    10455 <task_init+0x25>
   1043c:	68 93 1e 01 00       	push   $0x11e93
   10441:	68 ec 1e 01 00       	push   $0x11eec
   10446:	6a 38                	push   $0x38
   10448:	68 a8 1e 01 00       	push   $0x11ea8
   1044d:	e8 82 16 00 00       	call   11ad4 <panic>
   10452:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   10455:	83 ec 04             	sub    $0x4,%esp
   10458:	ff 75 14             	pushl  0x14(%ebp)
   1045b:	ff 75 10             	pushl  0x10(%ebp)
   1045e:	ff 75 08             	pushl  0x8(%ebp)
   10461:	e8 98 fe ff ff       	call   102fe <tss_init>
   10466:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10469:	8b 45 08             	mov    0x8(%ebp),%eax
   1046c:	83 c0 10             	add    $0x10,%eax
   1046f:	83 ec 04             	sub    $0x4,%esp
   10472:	6a 20                	push   $0x20
   10474:	ff 75 0c             	pushl  0xc(%ebp)
   10477:	50                   	push   %eax
   10478:	e8 90 11 00 00       	call   1160d <kernel_strncpy>
   1047d:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10480:	8b 45 08             	mov    0x8(%ebp),%eax
   10483:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   10489:	8b 45 08             	mov    0x8(%ebp),%eax
   1048c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10493:	8b 45 08             	mov    0x8(%ebp),%eax
   10496:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	8b 50 08             	mov    0x8(%eax),%edx
   104a3:	8b 45 08             	mov    0x8(%ebp),%eax
   104a6:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   104a9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ac:	83 c0 40             	add    $0x40,%eax
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	50                   	push   %eax
   104b3:	e8 ed fd ff ff       	call   102a5 <list_node_init>
   104b8:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   104bb:	8b 45 08             	mov    0x8(%ebp),%eax
   104be:	83 c0 30             	add    $0x30,%eax
   104c1:	83 ec 0c             	sub    $0xc,%esp
   104c4:	50                   	push   %eax
   104c5:	e8 db fd ff ff       	call   102a5 <list_node_init>
   104ca:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   104cd:	8b 45 08             	mov    0x8(%ebp),%eax
   104d0:	83 c0 38             	add    $0x38,%eax
   104d3:	83 ec 0c             	sub    $0xc,%esp
   104d6:	50                   	push   %eax
   104d7:	e8 c9 fd ff ff       	call   102a5 <list_node_init>
   104dc:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   104df:	e8 89 0d 00 00       	call   1126d <irq_enter_protection>
   104e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   104e7:	83 ec 0c             	sub    $0xc,%esp
   104ea:	ff 75 08             	pushl  0x8(%ebp)
   104ed:	e8 df 00 00 00       	call   105d1 <task_set_ready>
   104f2:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   104f5:	8b 45 08             	mov    0x8(%ebp),%eax
   104f8:	83 c0 40             	add    $0x40,%eax
   104fb:	83 ec 08             	sub    $0x8,%esp
   104fe:	50                   	push   %eax
   104ff:	68 10 22 01 00       	push   $0x12210
   10504:	e8 99 16 00 00       	call   11ba2 <list_insert_last>
   10509:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   1050c:	83 ec 0c             	sub    $0xc,%esp
   1050f:	ff 75 f4             	pushl  -0xc(%ebp)
   10512:	e8 6e 0d 00 00       	call   11285 <irq_leave_protection>
   10517:	83 c4 10             	add    $0x10,%esp
}
   1051a:	90                   	nop
   1051b:	c9                   	leave  
   1051c:	c3                   	ret    

0001051d <task_first_init>:

void task_first_init (void) {
   1051d:	55                   	push   %ebp
   1051e:	89 e5                	mov    %esp,%ebp
   10520:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   10523:	6a 00                	push   $0x0
   10525:	6a 00                	push   $0x0
   10527:	68 d5 1e 01 00       	push   $0x11ed5
   1052c:	68 28 22 01 00       	push   $0x12228
   10531:	e8 fa fe ff ff       	call   10430 <task_init>
   10536:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   10539:	a1 d8 22 01 00       	mov    0x122d8,%eax
   1053e:	0f b7 c0             	movzwl %ax,%eax
   10541:	83 ec 0c             	sub    $0xc,%esp
   10544:	50                   	push   %eax
   10545:	e8 9d fd ff ff       	call   102e7 <write_tr>
   1054a:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   1054d:	c7 05 00 22 01 00 28 	movl   $0x12228,0x12200
   10554:	22 01 00 
}
   10557:	90                   	nop
   10558:	c9                   	leave  
   10559:	c3                   	ret    

0001055a <task_first_task>:

task_t * task_first_task (void) {
   1055a:	55                   	push   %ebp
   1055b:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1055d:	b8 28 22 01 00       	mov    $0x12228,%eax
}
   10562:	5d                   	pop    %ebp
   10563:	c3                   	ret    

00010564 <idle_task_entry>:

static void idle_task_entry (void) {
   10564:	55                   	push   %ebp
   10565:	89 e5                	mov    %esp,%ebp
    for(;;) {
        hlt();
   10567:	e8 74 fd ff ff       	call   102e0 <hlt>
   1056c:	eb f9                	jmp    10567 <idle_task_entry+0x3>

0001056e <task_manager_init>:
    }
}
static uint32_t idle_task_stack[IDLE_TASK_SIZE];

void task_manager_init (void) {
   1056e:	55                   	push   %ebp
   1056f:	89 e5                	mov    %esp,%ebp
   10571:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10574:	83 ec 0c             	sub    $0xc,%esp
   10577:	68 04 22 01 00       	push   $0x12204
   1057c:	e8 9c 15 00 00       	call   11b1d <list_init>
   10581:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10584:	83 ec 0c             	sub    $0xc,%esp
   10587:	68 10 22 01 00       	push   $0x12210
   1058c:	e8 8c 15 00 00       	call   11b1d <list_init>
   10591:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10594:	83 ec 0c             	sub    $0xc,%esp
   10597:	68 1c 22 01 00       	push   $0x1221c
   1059c:	e8 7c 15 00 00       	call   11b1d <list_init>
   105a1:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   105a4:	c7 05 00 22 01 00 00 	movl   $0x0,0x12200
   105ab:	00 00 00 

    task_init(&task_manager.idle_task,
        "idle_task",
        (uint32_t)idle_task_entry,
        (uint32_t)(idle_task_stack + IDLE_TASK_SIZE)
   105ae:	b8 a0 33 01 00       	mov    $0x133a0,%eax
    task_init(&task_manager.idle_task,
   105b3:	89 c2                	mov    %eax,%edx
   105b5:	b8 64 05 01 00       	mov    $0x10564,%eax
   105ba:	52                   	push   %edx
   105bb:	50                   	push   %eax
   105bc:	68 e0 1e 01 00       	push   $0x11ee0
   105c1:	68 dc 22 01 00       	push   $0x122dc
   105c6:	e8 65 fe ff ff       	call   10430 <task_init>
   105cb:	83 c4 10             	add    $0x10,%esp
    );


}
   105ce:	90                   	nop
   105cf:	c9                   	leave  
   105d0:	c3                   	ret    

000105d1 <task_set_ready>:

void task_set_ready(task_t * task) {
   105d1:	55                   	push   %ebp
   105d2:	89 e5                	mov    %esp,%ebp
   105d4:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   105d7:	81 7d 08 dc 22 01 00 	cmpl   $0x122dc,0x8(%ebp)
   105de:	74 22                	je     10602 <task_set_ready+0x31>
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   105e0:	8b 45 08             	mov    0x8(%ebp),%eax
   105e3:	83 c0 30             	add    $0x30,%eax
   105e6:	83 ec 08             	sub    $0x8,%esp
   105e9:	50                   	push   %eax
   105ea:	68 04 22 01 00       	push   $0x12204
   105ef:	e8 ae 15 00 00       	call   11ba2 <list_insert_last>
   105f4:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   105f7:	8b 45 08             	mov    0x8(%ebp),%eax
   105fa:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10600:	eb 01                	jmp    10603 <task_set_ready+0x32>
        return;
   10602:	90                   	nop
}
   10603:	c9                   	leave  
   10604:	c3                   	ret    

00010605 <task_set_block>:

void task_set_block(task_t * task) {
   10605:	55                   	push   %ebp
   10606:	89 e5                	mov    %esp,%ebp
   10608:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   1060b:	81 7d 08 dc 22 01 00 	cmpl   $0x122dc,0x8(%ebp)
   10612:	74 19                	je     1062d <task_set_block+0x28>
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   10614:	8b 45 08             	mov    0x8(%ebp),%eax
   10617:	83 c0 30             	add    $0x30,%eax
   1061a:	83 ec 08             	sub    $0x8,%esp
   1061d:	50                   	push   %eax
   1061e:	68 04 22 01 00       	push   $0x12204
   10623:	e8 57 16 00 00       	call   11c7f <list_remove>
   10628:	83 c4 10             	add    $0x10,%esp
   1062b:	eb 01                	jmp    1062e <task_set_block+0x29>
        return;
   1062d:	90                   	nop
}
   1062e:	c9                   	leave  
   1062f:	c3                   	ret    

00010630 <task_next_run>:


task_t * task_next_run(void) {
   10630:	55                   	push   %ebp
   10631:	89 e5                	mov    %esp,%ebp
   10633:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   10636:	68 04 22 01 00       	push   $0x12204
   1063b:	e8 8b fc ff ff       	call   102cb <list_count>
   10640:	83 c4 04             	add    $0x4,%esp
   10643:	85 c0                	test   %eax,%eax
   10645:	75 07                	jne    1064e <task_next_run+0x1e>
        return &task_manager.idle_task;
   10647:	b8 dc 22 01 00       	mov    $0x122dc,%eax
   1064c:	eb 23                	jmp    10671 <task_next_run+0x41>
    }
    list_node_t * task_node = list_first(&task_manager.ready_list);
   1064e:	68 04 22 01 00       	push   $0x12204
   10653:	e8 7e fc ff ff       	call   102d6 <list_first>
   10658:	83 c4 04             	add    $0x4,%esp
   1065b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   1065e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10662:	74 08                	je     1066c <task_next_run+0x3c>
   10664:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10667:	83 e8 30             	sub    $0x30,%eax
   1066a:	eb 05                	jmp    10671 <task_next_run+0x41>
   1066c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10671:	c9                   	leave  
   10672:	c3                   	ret    

00010673 <task_current>:

task_t * task_current (void) {
   10673:	55                   	push   %ebp
   10674:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10676:	a1 00 22 01 00       	mov    0x12200,%eax
}
   1067b:	5d                   	pop    %ebp
   1067c:	c3                   	ret    

0001067d <task_dispatch>:


void task_dispatch(void) {
   1067d:	55                   	push   %ebp
   1067e:	89 e5                	mov    %esp,%ebp
   10680:	83 ec 18             	sub    $0x18,%esp


    irq_state_t state = irq_enter_protection();
   10683:	e8 e5 0b 00 00       	call   1126d <irq_enter_protection>
   10688:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * to = task_next_run();
   1068b:	e8 a0 ff ff ff       	call   10630 <task_next_run>
   10690:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( to != task_manager.curr_task) {
   10693:	a1 00 22 01 00       	mov    0x12200,%eax
   10698:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1069b:	74 2a                	je     106c7 <task_dispatch+0x4a>
        task_t * from = task_current();
   1069d:	e8 d1 ff ff ff       	call   10673 <task_current>
   106a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   106a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a8:	a3 00 22 01 00       	mov    %eax,0x12200
        to->state = TASK_RUNNING;
   106ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from,to);
   106b6:	83 ec 08             	sub    $0x8,%esp
   106b9:	ff 75 f0             	pushl  -0x10(%ebp)
   106bc:	ff 75 ec             	pushl  -0x14(%ebp)
   106bf:	e8 4e fd ff ff       	call   10412 <task_switch_from_to>
   106c4:	83 c4 10             	add    $0x10,%esp
    }


    irq_leave_protection(state);
   106c7:	83 ec 0c             	sub    $0xc,%esp
   106ca:	ff 75 f4             	pushl  -0xc(%ebp)
   106cd:	e8 b3 0b 00 00       	call   11285 <irq_leave_protection>
   106d2:	83 c4 10             	add    $0x10,%esp

}
   106d5:	90                   	nop
   106d6:	c9                   	leave  
   106d7:	c3                   	ret    

000106d8 <sys_sched_yield>:

int sys_sched_yield(void) {
   106d8:	55                   	push   %ebp
   106d9:	89 e5                	mov    %esp,%ebp
   106db:	83 ec 18             	sub    $0x18,%esp
    
    irq_state_t state = irq_enter_protection();
   106de:	e8 8a 0b 00 00       	call   1126d <irq_enter_protection>
   106e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&task_manager.ready_list) > 1) {
   106e6:	83 ec 0c             	sub    $0xc,%esp
   106e9:	68 04 22 01 00       	push   $0x12204
   106ee:	e8 d8 fb ff ff       	call   102cb <list_count>
   106f3:	83 c4 10             	add    $0x10,%esp
   106f6:	83 f8 01             	cmp    $0x1,%eax
   106f9:	7e 29                	jle    10724 <sys_sched_yield+0x4c>
        task_t * curr_task = task_current();
   106fb:	e8 73 ff ff ff       	call   10673 <task_current>
   10700:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   10703:	83 ec 0c             	sub    $0xc,%esp
   10706:	ff 75 f0             	pushl  -0x10(%ebp)
   10709:	e8 f7 fe ff ff       	call   10605 <task_set_block>
   1070e:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10711:	83 ec 0c             	sub    $0xc,%esp
   10714:	ff 75 f0             	pushl  -0x10(%ebp)
   10717:	e8 b5 fe ff ff       	call   105d1 <task_set_ready>
   1071c:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   1071f:	e8 59 ff ff ff       	call   1067d <task_dispatch>
    }

    irq_leave_protection(state);
   10724:	83 ec 0c             	sub    $0xc,%esp
   10727:	ff 75 f4             	pushl  -0xc(%ebp)
   1072a:	e8 56 0b 00 00       	call   11285 <irq_leave_protection>
   1072f:	83 c4 10             	add    $0x10,%esp
    return 0;
   10732:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10737:	c9                   	leave  
   10738:	c3                   	ret    

00010739 <task_time_tick>:

void task_time_tick(void) {
   10739:	55                   	push   %ebp
   1073a:	89 e5                	mov    %esp,%ebp
   1073c:	83 ec 18             	sub    $0x18,%esp
    
    task_t * curr_task = task_current();
   1073f:	e8 2f ff ff ff       	call   10673 <task_current>
   10744:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--curr_task->slice_ticks == 0) {
   10747:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074a:	8b 40 0c             	mov    0xc(%eax),%eax
   1074d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10750:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10753:	89 50 0c             	mov    %edx,0xc(%eax)
   10756:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10759:	8b 40 0c             	mov    0xc(%eax),%eax
   1075c:	85 c0                	test   %eax,%eax
   1075e:	75 2d                	jne    1078d <task_time_tick+0x54>
        
        curr_task->slice_ticks = curr_task->time_ticks;
   10760:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10763:	8b 50 08             	mov    0x8(%eax),%edx
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(curr_task);
   1076c:	83 ec 0c             	sub    $0xc,%esp
   1076f:	ff 75 f0             	pushl  -0x10(%ebp)
   10772:	e8 8e fe ff ff       	call   10605 <task_set_block>
   10777:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);      
   1077a:	83 ec 0c             	sub    $0xc,%esp
   1077d:	ff 75 f0             	pushl  -0x10(%ebp)
   10780:	e8 4c fe ff ff       	call   105d1 <task_set_ready>
   10785:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10788:	e8 f0 fe ff ff       	call   1067d <task_dispatch>
    }

    list_node_t * curr = list_first(&task_manager.sleep_list);
   1078d:	83 ec 0c             	sub    $0xc,%esp
   10790:	68 1c 22 01 00       	push   $0x1221c
   10795:	e8 3c fb ff ff       	call   102d6 <list_first>
   1079a:	83 c4 10             	add    $0x10,%esp
   1079d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (curr) {
   107a0:	eb 62                	jmp    10804 <task_time_tick+0xcb>
        list_node_t * next = list_node_next(curr);
   107a2:	83 ec 0c             	sub    $0xc,%esp
   107a5:	ff 75 f4             	pushl  -0xc(%ebp)
   107a8:	e8 13 fb ff ff       	call   102c0 <list_node_next>
   107ad:	83 c4 10             	add    $0x10,%esp
   107b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   107b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107b7:	74 08                	je     107c1 <task_time_tick+0x88>
   107b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107bc:	83 e8 30             	sub    $0x30,%eax
   107bf:	eb 05                	jmp    107c6 <task_time_tick+0x8d>
   107c1:	b8 00 00 00 00       	mov    $0x0,%eax
   107c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) {
   107c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107cc:	8b 40 04             	mov    0x4(%eax),%eax
   107cf:	8d 50 ff             	lea    -0x1(%eax),%edx
   107d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107d5:	89 50 04             	mov    %edx,0x4(%eax)
   107d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107db:	8b 40 04             	mov    0x4(%eax),%eax
   107de:	85 c0                	test   %eax,%eax
   107e0:	75 1c                	jne    107fe <task_time_tick+0xc5>
            task_set_wakeup(task);
   107e2:	83 ec 0c             	sub    $0xc,%esp
   107e5:	ff 75 e8             	pushl  -0x18(%ebp)
   107e8:	e8 5f 00 00 00       	call   1084c <task_set_wakeup>
   107ed:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   107f0:	83 ec 0c             	sub    $0xc,%esp
   107f3:	ff 75 e8             	pushl  -0x18(%ebp)
   107f6:	e8 d6 fd ff ff       	call   105d1 <task_set_ready>
   107fb:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   107fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10801:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10804:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10808:	75 98                	jne    107a2 <task_time_tick+0x69>
    }

    task_dispatch();
   1080a:	e8 6e fe ff ff       	call   1067d <task_dispatch>
}
   1080f:	90                   	nop
   10810:	c9                   	leave  
   10811:	c3                   	ret    

00010812 <task_set_sleep>:




void task_set_sleep (task_t * task, uint32_t ticks) {
   10812:	55                   	push   %ebp
   10813:	89 e5                	mov    %esp,%ebp
   10815:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10818:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1081c:	74 2b                	je     10849 <task_set_sleep+0x37>
        return;
    }

    task->sleep_ticks = ticks;
   1081e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10821:	8b 45 08             	mov    0x8(%ebp),%eax
   10824:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   10827:	8b 45 08             	mov    0x8(%ebp),%eax
   1082a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last (&task_manager.sleep_list,&task->run_node);
   10830:	8b 45 08             	mov    0x8(%ebp),%eax
   10833:	83 c0 30             	add    $0x30,%eax
   10836:	83 ec 08             	sub    $0x8,%esp
   10839:	50                   	push   %eax
   1083a:	68 1c 22 01 00       	push   $0x1221c
   1083f:	e8 5e 13 00 00       	call   11ba2 <list_insert_last>
   10844:	83 c4 10             	add    $0x10,%esp
   10847:	eb 01                	jmp    1084a <task_set_sleep+0x38>
        return;
   10849:	90                   	nop
}
   1084a:	c9                   	leave  
   1084b:	c3                   	ret    

0001084c <task_set_wakeup>:
void task_set_wakeup (task_t * task) {
   1084c:	55                   	push   %ebp
   1084d:	89 e5                	mov    %esp,%ebp
   1084f:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   10852:	8b 45 08             	mov    0x8(%ebp),%eax
   10855:	83 c0 30             	add    $0x30,%eax
   10858:	83 ec 08             	sub    $0x8,%esp
   1085b:	50                   	push   %eax
   1085c:	68 1c 22 01 00       	push   $0x1221c
   10861:	e8 19 14 00 00       	call   11c7f <list_remove>
   10866:	83 c4 10             	add    $0x10,%esp
}
   10869:	90                   	nop
   1086a:	c9                   	leave  
   1086b:	c3                   	ret    

0001086c <sys_sleep>:
void sys_sleep (uint32_t ms) {
   1086c:	55                   	push   %ebp
   1086d:	89 e5                	mov    %esp,%ebp
   1086f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10872:	e8 f6 09 00 00       	call   1126d <irq_enter_protection>
   10877:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_set_block(task_manager.curr_task);
   1087a:	a1 00 22 01 00       	mov    0x12200,%eax
   1087f:	83 ec 0c             	sub    $0xc,%esp
   10882:	50                   	push   %eax
   10883:	e8 7d fd ff ff       	call   10605 <task_set_block>
   10888:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task,(ms + OS_TICK_MS - 1)/OS_TICK_MS);
   1088b:	8b 45 08             	mov    0x8(%ebp),%eax
   1088e:	83 c0 09             	add    $0x9,%eax
   10891:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10896:	f7 e2                	mul    %edx
   10898:	c1 ea 03             	shr    $0x3,%edx
   1089b:	a1 00 22 01 00       	mov    0x12200,%eax
   108a0:	83 ec 08             	sub    $0x8,%esp
   108a3:	52                   	push   %edx
   108a4:	50                   	push   %eax
   108a5:	e8 68 ff ff ff       	call   10812 <task_set_sleep>
   108aa:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   108ad:	e8 cb fd ff ff       	call   1067d <task_dispatch>

    irq_leave_protection(state);
   108b2:	83 ec 0c             	sub    $0xc,%esp
   108b5:	ff 75 f4             	pushl  -0xc(%ebp)
   108b8:	e8 c8 09 00 00       	call   11285 <irq_leave_protection>
   108bd:	83 c4 10             	add    $0x10,%esp
}
   108c0:	90                   	nop
   108c1:	c9                   	leave  
   108c2:	c3                   	ret    

000108c3 <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   108c3:	55                   	push   %ebp
   108c4:	89 e5                	mov    %esp,%ebp
   108c6:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   108c9:	8b 45 08             	mov    0x8(%ebp),%eax
   108cc:	c1 e8 10             	shr    $0x10,%eax
   108cf:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   108d3:	8b 45 08             	mov    0x8(%ebp),%eax
   108d6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   108da:	8b 45 0c             	mov    0xc(%ebp),%eax
   108dd:	83 e8 01             	sub    $0x1,%eax
   108e0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   108e4:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   108e8:	90                   	nop
   108e9:	c9                   	leave  
   108ea:	c3                   	ret    

000108eb <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   108eb:	55                   	push   %ebp
   108ec:	89 e5                	mov    %esp,%ebp
   108ee:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   108f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   108f4:	89 45 f8             	mov    %eax,-0x8(%ebp)
   108f7:	8b 45 08             	mov    0x8(%ebp),%eax
   108fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   108fd:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10900:	ff 28                	ljmp   *(%eax)
}
   10902:	90                   	nop
   10903:	c9                   	leave  
   10904:	c3                   	ret    

00010905 <segment_desc_set>:
#include "cpu/irq.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   10905:	55                   	push   %ebp
   10906:	89 e5                	mov    %esp,%ebp
   10908:	83 ec 14             	sub    $0x14,%esp
   1090b:	8b 45 14             	mov    0x14(%ebp),%eax
   1090e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   10912:	8b 45 08             	mov    0x8(%ebp),%eax
   10915:	83 e0 f8             	and    $0xfffffff8,%eax
   10918:	05 a0 33 01 00       	add    $0x133a0,%eax
   1091d:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   10920:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10927:	76 0f                	jbe    10938 <segment_desc_set+0x33>
		attr |= SEG_G;
   10929:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1092f:	8b 45 10             	mov    0x10(%ebp),%eax
   10932:	c1 e8 0c             	shr    $0xc,%eax
   10935:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   10938:	8b 45 10             	mov    0x10(%ebp),%eax
   1093b:	89 c2                	mov    %eax,%edx
   1093d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10940:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10943:	8b 45 0c             	mov    0xc(%ebp),%eax
   10946:	89 c2                	mov    %eax,%edx
   10948:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1094b:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1094f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10952:	c1 e8 10             	shr    $0x10,%eax
   10955:	89 c2                	mov    %eax,%edx
   10957:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1095a:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1095d:	8b 45 10             	mov    0x10(%ebp),%eax
   10960:	c1 e8 10             	shr    $0x10,%eax
   10963:	c1 e0 08             	shl    $0x8,%eax
   10966:	66 25 00 0f          	and    $0xf00,%ax
   1096a:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1096e:	89 c2                	mov    %eax,%edx
   10970:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10973:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10977:	8b 45 0c             	mov    0xc(%ebp),%eax
   1097a:	c1 e8 18             	shr    $0x18,%eax
   1097d:	89 c2                	mov    %eax,%edx
   1097f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10982:	88 50 07             	mov    %dl,0x7(%eax)

}
   10985:	90                   	nop
   10986:	c9                   	leave  
   10987:	c3                   	ret    

00010988 <init_gdt>:

void init_gdt(void){
   10988:	55                   	push   %ebp
   10989:	89 e5                	mov    %esp,%ebp
   1098b:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1098e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10995:	eb 19                	jmp    109b0 <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10997:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1099a:	c1 e0 03             	shl    $0x3,%eax
   1099d:	6a 00                	push   $0x0
   1099f:	6a 00                	push   $0x0
   109a1:	6a 00                	push   $0x0
   109a3:	50                   	push   %eax
   109a4:	e8 5c ff ff ff       	call   10905 <segment_desc_set>
   109a9:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   109ac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   109b0:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   109b7:	7e de                	jle    10997 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   109b9:	68 9a 40 00 00       	push   $0x409a
   109be:	6a ff                	push   $0xffffffff
   109c0:	6a 00                	push   $0x0
   109c2:	6a 08                	push   $0x8
   109c4:	e8 3c ff ff ff       	call   10905 <segment_desc_set>
   109c9:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   109cc:	68 92 40 00 00       	push   $0x4092
   109d1:	6a ff                	push   $0xffffffff
   109d3:	6a 00                	push   $0x0
   109d5:	6a 10                	push   $0x10
   109d7:	e8 29 ff ff ff       	call   10905 <segment_desc_set>
   109dc:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   109df:	b8 a0 33 01 00       	mov    $0x133a0,%eax
   109e4:	68 00 08 00 00       	push   $0x800
   109e9:	50                   	push   %eax
   109ea:	e8 d4 fe ff ff       	call   108c3 <lgdt>
   109ef:	83 c4 08             	add    $0x8,%esp
}
   109f2:	90                   	nop
   109f3:	c9                   	leave  
   109f4:	c3                   	ret    

000109f5 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   109f5:	55                   	push   %ebp
   109f6:	89 e5                	mov    %esp,%ebp
   109f8:	83 ec 08             	sub    $0x8,%esp
   109fb:	8b 55 0c             	mov    0xc(%ebp),%edx
   109fe:	8b 45 14             	mov    0x14(%ebp),%eax
   10a01:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10a05:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   10a09:	8b 45 10             	mov    0x10(%ebp),%eax
   10a0c:	89 c2                	mov    %eax,%edx
   10a0e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a11:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10a14:	8b 45 08             	mov    0x8(%ebp),%eax
   10a17:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a1b:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10a1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a22:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a26:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10a2a:	8b 45 10             	mov    0x10(%ebp),%eax
   10a2d:	c1 e8 10             	shr    $0x10,%eax
   10a30:	89 c2                	mov    %eax,%edx
   10a32:	8b 45 08             	mov    0x8(%ebp),%eax
   10a35:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a39:	90                   	nop
   10a3a:	c9                   	leave  
   10a3b:	c3                   	ret    

00010a3c <cpu_init>:

void cpu_init (void){
   10a3c:	55                   	push   %ebp
   10a3d:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   10a3f:	e8 44 ff ff ff       	call   10988 <init_gdt>
}
   10a44:	90                   	nop
   10a45:	5d                   	pop    %ebp
   10a46:	c3                   	ret    

00010a47 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   10a47:	55                   	push   %ebp
   10a48:	89 e5                	mov    %esp,%ebp
   10a4a:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   10a4d:	e8 1b 08 00 00       	call   1126d <irq_enter_protection>
   10a52:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10a55:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10a5c:	eb 34                	jmp    10a92 <gdt_alloc_desc+0x4b>

        segment_desc_t * desc = gdt_table + i;
   10a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a61:	c1 e0 03             	shl    $0x3,%eax
   10a64:	05 a0 33 01 00       	add    $0x133a0,%eax
   10a69:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if(desc->attr == 0) {
   10a6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a6f:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a73:	66 85 c0             	test   %ax,%ax
   10a76:	75 16                	jne    10a8e <gdt_alloc_desc+0x47>
            
            irq_leave_protection(state);
   10a78:	83 ec 0c             	sub    $0xc,%esp
   10a7b:	ff 75 f0             	pushl  -0x10(%ebp)
   10a7e:	e8 02 08 00 00       	call   11285 <irq_leave_protection>
   10a83:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10a86:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a89:	c1 e0 03             	shl    $0x3,%eax
   10a8c:	eb 20                	jmp    10aae <gdt_alloc_desc+0x67>
    for (int i = 1;i <GDT_TABLE_SIZE;i++) {
   10a8e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a92:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10a99:	7e c3                	jle    10a5e <gdt_alloc_desc+0x17>
        }
    }
    irq_leave_protection(state);
   10a9b:	83 ec 0c             	sub    $0xc,%esp
   10a9e:	ff 75 f0             	pushl  -0x10(%ebp)
   10aa1:	e8 df 07 00 00       	call   11285 <irq_leave_protection>
   10aa6:	83 c4 10             	add    $0x10,%esp

    return -1;
   10aa9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   10aae:	c9                   	leave  
   10aaf:	c3                   	ret    

00010ab0 <switch_to_tss>:

void switch_to_tss(int tss_sel) {
   10ab0:	55                   	push   %ebp
   10ab1:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   10ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab6:	6a 00                	push   $0x0
   10ab8:	50                   	push   %eax
   10ab9:	e8 2d fe ff ff       	call   108eb <far_jump>
   10abe:	83 c4 08             	add    $0x8,%esp
   10ac1:	90                   	nop
   10ac2:	c9                   	leave  
   10ac3:	c3                   	ret    

00010ac4 <inb>:
static inline uint8_t inb(uint16_t port) {
   10ac4:	55                   	push   %ebp
   10ac5:	89 e5                	mov    %esp,%ebp
   10ac7:	83 ec 14             	sub    $0x14,%esp
   10aca:	8b 45 08             	mov    0x8(%ebp),%eax
   10acd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10ad1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ad5:	89 c2                	mov    %eax,%edx
   10ad7:	ec                   	in     (%dx),%al
   10ad8:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10adb:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10adf:	c9                   	leave  
   10ae0:	c3                   	ret    

00010ae1 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10ae1:	55                   	push   %ebp
   10ae2:	89 e5                	mov    %esp,%ebp
   10ae4:	83 ec 08             	sub    $0x8,%esp
   10ae7:	8b 55 08             	mov    0x8(%ebp),%edx
   10aea:	8b 45 0c             	mov    0xc(%ebp),%eax
   10aed:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10af1:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10af4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10af8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10afc:	ee                   	out    %al,(%dx)
}
   10afd:	90                   	nop
   10afe:	c9                   	leave  
   10aff:	c3                   	ret    

00010b00 <cli>:
static inline void cli(void){
   10b00:	55                   	push   %ebp
   10b01:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10b03:	fa                   	cli    
}
   10b04:	90                   	nop
   10b05:	5d                   	pop    %ebp
   10b06:	c3                   	ret    

00010b07 <sti>:
static inline void sti(void){
   10b07:	55                   	push   %ebp
   10b08:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10b0a:	fb                   	sti    
}
   10b0b:	90                   	nop
   10b0c:	5d                   	pop    %ebp
   10b0d:	c3                   	ret    

00010b0e <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   10b0e:	55                   	push   %ebp
   10b0f:	89 e5                	mov    %esp,%ebp
   10b11:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   10b14:	8b 45 08             	mov    0x8(%ebp),%eax
   10b17:	c1 e8 10             	shr    $0x10,%eax
   10b1a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10b1e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b21:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10b25:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b28:	83 e8 01             	sub    $0x1,%eax
   10b2b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10b2f:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10b33:	90                   	nop
   10b34:	c9                   	leave  
   10b35:	c3                   	ret    

00010b36 <hlt>:
static inline void hlt (void) {
   10b36:	55                   	push   %ebp
   10b37:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10b39:	f4                   	hlt    
}
   10b3a:	90                   	nop
   10b3b:	5d                   	pop    %ebp
   10b3c:	c3                   	ret    

00010b3d <read_eflags>:

static inline uint32_t read_eflags (void) {
   10b3d:	55                   	push   %ebp
   10b3e:	89 e5                	mov    %esp,%ebp
   10b40:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__ ("pushf\n\tpop %%eax":"=a"(eflags));    
   10b43:	9c                   	pushf  
   10b44:	58                   	pop    %eax
   10b45:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10b48:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10b4b:	c9                   	leave  
   10b4c:	c3                   	ret    

00010b4d <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   10b4d:	55                   	push   %ebp
   10b4e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__ ("push %%eax\n\tpopf"::"a"(eflags));  
   10b50:	8b 45 08             	mov    0x8(%ebp),%eax
   10b53:	50                   	push   %eax
   10b54:	9d                   	popf   
}
   10b55:	90                   	nop
   10b56:	5d                   	pop    %ebp
   10b57:	c3                   	ret    

00010b58 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   10b58:	55                   	push   %ebp
   10b59:	89 e5                	mov    %esp,%ebp
   10b5b:	57                   	push   %edi
   10b5c:	56                   	push   %esi
   10b5d:	53                   	push   %ebx
   10b5e:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   10b61:	8b 45 08             	mov    0x8(%ebp),%eax
   10b64:	8b 50 34             	mov    0x34(%eax),%edx
   10b67:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6a:	8b 40 30             	mov    0x30(%eax),%eax
   10b6d:	83 ec 04             	sub    $0x4,%esp
   10b70:	52                   	push   %edx
   10b71:	50                   	push   %eax
   10b72:	68 f8 1e 01 00       	push   $0x11ef8
   10b77:	e8 39 12 00 00       	call   11db5 <log_printf>
   10b7c:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   10b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b82:	8b 38                	mov    (%eax),%edi
   10b84:	8b 45 08             	mov    0x8(%ebp),%eax
   10b87:	8b 70 04             	mov    0x4(%eax),%esi
   10b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8d:	8b 58 0c             	mov    0xc(%eax),%ebx
   10b90:	8b 45 08             	mov    0x8(%ebp),%eax
   10b93:	8b 48 08             	mov    0x8(%eax),%ecx
   10b96:	8b 45 08             	mov    0x8(%ebp),%eax
   10b99:	8b 50 0c             	mov    0xc(%eax),%edx
   10b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9f:	8b 40 3c             	mov    0x3c(%eax),%eax
   10ba2:	83 ec 04             	sub    $0x4,%esp
   10ba5:	57                   	push   %edi
   10ba6:	56                   	push   %esi
   10ba7:	53                   	push   %ebx
   10ba8:	51                   	push   %ecx
   10ba9:	52                   	push   %edx
   10baa:	50                   	push   %eax
   10bab:	68 10 1f 01 00       	push   $0x11f10
   10bb0:	e8 00 12 00 00       	call   11db5 <log_printf>
   10bb5:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   10bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbb:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10bbe:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc1:	8b 40 18             	mov    0x18(%eax),%eax
   10bc4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10bc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bca:	8b 58 14             	mov    0x14(%eax),%ebx
   10bcd:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10bd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd3:	8b 78 10             	mov    0x10(%eax),%edi
   10bd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd9:	8b 70 24             	mov    0x24(%eax),%esi
   10bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdf:	8b 58 28             	mov    0x28(%eax),%ebx
   10be2:	8b 45 08             	mov    0x8(%ebp),%eax
   10be5:	8b 50 20             	mov    0x20(%eax),%edx
   10be8:	8b 45 08             	mov    0x8(%ebp),%eax
   10beb:	8b 40 2c             	mov    0x2c(%eax),%eax
   10bee:	83 ec 0c             	sub    $0xc,%esp
   10bf1:	51                   	push   %ecx
   10bf2:	ff 75 e4             	pushl  -0x1c(%ebp)
   10bf5:	ff 75 e0             	pushl  -0x20(%ebp)
   10bf8:	57                   	push   %edi
   10bf9:	56                   	push   %esi
   10bfa:	53                   	push   %ebx
   10bfb:	52                   	push   %edx
   10bfc:	50                   	push   %eax
   10bfd:	68 3c 1f 01 00       	push   $0x11f3c
   10c02:	e8 ae 11 00 00       	call   11db5 <log_printf>
   10c07:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10c0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c0d:	8b 50 40             	mov    0x40(%eax),%edx
   10c10:	8b 45 08             	mov    0x8(%ebp),%eax
   10c13:	8b 40 38             	mov    0x38(%eax),%eax
   10c16:	83 ec 04             	sub    $0x4,%esp
   10c19:	52                   	push   %edx
   10c1a:	50                   	push   %eax
   10c1b:	68 85 1f 01 00       	push   $0x11f85
   10c20:	e8 90 11 00 00       	call   11db5 <log_printf>
   10c25:	83 c4 10             	add    $0x10,%esp
}
   10c28:	90                   	nop
   10c29:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10c2c:	5b                   	pop    %ebx
   10c2d:	5e                   	pop    %esi
   10c2e:	5f                   	pop    %edi
   10c2f:	5d                   	pop    %ebp
   10c30:	c3                   	ret    

00010c31 <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   10c31:	55                   	push   %ebp
   10c32:	89 e5                	mov    %esp,%ebp
   10c34:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10c37:	83 ec 0c             	sub    $0xc,%esp
   10c3a:	68 9b 1f 01 00       	push   $0x11f9b
   10c3f:	e8 71 11 00 00       	call   11db5 <log_printf>
   10c44:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10c47:	83 ec 08             	sub    $0x8,%esp
   10c4a:	ff 75 0c             	pushl  0xc(%ebp)
   10c4d:	68 b8 1f 01 00       	push   $0x11fb8
   10c52:	e8 5e 11 00 00       	call   11db5 <log_printf>
   10c57:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10c5a:	83 ec 0c             	sub    $0xc,%esp
   10c5d:	ff 75 08             	pushl  0x8(%ebp)
   10c60:	e8 f3 fe ff ff       	call   10b58 <dump_core_regs>
   10c65:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   10c68:	e8 c9 fe ff ff       	call   10b36 <hlt>
   10c6d:	eb f9                	jmp    10c68 <do_default_handler+0x37>

00010c6f <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   10c6f:	55                   	push   %ebp
   10c70:	89 e5                	mov    %esp,%ebp
   10c72:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   10c75:	83 ec 08             	sub    $0x8,%esp
   10c78:	68 d2 1f 01 00       	push   $0x11fd2
   10c7d:	ff 75 08             	pushl  0x8(%ebp)
   10c80:	e8 ac ff ff ff       	call   10c31 <do_default_handler>
   10c85:	83 c4 10             	add    $0x10,%esp

}
   10c88:	90                   	nop
   10c89:	c9                   	leave  
   10c8a:	c3                   	ret    

00010c8b <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   10c8b:	55                   	push   %ebp
   10c8c:	89 e5                	mov    %esp,%ebp
   10c8e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   10c91:	83 ec 08             	sub    $0x8,%esp
   10c94:	68 e4 1f 01 00       	push   $0x11fe4
   10c99:	ff 75 08             	pushl  0x8(%ebp)
   10c9c:	e8 90 ff ff ff       	call   10c31 <do_default_handler>
   10ca1:	83 c4 10             	add    $0x10,%esp
}
   10ca4:	90                   	nop
   10ca5:	c9                   	leave  
   10ca6:	c3                   	ret    

00010ca7 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   10ca7:	55                   	push   %ebp
   10ca8:	89 e5                	mov    %esp,%ebp
   10caa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   10cad:	83 ec 08             	sub    $0x8,%esp
   10cb0:	68 f5 1f 01 00       	push   $0x11ff5
   10cb5:	ff 75 08             	pushl  0x8(%ebp)
   10cb8:	e8 74 ff ff ff       	call   10c31 <do_default_handler>
   10cbd:	83 c4 10             	add    $0x10,%esp
}
   10cc0:	90                   	nop
   10cc1:	c9                   	leave  
   10cc2:	c3                   	ret    

00010cc3 <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   10cc3:	55                   	push   %ebp
   10cc4:	89 e5                	mov    %esp,%ebp
   10cc6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   10cc9:	83 ec 08             	sub    $0x8,%esp
   10ccc:	68 05 20 01 00       	push   $0x12005
   10cd1:	ff 75 08             	pushl  0x8(%ebp)
   10cd4:	e8 58 ff ff ff       	call   10c31 <do_default_handler>
   10cd9:	83 c4 10             	add    $0x10,%esp
}
   10cdc:	90                   	nop
   10cdd:	c9                   	leave  
   10cde:	c3                   	ret    

00010cdf <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   10cdf:	55                   	push   %ebp
   10ce0:	89 e5                	mov    %esp,%ebp
   10ce2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10ce5:	83 ec 08             	sub    $0x8,%esp
   10ce8:	68 14 20 01 00       	push   $0x12014
   10ced:	ff 75 08             	pushl  0x8(%ebp)
   10cf0:	e8 3c ff ff ff       	call   10c31 <do_default_handler>
   10cf5:	83 c4 10             	add    $0x10,%esp
}
   10cf8:	90                   	nop
   10cf9:	c9                   	leave  
   10cfa:	c3                   	ret    

00010cfb <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10cfb:	55                   	push   %ebp
   10cfc:	89 e5                	mov    %esp,%ebp
   10cfe:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   10d01:	83 ec 08             	sub    $0x8,%esp
   10d04:	68 20 20 01 00       	push   $0x12020
   10d09:	ff 75 08             	pushl  0x8(%ebp)
   10d0c:	e8 20 ff ff ff       	call   10c31 <do_default_handler>
   10d11:	83 c4 10             	add    $0x10,%esp
}
   10d14:	90                   	nop
   10d15:	c9                   	leave  
   10d16:	c3                   	ret    

00010d17 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10d17:	55                   	push   %ebp
   10d18:	89 e5                	mov    %esp,%ebp
   10d1a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10d1d:	83 ec 08             	sub    $0x8,%esp
   10d20:	68 2a 20 01 00       	push   $0x1202a
   10d25:	ff 75 08             	pushl  0x8(%ebp)
   10d28:	e8 04 ff ff ff       	call   10c31 <do_default_handler>
   10d2d:	83 c4 10             	add    $0x10,%esp
}
   10d30:	90                   	nop
   10d31:	c9                   	leave  
   10d32:	c3                   	ret    

00010d33 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   10d33:	55                   	push   %ebp
   10d34:	89 e5                	mov    %esp,%ebp
   10d36:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10d39:	83 ec 08             	sub    $0x8,%esp
   10d3c:	68 40 20 01 00       	push   $0x12040
   10d41:	ff 75 08             	pushl  0x8(%ebp)
   10d44:	e8 e8 fe ff ff       	call   10c31 <do_default_handler>
   10d49:	83 c4 10             	add    $0x10,%esp
}
   10d4c:	90                   	nop
   10d4d:	c9                   	leave  
   10d4e:	c3                   	ret    

00010d4f <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   10d4f:	55                   	push   %ebp
   10d50:	89 e5                	mov    %esp,%ebp
   10d52:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   10d55:	83 ec 08             	sub    $0x8,%esp
   10d58:	68 50 20 01 00       	push   $0x12050
   10d5d:	ff 75 08             	pushl  0x8(%ebp)
   10d60:	e8 cc fe ff ff       	call   10c31 <do_default_handler>
   10d65:	83 c4 10             	add    $0x10,%esp
}
   10d68:	90                   	nop
   10d69:	c9                   	leave  
   10d6a:	c3                   	ret    

00010d6b <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10d6b:	55                   	push   %ebp
   10d6c:	89 e5                	mov    %esp,%ebp
   10d6e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   10d71:	83 ec 08             	sub    $0x8,%esp
   10d74:	68 66 20 01 00       	push   $0x12066
   10d79:	ff 75 08             	pushl  0x8(%ebp)
   10d7c:	e8 b0 fe ff ff       	call   10c31 <do_default_handler>
   10d81:	83 c4 10             	add    $0x10,%esp
}
   10d84:	90                   	nop
   10d85:	c9                   	leave  
   10d86:	c3                   	ret    

00010d87 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   10d87:	55                   	push   %ebp
   10d88:	89 e5                	mov    %esp,%ebp
   10d8a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   10d8d:	83 ec 08             	sub    $0x8,%esp
   10d90:	68 74 20 01 00       	push   $0x12074
   10d95:	ff 75 08             	pushl  0x8(%ebp)
   10d98:	e8 94 fe ff ff       	call   10c31 <do_default_handler>
   10d9d:	83 c4 10             	add    $0x10,%esp
}
   10da0:	90                   	nop
   10da1:	c9                   	leave  
   10da2:	c3                   	ret    

00010da3 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   10da3:	55                   	push   %ebp
   10da4:	89 e5                	mov    %esp,%ebp
   10da6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10da9:	83 ec 08             	sub    $0x8,%esp
   10dac:	68 80 20 01 00       	push   $0x12080
   10db1:	ff 75 08             	pushl  0x8(%ebp)
   10db4:	e8 78 fe ff ff       	call   10c31 <do_default_handler>
   10db9:	83 c4 10             	add    $0x10,%esp
}
   10dbc:	90                   	nop
   10dbd:	c9                   	leave  
   10dbe:	c3                   	ret    

00010dbf <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   10dbf:	55                   	push   %ebp
   10dc0:	89 e5                	mov    %esp,%ebp
   10dc2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   10dc5:	83 ec 08             	sub    $0x8,%esp
   10dc8:	68 95 20 01 00       	push   $0x12095
   10dcd:	ff 75 08             	pushl  0x8(%ebp)
   10dd0:	e8 5c fe ff ff       	call   10c31 <do_default_handler>
   10dd5:	83 c4 10             	add    $0x10,%esp
}
   10dd8:	90                   	nop
   10dd9:	c9                   	leave  
   10dda:	c3                   	ret    

00010ddb <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   10ddb:	55                   	push   %ebp
   10ddc:	89 e5                	mov    %esp,%ebp
   10dde:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   10de1:	83 ec 08             	sub    $0x8,%esp
   10de4:	68 aa 20 01 00       	push   $0x120aa
   10de9:	ff 75 08             	pushl  0x8(%ebp)
   10dec:	e8 40 fe ff ff       	call   10c31 <do_default_handler>
   10df1:	83 c4 10             	add    $0x10,%esp
}
   10df4:	90                   	nop
   10df5:	c9                   	leave  
   10df6:	c3                   	ret    

00010df7 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10df7:	55                   	push   %ebp
   10df8:	89 e5                	mov    %esp,%ebp
   10dfa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10dfd:	83 ec 08             	sub    $0x8,%esp
   10e00:	68 be 20 01 00       	push   $0x120be
   10e05:	ff 75 08             	pushl  0x8(%ebp)
   10e08:	e8 24 fe ff ff       	call   10c31 <do_default_handler>
   10e0d:	83 c4 10             	add    $0x10,%esp
}
   10e10:	90                   	nop
   10e11:	c9                   	leave  
   10e12:	c3                   	ret    

00010e13 <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   10e13:	55                   	push   %ebp
   10e14:	89 e5                	mov    %esp,%ebp
   10e16:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10e19:	83 ec 08             	sub    $0x8,%esp
   10e1c:	68 ca 20 01 00       	push   $0x120ca
   10e21:	ff 75 08             	pushl  0x8(%ebp)
   10e24:	e8 08 fe ff ff       	call   10c31 <do_default_handler>
   10e29:	83 c4 10             	add    $0x10,%esp
}
   10e2c:	90                   	nop
   10e2d:	c9                   	leave  
   10e2e:	c3                   	ret    

00010e2f <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   10e2f:	55                   	push   %ebp
   10e30:	89 e5                	mov    %esp,%ebp
   10e32:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10e35:	83 ec 08             	sub    $0x8,%esp
   10e38:	68 e8 20 01 00       	push   $0x120e8
   10e3d:	ff 75 08             	pushl  0x8(%ebp)
   10e40:	e8 ec fd ff ff       	call   10c31 <do_default_handler>
   10e45:	83 c4 10             	add    $0x10,%esp
}
   10e48:	90                   	nop
   10e49:	c9                   	leave  
   10e4a:	c3                   	ret    

00010e4b <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10e4b:	55                   	push   %ebp
   10e4c:	89 e5                	mov    %esp,%ebp
   10e4e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   10e51:	83 ec 08             	sub    $0x8,%esp
   10e54:	68 f9 20 01 00       	push   $0x120f9
   10e59:	ff 75 08             	pushl  0x8(%ebp)
   10e5c:	e8 d0 fd ff ff       	call   10c31 <do_default_handler>
   10e61:	83 c4 10             	add    $0x10,%esp
}
   10e64:	90                   	nop
   10e65:	c9                   	leave  
   10e66:	c3                   	ret    

00010e67 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10e67:	55                   	push   %ebp
   10e68:	89 e5                	mov    %esp,%ebp
   10e6a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10e6d:	83 ec 08             	sub    $0x8,%esp
   10e70:	68 08 21 01 00       	push   $0x12108
   10e75:	ff 75 08             	pushl  0x8(%ebp)
   10e78:	e8 b4 fd ff ff       	call   10c31 <do_default_handler>
   10e7d:	83 c4 10             	add    $0x10,%esp
}
   10e80:	90                   	nop
   10e81:	c9                   	leave  
   10e82:	c3                   	ret    

00010e83 <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   10e83:	55                   	push   %ebp
   10e84:	89 e5                	mov    %esp,%ebp
   10e86:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10e89:	83 ec 08             	sub    $0x8,%esp
   10e8c:	68 27 21 01 00       	push   $0x12127
   10e91:	ff 75 08             	pushl  0x8(%ebp)
   10e94:	e8 98 fd ff ff       	call   10c31 <do_default_handler>
   10e99:	83 c4 10             	add    $0x10,%esp
}
   10e9c:	90                   	nop
   10e9d:	c9                   	leave  
   10e9e:	c3                   	ret    

00010e9f <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   10e9f:	55                   	push   %ebp
   10ea0:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10ea2:	6a 11                	push   $0x11
   10ea4:	6a 20                	push   $0x20
   10ea6:	e8 36 fc ff ff       	call   10ae1 <outb>
   10eab:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10eae:	6a 20                	push   $0x20
   10eb0:	6a 21                	push   $0x21
   10eb2:	e8 2a fc ff ff       	call   10ae1 <outb>
   10eb7:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10eba:	6a 04                	push   $0x4
   10ebc:	6a 21                	push   $0x21
   10ebe:	e8 1e fc ff ff       	call   10ae1 <outb>
   10ec3:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10ec6:	6a 01                	push   $0x1
   10ec8:	6a 21                	push   $0x21
   10eca:	e8 12 fc ff ff       	call   10ae1 <outb>
   10ecf:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10ed2:	6a 11                	push   $0x11
   10ed4:	68 a0 00 00 00       	push   $0xa0
   10ed9:	e8 03 fc ff ff       	call   10ae1 <outb>
   10ede:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10ee1:	6a 28                	push   $0x28
   10ee3:	68 a1 00 00 00       	push   $0xa1
   10ee8:	e8 f4 fb ff ff       	call   10ae1 <outb>
   10eed:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10ef0:	6a 02                	push   $0x2
   10ef2:	68 a1 00 00 00       	push   $0xa1
   10ef7:	e8 e5 fb ff ff       	call   10ae1 <outb>
   10efc:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10eff:	6a 01                	push   $0x1
   10f01:	68 a1 00 00 00       	push   $0xa1
   10f06:	e8 d6 fb ff ff       	call   10ae1 <outb>
   10f0b:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10f0e:	68 fb 00 00 00       	push   $0xfb
   10f13:	6a 21                	push   $0x21
   10f15:	e8 c7 fb ff ff       	call   10ae1 <outb>
   10f1a:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10f1d:	68 ff 00 00 00       	push   $0xff
   10f22:	68 a1 00 00 00       	push   $0xa1
   10f27:	e8 b5 fb ff ff       	call   10ae1 <outb>
   10f2c:	83 c4 08             	add    $0x8,%esp
}
   10f2f:	90                   	nop
   10f30:	c9                   	leave  
   10f31:	c3                   	ret    

00010f32 <irq_init>:


void irq_init(void){ 
   10f32:	55                   	push   %ebp
   10f33:	89 e5                	mov    %esp,%ebp
   10f35:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10f38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10f3f:	eb 25                	jmp    10f66 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   10f41:	ba 28 00 01 00       	mov    $0x10028,%edx
   10f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f49:	c1 e0 03             	shl    $0x3,%eax
   10f4c:	05 a0 3b 01 00       	add    $0x13ba0,%eax
   10f51:	68 00 8e 00 00       	push   $0x8e00
   10f56:	52                   	push   %edx
   10f57:	6a 08                	push   $0x8
   10f59:	50                   	push   %eax
   10f5a:	e8 96 fa ff ff       	call   109f5 <gate_desc_set>
   10f5f:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   10f62:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f66:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10f6a:	7e d5                	jle    10f41 <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10f6c:	83 ec 08             	sub    $0x8,%esp
   10f6f:	68 47 00 01 00       	push   $0x10047
   10f74:	6a 00                	push   $0x0
   10f76:	e8 65 01 00 00       	call   110e0 <irq_install>
   10f7b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10f7e:	83 ec 08             	sub    $0x8,%esp
   10f81:	68 66 00 01 00       	push   $0x10066
   10f86:	6a 01                	push   $0x1
   10f88:	e8 53 01 00 00       	call   110e0 <irq_install>
   10f8d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10f90:	83 ec 08             	sub    $0x8,%esp
   10f93:	68 85 00 01 00       	push   $0x10085
   10f98:	6a 02                	push   $0x2
   10f9a:	e8 41 01 00 00       	call   110e0 <irq_install>
   10f9f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10fa2:	83 ec 08             	sub    $0x8,%esp
   10fa5:	68 a4 00 01 00       	push   $0x100a4
   10faa:	6a 03                	push   $0x3
   10fac:	e8 2f 01 00 00       	call   110e0 <irq_install>
   10fb1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10fb4:	83 ec 08             	sub    $0x8,%esp
   10fb7:	68 c3 00 01 00       	push   $0x100c3
   10fbc:	6a 04                	push   $0x4
   10fbe:	e8 1d 01 00 00       	call   110e0 <irq_install>
   10fc3:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10fc6:	83 ec 08             	sub    $0x8,%esp
   10fc9:	68 e2 00 01 00       	push   $0x100e2
   10fce:	6a 05                	push   $0x5
   10fd0:	e8 0b 01 00 00       	call   110e0 <irq_install>
   10fd5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10fd8:	83 ec 08             	sub    $0x8,%esp
   10fdb:	68 01 01 01 00       	push   $0x10101
   10fe0:	6a 06                	push   $0x6
   10fe2:	e8 f9 00 00 00       	call   110e0 <irq_install>
   10fe7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10fea:	83 ec 08             	sub    $0x8,%esp
   10fed:	68 20 01 01 00       	push   $0x10120
   10ff2:	6a 07                	push   $0x7
   10ff4:	e8 e7 00 00 00       	call   110e0 <irq_install>
   10ff9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10ffc:	83 ec 08             	sub    $0x8,%esp
   10fff:	68 3f 01 01 00       	push   $0x1013f
   11004:	6a 08                	push   $0x8
   11006:	e8 d5 00 00 00       	call   110e0 <irq_install>
   1100b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   1100e:	83 ec 08             	sub    $0x8,%esp
   11011:	68 5c 01 01 00       	push   $0x1015c
   11016:	6a 0a                	push   $0xa
   11018:	e8 c3 00 00 00       	call   110e0 <irq_install>
   1101d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   11020:	83 ec 08             	sub    $0x8,%esp
   11023:	68 79 01 01 00       	push   $0x10179
   11028:	6a 0b                	push   $0xb
   1102a:	e8 b1 00 00 00       	call   110e0 <irq_install>
   1102f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   11032:	83 ec 08             	sub    $0x8,%esp
   11035:	68 96 01 01 00       	push   $0x10196
   1103a:	6a 0c                	push   $0xc
   1103c:	e8 9f 00 00 00       	call   110e0 <irq_install>
   11041:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   11044:	83 ec 08             	sub    $0x8,%esp
   11047:	68 b3 01 01 00       	push   $0x101b3
   1104c:	6a 0d                	push   $0xd
   1104e:	e8 8d 00 00 00       	call   110e0 <irq_install>
   11053:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   11056:	83 ec 08             	sub    $0x8,%esp
   11059:	68 d0 01 01 00       	push   $0x101d0
   1105e:	6a 0e                	push   $0xe
   11060:	e8 7b 00 00 00       	call   110e0 <irq_install>
   11065:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   11068:	83 ec 08             	sub    $0x8,%esp
   1106b:	68 ed 01 01 00       	push   $0x101ed
   11070:	6a 10                	push   $0x10
   11072:	e8 69 00 00 00       	call   110e0 <irq_install>
   11077:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   1107a:	83 ec 08             	sub    $0x8,%esp
   1107d:	68 0c 02 01 00       	push   $0x1020c
   11082:	6a 11                	push   $0x11
   11084:	e8 57 00 00 00       	call   110e0 <irq_install>
   11089:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   1108c:	83 ec 08             	sub    $0x8,%esp
   1108f:	68 29 02 01 00       	push   $0x10229
   11094:	6a 12                	push   $0x12
   11096:	e8 45 00 00 00       	call   110e0 <irq_install>
   1109b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   1109e:	83 ec 08             	sub    $0x8,%esp
   110a1:	68 48 02 01 00       	push   $0x10248
   110a6:	6a 13                	push   $0x13
   110a8:	e8 33 00 00 00       	call   110e0 <irq_install>
   110ad:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   110b0:	83 ec 08             	sub    $0x8,%esp
   110b3:	68 67 02 01 00       	push   $0x10267
   110b8:	6a 14                	push   $0x14
   110ba:	e8 21 00 00 00       	call   110e0 <irq_install>
   110bf:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   110c2:	b8 a0 3b 01 00       	mov    $0x13ba0,%eax
   110c7:	83 ec 08             	sub    $0x8,%esp
   110ca:	68 00 04 00 00       	push   $0x400
   110cf:	50                   	push   %eax
   110d0:	e8 39 fa ff ff       	call   10b0e <lidt>
   110d5:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   110d8:	e8 c2 fd ff ff       	call   10e9f <init_pic>
}
   110dd:	90                   	nop
   110de:	c9                   	leave  
   110df:	c3                   	ret    

000110e0 <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   110e0:	55                   	push   %ebp
   110e1:	89 e5                	mov    %esp,%ebp
   110e3:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   110e6:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   110ea:	7e 07                	jle    110f3 <irq_install+0x13>
        return -1;
   110ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110f1:	eb 25                	jmp    11118 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   110f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   110f6:	8b 55 08             	mov    0x8(%ebp),%edx
   110f9:	c1 e2 03             	shl    $0x3,%edx
   110fc:	81 c2 a0 3b 01 00    	add    $0x13ba0,%edx
   11102:	68 00 8e 00 00       	push   $0x8e00
   11107:	50                   	push   %eax
   11108:	6a 08                	push   $0x8
   1110a:	52                   	push   %edx
   1110b:	e8 e5 f8 ff ff       	call   109f5 <gate_desc_set>
   11110:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   11113:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11118:	c9                   	leave  
   11119:	c3                   	ret    

0001111a <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   1111a:	55                   	push   %ebp
   1111b:	89 e5                	mov    %esp,%ebp
   1111d:	53                   	push   %ebx
   1111e:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11121:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11125:	7e 78                	jle    1119f <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   11127:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   1112b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1112f:	7f 32                	jg     11163 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11131:	6a 21                	push   $0x21
   11133:	e8 8c f9 ff ff       	call   10ac4 <inb>
   11138:	83 c4 04             	add    $0x4,%esp
   1113b:	89 c2                	mov    %eax,%edx
   1113d:	8b 45 08             	mov    0x8(%ebp),%eax
   11140:	bb 01 00 00 00       	mov    $0x1,%ebx
   11145:	89 c1                	mov    %eax,%ecx
   11147:	d3 e3                	shl    %cl,%ebx
   11149:	89 d8                	mov    %ebx,%eax
   1114b:	f7 d0                	not    %eax
   1114d:	21 d0                	and    %edx,%eax
   1114f:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   11152:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11156:	50                   	push   %eax
   11157:	6a 21                	push   $0x21
   11159:	e8 83 f9 ff ff       	call   10ae1 <outb>
   1115e:	83 c4 08             	add    $0x8,%esp
   11161:	eb 3d                	jmp    111a0 <irq_enable+0x86>
    }else{
        irq_num -= 8;
   11163:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11167:	68 a1 00 00 00       	push   $0xa1
   1116c:	e8 53 f9 ff ff       	call   10ac4 <inb>
   11171:	83 c4 04             	add    $0x4,%esp
   11174:	89 c2                	mov    %eax,%edx
   11176:	8b 45 08             	mov    0x8(%ebp),%eax
   11179:	bb 01 00 00 00       	mov    $0x1,%ebx
   1117e:	89 c1                	mov    %eax,%ecx
   11180:	d3 e3                	shl    %cl,%ebx
   11182:	89 d8                	mov    %ebx,%eax
   11184:	f7 d0                	not    %eax
   11186:	21 d0                	and    %edx,%eax
   11188:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   1118b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1118f:	50                   	push   %eax
   11190:	68 a1 00 00 00       	push   $0xa1
   11195:	e8 47 f9 ff ff       	call   10ae1 <outb>
   1119a:	83 c4 08             	add    $0x8,%esp
   1119d:	eb 01                	jmp    111a0 <irq_enable+0x86>
        return;
   1119f:	90                   	nop
    }
}
   111a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   111a3:	c9                   	leave  
   111a4:	c3                   	ret    

000111a5 <irq_disable>:
void irq_disable (int irq_num) {
   111a5:	55                   	push   %ebp
   111a6:	89 e5                	mov    %esp,%ebp
   111a8:	53                   	push   %ebx
   111a9:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   111ac:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   111b0:	7e 74                	jle    11226 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   111b2:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   111b6:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   111ba:	7f 30                	jg     111ec <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   111bc:	6a 21                	push   $0x21
   111be:	e8 01 f9 ff ff       	call   10ac4 <inb>
   111c3:	83 c4 04             	add    $0x4,%esp
   111c6:	89 c3                	mov    %eax,%ebx
   111c8:	8b 45 08             	mov    0x8(%ebp),%eax
   111cb:	ba 01 00 00 00       	mov    $0x1,%edx
   111d0:	89 c1                	mov    %eax,%ecx
   111d2:	d3 e2                	shl    %cl,%edx
   111d4:	89 d0                	mov    %edx,%eax
   111d6:	09 d8                	or     %ebx,%eax
   111d8:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   111db:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   111df:	50                   	push   %eax
   111e0:	6a 21                	push   $0x21
   111e2:	e8 fa f8 ff ff       	call   10ae1 <outb>
   111e7:	83 c4 08             	add    $0x8,%esp
   111ea:	eb 3b                	jmp    11227 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   111ec:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   111f0:	68 a1 00 00 00       	push   $0xa1
   111f5:	e8 ca f8 ff ff       	call   10ac4 <inb>
   111fa:	83 c4 04             	add    $0x4,%esp
   111fd:	89 c3                	mov    %eax,%ebx
   111ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11202:	ba 01 00 00 00       	mov    $0x1,%edx
   11207:	89 c1                	mov    %eax,%ecx
   11209:	d3 e2                	shl    %cl,%edx
   1120b:	89 d0                	mov    %edx,%eax
   1120d:	09 d8                	or     %ebx,%eax
   1120f:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11212:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11216:	50                   	push   %eax
   11217:	68 a1 00 00 00       	push   $0xa1
   1121c:	e8 c0 f8 ff ff       	call   10ae1 <outb>
   11221:	83 c4 08             	add    $0x8,%esp
   11224:	eb 01                	jmp    11227 <irq_disable+0x82>
        return;
   11226:	90                   	nop
    }
}
   11227:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1122a:	c9                   	leave  
   1122b:	c3                   	ret    

0001122c <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   1122c:	55                   	push   %ebp
   1122d:	89 e5                	mov    %esp,%ebp
    cli();
   1122f:	e8 cc f8 ff ff       	call   10b00 <cli>
}
   11234:	90                   	nop
   11235:	5d                   	pop    %ebp
   11236:	c3                   	ret    

00011237 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   11237:	55                   	push   %ebp
   11238:	89 e5                	mov    %esp,%ebp
    sti();
   1123a:	e8 c8 f8 ff ff       	call   10b07 <sti>
}
   1123f:	90                   	nop
   11240:	5d                   	pop    %ebp
   11241:	c3                   	ret    

00011242 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   11242:	55                   	push   %ebp
   11243:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   11245:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   11249:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1124d:	7e 0f                	jle    1125e <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   1124f:	6a 20                	push   $0x20
   11251:	68 a0 00 00 00       	push   $0xa0
   11256:	e8 86 f8 ff ff       	call   10ae1 <outb>
   1125b:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   1125e:	6a 20                	push   $0x20
   11260:	6a 20                	push   $0x20
   11262:	e8 7a f8 ff ff       	call   10ae1 <outb>
   11267:	83 c4 08             	add    $0x8,%esp

}
   1126a:	90                   	nop
   1126b:	c9                   	leave  
   1126c:	c3                   	ret    

0001126d <irq_enter_protection>:
/**
 * @brief 进入临界区
 * 
 * @return irq_state_t 
 */
irq_state_t irq_enter_protection (void) {
   1126d:	55                   	push   %ebp
   1126e:	89 e5                	mov    %esp,%ebp
   11270:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11273:	e8 c5 f8 ff ff       	call   10b3d <read_eflags>
   11278:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1127b:	e8 ac ff ff ff       	call   1122c <irq_disable_global>
    return state;
   11280:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11283:	c9                   	leave  
   11284:	c3                   	ret    

00011285 <irq_leave_protection>:
/**
 * @brief 退出临界区
 * 
 * @param state eflags寄存器的值
 */
void irq_leave_protection (irq_state_t state) {
   11285:	55                   	push   %ebp
   11286:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11288:	ff 75 08             	pushl  0x8(%ebp)
   1128b:	e8 bd f8 ff ff       	call   10b4d <write_eflags>
   11290:	83 c4 04             	add    $0x4,%esp
}
   11293:	90                   	nop
   11294:	c9                   	leave  
   11295:	c3                   	ret    

00011296 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11296:	55                   	push   %ebp
   11297:	89 e5                	mov    %esp,%ebp
   11299:	83 ec 08             	sub    $0x8,%esp
   1129c:	8b 55 08             	mov    0x8(%ebp),%edx
   1129f:	8b 45 0c             	mov    0xc(%ebp),%eax
   112a2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   112a6:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   112a9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   112ad:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   112b1:	ee                   	out    %al,(%dx)
}
   112b2:	90                   	nop
   112b3:	c9                   	leave  
   112b4:	c3                   	ret    

000112b5 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   112b5:	55                   	push   %ebp
   112b6:	89 e5                	mov    %esp,%ebp
   112b8:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   112bb:	a1 a0 3f 01 00       	mov    0x13fa0,%eax
   112c0:	83 c0 01             	add    $0x1,%eax
   112c3:	a3 a0 3f 01 00       	mov    %eax,0x13fa0
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   112c8:	83 ec 0c             	sub    $0xc,%esp
   112cb:	6a 20                	push   $0x20
   112cd:	e8 70 ff ff ff       	call   11242 <pic_send_eoi>
   112d2:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   112d5:	e8 5f f4 ff ff       	call   10739 <task_time_tick>
}
   112da:	90                   	nop
   112db:	c9                   	leave  
   112dc:	c3                   	ret    

000112dd <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   112dd:	55                   	push   %ebp
   112de:	89 e5                	mov    %esp,%ebp
   112e0:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   112e3:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   112ea:	6a 36                	push   $0x36
   112ec:	6a 43                	push   $0x43
   112ee:	e8 a3 ff ff ff       	call   11296 <outb>
   112f3:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   112f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112f9:	0f b6 c0             	movzbl %al,%eax
   112fc:	50                   	push   %eax
   112fd:	6a 40                	push   $0x40
   112ff:	e8 92 ff ff ff       	call   11296 <outb>
   11304:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   11307:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1130a:	c1 e8 08             	shr    $0x8,%eax
   1130d:	0f b6 c0             	movzbl %al,%eax
   11310:	50                   	push   %eax
   11311:	6a 40                	push   $0x40
   11313:	e8 7e ff ff ff       	call   11296 <outb>
   11318:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1131b:	83 ec 08             	sub    $0x8,%esp
   1131e:	68 86 02 01 00       	push   $0x10286
   11323:	6a 20                	push   $0x20
   11325:	e8 b6 fd ff ff       	call   110e0 <irq_install>
   1132a:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   1132d:	83 ec 0c             	sub    $0xc,%esp
   11330:	6a 20                	push   $0x20
   11332:	e8 e3 fd ff ff       	call   1111a <irq_enable>
   11337:	83 c4 10             	add    $0x10,%esp
}
   1133a:	90                   	nop
   1133b:	c9                   	leave  
   1133c:	c3                   	ret    

0001133d <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   1133d:	55                   	push   %ebp
   1133e:	89 e5                	mov    %esp,%ebp
   11340:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11343:	c7 05 a0 3f 01 00 00 	movl   $0x0,0x13fa0
   1134a:	00 00 00 

    init_pit();
   1134d:	e8 8b ff ff ff       	call   112dd <init_pit>
   11352:	90                   	nop
   11353:	c9                   	leave  
   11354:	c3                   	ret    

00011355 <kernel_init>:
#include "ipc/sem.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   11355:	55                   	push   %ebp
   11356:	89 e5                	mov    %esp,%ebp
   11358:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   1135b:	e8 dc f6 ff ff       	call   10a3c <cpu_init>
    log_init();
   11360:	e8 db 09 00 00       	call   11d40 <log_init>
    irq_init();
   11365:	e8 c8 fb ff ff       	call   10f32 <irq_init>
    time_init();
   1136a:	e8 ce ff ff ff       	call   1133d <time_init>

    task_manager_init();
   1136f:	e8 fa f1 ff ff       	call   1056e <task_manager_init>

}
   11374:	90                   	nop
   11375:	c9                   	leave  
   11376:	c3                   	ret    

00011377 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
static sem_t sem;

void init_task_entry(void) {
   11377:	55                   	push   %ebp
   11378:	89 e5                	mov    %esp,%ebp
   1137a:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   1137d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        sem_wait(&sem);
   11384:	83 ec 0c             	sub    $0xc,%esp
   11387:	68 74 50 01 00       	push   $0x15074
   1138c:	e8 18 01 00 00       	call   114a9 <sem_wait>
   11391:	83 c4 10             	add    $0x10,%esp
        
        log_printf("int task: %d",count++);
   11394:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11397:	8d 50 01             	lea    0x1(%eax),%edx
   1139a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1139d:	83 ec 08             	sub    $0x8,%esp
   113a0:	50                   	push   %eax
   113a1:	68 41 21 01 00       	push   $0x12141
   113a6:	e8 0a 0a 00 00       	call   11db5 <log_printf>
   113ab:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem);
   113ae:	eb d4                	jmp    11384 <init_task_entry+0xd>

000113b0 <init_main>:
    }    

}

void init_main(void) {
   113b0:	55                   	push   %ebp
   113b1:	89 e5                	mov    %esp,%ebp
   113b3:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   113b6:	83 ec 0c             	sub    $0xc,%esp
   113b9:	68 4e 21 01 00       	push   $0x1214e
   113be:	e8 f2 09 00 00       	call   11db5 <log_printf>
   113c3:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   113c6:	83 ec 04             	sub    $0x4,%esp
   113c9:	68 64 21 01 00       	push   $0x12164
   113ce:	68 6d 21 01 00       	push   $0x1216d
   113d3:	68 73 21 01 00       	push   $0x12173
   113d8:	e8 d8 09 00 00       	call   11db5 <log_printf>
   113dd:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   113e0:	83 ec 0c             	sub    $0xc,%esp
   113e3:	6a 61                	push   $0x61
   113e5:	68 45 23 01 00       	push   $0x12345
   113ea:	6a 85                	push   $0xffffff85
   113ec:	68 40 e2 01 00       	push   $0x1e240
   113f1:	68 82 21 01 00       	push   $0x12182
   113f6:	e8 ba 09 00 00       	call   11db5 <log_printf>
   113fb:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task,"init task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   113fe:	ba c0 4f 01 00       	mov    $0x14fc0,%edx
   11403:	b8 77 13 01 00       	mov    $0x11377,%eax
   11408:	52                   	push   %edx
   11409:	50                   	push   %eax
   1140a:	68 8e 21 01 00       	push   $0x1218e
   1140f:	68 c0 4f 01 00       	push   $0x14fc0
   11414:	e8 17 f0 ff ff       	call   10430 <task_init>
   11419:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   1141c:	e8 fc f0 ff ff       	call   1051d <task_first_init>
    sem_init(&sem,0);
   11421:	83 ec 08             	sub    $0x8,%esp
   11424:	6a 00                	push   $0x0
   11426:	68 74 50 01 00       	push   $0x15074
   1142b:	e8 56 00 00 00       	call   11486 <sem_init>
   11430:	83 c4 10             	add    $0x10,%esp

    irq_enable_global();
   11433:	e8 ff fd ff ff       	call   11237 <irq_enable_global>
    int count = 0; 
   11438:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("first main: %d",count++);
   1143f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11442:	8d 50 01             	lea    0x1(%eax),%edx
   11445:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11448:	83 ec 08             	sub    $0x8,%esp
   1144b:	50                   	push   %eax
   1144c:	68 98 21 01 00       	push   $0x12198
   11451:	e8 5f 09 00 00       	call   11db5 <log_printf>
   11456:	83 c4 10             	add    $0x10,%esp
        sem_notify(&sem);
   11459:	83 ec 0c             	sub    $0xc,%esp
   1145c:	68 74 50 01 00       	push   $0x15074
   11461:	e8 ae 00 00 00       	call   11514 <sem_notify>
   11466:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11469:	83 ec 0c             	sub    $0xc,%esp
   1146c:	68 e8 03 00 00       	push   $0x3e8
   11471:	e8 f6 f3 ff ff       	call   1086c <sys_sleep>
   11476:	83 c4 10             	add    $0x10,%esp
        log_printf("first main: %d",count++);
   11479:	eb c4                	jmp    1143f <init_main+0x8f>

0001147b <list_count>:
static inline int list_count(list_t *list) {
   1147b:	55                   	push   %ebp
   1147c:	89 e5                	mov    %esp,%ebp
    return list->count;
   1147e:	8b 45 08             	mov    0x8(%ebp),%eax
   11481:	8b 40 08             	mov    0x8(%eax),%eax
}
   11484:	5d                   	pop    %ebp
   11485:	c3                   	ret    

00011486 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init (sem_t *sem, int init_count) {
   11486:	55                   	push   %ebp
   11487:	89 e5                	mov    %esp,%ebp
   11489:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   1148c:	8b 45 08             	mov    0x8(%ebp),%eax
   1148f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11492:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11494:	8b 45 08             	mov    0x8(%ebp),%eax
   11497:	83 c0 04             	add    $0x4,%eax
   1149a:	83 ec 0c             	sub    $0xc,%esp
   1149d:	50                   	push   %eax
   1149e:	e8 7a 06 00 00       	call   11b1d <list_init>
   114a3:	83 c4 10             	add    $0x10,%esp
}
   114a6:	90                   	nop
   114a7:	c9                   	leave  
   114a8:	c3                   	ret    

000114a9 <sem_wait>:

void sem_wait (sem_t *sem) {
   114a9:	55                   	push   %ebp
   114aa:	89 e5                	mov    %esp,%ebp
   114ac:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   114af:	e8 b9 fd ff ff       	call   1126d <irq_enter_protection>
   114b4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   114b7:	8b 45 08             	mov    0x8(%ebp),%eax
   114ba:	8b 00                	mov    (%eax),%eax
   114bc:	85 c0                	test   %eax,%eax
   114be:	7e 0f                	jle    114cf <sem_wait+0x26>
        sem->count--;
   114c0:	8b 45 08             	mov    0x8(%ebp),%eax
   114c3:	8b 00                	mov    (%eax),%eax
   114c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   114c8:	8b 45 08             	mov    0x8(%ebp),%eax
   114cb:	89 10                	mov    %edx,(%eax)
   114cd:	eb 34                	jmp    11503 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   114cf:	e8 9f f1 ff ff       	call   10673 <task_current>
   114d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   114d7:	83 ec 0c             	sub    $0xc,%esp
   114da:	ff 75 f0             	pushl  -0x10(%ebp)
   114dd:	e8 23 f1 ff ff       	call   10605 <task_set_block>
   114e2:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   114e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114e8:	8d 50 38             	lea    0x38(%eax),%edx
   114eb:	8b 45 08             	mov    0x8(%ebp),%eax
   114ee:	83 c0 04             	add    $0x4,%eax
   114f1:	83 ec 08             	sub    $0x8,%esp
   114f4:	52                   	push   %edx
   114f5:	50                   	push   %eax
   114f6:	e8 a7 06 00 00       	call   11ba2 <list_insert_last>
   114fb:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   114fe:	e8 7a f1 ff ff       	call   1067d <task_dispatch>
    }

    irq_leave_protection(state);
   11503:	83 ec 0c             	sub    $0xc,%esp
   11506:	ff 75 f4             	pushl  -0xc(%ebp)
   11509:	e8 77 fd ff ff       	call   11285 <irq_leave_protection>
   1150e:	83 c4 10             	add    $0x10,%esp

}
   11511:	90                   	nop
   11512:	c9                   	leave  
   11513:	c3                   	ret    

00011514 <sem_notify>:
void sem_notify (sem_t *sem) {
   11514:	55                   	push   %ebp
   11515:	89 e5                	mov    %esp,%ebp
   11517:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1151a:	e8 4e fd ff ff       	call   1126d <irq_enter_protection>
   1151f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&sem->wait_list)) {
   11522:	8b 45 08             	mov    0x8(%ebp),%eax
   11525:	83 c0 04             	add    $0x4,%eax
   11528:	83 ec 0c             	sub    $0xc,%esp
   1152b:	50                   	push   %eax
   1152c:	e8 4a ff ff ff       	call   1147b <list_count>
   11531:	83 c4 10             	add    $0x10,%esp
   11534:	85 c0                	test   %eax,%eax
   11536:	74 40                	je     11578 <sem_notify+0x64>
        list_node_t * node = list_remove_first(&sem->wait_list);
   11538:	8b 45 08             	mov    0x8(%ebp),%eax
   1153b:	83 c0 04             	add    $0x4,%eax
   1153e:	83 ec 0c             	sub    $0xc,%esp
   11541:	50                   	push   %eax
   11542:	e8 bf 06 00 00       	call   11c06 <list_remove_first>
   11547:	83 c4 10             	add    $0x10,%esp
   1154a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node,task_t,wait_node);
   1154d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11551:	74 08                	je     1155b <sem_notify+0x47>
   11553:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11556:	83 e8 38             	sub    $0x38,%eax
   11559:	eb 05                	jmp    11560 <sem_notify+0x4c>
   1155b:	b8 00 00 00 00       	mov    $0x0,%eax
   11560:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11563:	83 ec 0c             	sub    $0xc,%esp
   11566:	ff 75 ec             	pushl  -0x14(%ebp)
   11569:	e8 63 f0 ff ff       	call   105d1 <task_set_ready>
   1156e:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11571:	e8 07 f1 ff ff       	call   1067d <task_dispatch>
   11576:	eb 0d                	jmp    11585 <sem_notify+0x71>
    } else {
        sem->count++;
   11578:	8b 45 08             	mov    0x8(%ebp),%eax
   1157b:	8b 00                	mov    (%eax),%eax
   1157d:	8d 50 01             	lea    0x1(%eax),%edx
   11580:	8b 45 08             	mov    0x8(%ebp),%eax
   11583:	89 10                	mov    %edx,(%eax)
    }
    
    irq_leave_protection(state);
   11585:	83 ec 0c             	sub    $0xc,%esp
   11588:	ff 75 f4             	pushl  -0xc(%ebp)
   1158b:	e8 f5 fc ff ff       	call   11285 <irq_leave_protection>
   11590:	83 c4 10             	add    $0x10,%esp
}
   11593:	90                   	nop
   11594:	c9                   	leave  
   11595:	c3                   	ret    

00011596 <sem_count>:


int sem_count (sem_t *sem) {
   11596:	55                   	push   %ebp
   11597:	89 e5                	mov    %esp,%ebp
   11599:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1159c:	e8 cc fc ff ff       	call   1126d <irq_enter_protection>
   115a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;    
   115a4:	8b 45 08             	mov    0x8(%ebp),%eax
   115a7:	8b 00                	mov    (%eax),%eax
   115a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   115ac:	83 ec 0c             	sub    $0xc,%esp
   115af:	ff 75 f4             	pushl  -0xc(%ebp)
   115b2:	e8 ce fc ff ff       	call   11285 <irq_leave_protection>
   115b7:	83 c4 10             	add    $0x10,%esp

    return count;    
   115ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   115bd:	c9                   	leave  
   115be:	c3                   	ret    

000115bf <hlt>:
static inline void hlt (void) {
   115bf:	55                   	push   %ebp
   115c0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   115c2:	f4                   	hlt    
}
   115c3:	90                   	nop
   115c4:	5d                   	pop    %ebp
   115c5:	c3                   	ret    

000115c6 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   115c6:	55                   	push   %ebp
   115c7:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   115c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   115cd:	74 3b                	je     1160a <kernel_strcpy+0x44>
   115cf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   115d3:	74 35                	je     1160a <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   115d5:	eb 17                	jmp    115ee <kernel_strcpy+0x28>
        *dest++ = *src++;
   115d7:	8b 55 0c             	mov    0xc(%ebp),%edx
   115da:	8d 42 01             	lea    0x1(%edx),%eax
   115dd:	89 45 0c             	mov    %eax,0xc(%ebp)
   115e0:	8b 45 08             	mov    0x8(%ebp),%eax
   115e3:	8d 48 01             	lea    0x1(%eax),%ecx
   115e6:	89 4d 08             	mov    %ecx,0x8(%ebp)
   115e9:	0f b6 12             	movzbl (%edx),%edx
   115ec:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   115ee:	8b 45 08             	mov    0x8(%ebp),%eax
   115f1:	0f b6 00             	movzbl (%eax),%eax
   115f4:	84 c0                	test   %al,%al
   115f6:	74 0a                	je     11602 <kernel_strcpy+0x3c>
   115f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   115fb:	0f b6 00             	movzbl (%eax),%eax
   115fe:	84 c0                	test   %al,%al
   11600:	75 d5                	jne    115d7 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	c6 00 00             	movb   $0x0,(%eax)
   11608:	eb 01                	jmp    1160b <kernel_strcpy+0x45>
        return;
   1160a:	90                   	nop
}
   1160b:	5d                   	pop    %ebp
   1160c:	c3                   	ret    

0001160d <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   1160d:	55                   	push   %ebp
   1160e:	89 e5                	mov    %esp,%ebp
   11610:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   11613:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11617:	74 61                	je     1167a <kernel_strncpy+0x6d>
   11619:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1161d:	74 5b                	je     1167a <kernel_strncpy+0x6d>
   1161f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11623:	74 55                	je     1167a <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   11625:	8b 45 08             	mov    0x8(%ebp),%eax
   11628:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   1162b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1162e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   11631:	eb 17                	jmp    1164a <kernel_strncpy+0x3d>
        *d++ = *s++;
   11633:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11636:	8d 42 01             	lea    0x1(%edx),%eax
   11639:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1163c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1163f:	8d 48 01             	lea    0x1(%eax),%ecx
   11642:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11645:	0f b6 12             	movzbl (%edx),%edx
   11648:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1164a:	8b 45 10             	mov    0x10(%ebp),%eax
   1164d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11650:	89 55 10             	mov    %edx,0x10(%ebp)
   11653:	85 c0                	test   %eax,%eax
   11655:	7e 0a                	jle    11661 <kernel_strncpy+0x54>
   11657:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1165a:	0f b6 00             	movzbl (%eax),%eax
   1165d:	84 c0                	test   %al,%al
   1165f:	75 d2                	jne    11633 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   11661:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11665:	75 0b                	jne    11672 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11667:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1166a:	83 e8 01             	sub    $0x1,%eax
   1166d:	c6 00 00             	movb   $0x0,(%eax)
   11670:	eb 09                	jmp    1167b <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   11672:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11675:	c6 00 00             	movb   $0x0,(%eax)
   11678:	eb 01                	jmp    1167b <kernel_strncpy+0x6e>
        return;
   1167a:	90                   	nop
    }
}
   1167b:	c9                   	leave  
   1167c:	c3                   	ret    

0001167d <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   1167d:	55                   	push   %ebp
   1167e:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   11680:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11684:	74 06                	je     1168c <kernel_strncmp+0xf>
   11686:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1168a:	75 0f                	jne    1169b <kernel_strncmp+0x1e>
        return -1;
   1168c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11691:	eb 62                	jmp    116f5 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   11693:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11697:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   1169b:	8b 45 08             	mov    0x8(%ebp),%eax
   1169e:	0f b6 00             	movzbl (%eax),%eax
   116a1:	84 c0                	test   %al,%al
   116a3:	74 20                	je     116c5 <kernel_strncmp+0x48>
   116a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   116a8:	0f b6 00             	movzbl (%eax),%eax
   116ab:	84 c0                	test   %al,%al
   116ad:	74 16                	je     116c5 <kernel_strncmp+0x48>
   116af:	8b 45 08             	mov    0x8(%ebp),%eax
   116b2:	0f b6 10             	movzbl (%eax),%edx
   116b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   116b8:	0f b6 00             	movzbl (%eax),%eax
   116bb:	38 c2                	cmp    %al,%dl
   116bd:	75 06                	jne    116c5 <kernel_strncmp+0x48>
   116bf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   116c3:	75 ce                	jne    11693 <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   116c5:	8b 45 08             	mov    0x8(%ebp),%eax
   116c8:	0f b6 00             	movzbl (%eax),%eax
   116cb:	84 c0                	test   %al,%al
   116cd:	74 21                	je     116f0 <kernel_strncmp+0x73>
   116cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d2:	0f b6 00             	movzbl (%eax),%eax
   116d5:	84 c0                	test   %al,%al
   116d7:	74 17                	je     116f0 <kernel_strncmp+0x73>
   116d9:	8b 45 08             	mov    0x8(%ebp),%eax
   116dc:	0f b6 10             	movzbl (%eax),%edx
   116df:	8b 45 0c             	mov    0xc(%ebp),%eax
   116e2:	0f b6 00             	movzbl (%eax),%eax
   116e5:	38 c2                	cmp    %al,%dl
   116e7:	74 07                	je     116f0 <kernel_strncmp+0x73>
   116e9:	b8 01 00 00 00       	mov    $0x1,%eax
   116ee:	eb 05                	jmp    116f5 <kernel_strncmp+0x78>
   116f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116f5:	5d                   	pop    %ebp
   116f6:	c3                   	ret    

000116f7 <kernel_strlen>:
int kernel_strlen(const char * str){
   116f7:	55                   	push   %ebp
   116f8:	89 e5                	mov    %esp,%ebp
   116fa:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   116fd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11701:	75 07                	jne    1170a <kernel_strlen+0x13>
        return 0;
   11703:	b8 00 00 00 00       	mov    $0x0,%eax
   11708:	eb 26                	jmp    11730 <kernel_strlen+0x39>
    }

    const char * c = str;
   1170a:	8b 45 08             	mov    0x8(%ebp),%eax
   1170d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11710:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11717:	eb 04                	jmp    1171d <kernel_strlen+0x26>
        len++;
   11719:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   1171d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11720:	8d 50 01             	lea    0x1(%eax),%edx
   11723:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11726:	0f b6 00             	movzbl (%eax),%eax
   11729:	84 c0                	test   %al,%al
   1172b:	75 ec                	jne    11719 <kernel_strlen+0x22>
    }
    return len;
   1172d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11730:	c9                   	leave  
   11731:	c3                   	ret    

00011732 <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   11732:	55                   	push   %ebp
   11733:	89 e5                	mov    %esp,%ebp
   11735:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11738:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1173c:	74 40                	je     1177e <kernel_memcpy+0x4c>
   1173e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11742:	74 3a                	je     1177e <kernel_memcpy+0x4c>
   11744:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11748:	74 34                	je     1177e <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   1174a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1174d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   11750:	8b 45 08             	mov    0x8(%ebp),%eax
   11753:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11756:	eb 17                	jmp    1176f <kernel_memcpy+0x3d>
        *d++ = *s++;
   11758:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1175b:	8d 42 01             	lea    0x1(%edx),%eax
   1175e:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11761:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11764:	8d 48 01             	lea    0x1(%eax),%ecx
   11767:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1176a:	0f b6 12             	movzbl (%edx),%edx
   1176d:	88 10                	mov    %dl,(%eax)
    while(size--){
   1176f:	8b 45 10             	mov    0x10(%ebp),%eax
   11772:	8d 50 ff             	lea    -0x1(%eax),%edx
   11775:	89 55 10             	mov    %edx,0x10(%ebp)
   11778:	85 c0                	test   %eax,%eax
   1177a:	75 dc                	jne    11758 <kernel_memcpy+0x26>
   1177c:	eb 01                	jmp    1177f <kernel_memcpy+0x4d>
        return;
   1177e:	90                   	nop
    }

}
   1177f:	c9                   	leave  
   11780:	c3                   	ret    

00011781 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   11781:	55                   	push   %ebp
   11782:	89 e5                	mov    %esp,%ebp
   11784:	83 ec 14             	sub    $0x14,%esp
   11787:	8b 45 0c             	mov    0xc(%ebp),%eax
   1178a:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   1178d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11791:	74 2c                	je     117bf <kernel_memset+0x3e>
   11793:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11797:	74 26                	je     117bf <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11799:	8b 45 08             	mov    0x8(%ebp),%eax
   1179c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   1179f:	eb 0f                	jmp    117b0 <kernel_memset+0x2f>
       *d++ = v; 
   117a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117a4:	8d 50 01             	lea    0x1(%eax),%edx
   117a7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   117aa:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   117ae:	88 10                	mov    %dl,(%eax)
    while(size--){
   117b0:	8b 45 10             	mov    0x10(%ebp),%eax
   117b3:	8d 50 ff             	lea    -0x1(%eax),%edx
   117b6:	89 55 10             	mov    %edx,0x10(%ebp)
   117b9:	85 c0                	test   %eax,%eax
   117bb:	75 e4                	jne    117a1 <kernel_memset+0x20>
   117bd:	eb 01                	jmp    117c0 <kernel_memset+0x3f>
        return;
   117bf:	90                   	nop
    }
}
   117c0:	c9                   	leave  
   117c1:	c3                   	ret    

000117c2 <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   117c2:	55                   	push   %ebp
   117c3:	89 e5                	mov    %esp,%ebp
   117c5:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   117c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117cc:	74 0c                	je     117da <kernel_memcmp+0x18>
   117ce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   117d2:	74 06                	je     117da <kernel_memcmp+0x18>
   117d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   117d8:	75 07                	jne    117e1 <kernel_memcmp+0x1f>
        return -1;
   117da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   117df:	eb 43                	jmp    11824 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   117e1:	8b 45 08             	mov    0x8(%ebp),%eax
   117e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   117e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   117ea:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   117ed:	eb 23                	jmp    11812 <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   117ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117f2:	8d 50 01             	lea    0x1(%eax),%edx
   117f5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   117f8:	0f b6 08             	movzbl (%eax),%ecx
   117fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   117fe:	8d 50 01             	lea    0x1(%eax),%edx
   11801:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11804:	0f b6 00             	movzbl (%eax),%eax
   11807:	38 c1                	cmp    %al,%cl
   11809:	74 07                	je     11812 <kernel_memcmp+0x50>
            return -1;
   1180b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11810:	eb 12                	jmp    11824 <kernel_memcmp+0x62>
    while(size--){
   11812:	8b 45 10             	mov    0x10(%ebp),%eax
   11815:	8d 50 ff             	lea    -0x1(%eax),%edx
   11818:	89 55 10             	mov    %edx,0x10(%ebp)
   1181b:	85 c0                	test   %eax,%eax
   1181d:	75 d0                	jne    117ef <kernel_memcmp+0x2d>
        }
    }
    return 0;
   1181f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11824:	c9                   	leave  
   11825:	c3                   	ret    

00011826 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   11826:	55                   	push   %ebp
   11827:	89 e5                	mov    %esp,%ebp
   11829:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   1182c:	8d 45 10             	lea    0x10(%ebp),%eax
   1182f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   11832:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11835:	83 ec 04             	sub    $0x4,%esp
   11838:	50                   	push   %eax
   11839:	ff 75 0c             	pushl  0xc(%ebp)
   1183c:	ff 75 08             	pushl  0x8(%ebp)
   1183f:	e8 45 01 00 00       	call   11989 <kernel_vsprintf>
   11844:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11847:	90                   	nop
   11848:	c9                   	leave  
   11849:	c3                   	ret    

0001184a <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   1184a:	55                   	push   %ebp
   1184b:	89 e5                	mov    %esp,%ebp
   1184d:	53                   	push   %ebx
   1184e:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11851:	8b 45 08             	mov    0x8(%ebp),%eax
   11854:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11857:	8b 45 0c             	mov    0xc(%ebp),%eax
   1185a:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   1185d:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11861:	74 1d                	je     11880 <kernel_itoa+0x36>
   11863:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11867:	74 17                	je     11880 <kernel_itoa+0x36>
   11869:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1186d:	74 11                	je     11880 <kernel_itoa+0x36>
   1186f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11873:	74 0b                	je     11880 <kernel_itoa+0x36>
        *p = '\0';
   11875:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11878:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1187b:	e9 03 01 00 00       	jmp    11983 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11880:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11887:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1188b:	79 19                	jns    118a6 <kernel_itoa+0x5c>
   1188d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11891:	75 13                	jne    118a6 <kernel_itoa+0x5c>
        *p++ = '-';
   11893:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11896:	8d 50 01             	lea    0x1(%eax),%edx
   11899:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1189c:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   1189f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   118a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118aa:	74 3b                	je     118e7 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   118ac:	8b 0d f8 21 01 00    	mov    0x121f8,%ecx
   118b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   118b5:	99                   	cltd   
   118b6:	f7 7d 10             	idivl  0x10(%ebp)
   118b9:	89 d0                	mov    %edx,%eax
   118bb:	83 c0 0f             	add    $0xf,%eax
   118be:	01 c8                	add    %ecx,%eax
   118c0:	0f b6 00             	movzbl (%eax),%eax
   118c3:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   118c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   118c9:	8d 50 01             	lea    0x1(%eax),%edx
   118cc:	89 55 f8             	mov    %edx,-0x8(%ebp)
   118cf:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   118d3:	88 10                	mov    %dl,(%eax)
            num /= base;
   118d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   118d8:	99                   	cltd   
   118d9:	f7 7d 10             	idivl  0x10(%ebp)
   118dc:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   118df:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   118e3:	75 c7                	jne    118ac <kernel_itoa+0x62>
   118e5:	eb 4b                	jmp    11932 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   118e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   118ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   118ed:	8b 0d f8 21 01 00    	mov    0x121f8,%ecx
   118f3:	8b 5d 10             	mov    0x10(%ebp),%ebx
   118f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118f9:	ba 00 00 00 00       	mov    $0x0,%edx
   118fe:	f7 f3                	div    %ebx
   11900:	89 d0                	mov    %edx,%eax
   11902:	83 c0 0f             	add    $0xf,%eax
   11905:	01 c8                	add    %ecx,%eax
   11907:	0f b6 00             	movzbl (%eax),%eax
   1190a:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   1190d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11910:	8d 50 01             	lea    0x1(%eax),%edx
   11913:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11916:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1191a:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   1191c:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1191f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11922:	ba 00 00 00 00       	mov    $0x0,%edx
   11927:	f7 f3                	div    %ebx
   11929:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   1192c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11930:	75 bb                	jne    118ed <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11932:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11935:	8d 50 ff             	lea    -0x1(%eax),%edx
   11938:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1193b:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   1193e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11942:	74 08                	je     1194c <kernel_itoa+0x102>
   11944:	8b 45 08             	mov    0x8(%ebp),%eax
   11947:	83 c0 01             	add    $0x1,%eax
   1194a:	eb 03                	jmp    1194f <kernel_itoa+0x105>
   1194c:	8b 45 08             	mov    0x8(%ebp),%eax
   1194f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   11952:	eb 27                	jmp    1197b <kernel_itoa+0x131>
        char ch = *start;
   11954:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11957:	0f b6 00             	movzbl (%eax),%eax
   1195a:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   1195d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11960:	0f b6 10             	movzbl (%eax),%edx
   11963:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11966:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11968:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1196b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1196e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11971:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11975:	88 10                	mov    %dl,(%eax)
        start++;
   11977:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1197b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1197e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11981:	72 d1                	jb     11954 <kernel_itoa+0x10a>
    }
}
   11983:	83 c4 20             	add    $0x20,%esp
   11986:	5b                   	pop    %ebx
   11987:	5d                   	pop    %ebp
   11988:	c3                   	ret    

00011989 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   11989:	55                   	push   %ebp
   1198a:	89 e5                	mov    %esp,%ebp
   1198c:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   1198f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11996:	8b 45 08             	mov    0x8(%ebp),%eax
   11999:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   1199c:	e9 17 01 00 00       	jmp    11ab8 <kernel_vsprintf+0x12f>
        switch(state) {
   119a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   119a4:	85 c0                	test   %eax,%eax
   119a6:	74 0a                	je     119b2 <kernel_vsprintf+0x29>
   119a8:	83 f8 01             	cmp    $0x1,%eax
   119ab:	74 2b                	je     119d8 <kernel_vsprintf+0x4f>
   119ad:	e9 06 01 00 00       	jmp    11ab8 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   119b2:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   119b6:	75 0c                	jne    119c4 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   119b8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   119bf:	e9 f4 00 00 00       	jmp    11ab8 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   119c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   119c7:	8d 50 01             	lea    0x1(%eax),%edx
   119ca:	89 55 f8             	mov    %edx,-0x8(%ebp)
   119cd:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   119d1:	88 10                	mov    %dl,(%eax)
                }
                break;
   119d3:	e9 e0 00 00 00       	jmp    11ab8 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   119d8:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   119dc:	75 47                	jne    11a25 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   119de:	8b 45 10             	mov    0x10(%ebp),%eax
   119e1:	8d 50 04             	lea    0x4(%eax),%edx
   119e4:	89 55 10             	mov    %edx,0x10(%ebp)
   119e7:	8b 00                	mov    (%eax),%eax
   119e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   119ec:	ff 75 f4             	pushl  -0xc(%ebp)
   119ef:	e8 03 fd ff ff       	call   116f7 <kernel_strlen>
   119f4:	83 c4 04             	add    $0x4,%esp
   119f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   119fa:	eb 17                	jmp    11a13 <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   119fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   119ff:	8d 42 01             	lea    0x1(%edx),%eax
   11a02:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11a05:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11a08:	8d 48 01             	lea    0x1(%eax),%ecx
   11a0b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11a0e:	0f b6 12             	movzbl (%edx),%edx
   11a11:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   11a13:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a16:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a19:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11a1c:	85 c0                	test   %eax,%eax
   11a1e:	75 dc                	jne    119fc <kernel_vsprintf+0x73>
   11a20:	e9 8b 00 00 00       	jmp    11ab0 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   11a25:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11a29:	75 2e                	jne    11a59 <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   11a2b:	8b 45 10             	mov    0x10(%ebp),%eax
   11a2e:	8d 50 04             	lea    0x4(%eax),%edx
   11a31:	89 55 10             	mov    %edx,0x10(%ebp)
   11a34:	8b 00                	mov    (%eax),%eax
   11a36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   11a39:	6a 0a                	push   $0xa
   11a3b:	ff 75 e4             	pushl  -0x1c(%ebp)
   11a3e:	ff 75 f8             	pushl  -0x8(%ebp)
   11a41:	e8 04 fe ff ff       	call   1184a <kernel_itoa>
   11a46:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   11a49:	ff 75 f8             	pushl  -0x8(%ebp)
   11a4c:	e8 a6 fc ff ff       	call   116f7 <kernel_strlen>
   11a51:	83 c4 04             	add    $0x4,%esp
   11a54:	01 45 f8             	add    %eax,-0x8(%ebp)
   11a57:	eb 57                	jmp    11ab0 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   11a59:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11a5d:	75 2e                	jne    11a8d <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   11a5f:	8b 45 10             	mov    0x10(%ebp),%eax
   11a62:	8d 50 04             	lea    0x4(%eax),%edx
   11a65:	89 55 10             	mov    %edx,0x10(%ebp)
   11a68:	8b 00                	mov    (%eax),%eax
   11a6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   11a6d:	6a 10                	push   $0x10
   11a6f:	ff 75 e8             	pushl  -0x18(%ebp)
   11a72:	ff 75 f8             	pushl  -0x8(%ebp)
   11a75:	e8 d0 fd ff ff       	call   1184a <kernel_itoa>
   11a7a:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   11a7d:	ff 75 f8             	pushl  -0x8(%ebp)
   11a80:	e8 72 fc ff ff       	call   116f7 <kernel_strlen>
   11a85:	83 c4 04             	add    $0x4,%esp
   11a88:	01 45 f8             	add    %eax,-0x8(%ebp)
   11a8b:	eb 23                	jmp    11ab0 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   11a8d:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11a91:	75 1d                	jne    11ab0 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   11a93:	8b 45 10             	mov    0x10(%ebp),%eax
   11a96:	8d 50 04             	lea    0x4(%eax),%edx
   11a99:	89 55 10             	mov    %edx,0x10(%ebp)
   11a9c:	8b 00                	mov    (%eax),%eax
   11a9e:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11aa1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11aa4:	8d 50 01             	lea    0x1(%eax),%edx
   11aa7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11aaa:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11aae:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   11ab0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   11ab7:	90                   	nop
    while ((ch = *fmt++)) {
   11ab8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11abb:	8d 50 01             	lea    0x1(%eax),%edx
   11abe:	89 55 0c             	mov    %edx,0xc(%ebp)
   11ac1:	0f b6 00             	movzbl (%eax),%eax
   11ac4:	88 45 ef             	mov    %al,-0x11(%ebp)
   11ac7:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11acb:	0f 85 d0 fe ff ff    	jne    119a1 <kernel_vsprintf+0x18>
        }
    }
}
   11ad1:	90                   	nop
   11ad2:	c9                   	leave  
   11ad3:	c3                   	ret    

00011ad4 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   11ad4:	55                   	push   %ebp
   11ad5:	89 e5                	mov    %esp,%ebp
   11ad7:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   11ada:	83 ec 08             	sub    $0x8,%esp
   11add:	ff 75 14             	pushl  0x14(%ebp)
   11ae0:	68 a8 21 01 00       	push   $0x121a8
   11ae5:	e8 cb 02 00 00       	call   11db5 <log_printf>
   11aea:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   11aed:	ff 75 10             	pushl  0x10(%ebp)
   11af0:	ff 75 0c             	pushl  0xc(%ebp)
   11af3:	ff 75 08             	pushl  0x8(%ebp)
   11af6:	68 ba 21 01 00       	push   $0x121ba
   11afb:	e8 b5 02 00 00       	call   11db5 <log_printf>
   11b00:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   11b03:	e8 b7 fa ff ff       	call   115bf <hlt>
   11b08:	eb f9                	jmp    11b03 <panic+0x2f>

00011b0a <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11b0a:	55                   	push   %ebp
   11b0b:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b10:	8b 40 08             	mov    0x8(%eax),%eax
   11b13:	85 c0                	test   %eax,%eax
   11b15:	0f 94 c0             	sete   %al
   11b18:	0f b6 c0             	movzbl %al,%eax
}
   11b1b:	5d                   	pop    %ebp
   11b1c:	c3                   	ret    

00011b1d <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   11b1d:	55                   	push   %ebp
   11b1e:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11b20:	8b 45 08             	mov    0x8(%ebp),%eax
   11b23:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b2d:	8b 50 04             	mov    0x4(%eax),%edx
   11b30:	8b 45 08             	mov    0x8(%ebp),%eax
   11b33:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11b35:	8b 45 08             	mov    0x8(%ebp),%eax
   11b38:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11b3f:	90                   	nop
   11b40:	5d                   	pop    %ebp
   11b41:	c3                   	ret    

00011b42 <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   11b42:	55                   	push   %ebp
   11b43:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   11b45:	8b 45 08             	mov    0x8(%ebp),%eax
   11b48:	8b 10                	mov    (%eax),%edx
   11b4a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b4d:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11b50:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   11b59:	ff 75 08             	pushl  0x8(%ebp)
   11b5c:	e8 a9 ff ff ff       	call   11b0a <list_is_empty>
   11b61:	83 c4 04             	add    $0x4,%esp
   11b64:	85 c0                	test   %eax,%eax
   11b66:	74 16                	je     11b7e <list_insert_first+0x3c>
        list->first = list->last = node;
   11b68:	8b 45 08             	mov    0x8(%ebp),%eax
   11b6b:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b6e:	89 50 04             	mov    %edx,0x4(%eax)
   11b71:	8b 45 08             	mov    0x8(%ebp),%eax
   11b74:	8b 50 04             	mov    0x4(%eax),%edx
   11b77:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7a:	89 10                	mov    %edx,(%eax)
   11b7c:	eb 12                	jmp    11b90 <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   11b7e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b81:	8b 00                	mov    (%eax),%eax
   11b83:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b86:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11b88:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8b:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b8e:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11b90:	8b 45 08             	mov    0x8(%ebp),%eax
   11b93:	8b 40 08             	mov    0x8(%eax),%eax
   11b96:	8d 50 01             	lea    0x1(%eax),%edx
   11b99:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9c:	89 50 08             	mov    %edx,0x8(%eax)
}
   11b9f:	90                   	nop
   11ba0:	c9                   	leave  
   11ba1:	c3                   	ret    

00011ba2 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11ba2:	55                   	push   %ebp
   11ba3:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11ba5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba8:	8b 50 04             	mov    0x4(%eax),%edx
   11bab:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bae:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   11bb0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bb3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   11bba:	ff 75 08             	pushl  0x8(%ebp)
   11bbd:	e8 48 ff ff ff       	call   11b0a <list_is_empty>
   11bc2:	83 c4 04             	add    $0x4,%esp
   11bc5:	85 c0                	test   %eax,%eax
   11bc7:	74 16                	je     11bdf <list_insert_last+0x3d>
        list->first = list->last = node;
   11bc9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bcc:	8b 55 0c             	mov    0xc(%ebp),%edx
   11bcf:	89 50 04             	mov    %edx,0x4(%eax)
   11bd2:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd5:	8b 50 04             	mov    0x4(%eax),%edx
   11bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdb:	89 10                	mov    %edx,(%eax)
   11bdd:	eb 15                	jmp    11bf4 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11bdf:	8b 45 08             	mov    0x8(%ebp),%eax
   11be2:	8b 40 04             	mov    0x4(%eax),%eax
   11be5:	8b 55 0c             	mov    0xc(%ebp),%edx
   11be8:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11beb:	8b 45 08             	mov    0x8(%ebp),%eax
   11bee:	8b 55 0c             	mov    0xc(%ebp),%edx
   11bf1:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   11bf4:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf7:	8b 40 08             	mov    0x8(%eax),%eax
   11bfa:	8d 50 01             	lea    0x1(%eax),%edx
   11bfd:	8b 45 08             	mov    0x8(%ebp),%eax
   11c00:	89 50 08             	mov    %edx,0x8(%eax)
}
   11c03:	90                   	nop
   11c04:	c9                   	leave  
   11c05:	c3                   	ret    

00011c06 <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   11c06:	55                   	push   %ebp
   11c07:	89 e5                	mov    %esp,%ebp
   11c09:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   11c0c:	ff 75 08             	pushl  0x8(%ebp)
   11c0f:	e8 f6 fe ff ff       	call   11b0a <list_is_empty>
   11c14:	83 c4 04             	add    $0x4,%esp
   11c17:	85 c0                	test   %eax,%eax
   11c19:	74 07                	je     11c22 <list_remove_first+0x1c>
        return (list_node_t *)0;
   11c1b:	b8 00 00 00 00       	mov    $0x0,%eax
   11c20:	eb 5b                	jmp    11c7d <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   11c22:	8b 45 08             	mov    0x8(%ebp),%eax
   11c25:	8b 00                	mov    (%eax),%eax
   11c27:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   11c2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c2d:	8b 50 04             	mov    0x4(%eax),%edx
   11c30:	8b 45 08             	mov    0x8(%ebp),%eax
   11c33:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   11c35:	8b 45 08             	mov    0x8(%ebp),%eax
   11c38:	8b 00                	mov    (%eax),%eax
   11c3a:	85 c0                	test   %eax,%eax
   11c3c:	75 0c                	jne    11c4a <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   11c3e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c41:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11c48:	eb 0c                	jmp    11c56 <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   11c4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c4d:	8b 40 04             	mov    0x4(%eax),%eax
   11c50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   11c56:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c59:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11c60:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c63:	8b 50 04             	mov    0x4(%eax),%edx
   11c66:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c69:	89 10                	mov    %edx,(%eax)
    list->count--;
   11c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c6e:	8b 40 08             	mov    0x8(%eax),%eax
   11c71:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c74:	8b 45 08             	mov    0x8(%ebp),%eax
   11c77:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11c7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11c7d:	c9                   	leave  
   11c7e:	c3                   	ret    

00011c7f <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   11c7f:	55                   	push   %ebp
   11c80:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   11c82:	8b 45 08             	mov    0x8(%ebp),%eax
   11c85:	8b 00                	mov    (%eax),%eax
   11c87:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11c8a:	75 0b                	jne    11c97 <list_remove+0x18>
        list->first = node->next;
   11c8c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c8f:	8b 50 04             	mov    0x4(%eax),%edx
   11c92:	8b 45 08             	mov    0x8(%ebp),%eax
   11c95:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   11c97:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9a:	8b 40 04             	mov    0x4(%eax),%eax
   11c9d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11ca0:	75 0b                	jne    11cad <list_remove+0x2e>
        list->last = node->pre;
   11ca2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ca5:	8b 10                	mov    (%eax),%edx
   11ca7:	8b 45 08             	mov    0x8(%ebp),%eax
   11caa:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   11cad:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb0:	8b 00                	mov    (%eax),%eax
   11cb2:	85 c0                	test   %eax,%eax
   11cb4:	74 0e                	je     11cc4 <list_remove+0x45>
        node->pre->next = node->next;
   11cb6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb9:	8b 00                	mov    (%eax),%eax
   11cbb:	8b 55 0c             	mov    0xc(%ebp),%edx
   11cbe:	8b 52 04             	mov    0x4(%edx),%edx
   11cc1:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   11cc4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cc7:	8b 40 04             	mov    0x4(%eax),%eax
   11cca:	85 c0                	test   %eax,%eax
   11ccc:	74 0d                	je     11cdb <list_remove+0x5c>
        node->next->pre = node->pre;
   11cce:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cd1:	8b 40 04             	mov    0x4(%eax),%eax
   11cd4:	8b 55 0c             	mov    0xc(%ebp),%edx
   11cd7:	8b 12                	mov    (%edx),%edx
   11cd9:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   11cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cde:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ce5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ce8:	8b 50 04             	mov    0x4(%eax),%edx
   11ceb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cee:	89 10                	mov    %edx,(%eax)

    list->count--;
   11cf0:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf3:	8b 40 08             	mov    0x8(%eax),%eax
   11cf6:	8d 50 ff             	lea    -0x1(%eax),%edx
   11cf9:	8b 45 08             	mov    0x8(%ebp),%eax
   11cfc:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11cff:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11d02:	5d                   	pop    %ebp
   11d03:	c3                   	ret    

00011d04 <inb>:
static inline uint8_t inb(uint16_t port) {
   11d04:	55                   	push   %ebp
   11d05:	89 e5                	mov    %esp,%ebp
   11d07:	83 ec 14             	sub    $0x14,%esp
   11d0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d0d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   11d11:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11d15:	89 c2                	mov    %eax,%edx
   11d17:	ec                   	in     (%dx),%al
   11d18:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11d1b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11d1f:	c9                   	leave  
   11d20:	c3                   	ret    

00011d21 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11d21:	55                   	push   %ebp
   11d22:	89 e5                	mov    %esp,%ebp
   11d24:	83 ec 08             	sub    $0x8,%esp
   11d27:	8b 55 08             	mov    0x8(%ebp),%edx
   11d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d2d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11d31:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11d34:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11d38:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11d3c:	ee                   	out    %al,(%dx)
}
   11d3d:	90                   	nop
   11d3e:	c9                   	leave  
   11d3f:	c3                   	ret    

00011d40 <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值
#include "cpu/irq.h"
#define COM1_PORT 0x3f8

void log_init(void) {
   11d40:	55                   	push   %ebp
   11d41:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   11d43:	6a 00                	push   $0x0
   11d45:	68 f9 03 00 00       	push   $0x3f9
   11d4a:	e8 d2 ff ff ff       	call   11d21 <outb>
   11d4f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11d52:	68 80 00 00 00       	push   $0x80
   11d57:	68 fb 03 00 00       	push   $0x3fb
   11d5c:	e8 c0 ff ff ff       	call   11d21 <outb>
   11d61:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11d64:	6a 03                	push   $0x3
   11d66:	68 f8 03 00 00       	push   $0x3f8
   11d6b:	e8 b1 ff ff ff       	call   11d21 <outb>
   11d70:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11d73:	6a 00                	push   $0x0
   11d75:	68 f9 03 00 00       	push   $0x3f9
   11d7a:	e8 a2 ff ff ff       	call   11d21 <outb>
   11d7f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11d82:	6a 03                	push   $0x3
   11d84:	68 fb 03 00 00       	push   $0x3fb
   11d89:	e8 93 ff ff ff       	call   11d21 <outb>
   11d8e:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11d91:	68 c7 00 00 00       	push   $0xc7
   11d96:	68 fa 03 00 00       	push   $0x3fa
   11d9b:	e8 81 ff ff ff       	call   11d21 <outb>
   11da0:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11da3:	6a 0f                	push   $0xf
   11da5:	68 fc 03 00 00       	push   $0x3fc
   11daa:	e8 72 ff ff ff       	call   11d21 <outb>
   11daf:	83 c4 08             	add    $0x8,%esp

}
   11db2:	90                   	nop
   11db3:	c9                   	leave  
   11db4:	c3                   	ret    

00011db5 <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   11db5:	55                   	push   %ebp
   11db6:	89 e5                	mov    %esp,%ebp
   11db8:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   11dbe:	83 ec 04             	sub    $0x4,%esp
   11dc1:	68 80 00 00 00       	push   $0x80
   11dc6:	6a 00                	push   $0x0
   11dc8:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11dce:	50                   	push   %eax
   11dcf:	e8 ad f9 ff ff       	call   11781 <kernel_memset>
   11dd4:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   11dd7:	8d 45 0c             	lea    0xc(%ebp),%eax
   11dda:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf,fmt,args);
   11de0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   11de6:	83 ec 04             	sub    $0x4,%esp
   11de9:	50                   	push   %eax
   11dea:	ff 75 08             	pushl  0x8(%ebp)
   11ded:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11df3:	50                   	push   %eax
   11df4:	e8 90 fb ff ff       	call   11989 <kernel_vsprintf>
   11df9:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    irq_state_t state = irq_enter_protection();
   11dfc:	e8 6c f4 ff ff       	call   1126d <irq_enter_protection>
   11e01:	89 45 f0             	mov    %eax,-0x10(%ebp)

    const char * p = str_buf;
   11e04:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11e0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11e0d:	eb 31                	jmp    11e40 <log_printf+0x8b>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   11e0f:	90                   	nop
   11e10:	83 ec 0c             	sub    $0xc,%esp
   11e13:	68 fd 03 00 00       	push   $0x3fd
   11e18:	e8 e7 fe ff ff       	call   11d04 <inb>
   11e1d:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   11e20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e23:	8d 50 01             	lea    0x1(%eax),%edx
   11e26:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11e29:	0f b6 00             	movzbl (%eax),%eax
   11e2c:	0f b6 c0             	movzbl %al,%eax
   11e2f:	83 ec 08             	sub    $0x8,%esp
   11e32:	50                   	push   %eax
   11e33:	68 f8 03 00 00       	push   $0x3f8
   11e38:	e8 e4 fe ff ff       	call   11d21 <outb>
   11e3d:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e43:	0f b6 00             	movzbl (%eax),%eax
   11e46:	84 c0                	test   %al,%al
   11e48:	75 c5                	jne    11e0f <log_printf+0x5a>
    }
// 变列
    outb(COM1_PORT,'\r');
   11e4a:	83 ec 08             	sub    $0x8,%esp
   11e4d:	6a 0d                	push   $0xd
   11e4f:	68 f8 03 00 00       	push   $0x3f8
   11e54:	e8 c8 fe ff ff       	call   11d21 <outb>
   11e59:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   11e5c:	83 ec 08             	sub    $0x8,%esp
   11e5f:	6a 0a                	push   $0xa
   11e61:	68 f8 03 00 00       	push   $0x3f8
   11e66:	e8 b6 fe ff ff       	call   11d21 <outb>
   11e6b:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   11e6e:	83 ec 0c             	sub    $0xc,%esp
   11e71:	ff 75 f0             	pushl  -0x10(%ebp)
   11e74:	e8 0c f4 ff ff       	call   11285 <irq_leave_protection>
   11e79:	83 c4 10             	add    $0x10,%esp
}
   11e7c:	90                   	nop
   11e7d:	c9                   	leave  
   11e7e:	c3                   	ret    
