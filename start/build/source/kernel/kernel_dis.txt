
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001814 memsz 0x00005530 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014d7  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000338  000114d8  000114d8  000024d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011810  00011810  00002810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d10  00011820  00011820  00002814  2**5
                  ALLOC
  4 .debug_line   000009ca  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001844  00000000  00000000  000031de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000789  00000000  00000000  00004a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000100  00000000  00000000  000051b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000811  00000000  00000000  000052b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00005ac1  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000008c4  00000000  00000000  00005ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000114d8 l    d  .rodata	00000000 .rodata
00011810 l    d  .data	00000000 .data
00011820 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	000000a9 tss_init
0001151c l     O .rodata	0000000a __func__.1840
00000000 l    df *ABS*	00000000 cpu.c
0001038e l     F .text	00000028 lgdt
00011820 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000104f8 l     F .text	0000001d inb
00010515 l     F .text	0000001f outb
00010534 l     F .text	00000007 cli
0001053b l     F .text	00000007 sti
00010542 l     F .text	00000028 lidt
0001056a l     F .text	00000007 hlt
00010571 l     F .text	000000d9 dump_core_regs
0001064a l     F .text	0000003e do_default_handler
00012020 l     O .bss	00000400 idt_table
000108b8 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010c86 l     F .text	0000001f outb
00012420 l     O .bss	00000004 sys_tick
00010cc8 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012440 l     O .bss	00000068 first_task
000124c0 l     O .bss	00001000 init_task_stack
000134c0 l     O .bss	00000068 init_task
00000000 l    df *ABS*	00000000 klib.c
00010e27 l     F .text	00000007 hlt
00011810 l     O .data	00000004 num2ch.1897
00000000 l    df *ABS*	00000000 log.c
00011372 l     F .text	0000001d inb
0001138f l     F .text	0000001f outb
00010f9a g     F .text	0000004f kernel_memcpy
00010c50 g     F .text	0000000b irq_enable_global
000107bc g     F .text	0000001c do_handler_segment_not_present
00010fe9 g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
000104ed g     F .text	0000000b cpu_init
000113ae g     F .text	00000075 log_init
00010d86 g     F .text	000000a1 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00010e2e g     F .text	00000047 kernel_strcpy
00010b33 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010714 g     F .text	0000001c do_handler_overflow
00010848 g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
000107f4 g     F .text	0000001c do_handler_general_protection
000106a4 g     F .text	0000001c do_handler_divider
00010784 g     F .text	0000001c do_handler_double_fault
00010d5d g     F .text	00000029 init_task_entry
00010810 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010c5b g     F .text	0000002b pic_send_eoi
00010ca5 g     F .text	00000023 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
0001089c g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00013530 g     O .bss	00002000 stack
000100e2 g       .text	00000000 exception_handler_bound_range
0001074c g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
0001082c g     F .text	0000001c do_handler_fpu_error
00010864 g     F .text	0000001c do_handler_machine_check
000106c0 g     F .text	0000001c do_handler_Debug
000106dc g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00010e75 g     F .text	00000070 kernel_strncpy
00010c45 g     F .text	0000000b irq_disable_global
00010d40 g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
000111f1 g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
000107a0 g     F .text	0000001c do_handler_invalid_tss
0001133c g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00010af9 g     F .text	0000003a irq_install
00010439 g     F .text	0000006d init_gdt
00010bbe g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00010768 g     F .text	0000001c do_handler_device_unavailable
0001102a g     F .text	00000064 kernel_memcmp
00010880 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00010688 g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
0001094b g     F .text	000001ae irq_init
00010f5f g     F .text	0000003b kernel_strlen
000103b6 g     F .text	00000083 segment_desc_set
00010730 g     F .text	0000001c do_handler_bound_range
00010ee5 g     F .text	0000007a kernel_strncmp
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010066 g       .text	00000000 exception_handler_Debug
000107d8 g     F .text	0000001c do_handler_stack_segment_fault
000106f8 g     F .text	0000001c do_handler_breakpoint
00011423 g     F .text	000000b4 log_printf
0001034e g     F .text	00000040 task_init
0001108e g     F .text	00000024 kernel_sprintf
000110b2 g     F .text	0000013f kernel_itoa
000104a6 g     F .text	00000047 gate_desc_set
00010d28 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 37 0d 00 00       	call   10d40 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 30 55 01 00       	mov    $0x15530,%esp
    jmp init_main
   10023:	e9 5e 0d 00 00       	jmp    10d86 <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 4f 06 00 00       	call   10688 <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 4c 06 00 00       	call   106a4 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 49 06 00 00       	call   106c0 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 46 06 00 00       	call   106dc <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 43 06 00 00       	call   106f8 <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 40 06 00 00       	call   10714 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 3d 06 00 00       	call   10730 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 3a 06 00 00       	call   1074c <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 37 06 00 00       	call   10768 <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 36 06 00 00       	call   10784 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 35 06 00 00       	call   107a0 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 34 06 00 00       	call   107bc <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 33 06 00 00       	call   107d8 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 32 06 00 00       	call   107f4 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 31 06 00 00       	call   10810 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 2e 06 00 00       	call   1082c <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 2d 06 00 00       	call   10848 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 2a 06 00 00       	call   10864 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 27 06 00 00       	call   10880 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 24 06 00 00       	call   1089c <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 0e 0a 00 00       	call   10ca5 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <tss_init>:
#include "core/task.h"
#include "tools/klib.h"
#include "cpu/cpu.h"
#include "os_cfg.h"

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
   102a8:	83 ec 08             	sub    $0x8,%esp
    
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   102ab:	8b 45 08             	mov    0x8(%ebp),%eax
   102ae:	83 ec 04             	sub    $0x4,%esp
   102b1:	6a 68                	push   $0x68
   102b3:	6a 00                	push   $0x0
   102b5:	50                   	push   %eax
   102b6:	e8 2e 0d 00 00       	call   10fe9 <kernel_memset>
   102bb:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   102be:	8b 45 08             	mov    0x8(%ebp),%eax
   102c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   102c4:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   102c7:	8b 45 08             	mov    0x8(%ebp),%eax
   102ca:	8b 55 10             	mov    0x10(%ebp),%edx
   102cd:	89 50 04             	mov    %edx,0x4(%eax)
   102d0:	8b 45 08             	mov    0x8(%ebp),%eax
   102d3:	8b 50 04             	mov    0x4(%eax),%edx
   102d6:	8b 45 08             	mov    0x8(%ebp),%eax
   102d9:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   102dc:	8b 45 08             	mov    0x8(%ebp),%eax
   102df:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
    task->tss.eip = entry;
   102e6:	8b 45 08             	mov    0x8(%ebp),%eax
   102e9:	8b 55 0c             	mov    0xc(%ebp),%edx
   102ec:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   102ef:	8b 45 08             	mov    0x8(%ebp),%eax
   102f2:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   102f9:	8b 45 08             	mov    0x8(%ebp),%eax
   102fc:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	8b 50 5c             	mov    0x5c(%eax),%edx
   10309:	8b 45 08             	mov    0x8(%ebp),%eax
   1030c:	89 50 58             	mov    %edx,0x58(%eax)
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	8b 50 58             	mov    0x58(%eax),%edx
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   1031b:	8b 45 08             	mov    0x8(%ebp),%eax
   1031e:	8b 50 54             	mov    0x54(%eax),%edx
   10321:	8b 45 08             	mov    0x8(%ebp),%eax
   10324:	89 50 50             	mov    %edx,0x50(%eax)
   10327:	8b 45 08             	mov    0x8(%ebp),%eax
   1032a:	8b 50 50             	mov    0x50(%eax),%edx
   1032d:	8b 45 08             	mov    0x8(%ebp),%eax
   10330:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   10333:	8b 45 08             	mov    0x8(%ebp),%eax
   10336:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)
    task->tss.iomap = 0;
   1033d:	8b 45 08             	mov    0x8(%ebp),%eax
   10340:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
    return 0;
   10347:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1034c:	c9                   	leave  
   1034d:	c3                   	ret    

0001034e <task_init>:

int task_init (task_t * task, uint32_t entry, uint32_t esp){
   1034e:	55                   	push   %ebp
   1034f:	89 e5                	mov    %esp,%ebp
   10351:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10354:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10358:	75 19                	jne    10373 <task_init+0x25>
   1035a:	68 d8 14 01 00       	push   $0x114d8
   1035f:	68 1c 15 01 00       	push   $0x1151c
   10364:	6a 16                	push   $0x16
   10366:	68 ec 14 01 00       	push   $0x114ec
   1036b:	e8 cc 0f 00 00       	call   1133c <panic>
   10370:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   10373:	83 ec 04             	sub    $0x4,%esp
   10376:	ff 75 10             	pushl  0x10(%ebp)
   10379:	ff 75 0c             	pushl  0xc(%ebp)
   1037c:	ff 75 08             	pushl  0x8(%ebp)
   1037f:	e8 21 ff ff ff       	call   102a5 <tss_init>
   10384:	83 c4 10             	add    $0x10,%esp
    return 0;
   10387:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1038c:	c9                   	leave  
   1038d:	c3                   	ret    

0001038e <lgdt>:
static inline void sti(void){
    __asm__ __volatile__("sti");    
}


static inline void lgdt(uint32_t start,uint32_t size){
   1038e:	55                   	push   %ebp
   1038f:	89 e5                	mov    %esp,%ebp
   10391:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }gdt;
    
    gdt.start32_16 = start >> 16;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	c1 e8 10             	shr    $0x10,%eax
   1039a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   1039e:	8b 45 08             	mov    0x8(%ebp),%eax
   103a1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   103a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   103a8:	83 e8 01             	sub    $0x1,%eax
   103ab:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   103af:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   103b3:	90                   	nop
   103b4:	c9                   	leave  
   103b5:	c3                   	ret    

000103b6 <segment_desc_set>:
#include "comm/cpu_instr.h"
// GDT表第0个表项系统保留不使用
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//  设置GDT表函数
void segment_desc_set (int selector, uint32_t base, uint32_t limit,uint16_t attr){
   103b6:	55                   	push   %ebp
   103b7:	89 e5                	mov    %esp,%ebp
   103b9:	83 ec 14             	sub    $0x14,%esp
   103bc:	8b 45 14             	mov    0x14(%ebp),%eax
   103bf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t * desc = gdt_table + selector / sizeof(segment_desc_t);
   103c3:	8b 45 08             	mov    0x8(%ebp),%eax
   103c6:	83 e0 f8             	and    $0xfffffff8,%eax
   103c9:	05 20 18 01 00       	add    $0x11820,%eax
   103ce:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
	if (limit > 0xfffff) {
   103d1:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103d8:	76 0f                	jbe    103e9 <segment_desc_set+0x33>
		attr |= SEG_G;
   103da:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   103e0:	8b 45 10             	mov    0x10(%ebp),%eax
   103e3:	c1 e8 0c             	shr    $0xc,%eax
   103e6:	89 45 10             	mov    %eax,0x10(%ebp)
	}
    desc->limit15_0 = limit & 0xffff;
   103e9:	8b 45 10             	mov    0x10(%ebp),%eax
   103ec:	89 c2                	mov    %eax,%edx
   103ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103f1:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   103f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f7:	89 c2                	mov    %eax,%edx
   103f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103fc:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10400:	8b 45 0c             	mov    0xc(%ebp),%eax
   10403:	c1 e8 10             	shr    $0x10,%eax
   10406:	89 c2                	mov    %eax,%edx
   10408:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1040b:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1040e:	8b 45 10             	mov    0x10(%ebp),%eax
   10411:	c1 e8 10             	shr    $0x10,%eax
   10414:	c1 e0 08             	shl    $0x8,%eax
   10417:	66 25 00 0f          	and    $0xf00,%ax
   1041b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1041f:	89 c2                	mov    %eax,%edx
   10421:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10424:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10428:	8b 45 0c             	mov    0xc(%ebp),%eax
   1042b:	c1 e8 18             	shr    $0x18,%eax
   1042e:	89 c2                	mov    %eax,%edx
   10430:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10433:	88 50 07             	mov    %dl,0x7(%eax)

}
   10436:	90                   	nop
   10437:	c9                   	leave  
   10438:	c3                   	ret    

00010439 <init_gdt>:

void init_gdt(void){
   10439:	55                   	push   %ebp
   1043a:	89 e5                	mov    %esp,%ebp
   1043c:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1043f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10446:	eb 19                	jmp    10461 <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);
   10448:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1044b:	c1 e0 03             	shl    $0x3,%eax
   1044e:	6a 00                	push   $0x0
   10450:	6a 00                	push   $0x0
   10452:	6a 00                	push   $0x0
   10454:	50                   	push   %eax
   10455:	e8 5c ff ff ff       	call   103b6 <segment_desc_set>
   1045a:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < GDT_TABLE_SIZE;i++){
   1045d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10461:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10468:	7e de                	jle    10448 <init_gdt+0xf>
    }

// 设置GDT表中的CS段
// 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1046a:	68 9a 40 00 00       	push   $0x409a
   1046f:	6a ff                	push   $0xffffffff
   10471:	6a 00                	push   $0x0
   10473:	6a 08                	push   $0x8
   10475:	e8 3c ff ff ff       	call   103b6 <segment_desc_set>
   1047a:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D);

// 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1047d:	68 92 40 00 00       	push   $0x4092
   10482:	6a ff                	push   $0xffffffff
   10484:	6a 00                	push   $0x0
   10486:	6a 10                	push   $0x10
   10488:	e8 29 ff ff ff       	call   103b6 <segment_desc_set>
   1048d:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   10490:	b8 20 18 01 00       	mov    $0x11820,%eax
   10495:	68 00 08 00 00       	push   $0x800
   1049a:	50                   	push   %eax
   1049b:	e8 ee fe ff ff       	call   1038e <lgdt>
   104a0:	83 c4 08             	add    $0x8,%esp
}
   104a3:	90                   	nop
   104a4:	c9                   	leave  
   104a5:	c3                   	ret    

000104a6 <gate_desc_set>:
/**
 * 设置门描述符
 */


void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   104a6:	55                   	push   %ebp
   104a7:	89 e5                	mov    %esp,%ebp
   104a9:	83 ec 08             	sub    $0x8,%esp
   104ac:	8b 55 0c             	mov    0xc(%ebp),%edx
   104af:	8b 45 14             	mov    0x14(%ebp),%eax
   104b2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   104b6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	desc->offset15_0 = offset & 0xffff;
   104ba:	8b 45 10             	mov    0x10(%ebp),%eax
   104bd:	89 c2                	mov    %eax,%edx
   104bf:	8b 45 08             	mov    0x8(%ebp),%eax
   104c2:	66 89 10             	mov    %dx,(%eax)
	
    desc->selector = selector;
   104c5:	8b 45 08             	mov    0x8(%ebp),%eax
   104c8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   104cc:	66 89 50 02          	mov    %dx,0x2(%eax)
	
    desc->attr = attr;
   104d0:	8b 45 08             	mov    0x8(%ebp),%eax
   104d3:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   104d7:	66 89 50 04          	mov    %dx,0x4(%eax)
	
    desc->offset31_16 = (offset >> 16) & 0xffff;
   104db:	8b 45 10             	mov    0x10(%ebp),%eax
   104de:	c1 e8 10             	shr    $0x10,%eax
   104e1:	89 c2                	mov    %eax,%edx
   104e3:	8b 45 08             	mov    0x8(%ebp),%eax
   104e6:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   104ea:	90                   	nop
   104eb:	c9                   	leave  
   104ec:	c3                   	ret    

000104ed <cpu_init>:




void cpu_init (void){
   104ed:	55                   	push   %ebp
   104ee:	89 e5                	mov    %esp,%ebp
    // 初始化GDT表
    init_gdt();
   104f0:	e8 44 ff ff ff       	call   10439 <init_gdt>
   104f5:	90                   	nop
   104f6:	5d                   	pop    %ebp
   104f7:	c3                   	ret    

000104f8 <inb>:
static inline uint8_t inb(uint16_t port) {
   104f8:	55                   	push   %ebp
   104f9:	89 e5                	mov    %esp,%ebp
   104fb:	83 ec 14             	sub    $0x14,%esp
   104fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10501:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10505:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10509:	89 c2                	mov    %eax,%edx
   1050b:	ec                   	in     (%dx),%al
   1050c:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1050f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10513:	c9                   	leave  
   10514:	c3                   	ret    

00010515 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10515:	55                   	push   %ebp
   10516:	89 e5                	mov    %esp,%ebp
   10518:	83 ec 08             	sub    $0x8,%esp
   1051b:	8b 55 08             	mov    0x8(%ebp),%edx
   1051e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10521:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10525:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10528:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1052c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10530:	ee                   	out    %al,(%dx)
}
   10531:	90                   	nop
   10532:	c9                   	leave  
   10533:	c3                   	ret    

00010534 <cli>:
static inline void cli(void){
   10534:	55                   	push   %ebp
   10535:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10537:	fa                   	cli    
}
   10538:	90                   	nop
   10539:	5d                   	pop    %ebp
   1053a:	c3                   	ret    

0001053b <sti>:
static inline void sti(void){
   1053b:	55                   	push   %ebp
   1053c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   1053e:	fb                   	sti    
}
   1053f:	90                   	nop
   10540:	5d                   	pop    %ebp
   10541:	c3                   	ret    

00010542 <lidt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}



static inline void lidt(uint32_t start,uint32_t size){
   10542:	55                   	push   %ebp
   10543:	89 e5                	mov    %esp,%ebp
   10545:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }idt;
    
    idt.start32_16 = start >> 16;
   10548:	8b 45 08             	mov    0x8(%ebp),%eax
   1054b:	c1 e8 10             	shr    $0x10,%eax
   1054e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10552:	8b 45 08             	mov    0x8(%ebp),%eax
   10555:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10559:	8b 45 0c             	mov    0xc(%ebp),%eax
   1055c:	83 e8 01             	sub    $0x1,%eax
   1055f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10563:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10567:	90                   	nop
   10568:	c9                   	leave  
   10569:	c3                   	ret    

0001056a <hlt>:

static inline void hlt (void) {
   1056a:	55                   	push   %ebp
   1056b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1056d:	f4                   	hlt    
}
   1056e:	90                   	nop
   1056f:	5d                   	pop    %ebp
   10570:	c3                   	ret    

00010571 <dump_core_regs>:

void exception_handler_unknown(void);


 // 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t * frame){
   10571:	55                   	push   %ebp
   10572:	89 e5                	mov    %esp,%ebp
   10574:	57                   	push   %edi
   10575:	56                   	push   %esi
   10576:	53                   	push   %ebx
   10577:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d",frame->num,frame->error_code);
   1057a:	8b 45 08             	mov    0x8(%ebp),%eax
   1057d:	8b 50 34             	mov    0x34(%eax),%edx
   10580:	8b 45 08             	mov    0x8(%ebp),%eax
   10583:	8b 40 30             	mov    0x30(%eax),%eax
   10586:	83 ec 04             	sub    $0x4,%esp
   10589:	52                   	push   %edx
   1058a:	50                   	push   %eax
   1058b:	68 28 15 01 00       	push   $0x11528
   10590:	e8 8e 0e 00 00       	call   11423 <log_printf>
   10595:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   10598:	8b 45 08             	mov    0x8(%ebp),%eax
   1059b:	8b 38                	mov    (%eax),%edi
   1059d:	8b 45 08             	mov    0x8(%ebp),%eax
   105a0:	8b 70 04             	mov    0x4(%eax),%esi
   105a3:	8b 45 08             	mov    0x8(%ebp),%eax
   105a6:	8b 58 0c             	mov    0xc(%eax),%ebx
   105a9:	8b 45 08             	mov    0x8(%ebp),%eax
   105ac:	8b 48 08             	mov    0x8(%eax),%ecx
   105af:	8b 45 08             	mov    0x8(%ebp),%eax
   105b2:	8b 50 0c             	mov    0xc(%eax),%edx
   105b5:	8b 45 08             	mov    0x8(%ebp),%eax
   105b8:	8b 40 3c             	mov    0x3c(%eax),%eax
   105bb:	83 ec 04             	sub    $0x4,%esp
   105be:	57                   	push   %edi
   105bf:	56                   	push   %esi
   105c0:	53                   	push   %ebx
   105c1:	51                   	push   %ecx
   105c2:	52                   	push   %edx
   105c3:	50                   	push   %eax
   105c4:	68 40 15 01 00       	push   $0x11540
   105c9:	e8 55 0e 00 00       	call   11423 <log_printf>
   105ce:	83 c4 20             	add    $0x20,%esp
        frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
    log_printf("EAX:0x%x\n"
   105d1:	8b 45 08             	mov    0x8(%ebp),%eax
   105d4:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105d7:	8b 45 08             	mov    0x8(%ebp),%eax
   105da:	8b 40 18             	mov    0x18(%eax),%eax
   105dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   105e0:	8b 45 08             	mov    0x8(%ebp),%eax
   105e3:	8b 58 14             	mov    0x14(%eax),%ebx
   105e6:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   105e9:	8b 45 08             	mov    0x8(%ebp),%eax
   105ec:	8b 78 10             	mov    0x10(%eax),%edi
   105ef:	8b 45 08             	mov    0x8(%ebp),%eax
   105f2:	8b 70 24             	mov    0x24(%eax),%esi
   105f5:	8b 45 08             	mov    0x8(%ebp),%eax
   105f8:	8b 58 28             	mov    0x28(%eax),%ebx
   105fb:	8b 45 08             	mov    0x8(%ebp),%eax
   105fe:	8b 50 20             	mov    0x20(%eax),%edx
   10601:	8b 45 08             	mov    0x8(%ebp),%eax
   10604:	8b 40 2c             	mov    0x2c(%eax),%eax
   10607:	83 ec 0c             	sub    $0xc,%esp
   1060a:	51                   	push   %ecx
   1060b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1060e:	ff 75 e0             	pushl  -0x20(%ebp)
   10611:	57                   	push   %edi
   10612:	56                   	push   %esi
   10613:	53                   	push   %ebx
   10614:	52                   	push   %edx
   10615:	50                   	push   %eax
   10616:	68 6c 15 01 00       	push   $0x1156c
   1061b:	e8 03 0e 00 00       	call   11423 <log_printf>
   10620:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10623:	8b 45 08             	mov    0x8(%ebp),%eax
   10626:	8b 50 40             	mov    0x40(%eax),%edx
   10629:	8b 45 08             	mov    0x8(%ebp),%eax
   1062c:	8b 40 38             	mov    0x38(%eax),%eax
   1062f:	83 ec 04             	sub    $0x4,%esp
   10632:	52                   	push   %edx
   10633:	50                   	push   %eax
   10634:	68 b5 15 01 00       	push   $0x115b5
   10639:	e8 e5 0d 00 00       	call   11423 <log_printf>
   1063e:	83 c4 10             	add    $0x10,%esp
}
   10641:	90                   	nop
   10642:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10645:	5b                   	pop    %ebx
   10646:	5e                   	pop    %esi
   10647:	5f                   	pop    %edi
   10648:	5d                   	pop    %ebp
   10649:	c3                   	ret    

0001064a <do_default_handler>:

static void do_default_handler(exception_frame_t * frame,const char * message) {
   1064a:	55                   	push   %ebp
   1064b:	89 e5                	mov    %esp,%ebp
   1064d:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("----------------------------");
   10650:	83 ec 0c             	sub    $0xc,%esp
   10653:	68 cb 15 01 00       	push   $0x115cb
   10658:	e8 c6 0d 00 00       	call   11423 <log_printf>
   1065d:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s",message);
   10660:	83 ec 08             	sub    $0x8,%esp
   10663:	ff 75 0c             	pushl  0xc(%ebp)
   10666:	68 e8 15 01 00       	push   $0x115e8
   1066b:	e8 b3 0d 00 00       	call   11423 <log_printf>
   10670:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10673:	83 ec 0c             	sub    $0xc,%esp
   10676:	ff 75 08             	pushl  0x8(%ebp)
   10679:	e8 f3 fe ff ff       	call   10571 <dump_core_regs>
   1067e:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   10681:	e8 e4 fe ff ff       	call   1056a <hlt>
   10686:	eb f9                	jmp    10681 <do_default_handler+0x37>

00010688 <do_handler_unknown>:
}



// 异常处理函数
void do_handler_unknown(exception_frame_t * frame){
   10688:	55                   	push   %ebp
   10689:	89 e5                	mov    %esp,%ebp
   1068b:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame,"unknown exception");
   1068e:	83 ec 08             	sub    $0x8,%esp
   10691:	68 02 16 01 00       	push   $0x11602
   10696:	ff 75 08             	pushl  0x8(%ebp)
   10699:	e8 ac ff ff ff       	call   1064a <do_default_handler>
   1069e:	83 c4 10             	add    $0x10,%esp

}
   106a1:	90                   	nop
   106a2:	c9                   	leave  
   106a3:	c3                   	ret    

000106a4 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame){
   106a4:	55                   	push   %ebp
   106a5:	89 e5                	mov    %esp,%ebp
   106a7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Divder exception");
   106aa:	83 ec 08             	sub    $0x8,%esp
   106ad:	68 14 16 01 00       	push   $0x11614
   106b2:	ff 75 08             	pushl  0x8(%ebp)
   106b5:	e8 90 ff ff ff       	call   1064a <do_default_handler>
   106ba:	83 c4 10             	add    $0x10,%esp
}
   106bd:	90                   	nop
   106be:	c9                   	leave  
   106bf:	c3                   	ret    

000106c0 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   106c0:	55                   	push   %ebp
   106c1:	89 e5                	mov    %esp,%ebp
   106c3:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   106c6:	83 ec 08             	sub    $0x8,%esp
   106c9:	68 25 16 01 00       	push   $0x11625
   106ce:	ff 75 08             	pushl  0x8(%ebp)
   106d1:	e8 74 ff ff ff       	call   1064a <do_default_handler>
   106d6:	83 c4 10             	add    $0x10,%esp
}
   106d9:	90                   	nop
   106da:	c9                   	leave  
   106db:	c3                   	ret    

000106dc <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   106dc:	55                   	push   %ebp
   106dd:	89 e5                	mov    %esp,%ebp
   106df:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   106e2:	83 ec 08             	sub    $0x8,%esp
   106e5:	68 35 16 01 00       	push   $0x11635
   106ea:	ff 75 08             	pushl  0x8(%ebp)
   106ed:	e8 58 ff ff ff       	call   1064a <do_default_handler>
   106f2:	83 c4 10             	add    $0x10,%esp
}
   106f5:	90                   	nop
   106f6:	c9                   	leave  
   106f7:	c3                   	ret    

000106f8 <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   106f8:	55                   	push   %ebp
   106f9:	89 e5                	mov    %esp,%ebp
   106fb:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   106fe:	83 ec 08             	sub    $0x8,%esp
   10701:	68 44 16 01 00       	push   $0x11644
   10706:	ff 75 08             	pushl  0x8(%ebp)
   10709:	e8 3c ff ff ff       	call   1064a <do_default_handler>
   1070e:	83 c4 10             	add    $0x10,%esp
}
   10711:	90                   	nop
   10712:	c9                   	leave  
   10713:	c3                   	ret    

00010714 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10714:	55                   	push   %ebp
   10715:	89 e5                	mov    %esp,%ebp
   10717:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   1071a:	83 ec 08             	sub    $0x8,%esp
   1071d:	68 50 16 01 00       	push   $0x11650
   10722:	ff 75 08             	pushl  0x8(%ebp)
   10725:	e8 20 ff ff ff       	call   1064a <do_default_handler>
   1072a:	83 c4 10             	add    $0x10,%esp
}
   1072d:	90                   	nop
   1072e:	c9                   	leave  
   1072f:	c3                   	ret    

00010730 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10730:	55                   	push   %ebp
   10731:	89 e5                	mov    %esp,%ebp
   10733:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10736:	83 ec 08             	sub    $0x8,%esp
   10739:	68 5a 16 01 00       	push   $0x1165a
   1073e:	ff 75 08             	pushl  0x8(%ebp)
   10741:	e8 04 ff ff ff       	call   1064a <do_default_handler>
   10746:	83 c4 10             	add    $0x10,%esp
}
   10749:	90                   	nop
   1074a:	c9                   	leave  
   1074b:	c3                   	ret    

0001074c <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   1074c:	55                   	push   %ebp
   1074d:	89 e5                	mov    %esp,%ebp
   1074f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10752:	83 ec 08             	sub    $0x8,%esp
   10755:	68 70 16 01 00       	push   $0x11670
   1075a:	ff 75 08             	pushl  0x8(%ebp)
   1075d:	e8 e8 fe ff ff       	call   1064a <do_default_handler>
   10762:	83 c4 10             	add    $0x10,%esp
}
   10765:	90                   	nop
   10766:	c9                   	leave  
   10767:	c3                   	ret    

00010768 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   10768:	55                   	push   %ebp
   10769:	89 e5                	mov    %esp,%ebp
   1076b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   1076e:	83 ec 08             	sub    $0x8,%esp
   10771:	68 80 16 01 00       	push   $0x11680
   10776:	ff 75 08             	pushl  0x8(%ebp)
   10779:	e8 cc fe ff ff       	call   1064a <do_default_handler>
   1077e:	83 c4 10             	add    $0x10,%esp
}
   10781:	90                   	nop
   10782:	c9                   	leave  
   10783:	c3                   	ret    

00010784 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10784:	55                   	push   %ebp
   10785:	89 e5                	mov    %esp,%ebp
   10787:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   1078a:	83 ec 08             	sub    $0x8,%esp
   1078d:	68 96 16 01 00       	push   $0x11696
   10792:	ff 75 08             	pushl  0x8(%ebp)
   10795:	e8 b0 fe ff ff       	call   1064a <do_default_handler>
   1079a:	83 c4 10             	add    $0x10,%esp
}
   1079d:	90                   	nop
   1079e:	c9                   	leave  
   1079f:	c3                   	ret    

000107a0 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t * frame) {
   107a0:	55                   	push   %ebp
   107a1:	89 e5                	mov    %esp,%ebp
   107a3:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   107a6:	83 ec 08             	sub    $0x8,%esp
   107a9:	68 a4 16 01 00       	push   $0x116a4
   107ae:	ff 75 08             	pushl  0x8(%ebp)
   107b1:	e8 94 fe ff ff       	call   1064a <do_default_handler>
   107b6:	83 c4 10             	add    $0x10,%esp
}
   107b9:	90                   	nop
   107ba:	c9                   	leave  
   107bb:	c3                   	ret    

000107bc <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t * frame) {
   107bc:	55                   	push   %ebp
   107bd:	89 e5                	mov    %esp,%ebp
   107bf:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   107c2:	83 ec 08             	sub    $0x8,%esp
   107c5:	68 b0 16 01 00       	push   $0x116b0
   107ca:	ff 75 08             	pushl  0x8(%ebp)
   107cd:	e8 78 fe ff ff       	call   1064a <do_default_handler>
   107d2:	83 c4 10             	add    $0x10,%esp
}
   107d5:	90                   	nop
   107d6:	c9                   	leave  
   107d7:	c3                   	ret    

000107d8 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t * frame) {
   107d8:	55                   	push   %ebp
   107d9:	89 e5                	mov    %esp,%ebp
   107db:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   107de:	83 ec 08             	sub    $0x8,%esp
   107e1:	68 c5 16 01 00       	push   $0x116c5
   107e6:	ff 75 08             	pushl  0x8(%ebp)
   107e9:	e8 5c fe ff ff       	call   1064a <do_default_handler>
   107ee:	83 c4 10             	add    $0x10,%esp
}
   107f1:	90                   	nop
   107f2:	c9                   	leave  
   107f3:	c3                   	ret    

000107f4 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t * frame) {
   107f4:	55                   	push   %ebp
   107f5:	89 e5                	mov    %esp,%ebp
   107f7:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   107fa:	83 ec 08             	sub    $0x8,%esp
   107fd:	68 da 16 01 00       	push   $0x116da
   10802:	ff 75 08             	pushl  0x8(%ebp)
   10805:	e8 40 fe ff ff       	call   1064a <do_default_handler>
   1080a:	83 c4 10             	add    $0x10,%esp
}
   1080d:	90                   	nop
   1080e:	c9                   	leave  
   1080f:	c3                   	ret    

00010810 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t * frame) {
   10810:	55                   	push   %ebp
   10811:	89 e5                	mov    %esp,%ebp
   10813:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10816:	83 ec 08             	sub    $0x8,%esp
   10819:	68 ee 16 01 00       	push   $0x116ee
   1081e:	ff 75 08             	pushl  0x8(%ebp)
   10821:	e8 24 fe ff ff       	call   1064a <do_default_handler>
   10826:	83 c4 10             	add    $0x10,%esp
}
   10829:	90                   	nop
   1082a:	c9                   	leave  
   1082b:	c3                   	ret    

0001082c <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t * frame) {
   1082c:	55                   	push   %ebp
   1082d:	89 e5                	mov    %esp,%ebp
   1082f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10832:	83 ec 08             	sub    $0x8,%esp
   10835:	68 fa 16 01 00       	push   $0x116fa
   1083a:	ff 75 08             	pushl  0x8(%ebp)
   1083d:	e8 08 fe ff ff       	call   1064a <do_default_handler>
   10842:	83 c4 10             	add    $0x10,%esp
}
   10845:	90                   	nop
   10846:	c9                   	leave  
   10847:	c3                   	ret    

00010848 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t * frame) {
   10848:	55                   	push   %ebp
   10849:	89 e5                	mov    %esp,%ebp
   1084b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   1084e:	83 ec 08             	sub    $0x8,%esp
   10851:	68 18 17 01 00       	push   $0x11718
   10856:	ff 75 08             	pushl  0x8(%ebp)
   10859:	e8 ec fd ff ff       	call   1064a <do_default_handler>
   1085e:	83 c4 10             	add    $0x10,%esp
}
   10861:	90                   	nop
   10862:	c9                   	leave  
   10863:	c3                   	ret    

00010864 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t * frame) {
   10864:	55                   	push   %ebp
   10865:	89 e5                	mov    %esp,%ebp
   10867:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   1086a:	83 ec 08             	sub    $0x8,%esp
   1086d:	68 29 17 01 00       	push   $0x11729
   10872:	ff 75 08             	pushl  0x8(%ebp)
   10875:	e8 d0 fd ff ff       	call   1064a <do_default_handler>
   1087a:	83 c4 10             	add    $0x10,%esp
}
   1087d:	90                   	nop
   1087e:	c9                   	leave  
   1087f:	c3                   	ret    

00010880 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t * frame) {
   10880:	55                   	push   %ebp
   10881:	89 e5                	mov    %esp,%ebp
   10883:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10886:	83 ec 08             	sub    $0x8,%esp
   10889:	68 38 17 01 00       	push   $0x11738
   1088e:	ff 75 08             	pushl  0x8(%ebp)
   10891:	e8 b4 fd ff ff       	call   1064a <do_default_handler>
   10896:	83 c4 10             	add    $0x10,%esp
}
   10899:	90                   	nop
   1089a:	c9                   	leave  
   1089b:	c3                   	ret    

0001089c <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t * frame) {
   1089c:	55                   	push   %ebp
   1089d:	89 e5                	mov    %esp,%ebp
   1089f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   108a2:	83 ec 08             	sub    $0x8,%esp
   108a5:	68 57 17 01 00       	push   $0x11757
   108aa:	ff 75 08             	pushl  0x8(%ebp)
   108ad:	e8 98 fd ff ff       	call   1064a <do_default_handler>
   108b2:	83 c4 10             	add    $0x10,%esp
}
   108b5:	90                   	nop
   108b6:	c9                   	leave  
   108b7:	c3                   	ret    

000108b8 <init_pic>:

static gate_desc_t idt_table[IDE_TABLE_NR];

//初始化中断控制器
//硬件相关 --- 待解决
static void init_pic(void) {
   108b8:	55                   	push   %ebp
   108b9:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   108bb:	6a 11                	push   $0x11
   108bd:	6a 20                	push   $0x20
   108bf:	e8 51 fc ff ff       	call   10515 <outb>
   108c4:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   108c7:	6a 20                	push   $0x20
   108c9:	6a 21                	push   $0x21
   108cb:	e8 45 fc ff ff       	call   10515 <outb>
   108d0:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   108d3:	6a 04                	push   $0x4
   108d5:	6a 21                	push   $0x21
   108d7:	e8 39 fc ff ff       	call   10515 <outb>
   108dc:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   108df:	6a 01                	push   $0x1
   108e1:	6a 21                	push   $0x21
   108e3:	e8 2d fc ff ff       	call   10515 <outb>
   108e8:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   108eb:	6a 11                	push   $0x11
   108ed:	68 a0 00 00 00       	push   $0xa0
   108f2:	e8 1e fc ff ff       	call   10515 <outb>
   108f7:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   108fa:	6a 28                	push   $0x28
   108fc:	68 a1 00 00 00       	push   $0xa1
   10901:	e8 0f fc ff ff       	call   10515 <outb>
   10906:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10909:	6a 02                	push   $0x2
   1090b:	68 a1 00 00 00       	push   $0xa1
   10910:	e8 00 fc ff ff       	call   10515 <outb>
   10915:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10918:	6a 01                	push   $0x1
   1091a:	68 a1 00 00 00       	push   $0xa1
   1091f:	e8 f1 fb ff ff       	call   10515 <outb>
   10924:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10927:	68 fb 00 00 00       	push   $0xfb
   1092c:	6a 21                	push   $0x21
   1092e:	e8 e2 fb ff ff       	call   10515 <outb>
   10933:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10936:	68 ff 00 00 00       	push   $0xff
   1093b:	68 a1 00 00 00       	push   $0xa1
   10940:	e8 d0 fb ff ff       	call   10515 <outb>
   10945:	83 c4 08             	add    $0x8,%esp
}
   10948:	90                   	nop
   10949:	c9                   	leave  
   1094a:	c3                   	ret    

0001094b <irq_init>:


void irq_init(void){ 
   1094b:	55                   	push   %ebp
   1094c:	89 e5                	mov    %esp,%ebp
   1094e:	83 ec 18             	sub    $0x18,%esp

    for(int i = 0;i < IDE_TABLE_NR; i++){
   10951:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10958:	eb 25                	jmp    1097f <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   1095a:	ba 28 00 01 00       	mov    $0x10028,%edx
   1095f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10962:	c1 e0 03             	shl    $0x3,%eax
   10965:	05 20 20 01 00       	add    $0x12020,%eax
   1096a:	68 00 8e 00 00       	push   $0x8e00
   1096f:	52                   	push   %edx
   10970:	6a 08                	push   $0x8
   10972:	50                   	push   %eax
   10973:	e8 2e fb ff ff       	call   104a6 <gate_desc_set>
   10978:	83 c4 10             	add    $0x10,%esp
    for(int i = 0;i < IDE_TABLE_NR; i++){
   1097b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1097f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10983:	7e d5                	jle    1095a <irq_init+0xf>
        GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10985:	83 ec 08             	sub    $0x8,%esp
   10988:	68 47 00 01 00       	push   $0x10047
   1098d:	6a 00                	push   $0x0
   1098f:	e8 65 01 00 00       	call   10af9 <irq_install>
   10994:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10997:	83 ec 08             	sub    $0x8,%esp
   1099a:	68 66 00 01 00       	push   $0x10066
   1099f:	6a 01                	push   $0x1
   109a1:	e8 53 01 00 00       	call   10af9 <irq_install>
   109a6:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   109a9:	83 ec 08             	sub    $0x8,%esp
   109ac:	68 85 00 01 00       	push   $0x10085
   109b1:	6a 02                	push   $0x2
   109b3:	e8 41 01 00 00       	call   10af9 <irq_install>
   109b8:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   109bb:	83 ec 08             	sub    $0x8,%esp
   109be:	68 a4 00 01 00       	push   $0x100a4
   109c3:	6a 03                	push   $0x3
   109c5:	e8 2f 01 00 00       	call   10af9 <irq_install>
   109ca:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   109cd:	83 ec 08             	sub    $0x8,%esp
   109d0:	68 c3 00 01 00       	push   $0x100c3
   109d5:	6a 04                	push   $0x4
   109d7:	e8 1d 01 00 00       	call   10af9 <irq_install>
   109dc:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   109df:	83 ec 08             	sub    $0x8,%esp
   109e2:	68 e2 00 01 00       	push   $0x100e2
   109e7:	6a 05                	push   $0x5
   109e9:	e8 0b 01 00 00       	call   10af9 <irq_install>
   109ee:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   109f1:	83 ec 08             	sub    $0x8,%esp
   109f4:	68 01 01 01 00       	push   $0x10101
   109f9:	6a 06                	push   $0x6
   109fb:	e8 f9 00 00 00       	call   10af9 <irq_install>
   10a00:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10a03:	83 ec 08             	sub    $0x8,%esp
   10a06:	68 20 01 01 00       	push   $0x10120
   10a0b:	6a 07                	push   $0x7
   10a0d:	e8 e7 00 00 00       	call   10af9 <irq_install>
   10a12:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10a15:	83 ec 08             	sub    $0x8,%esp
   10a18:	68 3f 01 01 00       	push   $0x1013f
   10a1d:	6a 08                	push   $0x8
   10a1f:	e8 d5 00 00 00       	call   10af9 <irq_install>
   10a24:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10a27:	83 ec 08             	sub    $0x8,%esp
   10a2a:	68 5c 01 01 00       	push   $0x1015c
   10a2f:	6a 0a                	push   $0xa
   10a31:	e8 c3 00 00 00       	call   10af9 <irq_install>
   10a36:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10a39:	83 ec 08             	sub    $0x8,%esp
   10a3c:	68 79 01 01 00       	push   $0x10179
   10a41:	6a 0b                	push   $0xb
   10a43:	e8 b1 00 00 00       	call   10af9 <irq_install>
   10a48:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10a4b:	83 ec 08             	sub    $0x8,%esp
   10a4e:	68 96 01 01 00       	push   $0x10196
   10a53:	6a 0c                	push   $0xc
   10a55:	e8 9f 00 00 00       	call   10af9 <irq_install>
   10a5a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10a5d:	83 ec 08             	sub    $0x8,%esp
   10a60:	68 b3 01 01 00       	push   $0x101b3
   10a65:	6a 0d                	push   $0xd
   10a67:	e8 8d 00 00 00       	call   10af9 <irq_install>
   10a6c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10a6f:	83 ec 08             	sub    $0x8,%esp
   10a72:	68 d0 01 01 00       	push   $0x101d0
   10a77:	6a 0e                	push   $0xe
   10a79:	e8 7b 00 00 00       	call   10af9 <irq_install>
   10a7e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10a81:	83 ec 08             	sub    $0x8,%esp
   10a84:	68 ed 01 01 00       	push   $0x101ed
   10a89:	6a 10                	push   $0x10
   10a8b:	e8 69 00 00 00       	call   10af9 <irq_install>
   10a90:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10a93:	83 ec 08             	sub    $0x8,%esp
   10a96:	68 0c 02 01 00       	push   $0x1020c
   10a9b:	6a 11                	push   $0x11
   10a9d:	e8 57 00 00 00       	call   10af9 <irq_install>
   10aa2:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10aa5:	83 ec 08             	sub    $0x8,%esp
   10aa8:	68 29 02 01 00       	push   $0x10229
   10aad:	6a 12                	push   $0x12
   10aaf:	e8 45 00 00 00       	call   10af9 <irq_install>
   10ab4:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10ab7:	83 ec 08             	sub    $0x8,%esp
   10aba:	68 48 02 01 00       	push   $0x10248
   10abf:	6a 13                	push   $0x13
   10ac1:	e8 33 00 00 00       	call   10af9 <irq_install>
   10ac6:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10ac9:	83 ec 08             	sub    $0x8,%esp
   10acc:	68 67 02 01 00       	push   $0x10267
   10ad1:	6a 14                	push   $0x14
   10ad3:	e8 21 00 00 00       	call   10af9 <irq_install>
   10ad8:	83 c4 10             	add    $0x10,%esp
    
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10adb:	b8 20 20 01 00       	mov    $0x12020,%eax
   10ae0:	83 ec 08             	sub    $0x8,%esp
   10ae3:	68 00 04 00 00       	push   $0x400
   10ae8:	50                   	push   %eax
   10ae9:	e8 54 fa ff ff       	call   10542 <lidt>
   10aee:	83 c4 10             	add    $0x10,%esp

//初始化中断控制器
    init_pic();
   10af1:	e8 c2 fd ff ff       	call   108b8 <init_pic>
}
   10af6:	90                   	nop
   10af7:	c9                   	leave  
   10af8:	c3                   	ret    

00010af9 <irq_install>:


int irq_install(int irq_num,irq_handler_t handler){
   10af9:	55                   	push   %ebp
   10afa:	89 e5                	mov    %esp,%ebp
   10afc:	83 ec 08             	sub    $0x8,%esp

    if(irq_num >= IDE_TABLE_NR){
   10aff:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10b03:	7e 07                	jle    10b0c <irq_install+0x13>
        return -1;
   10b05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b0a:	eb 25                	jmp    10b31 <irq_install+0x38>
    }

    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,
   10b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b0f:	8b 55 08             	mov    0x8(%ebp),%edx
   10b12:	c1 e2 03             	shl    $0x3,%edx
   10b15:	81 c2 20 20 01 00    	add    $0x12020,%edx
   10b1b:	68 00 8e 00 00       	push   $0x8e00
   10b20:	50                   	push   %eax
   10b21:	6a 08                	push   $0x8
   10b23:	52                   	push   %edx
   10b24:	e8 7d f9 ff ff       	call   104a6 <gate_desc_set>
   10b29:	83 c4 10             	add    $0x10,%esp
    (uint32_t)handler,GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   10b2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b31:	c9                   	leave  
   10b32:	c3                   	ret    

00010b33 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable (int irq_num) {
   10b33:	55                   	push   %ebp
   10b34:	89 e5                	mov    %esp,%ebp
   10b36:	53                   	push   %ebx
   10b37:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10b3a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10b3e:	7e 78                	jle    10bb8 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10b40:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10b44:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10b48:	7f 32                	jg     10b7c <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10b4a:	6a 21                	push   $0x21
   10b4c:	e8 a7 f9 ff ff       	call   104f8 <inb>
   10b51:	83 c4 04             	add    $0x4,%esp
   10b54:	89 c2                	mov    %eax,%edx
   10b56:	8b 45 08             	mov    0x8(%ebp),%eax
   10b59:	bb 01 00 00 00       	mov    $0x1,%ebx
   10b5e:	89 c1                	mov    %eax,%ecx
   10b60:	d3 e3                	shl    %cl,%ebx
   10b62:	89 d8                	mov    %ebx,%eax
   10b64:	f7 d0                	not    %eax
   10b66:	21 d0                	and    %edx,%eax
   10b68:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10b6b:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10b6f:	50                   	push   %eax
   10b70:	6a 21                	push   $0x21
   10b72:	e8 9e f9 ff ff       	call   10515 <outb>
   10b77:	83 c4 08             	add    $0x8,%esp
   10b7a:	eb 3d                	jmp    10bb9 <irq_enable+0x86>
    }else{
        irq_num -= 8;
   10b7c:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10b80:	68 a1 00 00 00       	push   $0xa1
   10b85:	e8 6e f9 ff ff       	call   104f8 <inb>
   10b8a:	83 c4 04             	add    $0x4,%esp
   10b8d:	89 c2                	mov    %eax,%edx
   10b8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b92:	bb 01 00 00 00       	mov    $0x1,%ebx
   10b97:	89 c1                	mov    %eax,%ecx
   10b99:	d3 e3                	shl    %cl,%ebx
   10b9b:	89 d8                	mov    %ebx,%eax
   10b9d:	f7 d0                	not    %eax
   10b9f:	21 d0                	and    %edx,%eax
   10ba1:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10ba4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10ba8:	50                   	push   %eax
   10ba9:	68 a1 00 00 00       	push   $0xa1
   10bae:	e8 62 f9 ff ff       	call   10515 <outb>
   10bb3:	83 c4 08             	add    $0x8,%esp
   10bb6:	eb 01                	jmp    10bb9 <irq_enable+0x86>
        return;
   10bb8:	90                   	nop
    }
}
   10bb9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10bbc:	c9                   	leave  
   10bbd:	c3                   	ret    

00010bbe <irq_disable>:
void irq_disable (int irq_num) {
   10bbe:	55                   	push   %ebp
   10bbf:	89 e5                	mov    %esp,%ebp
   10bc1:	53                   	push   %ebx
   10bc2:	83 ec 10             	sub    $0x10,%esp
    
    if (irq_num < IRQ_PIC_START) {
   10bc5:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10bc9:	7e 74                	jle    10c3f <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10bcb:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10bcf:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10bd3:	7f 30                	jg     10c05 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10bd5:	6a 21                	push   $0x21
   10bd7:	e8 1c f9 ff ff       	call   104f8 <inb>
   10bdc:	83 c4 04             	add    $0x4,%esp
   10bdf:	89 c3                	mov    %eax,%ebx
   10be1:	8b 45 08             	mov    0x8(%ebp),%eax
   10be4:	ba 01 00 00 00       	mov    $0x1,%edx
   10be9:	89 c1                	mov    %eax,%ecx
   10beb:	d3 e2                	shl    %cl,%edx
   10bed:	89 d0                	mov    %edx,%eax
   10bef:	09 d8                	or     %ebx,%eax
   10bf1:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   10bf4:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10bf8:	50                   	push   %eax
   10bf9:	6a 21                	push   $0x21
   10bfb:	e8 15 f9 ff ff       	call   10515 <outb>
   10c00:	83 c4 08             	add    $0x8,%esp
   10c03:	eb 3b                	jmp    10c40 <irq_disable+0x82>
    }else{
        irq_num -= 8;
   10c05:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10c09:	68 a1 00 00 00       	push   $0xa1
   10c0e:	e8 e5 f8 ff ff       	call   104f8 <inb>
   10c13:	83 c4 04             	add    $0x4,%esp
   10c16:	89 c3                	mov    %eax,%ebx
   10c18:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1b:	ba 01 00 00 00       	mov    $0x1,%edx
   10c20:	89 c1                	mov    %eax,%ecx
   10c22:	d3 e2                	shl    %cl,%edx
   10c24:	89 d0                	mov    %edx,%eax
   10c26:	09 d8                	or     %ebx,%eax
   10c28:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   10c2b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c2f:	50                   	push   %eax
   10c30:	68 a1 00 00 00       	push   $0xa1
   10c35:	e8 db f8 ff ff       	call   10515 <outb>
   10c3a:	83 c4 08             	add    $0x8,%esp
   10c3d:	eb 01                	jmp    10c40 <irq_disable+0x82>
        return;
   10c3f:	90                   	nop
    }
}
   10c40:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c43:	c9                   	leave  
   10c44:	c3                   	ret    

00010c45 <irq_disable_global>:


// 将eflags中的IF位设置为0
void irq_disable_global (void) {
   10c45:	55                   	push   %ebp
   10c46:	89 e5                	mov    %esp,%ebp
    cli();
   10c48:	e8 e7 f8 ff ff       	call   10534 <cli>
}
   10c4d:	90                   	nop
   10c4e:	5d                   	pop    %ebp
   10c4f:	c3                   	ret    

00010c50 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global (void) {
   10c50:	55                   	push   %ebp
   10c51:	89 e5                	mov    %esp,%ebp
    sti();
   10c53:	e8 e3 f8 ff ff       	call   1053b <sti>
}
   10c58:	90                   	nop
   10c59:	5d                   	pop    %ebp
   10c5a:	c3                   	ret    

00010c5b <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10c5b:	55                   	push   %ebp
   10c5c:	89 e5                	mov    %esp,%ebp
    
    irq_num -= IRQ_PIC_START;
   10c5e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if(irq_num >= 8){
   10c62:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c66:	7e 0f                	jle    10c77 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   10c68:	6a 20                	push   $0x20
   10c6a:	68 a0 00 00 00       	push   $0xa0
   10c6f:	e8 a1 f8 ff ff       	call   10515 <outb>
   10c74:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10c77:	6a 20                	push   $0x20
   10c79:	6a 20                	push   $0x20
   10c7b:	e8 95 f8 ff ff       	call   10515 <outb>
   10c80:	83 c4 08             	add    $0x8,%esp

}
   10c83:	90                   	nop
   10c84:	c9                   	leave  
   10c85:	c3                   	ret    

00010c86 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10c86:	55                   	push   %ebp
   10c87:	89 e5                	mov    %esp,%ebp
   10c89:	83 ec 08             	sub    $0x8,%esp
   10c8c:	8b 55 08             	mov    0x8(%ebp),%edx
   10c8f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c92:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10c96:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10c99:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10c9d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10ca1:	ee                   	out    %al,(%dx)
}
   10ca2:	90                   	nop
   10ca3:	c9                   	leave  
   10ca4:	c3                   	ret    

00010ca5 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   10ca5:	55                   	push   %ebp
   10ca6:	89 e5                	mov    %esp,%ebp
   10ca8:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10cab:	a1 20 24 01 00       	mov    0x12420,%eax
   10cb0:	83 c0 01             	add    $0x1,%eax
   10cb3:	a3 20 24 01 00       	mov    %eax,0x12420
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   10cb8:	83 ec 0c             	sub    $0xc,%esp
   10cbb:	6a 20                	push   $0x20
   10cbd:	e8 99 ff ff ff       	call   10c5b <pic_send_eoi>
   10cc2:	83 c4 10             	add    $0x10,%esp
}
   10cc5:	90                   	nop
   10cc6:	c9                   	leave  
   10cc7:	c3                   	ret    

00010cc8 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10cc8:	55                   	push   %ebp
   10cc9:	89 e5                	mov    %esp,%ebp
   10ccb:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10cce:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   10cd5:	6a 36                	push   $0x36
   10cd7:	6a 43                	push   $0x43
   10cd9:	e8 a8 ff ff ff       	call   10c86 <outb>
   10cde:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   10ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ce4:	0f b6 c0             	movzbl %al,%eax
   10ce7:	50                   	push   %eax
   10ce8:	6a 40                	push   $0x40
   10cea:	e8 97 ff ff ff       	call   10c86 <outb>
   10cef:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   10cf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cf5:	c1 e8 08             	shr    $0x8,%eax
   10cf8:	0f b6 c0             	movzbl %al,%eax
   10cfb:	50                   	push   %eax
   10cfc:	6a 40                	push   $0x40
   10cfe:	e8 83 ff ff ff       	call   10c86 <outb>
   10d03:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10d06:	83 ec 08             	sub    $0x8,%esp
   10d09:	68 86 02 01 00       	push   $0x10286
   10d0e:	6a 20                	push   $0x20
   10d10:	e8 e4 fd ff ff       	call   10af9 <irq_install>
   10d15:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10d18:	83 ec 0c             	sub    $0xc,%esp
   10d1b:	6a 20                	push   $0x20
   10d1d:	e8 11 fe ff ff       	call   10b33 <irq_enable>
   10d22:	83 c4 10             	add    $0x10,%esp
}
   10d25:	90                   	nop
   10d26:	c9                   	leave  
   10d27:	c3                   	ret    

00010d28 <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   10d28:	55                   	push   %ebp
   10d29:	89 e5                	mov    %esp,%ebp
   10d2b:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10d2e:	c7 05 20 24 01 00 00 	movl   $0x0,0x12420
   10d35:	00 00 00 

    init_pit();
   10d38:	e8 8b ff ff ff       	call   10cc8 <init_pit>
   10d3d:	90                   	nop
   10d3e:	c9                   	leave  
   10d3f:	c3                   	ret    

00010d40 <kernel_init>:


/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   10d40:	55                   	push   %ebp
   10d41:	89 e5                	mov    %esp,%ebp
   10d43:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10d46:	e8 a2 f7 ff ff       	call   104ed <cpu_init>

    log_init();
   10d4b:	e8 5e 06 00 00       	call   113ae <log_init>
    irq_init();
   10d50:	e8 f6 fb ff ff       	call   1094b <irq_init>
    time_init();
   10d55:	e8 ce ff ff ff       	call   10d28 <time_init>
}
   10d5a:	90                   	nop
   10d5b:	c9                   	leave  
   10d5c:	c3                   	ret    

00010d5d <init_task_entry>:

static task_t first_task;
static uint32_t init_task_stack[1024];
static task_t init_task;

void init_task_entry(void) {
   10d5d:	55                   	push   %ebp
   10d5e:	89 e5                	mov    %esp,%ebp
   10d60:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   10d63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int main: %d",count++);
   10d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d6d:	8d 50 01             	lea    0x1(%eax),%edx
   10d70:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10d73:	83 ec 08             	sub    $0x8,%esp
   10d76:	50                   	push   %eax
   10d77:	68 71 17 01 00       	push   $0x11771
   10d7c:	e8 a2 06 00 00       	call   11423 <log_printf>
   10d81:	83 c4 10             	add    $0x10,%esp
   10d84:	eb e4                	jmp    10d6a <init_task_entry+0xd>

00010d86 <init_main>:
    }    

}

void init_main(void) {
   10d86:	55                   	push   %ebp
   10d87:	89 e5                	mov    %esp,%ebp
   10d89:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   10d8c:	83 ec 0c             	sub    $0xc,%esp
   10d8f:	68 7e 17 01 00       	push   $0x1177e
   10d94:	e8 8a 06 00 00       	call   11423 <log_printf>
   10d99:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   10d9c:	83 ec 04             	sub    $0x4,%esp
   10d9f:	68 94 17 01 00       	push   $0x11794
   10da4:	68 9d 17 01 00       	push   $0x1179d
   10da9:	68 a3 17 01 00       	push   $0x117a3
   10dae:	e8 70 06 00 00       	call   11423 <log_printf>
   10db3:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   10db6:	83 ec 0c             	sub    $0xc,%esp
   10db9:	6a 61                	push   $0x61
   10dbb:	68 45 23 01 00       	push   $0x12345
   10dc0:	6a 85                	push   $0xffffff85
   10dc2:	68 40 e2 01 00       	push   $0x1e240
   10dc7:	68 b2 17 01 00       	push   $0x117b2
   10dcc:	e8 52 06 00 00       	call   11423 <log_printf>
   10dd1:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, (uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   10dd4:	ba c0 34 01 00       	mov    $0x134c0,%edx
   10dd9:	b8 5d 0d 01 00       	mov    $0x10d5d,%eax
   10dde:	83 ec 04             	sub    $0x4,%esp
   10de1:	52                   	push   %edx
   10de2:	50                   	push   %eax
   10de3:	68 c0 34 01 00       	push   $0x134c0
   10de8:	e8 61 f5 ff ff       	call   1034e <task_init>
   10ded:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0,0);
   10df0:	83 ec 04             	sub    $0x4,%esp
   10df3:	6a 00                	push   $0x0
   10df5:	6a 00                	push   $0x0
   10df7:	68 40 24 01 00       	push   $0x12440
   10dfc:	e8 4d f5 ff ff       	call   1034e <task_init>
   10e01:	83 c4 10             	add    $0x10,%esp

    int count = 0;
   10e04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("int main: %d",count++);
   10e0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e0e:	8d 50 01             	lea    0x1(%eax),%edx
   10e11:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10e14:	83 ec 08             	sub    $0x8,%esp
   10e17:	50                   	push   %eax
   10e18:	68 71 17 01 00       	push   $0x11771
   10e1d:	e8 01 06 00 00       	call   11423 <log_printf>
   10e22:	83 c4 10             	add    $0x10,%esp
   10e25:	eb e4                	jmp    10e0b <init_main+0x85>

00010e27 <hlt>:
static inline void hlt (void) {
   10e27:	55                   	push   %ebp
   10e28:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10e2a:	f4                   	hlt    
}
   10e2b:	90                   	nop
   10e2c:	5d                   	pop    %ebp
   10e2d:	c3                   	ret    

00010e2e <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   10e2e:	55                   	push   %ebp
   10e2f:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   10e31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e35:	74 3b                	je     10e72 <kernel_strcpy+0x44>
   10e37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e3b:	74 35                	je     10e72 <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   10e3d:	eb 17                	jmp    10e56 <kernel_strcpy+0x28>
        *dest++ = *src++;
   10e3f:	8b 55 0c             	mov    0xc(%ebp),%edx
   10e42:	8d 42 01             	lea    0x1(%edx),%eax
   10e45:	89 45 0c             	mov    %eax,0xc(%ebp)
   10e48:	8b 45 08             	mov    0x8(%ebp),%eax
   10e4b:	8d 48 01             	lea    0x1(%eax),%ecx
   10e4e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10e51:	0f b6 12             	movzbl (%edx),%edx
   10e54:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   10e56:	8b 45 08             	mov    0x8(%ebp),%eax
   10e59:	0f b6 00             	movzbl (%eax),%eax
   10e5c:	84 c0                	test   %al,%al
   10e5e:	74 0a                	je     10e6a <kernel_strcpy+0x3c>
   10e60:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e63:	0f b6 00             	movzbl (%eax),%eax
   10e66:	84 c0                	test   %al,%al
   10e68:	75 d5                	jne    10e3f <kernel_strcpy+0x11>
    }

    *dest = '\0';
   10e6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e6d:	c6 00 00             	movb   $0x0,(%eax)
   10e70:	eb 01                	jmp    10e73 <kernel_strcpy+0x45>
        return;
   10e72:	90                   	nop
}
   10e73:	5d                   	pop    %ebp
   10e74:	c3                   	ret    

00010e75 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   10e75:	55                   	push   %ebp
   10e76:	89 e5                	mov    %esp,%ebp
   10e78:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   10e7b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e7f:	74 61                	je     10ee2 <kernel_strncpy+0x6d>
   10e81:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e85:	74 5b                	je     10ee2 <kernel_strncpy+0x6d>
   10e87:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e8b:	74 55                	je     10ee2 <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   10e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e90:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   10e93:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e96:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   10e99:	eb 17                	jmp    10eb2 <kernel_strncpy+0x3d>
        *d++ = *s++;
   10e9b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10e9e:	8d 42 01             	lea    0x1(%edx),%eax
   10ea1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10ea4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ea7:	8d 48 01             	lea    0x1(%eax),%ecx
   10eaa:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10ead:	0f b6 12             	movzbl (%edx),%edx
   10eb0:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   10eb2:	8b 45 10             	mov    0x10(%ebp),%eax
   10eb5:	8d 50 ff             	lea    -0x1(%eax),%edx
   10eb8:	89 55 10             	mov    %edx,0x10(%ebp)
   10ebb:	85 c0                	test   %eax,%eax
   10ebd:	7e 0a                	jle    10ec9 <kernel_strncpy+0x54>
   10ebf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10ec2:	0f b6 00             	movzbl (%eax),%eax
   10ec5:	84 c0                	test   %al,%al
   10ec7:	75 d2                	jne    10e9b <kernel_strncpy+0x26>
    }
    if (size == 0) {
   10ec9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ecd:	75 0b                	jne    10eda <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   10ecf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ed2:	83 e8 01             	sub    $0x1,%eax
   10ed5:	c6 00 00             	movb   $0x0,(%eax)
   10ed8:	eb 09                	jmp    10ee3 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   10eda:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10edd:	c6 00 00             	movb   $0x0,(%eax)
   10ee0:	eb 01                	jmp    10ee3 <kernel_strncpy+0x6e>
        return;
   10ee2:	90                   	nop
    }
}
   10ee3:	c9                   	leave  
   10ee4:	c3                   	ret    

00010ee5 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   10ee5:	55                   	push   %ebp
   10ee6:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   10ee8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10eec:	74 06                	je     10ef4 <kernel_strncmp+0xf>
   10eee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ef2:	75 0f                	jne    10f03 <kernel_strncmp+0x1e>
        return -1;
   10ef4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ef9:	eb 62                	jmp    10f5d <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   10efb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   10eff:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   10f03:	8b 45 08             	mov    0x8(%ebp),%eax
   10f06:	0f b6 00             	movzbl (%eax),%eax
   10f09:	84 c0                	test   %al,%al
   10f0b:	74 20                	je     10f2d <kernel_strncmp+0x48>
   10f0d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f10:	0f b6 00             	movzbl (%eax),%eax
   10f13:	84 c0                	test   %al,%al
   10f15:	74 16                	je     10f2d <kernel_strncmp+0x48>
   10f17:	8b 45 08             	mov    0x8(%ebp),%eax
   10f1a:	0f b6 10             	movzbl (%eax),%edx
   10f1d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f20:	0f b6 00             	movzbl (%eax),%eax
   10f23:	38 c2                	cmp    %al,%dl
   10f25:	75 06                	jne    10f2d <kernel_strncmp+0x48>
   10f27:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f2b:	75 ce                	jne    10efb <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10f2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f30:	0f b6 00             	movzbl (%eax),%eax
   10f33:	84 c0                	test   %al,%al
   10f35:	74 21                	je     10f58 <kernel_strncmp+0x73>
   10f37:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f3a:	0f b6 00             	movzbl (%eax),%eax
   10f3d:	84 c0                	test   %al,%al
   10f3f:	74 17                	je     10f58 <kernel_strncmp+0x73>
   10f41:	8b 45 08             	mov    0x8(%ebp),%eax
   10f44:	0f b6 10             	movzbl (%eax),%edx
   10f47:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f4a:	0f b6 00             	movzbl (%eax),%eax
   10f4d:	38 c2                	cmp    %al,%dl
   10f4f:	74 07                	je     10f58 <kernel_strncmp+0x73>
   10f51:	b8 01 00 00 00       	mov    $0x1,%eax
   10f56:	eb 05                	jmp    10f5d <kernel_strncmp+0x78>
   10f58:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f5d:	5d                   	pop    %ebp
   10f5e:	c3                   	ret    

00010f5f <kernel_strlen>:
int kernel_strlen(const char * str){
   10f5f:	55                   	push   %ebp
   10f60:	89 e5                	mov    %esp,%ebp
   10f62:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   10f65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f69:	75 07                	jne    10f72 <kernel_strlen+0x13>
        return 0;
   10f6b:	b8 00 00 00 00       	mov    $0x0,%eax
   10f70:	eb 26                	jmp    10f98 <kernel_strlen+0x39>
    }

    const char * c = str;
   10f72:	8b 45 08             	mov    0x8(%ebp),%eax
   10f75:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   10f78:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   10f7f:	eb 04                	jmp    10f85 <kernel_strlen+0x26>
        len++;
   10f81:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   10f85:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f88:	8d 50 01             	lea    0x1(%eax),%edx
   10f8b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10f8e:	0f b6 00             	movzbl (%eax),%eax
   10f91:	84 c0                	test   %al,%al
   10f93:	75 ec                	jne    10f81 <kernel_strlen+0x22>
    }
    return len;
   10f95:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   10f98:	c9                   	leave  
   10f99:	c3                   	ret    

00010f9a <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   10f9a:	55                   	push   %ebp
   10f9b:	89 e5                	mov    %esp,%ebp
   10f9d:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   10fa0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fa4:	74 40                	je     10fe6 <kernel_memcpy+0x4c>
   10fa6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10faa:	74 3a                	je     10fe6 <kernel_memcpy+0x4c>
   10fac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fb0:	74 34                	je     10fe6 <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   10fb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fb5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   10fb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fbb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   10fbe:	eb 17                	jmp    10fd7 <kernel_memcpy+0x3d>
        *d++ = *s++;
   10fc0:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10fc3:	8d 42 01             	lea    0x1(%edx),%eax
   10fc6:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10fc9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fcc:	8d 48 01             	lea    0x1(%eax),%ecx
   10fcf:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10fd2:	0f b6 12             	movzbl (%edx),%edx
   10fd5:	88 10                	mov    %dl,(%eax)
    while(size--){
   10fd7:	8b 45 10             	mov    0x10(%ebp),%eax
   10fda:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fdd:	89 55 10             	mov    %edx,0x10(%ebp)
   10fe0:	85 c0                	test   %eax,%eax
   10fe2:	75 dc                	jne    10fc0 <kernel_memcpy+0x26>
   10fe4:	eb 01                	jmp    10fe7 <kernel_memcpy+0x4d>
        return;
   10fe6:	90                   	nop
    }

}
   10fe7:	c9                   	leave  
   10fe8:	c3                   	ret    

00010fe9 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   10fe9:	55                   	push   %ebp
   10fea:	89 e5                	mov    %esp,%ebp
   10fec:	83 ec 14             	sub    $0x14,%esp
   10fef:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ff2:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   10ff5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff9:	74 2c                	je     11027 <kernel_memset+0x3e>
   10ffb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fff:	74 26                	je     11027 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11001:	8b 45 08             	mov    0x8(%ebp),%eax
   11004:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   11007:	eb 0f                	jmp    11018 <kernel_memset+0x2f>
       *d++ = v; 
   11009:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1100c:	8d 50 01             	lea    0x1(%eax),%edx
   1100f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11012:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11016:	88 10                	mov    %dl,(%eax)
    while(size--){
   11018:	8b 45 10             	mov    0x10(%ebp),%eax
   1101b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1101e:	89 55 10             	mov    %edx,0x10(%ebp)
   11021:	85 c0                	test   %eax,%eax
   11023:	75 e4                	jne    11009 <kernel_memset+0x20>
   11025:	eb 01                	jmp    11028 <kernel_memset+0x3f>
        return;
   11027:	90                   	nop
    }
}
   11028:	c9                   	leave  
   11029:	c3                   	ret    

0001102a <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   1102a:	55                   	push   %ebp
   1102b:	89 e5                	mov    %esp,%ebp
   1102d:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   11030:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11034:	74 0c                	je     11042 <kernel_memcmp+0x18>
   11036:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1103a:	74 06                	je     11042 <kernel_memcmp+0x18>
   1103c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11040:	75 07                	jne    11049 <kernel_memcmp+0x1f>
        return -1;
   11042:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11047:	eb 43                	jmp    1108c <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11049:	8b 45 08             	mov    0x8(%ebp),%eax
   1104c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   1104f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11052:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11055:	eb 23                	jmp    1107a <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   11057:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1105a:	8d 50 01             	lea    0x1(%eax),%edx
   1105d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11060:	0f b6 08             	movzbl (%eax),%ecx
   11063:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11066:	8d 50 01             	lea    0x1(%eax),%edx
   11069:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1106c:	0f b6 00             	movzbl (%eax),%eax
   1106f:	38 c1                	cmp    %al,%cl
   11071:	74 07                	je     1107a <kernel_memcmp+0x50>
            return -1;
   11073:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11078:	eb 12                	jmp    1108c <kernel_memcmp+0x62>
    while(size--){
   1107a:	8b 45 10             	mov    0x10(%ebp),%eax
   1107d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11080:	89 55 10             	mov    %edx,0x10(%ebp)
   11083:	85 c0                	test   %eax,%eax
   11085:	75 d0                	jne    11057 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11087:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1108c:	c9                   	leave  
   1108d:	c3                   	ret    

0001108e <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   1108e:	55                   	push   %ebp
   1108f:	89 e5                	mov    %esp,%ebp
   11091:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   11094:	8d 45 10             	lea    0x10(%ebp),%eax
   11097:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   1109a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1109d:	83 ec 04             	sub    $0x4,%esp
   110a0:	50                   	push   %eax
   110a1:	ff 75 0c             	pushl  0xc(%ebp)
   110a4:	ff 75 08             	pushl  0x8(%ebp)
   110a7:	e8 45 01 00 00       	call   111f1 <kernel_vsprintf>
   110ac:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   110af:	90                   	nop
   110b0:	c9                   	leave  
   110b1:	c3                   	ret    

000110b2 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   110b2:	55                   	push   %ebp
   110b3:	89 e5                	mov    %esp,%ebp
   110b5:	53                   	push   %ebx
   110b6:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   110b9:	8b 45 08             	mov    0x8(%ebp),%eax
   110bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   110bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   110c2:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   110c5:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   110c9:	74 1d                	je     110e8 <kernel_itoa+0x36>
   110cb:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   110cf:	74 17                	je     110e8 <kernel_itoa+0x36>
   110d1:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   110d5:	74 11                	je     110e8 <kernel_itoa+0x36>
   110d7:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   110db:	74 0b                	je     110e8 <kernel_itoa+0x36>
        *p = '\0';
   110dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110e0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   110e3:	e9 03 01 00 00       	jmp    111eb <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   110e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   110ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110f3:	79 19                	jns    1110e <kernel_itoa+0x5c>
   110f5:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   110f9:	75 13                	jne    1110e <kernel_itoa+0x5c>
        *p++ = '-';
   110fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110fe:	8d 50 01             	lea    0x1(%eax),%edx
   11101:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11104:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11107:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   1110e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11112:	74 3b                	je     1114f <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   11114:	8b 0d 10 18 01 00    	mov    0x11810,%ecx
   1111a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1111d:	99                   	cltd   
   1111e:	f7 7d 10             	idivl  0x10(%ebp)
   11121:	89 d0                	mov    %edx,%eax
   11123:	83 c0 0f             	add    $0xf,%eax
   11126:	01 c8                	add    %ecx,%eax
   11128:	0f b6 00             	movzbl (%eax),%eax
   1112b:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1112e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11131:	8d 50 01             	lea    0x1(%eax),%edx
   11134:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11137:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1113b:	88 10                	mov    %dl,(%eax)
            num /= base;
   1113d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11140:	99                   	cltd   
   11141:	f7 7d 10             	idivl  0x10(%ebp)
   11144:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11147:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1114b:	75 c7                	jne    11114 <kernel_itoa+0x62>
   1114d:	eb 4b                	jmp    1119a <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   1114f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11152:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   11155:	8b 0d 10 18 01 00    	mov    0x11810,%ecx
   1115b:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1115e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11161:	ba 00 00 00 00       	mov    $0x0,%edx
   11166:	f7 f3                	div    %ebx
   11168:	89 d0                	mov    %edx,%eax
   1116a:	83 c0 0f             	add    $0xf,%eax
   1116d:	01 c8                	add    %ecx,%eax
   1116f:	0f b6 00             	movzbl (%eax),%eax
   11172:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11175:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11178:	8d 50 01             	lea    0x1(%eax),%edx
   1117b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1117e:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11182:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11184:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11187:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1118a:	ba 00 00 00 00       	mov    $0x0,%edx
   1118f:	f7 f3                	div    %ebx
   11191:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11194:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11198:	75 bb                	jne    11155 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   1119a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1119d:	8d 50 ff             	lea    -0x1(%eax),%edx
   111a0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   111a3:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   111a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111aa:	74 08                	je     111b4 <kernel_itoa+0x102>
   111ac:	8b 45 08             	mov    0x8(%ebp),%eax
   111af:	83 c0 01             	add    $0x1,%eax
   111b2:	eb 03                	jmp    111b7 <kernel_itoa+0x105>
   111b4:	8b 45 08             	mov    0x8(%ebp),%eax
   111b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   111ba:	eb 27                	jmp    111e3 <kernel_itoa+0x131>
        char ch = *start;
   111bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111bf:	0f b6 00             	movzbl (%eax),%eax
   111c2:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   111c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111c8:	0f b6 10             	movzbl (%eax),%edx
   111cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111ce:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   111d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111d3:	8d 50 ff             	lea    -0x1(%eax),%edx
   111d6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   111d9:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   111dd:	88 10                	mov    %dl,(%eax)
        start++;
   111df:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   111e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111e6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   111e9:	72 d1                	jb     111bc <kernel_itoa+0x10a>
    }
}
   111eb:	83 c4 20             	add    $0x20,%esp
   111ee:	5b                   	pop    %ebx
   111ef:	5d                   	pop    %ebp
   111f0:	c3                   	ret    

000111f1 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   111f1:	55                   	push   %ebp
   111f2:	89 e5                	mov    %esp,%ebp
   111f4:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   111f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   111fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11201:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   11204:	e9 17 01 00 00       	jmp    11320 <kernel_vsprintf+0x12f>
        switch(state) {
   11209:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1120c:	85 c0                	test   %eax,%eax
   1120e:	74 0a                	je     1121a <kernel_vsprintf+0x29>
   11210:	83 f8 01             	cmp    $0x1,%eax
   11213:	74 2b                	je     11240 <kernel_vsprintf+0x4f>
   11215:	e9 06 01 00 00       	jmp    11320 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   1121a:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1121e:	75 0c                	jne    1122c <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   11220:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11227:	e9 f4 00 00 00       	jmp    11320 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   1122c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1122f:	8d 50 01             	lea    0x1(%eax),%edx
   11232:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11235:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11239:	88 10                	mov    %dl,(%eax)
                }
                break;
   1123b:	e9 e0 00 00 00       	jmp    11320 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   11240:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11244:	75 47                	jne    1128d <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   11246:	8b 45 10             	mov    0x10(%ebp),%eax
   11249:	8d 50 04             	lea    0x4(%eax),%edx
   1124c:	89 55 10             	mov    %edx,0x10(%ebp)
   1124f:	8b 00                	mov    (%eax),%eax
   11251:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   11254:	ff 75 f4             	pushl  -0xc(%ebp)
   11257:	e8 03 fd ff ff       	call   10f5f <kernel_strlen>
   1125c:	83 c4 04             	add    $0x4,%esp
   1125f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   11262:	eb 17                	jmp    1127b <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   11264:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11267:	8d 42 01             	lea    0x1(%edx),%eax
   1126a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1126d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11270:	8d 48 01             	lea    0x1(%eax),%ecx
   11273:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11276:	0f b6 12             	movzbl (%edx),%edx
   11279:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   1127b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1127e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11281:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11284:	85 c0                	test   %eax,%eax
   11286:	75 dc                	jne    11264 <kernel_vsprintf+0x73>
   11288:	e9 8b 00 00 00       	jmp    11318 <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   1128d:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11291:	75 2e                	jne    112c1 <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   11293:	8b 45 10             	mov    0x10(%ebp),%eax
   11296:	8d 50 04             	lea    0x4(%eax),%edx
   11299:	89 55 10             	mov    %edx,0x10(%ebp)
   1129c:	8b 00                	mov    (%eax),%eax
   1129e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   112a1:	6a 0a                	push   $0xa
   112a3:	ff 75 e4             	pushl  -0x1c(%ebp)
   112a6:	ff 75 f8             	pushl  -0x8(%ebp)
   112a9:	e8 04 fe ff ff       	call   110b2 <kernel_itoa>
   112ae:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   112b1:	ff 75 f8             	pushl  -0x8(%ebp)
   112b4:	e8 a6 fc ff ff       	call   10f5f <kernel_strlen>
   112b9:	83 c4 04             	add    $0x4,%esp
   112bc:	01 45 f8             	add    %eax,-0x8(%ebp)
   112bf:	eb 57                	jmp    11318 <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   112c1:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   112c5:	75 2e                	jne    112f5 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   112c7:	8b 45 10             	mov    0x10(%ebp),%eax
   112ca:	8d 50 04             	lea    0x4(%eax),%edx
   112cd:	89 55 10             	mov    %edx,0x10(%ebp)
   112d0:	8b 00                	mov    (%eax),%eax
   112d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   112d5:	6a 10                	push   $0x10
   112d7:	ff 75 e8             	pushl  -0x18(%ebp)
   112da:	ff 75 f8             	pushl  -0x8(%ebp)
   112dd:	e8 d0 fd ff ff       	call   110b2 <kernel_itoa>
   112e2:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   112e5:	ff 75 f8             	pushl  -0x8(%ebp)
   112e8:	e8 72 fc ff ff       	call   10f5f <kernel_strlen>
   112ed:	83 c4 04             	add    $0x4,%esp
   112f0:	01 45 f8             	add    %eax,-0x8(%ebp)
   112f3:	eb 23                	jmp    11318 <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   112f5:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   112f9:	75 1d                	jne    11318 <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   112fb:	8b 45 10             	mov    0x10(%ebp),%eax
   112fe:	8d 50 04             	lea    0x4(%eax),%edx
   11301:	89 55 10             	mov    %edx,0x10(%ebp)
   11304:	8b 00                	mov    (%eax),%eax
   11306:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11309:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1130c:	8d 50 01             	lea    0x1(%eax),%edx
   1130f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11312:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11316:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   11318:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   1131f:	90                   	nop
    while ((ch = *fmt++)) {
   11320:	8b 45 0c             	mov    0xc(%ebp),%eax
   11323:	8d 50 01             	lea    0x1(%eax),%edx
   11326:	89 55 0c             	mov    %edx,0xc(%ebp)
   11329:	0f b6 00             	movzbl (%eax),%eax
   1132c:	88 45 ef             	mov    %al,-0x11(%ebp)
   1132f:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11333:	0f 85 d0 fe ff ff    	jne    11209 <kernel_vsprintf+0x18>
        }
    }
}
   11339:	90                   	nop
   1133a:	c9                   	leave  
   1133b:	c3                   	ret    

0001133c <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   1133c:	55                   	push   %ebp
   1133d:	89 e5                	mov    %esp,%ebp
   1133f:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   11342:	83 ec 08             	sub    $0x8,%esp
   11345:	ff 75 14             	pushl  0x14(%ebp)
   11348:	68 c0 17 01 00       	push   $0x117c0
   1134d:	e8 d1 00 00 00       	call   11423 <log_printf>
   11352:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   11355:	ff 75 10             	pushl  0x10(%ebp)
   11358:	ff 75 0c             	pushl  0xc(%ebp)
   1135b:	ff 75 08             	pushl  0x8(%ebp)
   1135e:	68 d2 17 01 00       	push   $0x117d2
   11363:	e8 bb 00 00 00       	call   11423 <log_printf>
   11368:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1136b:	e8 b7 fa ff ff       	call   10e27 <hlt>
   11370:	eb f9                	jmp    1136b <panic+0x2f>

00011372 <inb>:
static inline uint8_t inb(uint16_t port) {
   11372:	55                   	push   %ebp
   11373:	89 e5                	mov    %esp,%ebp
   11375:	83 ec 14             	sub    $0x14,%esp
   11378:	8b 45 08             	mov    0x8(%ebp),%eax
   1137b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   1137f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11383:	89 c2                	mov    %eax,%edx
   11385:	ec                   	in     (%dx),%al
   11386:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11389:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1138d:	c9                   	leave  
   1138e:	c3                   	ret    

0001138f <outb>:
static inline void outb(uint16_t port,uint8_t data){
   1138f:	55                   	push   %ebp
   11390:	89 e5                	mov    %esp,%ebp
   11392:	83 ec 08             	sub    $0x8,%esp
   11395:	8b 55 08             	mov    0x8(%ebp),%edx
   11398:	8b 45 0c             	mov    0xc(%ebp),%eax
   1139b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1139f:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   113a2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   113a6:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   113aa:	ee                   	out    %al,(%dx)
}
   113ab:	90                   	nop
   113ac:	c9                   	leave  
   113ad:	c3                   	ret    

000113ae <log_init>:
#include "tools/klib.h"
#include "stdarg.h" // 取可变参数的值

#define COM1_PORT 0x3f8

void log_init(void) {
   113ae:	55                   	push   %ebp
   113af:	89 e5                	mov    %esp,%ebp
    
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   113b1:	6a 00                	push   $0x0
   113b3:	68 f9 03 00 00       	push   $0x3f9
   113b8:	e8 d2 ff ff ff       	call   1138f <outb>
   113bd:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   113c0:	68 80 00 00 00       	push   $0x80
   113c5:	68 fb 03 00 00       	push   $0x3fb
   113ca:	e8 c0 ff ff ff       	call   1138f <outb>
   113cf:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   113d2:	6a 03                	push   $0x3
   113d4:	68 f8 03 00 00       	push   $0x3f8
   113d9:	e8 b1 ff ff ff       	call   1138f <outb>
   113de:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   113e1:	6a 00                	push   $0x0
   113e3:	68 f9 03 00 00       	push   $0x3f9
   113e8:	e8 a2 ff ff ff       	call   1138f <outb>
   113ed:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   113f0:	6a 03                	push   $0x3
   113f2:	68 fb 03 00 00       	push   $0x3fb
   113f7:	e8 93 ff ff ff       	call   1138f <outb>
   113fc:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   113ff:	68 c7 00 00 00       	push   $0xc7
   11404:	68 fa 03 00 00       	push   $0x3fa
   11409:	e8 81 ff ff ff       	call   1138f <outb>
   1140e:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11411:	6a 0f                	push   $0xf
   11413:	68 fc 03 00 00       	push   $0x3fc
   11418:	e8 72 ff ff ff       	call   1138f <outb>
   1141d:	83 c4 08             	add    $0x8,%esp

}
   11420:	90                   	nop
   11421:	c9                   	leave  
   11422:	c3                   	ret    

00011423 <log_printf>:
// 支持可变参数
void log_printf(const char * fmt, ...) {
   11423:	55                   	push   %ebp
   11424:	89 e5                	mov    %esp,%ebp
   11426:	81 ec 98 00 00 00    	sub    $0x98,%esp

// 缓冲区
    char str_buf[128];
    kernel_memset(str_buf,'\0',sizeof(str_buf));
   1142c:	83 ec 04             	sub    $0x4,%esp
   1142f:	68 80 00 00 00       	push   $0x80
   11434:	6a 00                	push   $0x0
   11436:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1143c:	50                   	push   %eax
   1143d:	e8 a7 fb ff ff       	call   10fe9 <kernel_memset>
   11442:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args,fmt);
   11445:	8d 45 0c             	lea    0xc(%ebp),%eax
   11448:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(str_buf,fmt,args);
   1144e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11454:	83 ec 04             	sub    $0x4,%esp
   11457:	50                   	push   %eax
   11458:	ff 75 08             	pushl  0x8(%ebp)
   1145b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11461:	50                   	push   %eax
   11462:	e8 8a fd ff ff       	call   111f1 <kernel_vsprintf>
   11467:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;
   1146a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11470:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11473:	eb 31                	jmp    114a6 <log_printf+0x83>
        while (inb(COM1_PORT + 5) & (1 << 6) == 0);
   11475:	90                   	nop
   11476:	83 ec 0c             	sub    $0xc,%esp
   11479:	68 fd 03 00 00       	push   $0x3fd
   1147e:	e8 ef fe ff ff       	call   11372 <inb>
   11483:	83 c4 10             	add    $0x10,%esp
        outb(COM1_PORT,*p++);
   11486:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11489:	8d 50 01             	lea    0x1(%eax),%edx
   1148c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1148f:	0f b6 00             	movzbl (%eax),%eax
   11492:	0f b6 c0             	movzbl %al,%eax
   11495:	83 ec 08             	sub    $0x8,%esp
   11498:	50                   	push   %eax
   11499:	68 f8 03 00 00       	push   $0x3f8
   1149e:	e8 ec fe ff ff       	call   1138f <outb>
   114a3:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   114a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114a9:	0f b6 00             	movzbl (%eax),%eax
   114ac:	84 c0                	test   %al,%al
   114ae:	75 c5                	jne    11475 <log_printf+0x52>
    }

// 变列
    outb(COM1_PORT,'\r');
   114b0:	83 ec 08             	sub    $0x8,%esp
   114b3:	6a 0d                	push   $0xd
   114b5:	68 f8 03 00 00       	push   $0x3f8
   114ba:	e8 d0 fe ff ff       	call   1138f <outb>
   114bf:	83 c4 10             	add    $0x10,%esp
// 变行    
    outb(COM1_PORT,'\n');
   114c2:	83 ec 08             	sub    $0x8,%esp
   114c5:	6a 0a                	push   $0xa
   114c7:	68 f8 03 00 00       	push   $0x3f8
   114cc:	e8 be fe ff ff       	call   1138f <outb>
   114d1:	83 c4 10             	add    $0x10,%esp
   114d4:	90                   	nop
   114d5:	c9                   	leave  
   114d6:	c3                   	ret    
