
E:/code/myos/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/code/myos/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000242c memsz 0x00007300 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ad  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000378  000120b0  000120b0  000030b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00012428  00012428  00003428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004ec0  00012440  00012440  0000342c  2**5
                  ALLOC
  4 .debug_line   00001251  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031b3  00000000  00000000  0000467d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ddd  00000000  00000000  00007830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000180  00000000  00000000  00008610  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000c95  00000000  00000000  00008790  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00009425  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000eac  00000000  00000000  00009438  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000120b0 l    d  .rodata	00000000 .rodata
00012428 l    d  .data	00000000 .data
00012440 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a5 l     F .text	0000001b list_node_init
000102c0 l     F .text	0000000b list_node_next
000102cb l     F .text	0000000b list_count
000102d6 l     F .text	0000000a list_first
000102e0 l     F .text	00000007 hlt
000102e7 l     F .text	00000017 write_tr
00012440 l     O .bss	00000190 task_manager
000102fe l     F .text	00000114 tss_init
0001211c l     O .rodata	0000000a __func__.2094
00010564 l     F .text	0000000a idle_task_entry
000125e0 l     O .bss	00001000 idle_task_stack
00000000 l    df *ABS*	00000000 cpu.c
000108c3 l     F .text	00000028 lgdt
000108eb l     F .text	0000001a far_jump
000135e0 l     O .bss	00000800 gdt_table
00013de0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00010ae3 l     F .text	0000001d inb
00010b00 l     F .text	0000001f outb
00010b1f l     F .text	00000007 cli
00010b26 l     F .text	00000007 sti
00010b2d l     F .text	00000028 lidt
00010b55 l     F .text	00000007 hlt
00010b5c l     F .text	00000010 read_eflags
00010b6c l     F .text	0000000b write_eflags
00010b77 l     F .text	000000d9 dump_core_regs
00010c50 l     F .text	0000003e do_default_handler
00013e00 l     O .bss	00000400 idt_table
00010ebe l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000112b5 l     F .text	0000001f outb
00014200 l     O .bss	00000004 sys_tick
000112fc l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00014220 l     O .bss	00001000 init_task_stack
00015220 l     O .bss	000000b4 init_task
000152d4 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
0001148a l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00011611 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000117bb l     F .text	00000007 hlt
00012428 l     O .data	00000004 num2ch.1907
00000000 l    df *ABS*	00000000 list.c
00011d06 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011f00 l     F .text	0000001d inb
00011f1d l     F .text	0000001f outb
000152e4 l     O .bss	00000014 mutex
0001192e g     F .text	0000004f kernel_memcpy
00010673 g     F .text	0000000a task_current
00011256 g     F .text	0000000b irq_enable_global
00011d9e g     F .text	00000064 list_insert_last
00010dc2 g     F .text	0000001c do_handler_segment_not_present
000105d1 g     F .text	00000034 task_set_ready
0001197d g     F .text	00000041 kernel_memset
00010267 g       .text	00000000 exception_handler_virtual_exception
00010a3c g     F .text	0000001e cpu_init
00011f3c g     F .text	0000009d log_init
000113cf g     F .text	000000bb init_main
0001020c g       .text	00000000 exception_handler_alignment_check
000117c2 g     F .text	00000047 kernel_strcpy
00011139 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100a4 g       .text	00000000 exception_handler_breakpoint
00010d1a g     F .text	0000001c do_handler_overflow
00010e4e g     F .text	0000001c do_handler_alignment_check
000101b3 g       .text	00000000 exception_handler_general_protection
00010dfa g     F .text	0000001c do_handler_general_protection
0001172c g     F .text	00000029 sem_count
00010caa g     F .text	0000001c do_handler_divider
00010d8a g     F .text	0000001c do_handler_double_fault
00011396 g     F .text	00000039 init_task_entry
00010e16 g     F .text	0000001c do_handler_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00011261 g     F .text	0000002b pic_send_eoi
0001055a g     F .text	0000000a task_first_task
0001163f g     F .text	0000006b sem_wait
000112d4 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010ea2 g     F .text	0000001c do_handler_virtual_exception
000100c3 g       .text	00000000 exception_handler_overflow
00015300 g     O .bss	00002000 stack
0001086c g     F .text	00000057 sys_sleep
000100e2 g       .text	00000000 exception_handler_bound_range
000116aa g     F .text	00000082 sem_notify
00010d52 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00010e32 g     F .text	0000001c do_handler_fpu_error
0001051d g     F .text	0000003d task_first_init
00010e6a g     F .text	0000001c do_handler_machine_check
00010cc6 g     F .text	0000001c do_handler_Debug
00011d3e g     F .text	00000060 list_insert_first
0001084c g     F .text	00000020 task_set_wakeup
00010ce2 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00011809 g     F .text	00000070 kernel_strncpy
0001124b g     F .text	0000000b irq_disable_global
000106d8 g     F .text	00000061 sys_sched_yield
00011374 g     F .text	00000022 kernel_init
0001161c g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00011b85 g     F .text	0000014b kernel_vsprintf
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000114c3 g     F .text	00000091 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
00010da6 g     F .text	0000001c do_handler_invalid_tss
00010812 g     F .text	0000003a task_set_sleep
00011cd0 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
000110ff g     F .text	0000003a irq_install
00010988 g     F .text	0000006d init_gdt
0001128c g     F .text	00000018 irq_enter_protection
00011495 g     F .text	0000002e mutex_init
000111c4 g     F .text	00000087 irq_disable
00010248 g       .text	00000000 exception_handler_smd_exception
00011755 g     F .text	00000013 bitmap_byte_count
00010d6e g     F .text	0000001c do_handler_device_unavailable
0001067d g     F .text	0000005b task_dispatch
00010acf g     F .text	00000014 switch_to_tss
00010630 g     F .text	00000043 task_next_run
000119be g     F .text	00000064 kernel_memcmp
00011d19 g     F .text	00000025 list_init
00010e86 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00010605 g     F .text	0000002b task_set_block
00010c8e g     F .text	0000001c do_handler_unknown
000101ed g       .text	00000000 exception_handler_fpu_error
00010412 g     F .text	0000001e task_switch_from_to
00010f51 g     F .text	000001ae irq_init
00011554 g     F .text	000000bd mutex_unlock
000112a4 g     F .text	00000011 irq_leave_protection
000118f3 g     F .text	0000003b kernel_strlen
00010905 g     F .text	00000083 segment_desc_set
00010d36 g     F .text	0000001c do_handler_bound_range
00011e02 g     F .text	00000079 list_remove_first
00011879 g     F .text	0000007a kernel_strncmp
00011768 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
0001056e g     F .text	00000063 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00010739 g     F .text	000000d9 task_time_tick
00010dde g     F .text	0000001c do_handler_stack_segment_fault
00010cfe g     F .text	0000001c do_handler_breakpoint
00011fd9 g     F .text	000000d4 log_printf
00010430 g     F .text	000000ed task_init
00011a22 g     F .text	00000024 kernel_sprintf
00010a5a g     F .text	00000075 gdt_alloc_desc
00011a46 g     F .text	0000013f kernel_itoa
00011e7b g     F .text	00000085 list_remove
000109f5 g     F .text	00000047 gate_desc_set
0001135c g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 6b 13 00 00       	call   11374 <kernel_init>


    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
# 数据段选择子的加载
    mov $KERNEL_SELECTOR_DS, %ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs


    mov $(stack+KERNEL_STACK_SIZE) ,%esp  // BTD
   1001e:	bc 00 73 01 00       	mov    $0x17300,%esp
    jmp init_main
   10023:	e9 a7 13 00 00       	jmp    113cf <init_main>

00010028 <exception_handler_unknown>:

    iret

.endm

exception_handler unknown,-1,0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 55 0c 00 00       	call   10c8e <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,0,0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 52 0c 00 00       	call   10caa <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 4f 0c 00 00       	call   10cc6 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 4c 0c 00 00       	call   10ce2 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 49 0c 00 00       	call   10cfe <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 46 0c 00 00       	call   10d1a <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 43 0c 00 00       	call   10d36 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 40 0c 00 00       	call   10d52 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 3d 0c 00 00       	call   10d6e <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 3c 0c 00 00       	call   10d8a <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 3b 0c 00 00       	call   10da6 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 3a 0c 00 00       	call   10dc2 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 39 0c 00 00       	call   10dde <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 38 0c 00 00       	call   10dfa <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 37 0c 00 00       	call   10e16 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 34 0c 00 00       	call   10e32 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 33 0c 00 00       	call   10e4e <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 30 0c 00 00       	call   10e6a <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 2d 0c 00 00       	call   10e86 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 2a 0c 00 00       	call   10ea2 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 3d 10 00 00       	call   112d4 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   102a5:	55                   	push   %ebp
   102a6:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102b2:	8b 45 08             	mov    0x8(%ebp),%eax
   102b5:	8b 50 04             	mov    0x4(%eax),%edx
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	89 10                	mov    %edx,(%eax)
}
   102bd:	90                   	nop
   102be:	5d                   	pop    %ebp
   102bf:	c3                   	ret    

000102c0 <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
    return node->next;
   102c3:	8b 45 08             	mov    0x8(%ebp),%eax
   102c6:	8b 40 04             	mov    0x4(%eax),%eax
}
   102c9:	5d                   	pop    %ebp
   102ca:	c3                   	ret    

000102cb <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   102cb:	55                   	push   %ebp
   102cc:	89 e5                	mov    %esp,%ebp
    return list->count;
   102ce:	8b 45 08             	mov    0x8(%ebp),%eax
   102d1:	8b 40 08             	mov    0x8(%eax),%eax
}
   102d4:	5d                   	pop    %ebp
   102d5:	c3                   	ret    

000102d6 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   102d6:	55                   	push   %ebp
   102d7:	89 e5                	mov    %esp,%ebp
    return list->first;
   102d9:	8b 45 08             	mov    0x8(%ebp),%eax
   102dc:	8b 00                	mov    (%eax),%eax
}
   102de:	5d                   	pop    %ebp
   102df:	c3                   	ret    

000102e0 <hlt>:

/**
 * @brief 当处理器执行到HLT指令时，它会停止执行并进入一个低功耗状态，直到外部事件唤醒处理器继续执行。
 * 
 */
static inline void hlt (void) {
   102e0:	55                   	push   %ebp
   102e1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   102e3:	f4                   	hlt    
}
   102e4:	90                   	nop
   102e5:	5d                   	pop    %ebp
   102e6:	c3                   	ret    

000102e7 <write_tr>:

static inline void write_tr(uint16_t tss_sel) {
   102e7:	55                   	push   %ebp
   102e8:	89 e5                	mov    %esp,%ebp
   102ea:	83 ec 04             	sub    $0x4,%esp
   102ed:	8b 45 08             	mov    0x8(%ebp),%eax
   102f0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__ ("ltr %%ax"::"a"(tss_sel));
   102f4:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102f8:	0f 00 d8             	ltr    %ax
}
   102fb:	90                   	nop
   102fc:	c9                   	leave  
   102fd:	c3                   	ret    

000102fe <tss_init>:
#include "comm/cpu_instr.h"
#include "cpu/irq.h"

static task_manager_t task_manager;

static int tss_init(task_t * task, uint32_t entry, uint32_t esp) {
   102fe:	55                   	push   %ebp
   102ff:	89 e5                	mov    %esp,%ebp
   10301:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   10304:	e8 51 07 00 00       	call   10a5a <gdt_alloc_desc>
   10309:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel < 0) {
   1030c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10310:	79 1a                	jns    1032c <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   10312:	83 ec 0c             	sub    $0xc,%esp
   10315:	68 b0 20 01 00       	push   $0x120b0
   1031a:	e8 ba 1c 00 00       	call   11fd9 <log_printf>
   1031f:	83 c4 10             	add    $0x10,%esp
        return -1;
   10322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10327:	e9 e4 00 00 00       	jmp    10410 <tss_init+0x112>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss ,sizeof(tss_t),
   1032c:	8b 45 08             	mov    0x8(%ebp),%eax
   1032f:	83 c0 48             	add    $0x48,%eax
   10332:	68 89 00 00 00       	push   $0x89
   10337:	6a 68                	push   $0x68
   10339:	50                   	push   %eax
   1033a:	ff 75 f4             	pushl  -0xc(%ebp)
   1033d:	e8 c3 05 00 00       	call   10905 <segment_desc_set>
   10342:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
    
    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10345:	8b 45 08             	mov    0x8(%ebp),%eax
   10348:	83 c0 48             	add    $0x48,%eax
   1034b:	83 ec 04             	sub    $0x4,%esp
   1034e:	6a 68                	push   $0x68
   10350:	6a 00                	push   $0x0
   10352:	50                   	push   %eax
   10353:	e8 25 16 00 00       	call   1197d <kernel_memset>
   10358:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   1035b:	8b 45 08             	mov    0x8(%ebp),%eax
   1035e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10361:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	8b 55 10             	mov    0x10(%ebp),%edx
   1036a:	89 50 4c             	mov    %edx,0x4c(%eax)
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	8b 50 4c             	mov    0x4c(%eax),%edx
   10373:	8b 45 08             	mov    0x8(%ebp),%eax
   10376:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   10390:	8b 45 08             	mov    0x8(%ebp),%eax
   10393:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   1039a:	00 00 00 
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   103a6:	8b 45 08             	mov    0x8(%ebp),%eax
   103a9:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   103af:	8b 45 08             	mov    0x8(%ebp),%eax
   103b2:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   103c1:	8b 45 08             	mov    0x8(%ebp),%eax
   103c4:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   103d3:	8b 45 08             	mov    0x8(%ebp),%eax
   103d6:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   103dc:	8b 45 08             	mov    0x8(%ebp),%eax
   103df:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   103e5:	8b 45 08             	mov    0x8(%ebp),%eax
   103e8:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   103ef:	00 00 00 
    task->tss.iomap = 0;
   103f2:	8b 45 08             	mov    0x8(%ebp),%eax
   103f5:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
   103fc:	00 00 00 

    task->tss_sel = tss_sel;
   103ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10402:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10405:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   1040b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10410:	c9                   	leave  
   10411:	c3                   	ret    

00010412 <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void simple_switch (uint32_t ** from, uint32_t * to);
void task_switch_from_to(task_t * from,task_t * to) {
   10412:	55                   	push   %ebp
   10413:	89 e5                	mov    %esp,%ebp
   10415:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041b:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10421:	83 ec 0c             	sub    $0xc,%esp
   10424:	50                   	push   %eax
   10425:	e8 a5 06 00 00       	call   10acf <switch_to_tss>
   1042a:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack,to->stack);
}
   1042d:	90                   	nop
   1042e:	c9                   	leave  
   1042f:	c3                   	ret    

00010430 <task_init>:


/**
 * @brief 初始化任务
 */
int task_init (task_t * task,const char * name, uint32_t entry, uint32_t esp){
   10430:	55                   	push   %ebp
   10431:	89 e5                	mov    %esp,%ebp
   10433:	83 ec 18             	sub    $0x18,%esp

    ASSERT(task != (task_t*)0);
   10436:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1043a:	75 19                	jne    10455 <task_init+0x25>
   1043c:	68 c3 20 01 00       	push   $0x120c3
   10441:	68 1c 21 01 00       	push   $0x1211c
   10446:	6a 38                	push   $0x38
   10448:	68 d8 20 01 00       	push   $0x120d8
   1044d:	e8 7e 18 00 00       	call   11cd0 <panic>
   10452:	83 c4 10             	add    $0x10,%esp

    tss_init(task,entry,esp);
   10455:	83 ec 04             	sub    $0x4,%esp
   10458:	ff 75 14             	pushl  0x14(%ebp)
   1045b:	ff 75 10             	pushl  0x10(%ebp)
   1045e:	ff 75 08             	pushl  0x8(%ebp)
   10461:	e8 98 fe ff ff       	call   102fe <tss_init>
   10466:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10469:	8b 45 08             	mov    0x8(%ebp),%eax
   1046c:	83 c0 10             	add    $0x10,%eax
   1046f:	83 ec 04             	sub    $0x4,%esp
   10472:	6a 20                	push   $0x20
   10474:	ff 75 0c             	pushl  0xc(%ebp)
   10477:	50                   	push   %eax
   10478:	e8 8c 13 00 00       	call   11809 <kernel_strncpy>
   1047d:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10480:	8b 45 08             	mov    0x8(%ebp),%eax
   10483:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   10489:	8b 45 08             	mov    0x8(%ebp),%eax
   1048c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10493:	8b 45 08             	mov    0x8(%ebp),%eax
   10496:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	8b 50 08             	mov    0x8(%eax),%edx
   104a3:	8b 45 08             	mov    0x8(%ebp),%eax
   104a6:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   104a9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ac:	83 c0 40             	add    $0x40,%eax
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	50                   	push   %eax
   104b3:	e8 ed fd ff ff       	call   102a5 <list_node_init>
   104b8:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   104bb:	8b 45 08             	mov    0x8(%ebp),%eax
   104be:	83 c0 30             	add    $0x30,%eax
   104c1:	83 ec 0c             	sub    $0xc,%esp
   104c4:	50                   	push   %eax
   104c5:	e8 db fd ff ff       	call   102a5 <list_node_init>
   104ca:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   104cd:	8b 45 08             	mov    0x8(%ebp),%eax
   104d0:	83 c0 38             	add    $0x38,%eax
   104d3:	83 ec 0c             	sub    $0xc,%esp
   104d6:	50                   	push   %eax
   104d7:	e8 c9 fd ff ff       	call   102a5 <list_node_init>
   104dc:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   104df:	e8 a8 0d 00 00       	call   1128c <irq_enter_protection>
   104e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   104e7:	83 ec 0c             	sub    $0xc,%esp
   104ea:	ff 75 08             	pushl  0x8(%ebp)
   104ed:	e8 df 00 00 00       	call   105d1 <task_set_ready>
   104f2:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   104f5:	8b 45 08             	mov    0x8(%ebp),%eax
   104f8:	83 c0 40             	add    $0x40,%eax
   104fb:	83 ec 08             	sub    $0x8,%esp
   104fe:	50                   	push   %eax
   104ff:	68 50 24 01 00       	push   $0x12450
   10504:	e8 95 18 00 00       	call   11d9e <list_insert_last>
   10509:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   1050c:	83 ec 0c             	sub    $0xc,%esp
   1050f:	ff 75 f4             	pushl  -0xc(%ebp)
   10512:	e8 8d 0d 00 00       	call   112a4 <irq_leave_protection>
   10517:	83 c4 10             	add    $0x10,%esp
}
   1051a:	90                   	nop
   1051b:	c9                   	leave  
   1051c:	c3                   	ret    

0001051d <task_first_init>:

void task_first_init (void) {
   1051d:	55                   	push   %ebp
   1051e:	89 e5                	mov    %esp,%ebp
   10520:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task,"first task", 0,0);
   10523:	6a 00                	push   $0x0
   10525:	6a 00                	push   $0x0
   10527:	68 05 21 01 00       	push   $0x12105
   1052c:	68 68 24 01 00       	push   $0x12468
   10531:	e8 fa fe ff ff       	call   10430 <task_init>
   10536:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel); // 初始化任务寄存器 task register
   10539:	a1 18 25 01 00       	mov    0x12518,%eax
   1053e:	0f b7 c0             	movzwl %ax,%eax
   10541:	83 ec 0c             	sub    $0xc,%esp
   10544:	50                   	push   %eax
   10545:	e8 9d fd ff ff       	call   102e7 <write_tr>
   1054a:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   1054d:	c7 05 40 24 01 00 68 	movl   $0x12468,0x12440
   10554:	24 01 00 
}
   10557:	90                   	nop
   10558:	c9                   	leave  
   10559:	c3                   	ret    

0001055a <task_first_task>:

task_t * task_first_task (void) {
   1055a:	55                   	push   %ebp
   1055b:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1055d:	b8 68 24 01 00       	mov    $0x12468,%eax
}
   10562:	5d                   	pop    %ebp
   10563:	c3                   	ret    

00010564 <idle_task_entry>:

static void idle_task_entry (void) {
   10564:	55                   	push   %ebp
   10565:	89 e5                	mov    %esp,%ebp
    for(;;) {
        hlt();
   10567:	e8 74 fd ff ff       	call   102e0 <hlt>
   1056c:	eb f9                	jmp    10567 <idle_task_entry+0x3>

0001056e <task_manager_init>:
    }
}
static uint32_t idle_task_stack[IDLE_TASK_SIZE];

void task_manager_init (void) {
   1056e:	55                   	push   %ebp
   1056f:	89 e5                	mov    %esp,%ebp
   10571:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10574:	83 ec 0c             	sub    $0xc,%esp
   10577:	68 44 24 01 00       	push   $0x12444
   1057c:	e8 98 17 00 00       	call   11d19 <list_init>
   10581:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10584:	83 ec 0c             	sub    $0xc,%esp
   10587:	68 50 24 01 00       	push   $0x12450
   1058c:	e8 88 17 00 00       	call   11d19 <list_init>
   10591:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10594:	83 ec 0c             	sub    $0xc,%esp
   10597:	68 5c 24 01 00       	push   $0x1245c
   1059c:	e8 78 17 00 00       	call   11d19 <list_init>
   105a1:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   105a4:	c7 05 40 24 01 00 00 	movl   $0x0,0x12440
   105ab:	00 00 00 

    task_init(&task_manager.idle_task,
        "idle_task",
        (uint32_t)idle_task_entry,
        (uint32_t)(idle_task_stack + IDLE_TASK_SIZE)
   105ae:	b8 e0 35 01 00       	mov    $0x135e0,%eax
    task_init(&task_manager.idle_task,
   105b3:	89 c2                	mov    %eax,%edx
   105b5:	b8 64 05 01 00       	mov    $0x10564,%eax
   105ba:	52                   	push   %edx
   105bb:	50                   	push   %eax
   105bc:	68 10 21 01 00       	push   $0x12110
   105c1:	68 1c 25 01 00       	push   $0x1251c
   105c6:	e8 65 fe ff ff       	call   10430 <task_init>
   105cb:	83 c4 10             	add    $0x10,%esp
    );


}
   105ce:	90                   	nop
   105cf:	c9                   	leave  
   105d0:	c3                   	ret    

000105d1 <task_set_ready>:

void task_set_ready(task_t * task) {
   105d1:	55                   	push   %ebp
   105d2:	89 e5                	mov    %esp,%ebp
   105d4:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   105d7:	81 7d 08 1c 25 01 00 	cmpl   $0x1251c,0x8(%ebp)
   105de:	74 22                	je     10602 <task_set_ready+0x31>
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   105e0:	8b 45 08             	mov    0x8(%ebp),%eax
   105e3:	83 c0 30             	add    $0x30,%eax
   105e6:	83 ec 08             	sub    $0x8,%esp
   105e9:	50                   	push   %eax
   105ea:	68 44 24 01 00       	push   $0x12444
   105ef:	e8 aa 17 00 00       	call   11d9e <list_insert_last>
   105f4:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   105f7:	8b 45 08             	mov    0x8(%ebp),%eax
   105fa:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10600:	eb 01                	jmp    10603 <task_set_ready+0x32>
        return;
   10602:	90                   	nop
}
   10603:	c9                   	leave  
   10604:	c3                   	ret    

00010605 <task_set_block>:

void task_set_block(task_t * task) {
   10605:	55                   	push   %ebp
   10606:	89 e5                	mov    %esp,%ebp
   10608:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   1060b:	81 7d 08 1c 25 01 00 	cmpl   $0x1251c,0x8(%ebp)
   10612:	74 19                	je     1062d <task_set_block+0x28>
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   10614:	8b 45 08             	mov    0x8(%ebp),%eax
   10617:	83 c0 30             	add    $0x30,%eax
   1061a:	83 ec 08             	sub    $0x8,%esp
   1061d:	50                   	push   %eax
   1061e:	68 44 24 01 00       	push   $0x12444
   10623:	e8 53 18 00 00       	call   11e7b <list_remove>
   10628:	83 c4 10             	add    $0x10,%esp
   1062b:	eb 01                	jmp    1062e <task_set_block+0x29>
        return;
   1062d:	90                   	nop
}
   1062e:	c9                   	leave  
   1062f:	c3                   	ret    

00010630 <task_next_run>:


task_t * task_next_run(void) {
   10630:	55                   	push   %ebp
   10631:	89 e5                	mov    %esp,%ebp
   10633:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   10636:	68 44 24 01 00       	push   $0x12444
   1063b:	e8 8b fc ff ff       	call   102cb <list_count>
   10640:	83 c4 04             	add    $0x4,%esp
   10643:	85 c0                	test   %eax,%eax
   10645:	75 07                	jne    1064e <task_next_run+0x1e>
        return &task_manager.idle_task;
   10647:	b8 1c 25 01 00       	mov    $0x1251c,%eax
   1064c:	eb 23                	jmp    10671 <task_next_run+0x41>
    }
    list_node_t * task_node = list_first(&task_manager.ready_list);
   1064e:	68 44 24 01 00       	push   $0x12444
   10653:	e8 7e fc ff ff       	call   102d6 <list_first>
   10658:	83 c4 04             	add    $0x4,%esp
   1065b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   1065e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10662:	74 08                	je     1066c <task_next_run+0x3c>
   10664:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10667:	83 e8 30             	sub    $0x30,%eax
   1066a:	eb 05                	jmp    10671 <task_next_run+0x41>
   1066c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10671:	c9                   	leave  
   10672:	c3                   	ret    

00010673 <task_current>:

task_t * task_current (void) {
   10673:	55                   	push   %ebp
   10674:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10676:	a1 40 24 01 00       	mov    0x12440,%eax
}
   1067b:	5d                   	pop    %ebp
   1067c:	c3                   	ret    

0001067d <task_dispatch>:


void task_dispatch(void) {
   1067d:	55                   	push   %ebp
   1067e:	89 e5                	mov    %esp,%ebp
   10680:	83 ec 18             	sub    $0x18,%esp


    irq_state_t state = irq_enter_protection();
   10683:	e8 04 0c 00 00       	call   1128c <irq_enter_protection>
   10688:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * to = task_next_run();
   1068b:	e8 a0 ff ff ff       	call   10630 <task_next_run>
   10690:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( to != task_manager.curr_task) {
   10693:	a1 40 24 01 00       	mov    0x12440,%eax
   10698:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1069b:	74 2a                	je     106c7 <task_dispatch+0x4a>
        task_t * from = task_current();
   1069d:	e8 d1 ff ff ff       	call   10673 <task_current>
   106a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   106a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a8:	a3 40 24 01 00       	mov    %eax,0x12440
        to->state = TASK_RUNNING;
   106ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from,to);
   106b6:	83 ec 08             	sub    $0x8,%esp
   106b9:	ff 75 f0             	pushl  -0x10(%ebp)
   106bc:	ff 75 ec             	pushl  -0x14(%ebp)
   106bf:	e8 4e fd ff ff       	call   10412 <task_switch_from_to>
   106c4:	83 c4 10             	add    $0x10,%esp
    }


    irq_leave_protection(state);
   106c7:	83 ec 0c             	sub    $0xc,%esp
   106ca:	ff 75 f4             	pushl  -0xc(%ebp)
   106cd:	e8 d2 0b 00 00       	call   112a4 <irq_leave_protection>
   106d2:	83 c4 10             	add    $0x10,%esp

}
   106d5:	90                   	nop
   106d6:	c9                   	leave  
   106d7:	c3                   	ret    

000106d8 <sys_sched_yield>:

int sys_sched_yield(void) {
   106d8:	55                   	push   %ebp
   106d9:	89 e5                	mov    %esp,%ebp
   106db:	83 ec 18             	sub    $0x18,%esp
    
    irq_state_t state = irq_enter_protection();
   106de:	e8 a9 0b 00 00       	call   1128c <irq_enter_protection>
   106e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&task_manager.ready_list) > 1) {
   106e6:	83 ec 0c             	sub    $0xc,%esp
   106e9:	68 44 24 01 00       	push   $0x12444
   106ee:	e8 d8 fb ff ff       	call   102cb <list_count>
   106f3:	83 c4 10             	add    $0x10,%esp
   106f6:	83 f8 01             	cmp    $0x1,%eax
   106f9:	7e 29                	jle    10724 <sys_sched_yield+0x4c>
        task_t * curr_task = task_current();
   106fb:	e8 73 ff ff ff       	call   10673 <task_current>
   10700:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   10703:	83 ec 0c             	sub    $0xc,%esp
   10706:	ff 75 f0             	pushl  -0x10(%ebp)
   10709:	e8 f7 fe ff ff       	call   10605 <task_set_block>
   1070e:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10711:	83 ec 0c             	sub    $0xc,%esp
   10714:	ff 75 f0             	pushl  -0x10(%ebp)
   10717:	e8 b5 fe ff ff       	call   105d1 <task_set_ready>
   1071c:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   1071f:	e8 59 ff ff ff       	call   1067d <task_dispatch>
    }

    irq_leave_protection(state);
   10724:	83 ec 0c             	sub    $0xc,%esp
   10727:	ff 75 f4             	pushl  -0xc(%ebp)
   1072a:	e8 75 0b 00 00       	call   112a4 <irq_leave_protection>
   1072f:	83 c4 10             	add    $0x10,%esp
    return 0;
   10732:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10737:	c9                   	leave  
   10738:	c3                   	ret    

00010739 <task_time_tick>:

void task_time_tick(void) {
   10739:	55                   	push   %ebp
   1073a:	89 e5                	mov    %esp,%ebp
   1073c:	83 ec 18             	sub    $0x18,%esp
    
    task_t * curr_task = task_current();
   1073f:	e8 2f ff ff ff       	call   10673 <task_current>
   10744:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--curr_task->slice_ticks == 0) {
   10747:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074a:	8b 40 0c             	mov    0xc(%eax),%eax
   1074d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10750:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10753:	89 50 0c             	mov    %edx,0xc(%eax)
   10756:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10759:	8b 40 0c             	mov    0xc(%eax),%eax
   1075c:	85 c0                	test   %eax,%eax
   1075e:	75 2d                	jne    1078d <task_time_tick+0x54>
        
        curr_task->slice_ticks = curr_task->time_ticks;
   10760:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10763:	8b 50 08             	mov    0x8(%eax),%edx
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(curr_task);
   1076c:	83 ec 0c             	sub    $0xc,%esp
   1076f:	ff 75 f0             	pushl  -0x10(%ebp)
   10772:	e8 8e fe ff ff       	call   10605 <task_set_block>
   10777:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);      
   1077a:	83 ec 0c             	sub    $0xc,%esp
   1077d:	ff 75 f0             	pushl  -0x10(%ebp)
   10780:	e8 4c fe ff ff       	call   105d1 <task_set_ready>
   10785:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10788:	e8 f0 fe ff ff       	call   1067d <task_dispatch>
    }

    list_node_t * curr = list_first(&task_manager.sleep_list);
   1078d:	83 ec 0c             	sub    $0xc,%esp
   10790:	68 5c 24 01 00       	push   $0x1245c
   10795:	e8 3c fb ff ff       	call   102d6 <list_first>
   1079a:	83 c4 10             	add    $0x10,%esp
   1079d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (curr) {
   107a0:	eb 62                	jmp    10804 <task_time_tick+0xcb>
        list_node_t * next = list_node_next(curr);
   107a2:	83 ec 0c             	sub    $0xc,%esp
   107a5:	ff 75 f4             	pushl  -0xc(%ebp)
   107a8:	e8 13 fb ff ff       	call   102c0 <list_node_next>
   107ad:	83 c4 10             	add    $0x10,%esp
   107b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   107b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107b7:	74 08                	je     107c1 <task_time_tick+0x88>
   107b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107bc:	83 e8 30             	sub    $0x30,%eax
   107bf:	eb 05                	jmp    107c6 <task_time_tick+0x8d>
   107c1:	b8 00 00 00 00       	mov    $0x0,%eax
   107c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) {
   107c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107cc:	8b 40 04             	mov    0x4(%eax),%eax
   107cf:	8d 50 ff             	lea    -0x1(%eax),%edx
   107d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107d5:	89 50 04             	mov    %edx,0x4(%eax)
   107d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107db:	8b 40 04             	mov    0x4(%eax),%eax
   107de:	85 c0                	test   %eax,%eax
   107e0:	75 1c                	jne    107fe <task_time_tick+0xc5>
            task_set_wakeup(task);
   107e2:	83 ec 0c             	sub    $0xc,%esp
   107e5:	ff 75 e8             	pushl  -0x18(%ebp)
   107e8:	e8 5f 00 00 00       	call   1084c <task_set_wakeup>
   107ed:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   107f0:	83 ec 0c             	sub    $0xc,%esp
   107f3:	ff 75 e8             	pushl  -0x18(%ebp)
   107f6:	e8 d6 fd ff ff       	call   105d1 <task_set_ready>
   107fb:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   107fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10801:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10804:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10808:	75 98                	jne    107a2 <task_time_tick+0x69>
    }

    task_dispatch();
   1080a:	e8 6e fe ff ff       	call   1067d <task_dispatch>
}
   1080f:	90                   	nop
   10810:	c9                   	leave  
   10811:	c3                   	ret    

00010812 <task_set_sleep>:




void task_set_sleep (task_t * task, uint32_t ticks) {
   10812:	55                   	push   %ebp
   10813:	89 e5                	mov    %esp,%ebp
   10815:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10818:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1081c:	74 2b                	je     10849 <task_set_sleep+0x37>
        return;
    }

    task->sleep_ticks = ticks;
   1081e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10821:	8b 45 08             	mov    0x8(%ebp),%eax
   10824:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   10827:	8b 45 08             	mov    0x8(%ebp),%eax
   1082a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last (&task_manager.sleep_list,&task->run_node);
   10830:	8b 45 08             	mov    0x8(%ebp),%eax
   10833:	83 c0 30             	add    $0x30,%eax
   10836:	83 ec 08             	sub    $0x8,%esp
   10839:	50                   	push   %eax
   1083a:	68 5c 24 01 00       	push   $0x1245c
   1083f:	e8 5a 15 00 00       	call   11d9e <list_insert_last>
   10844:	83 c4 10             	add    $0x10,%esp
   10847:	eb 01                	jmp    1084a <task_set_sleep+0x38>
        return;
   10849:	90                   	nop
}
   1084a:	c9                   	leave  
   1084b:	c3                   	ret    

0001084c <task_set_wakeup>:
void task_set_wakeup (task_t * task) {
   1084c:	55                   	push   %ebp
   1084d:	89 e5                	mov    %esp,%ebp
   1084f:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   10852:	8b 45 08             	mov    0x8(%ebp),%eax
   10855:	83 c0 30             	add    $0x30,%eax
   10858:	83 ec 08             	sub    $0x8,%esp
   1085b:	50                   	push   %eax
   1085c:	68 5c 24 01 00       	push   $0x1245c
   10861:	e8 15 16 00 00       	call   11e7b <list_remove>
   10866:	83 c4 10             	add    $0x10,%esp
}
   10869:	90                   	nop
   1086a:	c9                   	leave  
   1086b:	c3                   	ret    

0001086c <sys_sleep>:
void sys_sleep (uint32_t ms) {
   1086c:	55                   	push   %ebp
   1086d:	89 e5                	mov    %esp,%ebp
   1086f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10872:	e8 15 0a 00 00       	call   1128c <irq_enter_protection>
   10877:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_set_block(task_manager.curr_task);
   1087a:	a1 40 24 01 00       	mov    0x12440,%eax
   1087f:	83 ec 0c             	sub    $0xc,%esp
   10882:	50                   	push   %eax
   10883:	e8 7d fd ff ff       	call   10605 <task_set_block>
   10888:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task,(ms + OS_TICK_MS - 1)/OS_TICK_MS);
   1088b:	8b 45 08             	mov    0x8(%ebp),%eax
   1088e:	83 c0 09             	add    $0x9,%eax
   10891:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10896:	f7 e2                	mul    %edx
   10898:	c1 ea 03             	shr    $0x3,%edx
   1089b:	a1 40 24 01 00       	mov    0x12440,%eax
   108a0:	83 ec 08             	sub    $0x8,%esp
   108a3:	52                   	push   %edx
   108a4:	50                   	push   %eax
   108a5:	e8 68 ff ff ff       	call   10812 <task_set_sleep>
   108aa:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   108ad:	e8 cb fd ff ff       	call   1067d <task_dispatch>

    irq_leave_protection(state);
   108b2:	83 ec 0c             	sub    $0xc,%esp
   108b5:	ff 75 f4             	pushl  -0xc(%ebp)
   108b8:	e8 e7 09 00 00       	call   112a4 <irq_leave_protection>
   108bd:	83 c4 10             	add    $0x10,%esp
}
   108c0:	90                   	nop
   108c1:	c9                   	leave  
   108c2:	c3                   	ret    

000108c3 <lgdt>:
static inline void lgdt(uint32_t start,uint32_t size){
   108c3:	55                   	push   %ebp
   108c4:	89 e5                	mov    %esp,%ebp
   108c6:	83 ec 10             	sub    $0x10,%esp
    gdt.start32_16 = start >> 16;
   108c9:	8b 45 08             	mov    0x8(%ebp),%eax
   108cc:	c1 e8 10             	shr    $0x10,%eax
   108cf:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   108d3:	8b 45 08             	mov    0x8(%ebp),%eax
   108d6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   108da:	8b 45 0c             	mov    0xc(%ebp),%eax
   108dd:	83 e8 01             	sub    $0x1,%eax
   108e0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   108e4:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   108e8:	90                   	nop
   108e9:	c9                   	leave  
   108ea:	c3                   	ret    

000108eb <far_jump>:
static inline void far_jump(uint32_t selector,uint32_t offset){
   108eb:	55                   	push   %ebp
   108ec:	89 e5                	mov    %esp,%ebp
   108ee:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
   108f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   108f4:	89 45 f8             	mov    %eax,-0x8(%ebp)
   108f7:	8b 45 08             	mov    0x8(%ebp),%eax
   108fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   108fd:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10900:	ff 28                	ljmp   *(%eax)
}
   10902:	90                   	nop
   10903:	c9                   	leave  
   10904:	c3                   	ret    

00010905 <segment_desc_set>:
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

//  设置GDT表函数
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   10905:	55                   	push   %ebp
   10906:	89 e5                	mov    %esp,%ebp
   10908:	83 ec 14             	sub    $0x14,%esp
   1090b:	8b 45 14             	mov    0x14(%ebp),%eax
   1090e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10912:	8b 45 08             	mov    0x8(%ebp),%eax
   10915:	83 e0 f8             	and    $0xfffffff8,%eax
   10918:	05 e0 35 01 00       	add    $0x135e0,%eax
   1091d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    // 方法为将 attr中的 G = 1
    if (limit > 0xfffff)
   10920:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10927:	76 0f                	jbe    10938 <segment_desc_set+0x33>
    {
        attr |= SEG_G;
   10929:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1092f:	8b 45 10             	mov    0x10(%ebp),%eax
   10932:	c1 e8 0c             	shr    $0xc,%eax
   10935:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   10938:	8b 45 10             	mov    0x10(%ebp),%eax
   1093b:	89 c2                	mov    %eax,%edx
   1093d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10940:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10943:	8b 45 0c             	mov    0xc(%ebp),%eax
   10946:	89 c2                	mov    %eax,%edx
   10948:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1094b:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1094f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10952:	c1 e8 10             	shr    $0x10,%eax
   10955:	89 c2                	mov    %eax,%edx
   10957:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1095a:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1095d:	8b 45 10             	mov    0x10(%ebp),%eax
   10960:	c1 e8 10             	shr    $0x10,%eax
   10963:	c1 e0 08             	shl    $0x8,%eax
   10966:	66 25 00 0f          	and    $0xf00,%ax
   1096a:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1096e:	89 c2                	mov    %eax,%edx
   10970:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10973:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10977:	8b 45 0c             	mov    0xc(%ebp),%eax
   1097a:	c1 e8 18             	shr    $0x18,%eax
   1097d:	89 c2                	mov    %eax,%edx
   1097f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10982:	88 50 07             	mov    %dl,0x7(%eax)
}
   10985:	90                   	nop
   10986:	c9                   	leave  
   10987:	c3                   	ret    

00010988 <init_gdt>:

void init_gdt(void)
{
   10988:	55                   	push   %ebp
   10989:	89 e5                	mov    %esp,%ebp
   1098b:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1098e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10995:	eb 19                	jmp    109b0 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10997:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1099a:	c1 e0 03             	shl    $0x3,%eax
   1099d:	6a 00                	push   $0x0
   1099f:	6a 00                	push   $0x0
   109a1:	6a 00                	push   $0x0
   109a3:	50                   	push   %eax
   109a4:	e8 5c ff ff ff       	call   10905 <segment_desc_set>
   109a9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   109ac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   109b0:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   109b7:	7e de                	jle    10997 <init_gdt+0xf>
    }

    // 设置GDT表中的CS段
    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   109b9:	68 9a 40 00 00       	push   $0x409a
   109be:	6a ff                	push   $0xffffffff
   109c0:	6a 00                	push   $0x0
   109c2:	6a 08                	push   $0x8
   109c4:	e8 3c ff ff ff       	call   10905 <segment_desc_set>
   109c9:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 设置GDT表中的DS段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   109cc:	68 92 40 00 00       	push   $0x4092
   109d1:	6a ff                	push   $0xffffffff
   109d3:	6a 00                	push   $0x0
   109d5:	6a 10                	push   $0x10
   109d7:	e8 29 ff ff ff       	call   10905 <segment_desc_set>
   109dc:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   109df:	b8 e0 35 01 00       	mov    $0x135e0,%eax
   109e4:	68 00 08 00 00       	push   $0x800
   109e9:	50                   	push   %eax
   109ea:	e8 d4 fe ff ff       	call   108c3 <lgdt>
   109ef:	83 c4 08             	add    $0x8,%esp
}
   109f2:	90                   	nop
   109f3:	c9                   	leave  
   109f4:	c3                   	ret    

000109f5 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   109f5:	55                   	push   %ebp
   109f6:	89 e5                	mov    %esp,%ebp
   109f8:	83 ec 08             	sub    $0x8,%esp
   109fb:	8b 55 0c             	mov    0xc(%ebp),%edx
   109fe:	8b 45 14             	mov    0x14(%ebp),%eax
   10a01:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10a05:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

    desc->offset15_0 = offset & 0xffff;
   10a09:	8b 45 10             	mov    0x10(%ebp),%eax
   10a0c:	89 c2                	mov    %eax,%edx
   10a0e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a11:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10a14:	8b 45 08             	mov    0x8(%ebp),%eax
   10a17:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a1b:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10a1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a22:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a26:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10a2a:	8b 45 10             	mov    0x10(%ebp),%eax
   10a2d:	c1 e8 10             	shr    $0x10,%eax
   10a30:	89 c2                	mov    %eax,%edx
   10a32:	8b 45 08             	mov    0x8(%ebp),%eax
   10a35:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a39:	90                   	nop
   10a3a:	c9                   	leave  
   10a3b:	c3                   	ret    

00010a3c <cpu_init>:

void cpu_init(void)
{
   10a3c:	55                   	push   %ebp
   10a3d:	89 e5                	mov    %esp,%ebp
   10a3f:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   10a42:	83 ec 0c             	sub    $0xc,%esp
   10a45:	68 e0 3d 01 00       	push   $0x13de0
   10a4a:	e8 46 0a 00 00       	call   11495 <mutex_init>
   10a4f:	83 c4 10             	add    $0x10,%esp
    // 初始化GDT表
    init_gdt();
   10a52:	e8 31 ff ff ff       	call   10988 <init_gdt>
}
   10a57:	90                   	nop
   10a58:	c9                   	leave  
   10a59:	c3                   	ret    

00010a5a <gdt_alloc_desc>:

int gdt_alloc_desc()
{
   10a5a:	55                   	push   %ebp
   10a5b:	89 e5                	mov    %esp,%ebp
   10a5d:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);
   10a60:	83 ec 0c             	sub    $0xc,%esp
   10a63:	68 e0 3d 01 00       	push   $0x13de0
   10a68:	e8 56 0a 00 00       	call   114c3 <mutex_lock>
   10a6d:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a70:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10a77:	eb 36                	jmp    10aaf <gdt_alloc_desc+0x55>
    {

        segment_desc_t *desc = gdt_table + i;
   10a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a7c:	c1 e0 03             	shl    $0x3,%eax
   10a7f:	05 e0 35 01 00       	add    $0x135e0,%eax
   10a84:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0)
   10a87:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a8a:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a8e:	66 85 c0             	test   %ax,%ax
   10a91:	75 18                	jne    10aab <gdt_alloc_desc+0x51>
        {
            mutex_unlock(&mutex);
   10a93:	83 ec 0c             	sub    $0xc,%esp
   10a96:	68 e0 3d 01 00       	push   $0x13de0
   10a9b:	e8 b4 0a 00 00       	call   11554 <mutex_unlock>
   10aa0:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10aa6:	c1 e0 03             	shl    $0x3,%eax
   10aa9:	eb 22                	jmp    10acd <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10aab:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10aaf:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10ab6:	7e c1                	jle    10a79 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);
   10ab8:	83 ec 0c             	sub    $0xc,%esp
   10abb:	68 e0 3d 01 00       	push   $0x13de0
   10ac0:	e8 8f 0a 00 00       	call   11554 <mutex_unlock>
   10ac5:	83 c4 10             	add    $0x10,%esp
    return -1;
   10ac8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10acd:	c9                   	leave  
   10ace:	c3                   	ret    

00010acf <switch_to_tss>:

void switch_to_tss(int tss_sel)
{
   10acf:	55                   	push   %ebp
   10ad0:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad5:	6a 00                	push   $0x0
   10ad7:	50                   	push   %eax
   10ad8:	e8 0e fe ff ff       	call   108eb <far_jump>
   10add:	83 c4 08             	add    $0x8,%esp
   10ae0:	90                   	nop
   10ae1:	c9                   	leave  
   10ae2:	c3                   	ret    

00010ae3 <inb>:
static inline uint8_t inb(uint16_t port) {
   10ae3:	55                   	push   %ebp
   10ae4:	89 e5                	mov    %esp,%ebp
   10ae6:	83 ec 14             	sub    $0x14,%esp
   10ae9:	8b 45 08             	mov    0x8(%ebp),%eax
   10aec:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   10af0:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10af4:	89 c2                	mov    %eax,%edx
   10af6:	ec                   	in     (%dx),%al
   10af7:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10afa:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10afe:	c9                   	leave  
   10aff:	c3                   	ret    

00010b00 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   10b00:	55                   	push   %ebp
   10b01:	89 e5                	mov    %esp,%ebp
   10b03:	83 ec 08             	sub    $0x8,%esp
   10b06:	8b 55 08             	mov    0x8(%ebp),%edx
   10b09:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b0c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10b10:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   10b13:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10b17:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10b1b:	ee                   	out    %al,(%dx)
}
   10b1c:	90                   	nop
   10b1d:	c9                   	leave  
   10b1e:	c3                   	ret    

00010b1f <cli>:
static inline void cli(void){
   10b1f:	55                   	push   %ebp
   10b20:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
   10b22:	fa                   	cli    
}
   10b23:	90                   	nop
   10b24:	5d                   	pop    %ebp
   10b25:	c3                   	ret    

00010b26 <sti>:
static inline void sti(void){
   10b26:	55                   	push   %ebp
   10b27:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");    
   10b29:	fb                   	sti    
}
   10b2a:	90                   	nop
   10b2b:	5d                   	pop    %ebp
   10b2c:	c3                   	ret    

00010b2d <lidt>:
static inline void lidt(uint32_t start,uint32_t size){
   10b2d:	55                   	push   %ebp
   10b2e:	89 e5                	mov    %esp,%ebp
   10b30:	83 ec 10             	sub    $0x10,%esp
    idt.start32_16 = start >> 16;
   10b33:	8b 45 08             	mov    0x8(%ebp),%eax
   10b36:	c1 e8 10             	shr    $0x10,%eax
   10b39:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   10b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b40:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10b44:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b47:	83 e8 01             	sub    $0x1,%eax
   10b4a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10b4e:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10b52:	90                   	nop
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <hlt>:
static inline void hlt (void) {
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10b58:	f4                   	hlt    
}
   10b59:	90                   	nop
   10b5a:	5d                   	pop    %ebp
   10b5b:	c3                   	ret    

00010b5c <read_eflags>:

static inline uint32_t read_eflags (void) {
   10b5c:	55                   	push   %ebp
   10b5d:	89 e5                	mov    %esp,%ebp
   10b5f:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__ ("pushf\n\tpop %%eax":"=a"(eflags));    
   10b62:	9c                   	pushf  
   10b63:	58                   	pop    %eax
   10b64:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10b67:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10b6a:	c9                   	leave  
   10b6b:	c3                   	ret    

00010b6c <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   10b6c:	55                   	push   %ebp
   10b6d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__ ("push %%eax\n\tpopf"::"a"(eflags));  
   10b6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b72:	50                   	push   %eax
   10b73:	9d                   	popf   
}
   10b74:	90                   	nop
   10b75:	5d                   	pop    %ebp
   10b76:	c3                   	ret    

00010b77 <dump_core_regs>:

void exception_handler_unknown(void);

// 打印CPU寄存器相关内容
static void dump_core_regs(exception_frame_t *frame)
{
   10b77:	55                   	push   %ebp
   10b78:	89 e5                	mov    %esp,%ebp
   10b7a:	57                   	push   %edi
   10b7b:	56                   	push   %esi
   10b7c:	53                   	push   %ebx
   10b7d:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d", frame->num, frame->error_code);
   10b80:	8b 45 08             	mov    0x8(%ebp),%eax
   10b83:	8b 50 34             	mov    0x34(%eax),%edx
   10b86:	8b 45 08             	mov    0x8(%ebp),%eax
   10b89:	8b 40 30             	mov    0x30(%eax),%eax
   10b8c:	83 ec 04             	sub    $0x4,%esp
   10b8f:	52                   	push   %edx
   10b90:	50                   	push   %eax
   10b91:	68 28 21 01 00       	push   $0x12128
   10b96:	e8 3e 14 00 00       	call   11fd9 <log_printf>
   10b9b:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS: %d",
   10b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba1:	8b 38                	mov    (%eax),%edi
   10ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba6:	8b 70 04             	mov    0x4(%eax),%esi
   10ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bac:	8b 58 0c             	mov    0xc(%eax),%ebx
   10baf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb2:	8b 48 08             	mov    0x8(%eax),%ecx
   10bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb8:	8b 50 0c             	mov    0xc(%eax),%edx
   10bbb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbe:	8b 40 3c             	mov    0x3c(%eax),%eax
   10bc1:	83 ec 04             	sub    $0x4,%esp
   10bc4:	57                   	push   %edi
   10bc5:	56                   	push   %esi
   10bc6:	53                   	push   %ebx
   10bc7:	51                   	push   %ecx
   10bc8:	52                   	push   %edx
   10bc9:	50                   	push   %eax
   10bca:	68 40 21 01 00       	push   $0x12140
   10bcf:	e8 05 14 00 00       	call   11fd9 <log_printf>
   10bd4:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   10bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bda:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10bdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10be0:	8b 40 18             	mov    0x18(%eax),%eax
   10be3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10be6:	8b 45 08             	mov    0x8(%ebp),%eax
   10be9:	8b 58 14             	mov    0x14(%eax),%ebx
   10bec:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10bef:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf2:	8b 78 10             	mov    0x10(%eax),%edi
   10bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf8:	8b 70 24             	mov    0x24(%eax),%esi
   10bfb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfe:	8b 58 28             	mov    0x28(%eax),%ebx
   10c01:	8b 45 08             	mov    0x8(%ebp),%eax
   10c04:	8b 50 20             	mov    0x20(%eax),%edx
   10c07:	8b 45 08             	mov    0x8(%ebp),%eax
   10c0a:	8b 40 2c             	mov    0x2c(%eax),%eax
   10c0d:	83 ec 0c             	sub    $0xc,%esp
   10c10:	51                   	push   %ecx
   10c11:	ff 75 e4             	pushl  -0x1c(%ebp)
   10c14:	ff 75 e0             	pushl  -0x20(%ebp)
   10c17:	57                   	push   %edi
   10c18:	56                   	push   %esi
   10c19:	53                   	push   %ebx
   10c1a:	52                   	push   %edx
   10c1b:	50                   	push   %eax
   10c1c:	68 6c 21 01 00       	push   $0x1216c
   10c21:	e8 b3 13 00 00       	call   11fd9 <log_printf>
   10c26:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10c29:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2c:	8b 50 40             	mov    0x40(%eax),%edx
   10c2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c32:	8b 40 38             	mov    0x38(%eax),%eax
   10c35:	83 ec 04             	sub    $0x4,%esp
   10c38:	52                   	push   %edx
   10c39:	50                   	push   %eax
   10c3a:	68 b5 21 01 00       	push   $0x121b5
   10c3f:	e8 95 13 00 00       	call   11fd9 <log_printf>
   10c44:	83 c4 10             	add    $0x10,%esp
}
   10c47:	90                   	nop
   10c48:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10c4b:	5b                   	pop    %ebx
   10c4c:	5e                   	pop    %esi
   10c4d:	5f                   	pop    %edi
   10c4e:	5d                   	pop    %ebp
   10c4f:	c3                   	ret    

00010c50 <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10c50:	55                   	push   %ebp
   10c51:	89 e5                	mov    %esp,%ebp
   10c53:	83 ec 08             	sub    $0x8,%esp

    log_printf("----------------------------");
   10c56:	83 ec 0c             	sub    $0xc,%esp
   10c59:	68 cb 21 01 00       	push   $0x121cb
   10c5e:	e8 76 13 00 00       	call   11fd9 <log_printf>
   10c63:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s", message);
   10c66:	83 ec 08             	sub    $0x8,%esp
   10c69:	ff 75 0c             	pushl  0xc(%ebp)
   10c6c:	68 e8 21 01 00       	push   $0x121e8
   10c71:	e8 63 13 00 00       	call   11fd9 <log_printf>
   10c76:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10c79:	83 ec 0c             	sub    $0xc,%esp
   10c7c:	ff 75 08             	pushl  0x8(%ebp)
   10c7f:	e8 f3 fe ff ff       	call   10b77 <dump_core_regs>
   10c84:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   10c87:	e8 c9 fe ff ff       	call   10b55 <hlt>
   10c8c:	eb f9                	jmp    10c87 <do_default_handler+0x37>

00010c8e <do_handler_unknown>:
    }
}

// 异常处理函数
void do_handler_unknown(exception_frame_t *frame)
{
   10c8e:	55                   	push   %ebp
   10c8f:	89 e5                	mov    %esp,%ebp
   10c91:	83 ec 08             	sub    $0x8,%esp

    do_default_handler(frame, "unknown exception");
   10c94:	83 ec 08             	sub    $0x8,%esp
   10c97:	68 02 22 01 00       	push   $0x12202
   10c9c:	ff 75 08             	pushl  0x8(%ebp)
   10c9f:	e8 ac ff ff ff       	call   10c50 <do_default_handler>
   10ca4:	83 c4 10             	add    $0x10,%esp
}
   10ca7:	90                   	nop
   10ca8:	c9                   	leave  
   10ca9:	c3                   	ret    

00010caa <do_handler_divider>:
void do_handler_divider(exception_frame_t *frame)
{
   10caa:	55                   	push   %ebp
   10cab:	89 e5                	mov    %esp,%ebp
   10cad:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divder exception");
   10cb0:	83 ec 08             	sub    $0x8,%esp
   10cb3:	68 14 22 01 00       	push   $0x12214
   10cb8:	ff 75 08             	pushl  0x8(%ebp)
   10cbb:	e8 90 ff ff ff       	call   10c50 <do_default_handler>
   10cc0:	83 c4 10             	add    $0x10,%esp
}
   10cc3:	90                   	nop
   10cc4:	c9                   	leave  
   10cc5:	c3                   	ret    

00010cc6 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t *frame)
{
   10cc6:	55                   	push   %ebp
   10cc7:	89 e5                	mov    %esp,%ebp
   10cc9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10ccc:	83 ec 08             	sub    $0x8,%esp
   10ccf:	68 25 22 01 00       	push   $0x12225
   10cd4:	ff 75 08             	pushl  0x8(%ebp)
   10cd7:	e8 74 ff ff ff       	call   10c50 <do_default_handler>
   10cdc:	83 c4 10             	add    $0x10,%esp
}
   10cdf:	90                   	nop
   10ce0:	c9                   	leave  
   10ce1:	c3                   	ret    

00010ce2 <do_handler_NMI>:
void do_handler_NMI(exception_frame_t *frame)
{
   10ce2:	55                   	push   %ebp
   10ce3:	89 e5                	mov    %esp,%ebp
   10ce5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10ce8:	83 ec 08             	sub    $0x8,%esp
   10ceb:	68 35 22 01 00       	push   $0x12235
   10cf0:	ff 75 08             	pushl  0x8(%ebp)
   10cf3:	e8 58 ff ff ff       	call   10c50 <do_default_handler>
   10cf8:	83 c4 10             	add    $0x10,%esp
}
   10cfb:	90                   	nop
   10cfc:	c9                   	leave  
   10cfd:	c3                   	ret    

00010cfe <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t *frame)
{
   10cfe:	55                   	push   %ebp
   10cff:	89 e5                	mov    %esp,%ebp
   10d01:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10d04:	83 ec 08             	sub    $0x8,%esp
   10d07:	68 44 22 01 00       	push   $0x12244
   10d0c:	ff 75 08             	pushl  0x8(%ebp)
   10d0f:	e8 3c ff ff ff       	call   10c50 <do_default_handler>
   10d14:	83 c4 10             	add    $0x10,%esp
}
   10d17:	90                   	nop
   10d18:	c9                   	leave  
   10d19:	c3                   	ret    

00010d1a <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   10d1a:	55                   	push   %ebp
   10d1b:	89 e5                	mov    %esp,%ebp
   10d1d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10d20:	83 ec 08             	sub    $0x8,%esp
   10d23:	68 50 22 01 00       	push   $0x12250
   10d28:	ff 75 08             	pushl  0x8(%ebp)
   10d2b:	e8 20 ff ff ff       	call   10c50 <do_default_handler>
   10d30:	83 c4 10             	add    $0x10,%esp
}
   10d33:	90                   	nop
   10d34:	c9                   	leave  
   10d35:	c3                   	ret    

00010d36 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t *frame)
{
   10d36:	55                   	push   %ebp
   10d37:	89 e5                	mov    %esp,%ebp
   10d39:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10d3c:	83 ec 08             	sub    $0x8,%esp
   10d3f:	68 5a 22 01 00       	push   $0x1225a
   10d44:	ff 75 08             	pushl  0x8(%ebp)
   10d47:	e8 04 ff ff ff       	call   10c50 <do_default_handler>
   10d4c:	83 c4 10             	add    $0x10,%esp
}
   10d4f:	90                   	nop
   10d50:	c9                   	leave  
   10d51:	c3                   	ret    

00010d52 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t *frame)
{
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
   10d55:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10d58:	83 ec 08             	sub    $0x8,%esp
   10d5b:	68 70 22 01 00       	push   $0x12270
   10d60:	ff 75 08             	pushl  0x8(%ebp)
   10d63:	e8 e8 fe ff ff       	call   10c50 <do_default_handler>
   10d68:	83 c4 10             	add    $0x10,%esp
}
   10d6b:	90                   	nop
   10d6c:	c9                   	leave  
   10d6d:	c3                   	ret    

00010d6e <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t *frame)
{
   10d6e:	55                   	push   %ebp
   10d6f:	89 e5                	mov    %esp,%ebp
   10d71:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10d74:	83 ec 08             	sub    $0x8,%esp
   10d77:	68 80 22 01 00       	push   $0x12280
   10d7c:	ff 75 08             	pushl  0x8(%ebp)
   10d7f:	e8 cc fe ff ff       	call   10c50 <do_default_handler>
   10d84:	83 c4 10             	add    $0x10,%esp
}
   10d87:	90                   	nop
   10d88:	c9                   	leave  
   10d89:	c3                   	ret    

00010d8a <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   10d8a:	55                   	push   %ebp
   10d8b:	89 e5                	mov    %esp,%ebp
   10d8d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10d90:	83 ec 08             	sub    $0x8,%esp
   10d93:	68 96 22 01 00       	push   $0x12296
   10d98:	ff 75 08             	pushl  0x8(%ebp)
   10d9b:	e8 b0 fe ff ff       	call   10c50 <do_default_handler>
   10da0:	83 c4 10             	add    $0x10,%esp
}
   10da3:	90                   	nop
   10da4:	c9                   	leave  
   10da5:	c3                   	ret    

00010da6 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   10da6:	55                   	push   %ebp
   10da7:	89 e5                	mov    %esp,%ebp
   10da9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10dac:	83 ec 08             	sub    $0x8,%esp
   10daf:	68 a4 22 01 00       	push   $0x122a4
   10db4:	ff 75 08             	pushl  0x8(%ebp)
   10db7:	e8 94 fe ff ff       	call   10c50 <do_default_handler>
   10dbc:	83 c4 10             	add    $0x10,%esp
}
   10dbf:	90                   	nop
   10dc0:	c9                   	leave  
   10dc1:	c3                   	ret    

00010dc2 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   10dc2:	55                   	push   %ebp
   10dc3:	89 e5                	mov    %esp,%ebp
   10dc5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10dc8:	83 ec 08             	sub    $0x8,%esp
   10dcb:	68 b0 22 01 00       	push   $0x122b0
   10dd0:	ff 75 08             	pushl  0x8(%ebp)
   10dd3:	e8 78 fe ff ff       	call   10c50 <do_default_handler>
   10dd8:	83 c4 10             	add    $0x10,%esp
}
   10ddb:	90                   	nop
   10ddc:	c9                   	leave  
   10ddd:	c3                   	ret    

00010dde <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   10dde:	55                   	push   %ebp
   10ddf:	89 e5                	mov    %esp,%ebp
   10de1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10de4:	83 ec 08             	sub    $0x8,%esp
   10de7:	68 c5 22 01 00       	push   $0x122c5
   10dec:	ff 75 08             	pushl  0x8(%ebp)
   10def:	e8 5c fe ff ff       	call   10c50 <do_default_handler>
   10df4:	83 c4 10             	add    $0x10,%esp
}
   10df7:	90                   	nop
   10df8:	c9                   	leave  
   10df9:	c3                   	ret    

00010dfa <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   10dfa:	55                   	push   %ebp
   10dfb:	89 e5                	mov    %esp,%ebp
   10dfd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10e00:	83 ec 08             	sub    $0x8,%esp
   10e03:	68 da 22 01 00       	push   $0x122da
   10e08:	ff 75 08             	pushl  0x8(%ebp)
   10e0b:	e8 40 fe ff ff       	call   10c50 <do_default_handler>
   10e10:	83 c4 10             	add    $0x10,%esp
}
   10e13:	90                   	nop
   10e14:	c9                   	leave  
   10e15:	c3                   	ret    

00010e16 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   10e16:	55                   	push   %ebp
   10e17:	89 e5                	mov    %esp,%ebp
   10e19:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10e1c:	83 ec 08             	sub    $0x8,%esp
   10e1f:	68 ee 22 01 00       	push   $0x122ee
   10e24:	ff 75 08             	pushl  0x8(%ebp)
   10e27:	e8 24 fe ff ff       	call   10c50 <do_default_handler>
   10e2c:	83 c4 10             	add    $0x10,%esp
}
   10e2f:	90                   	nop
   10e30:	c9                   	leave  
   10e31:	c3                   	ret    

00010e32 <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t *frame)
{
   10e32:	55                   	push   %ebp
   10e33:	89 e5                	mov    %esp,%ebp
   10e35:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10e38:	83 ec 08             	sub    $0x8,%esp
   10e3b:	68 fa 22 01 00       	push   $0x122fa
   10e40:	ff 75 08             	pushl  0x8(%ebp)
   10e43:	e8 08 fe ff ff       	call   10c50 <do_default_handler>
   10e48:	83 c4 10             	add    $0x10,%esp
}
   10e4b:	90                   	nop
   10e4c:	c9                   	leave  
   10e4d:	c3                   	ret    

00010e4e <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   10e4e:	55                   	push   %ebp
   10e4f:	89 e5                	mov    %esp,%ebp
   10e51:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10e54:	83 ec 08             	sub    $0x8,%esp
   10e57:	68 18 23 01 00       	push   $0x12318
   10e5c:	ff 75 08             	pushl  0x8(%ebp)
   10e5f:	e8 ec fd ff ff       	call   10c50 <do_default_handler>
   10e64:	83 c4 10             	add    $0x10,%esp
}
   10e67:	90                   	nop
   10e68:	c9                   	leave  
   10e69:	c3                   	ret    

00010e6a <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   10e6a:	55                   	push   %ebp
   10e6b:	89 e5                	mov    %esp,%ebp
   10e6d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10e70:	83 ec 08             	sub    $0x8,%esp
   10e73:	68 29 23 01 00       	push   $0x12329
   10e78:	ff 75 08             	pushl  0x8(%ebp)
   10e7b:	e8 d0 fd ff ff       	call   10c50 <do_default_handler>
   10e80:	83 c4 10             	add    $0x10,%esp
}
   10e83:	90                   	nop
   10e84:	c9                   	leave  
   10e85:	c3                   	ret    

00010e86 <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t *frame)
{
   10e86:	55                   	push   %ebp
   10e87:	89 e5                	mov    %esp,%ebp
   10e89:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   10e8c:	83 ec 08             	sub    $0x8,%esp
   10e8f:	68 38 23 01 00       	push   $0x12338
   10e94:	ff 75 08             	pushl  0x8(%ebp)
   10e97:	e8 b4 fd ff ff       	call   10c50 <do_default_handler>
   10e9c:	83 c4 10             	add    $0x10,%esp
}
   10e9f:	90                   	nop
   10ea0:	c9                   	leave  
   10ea1:	c3                   	ret    

00010ea2 <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t *frame)
{
   10ea2:	55                   	push   %ebp
   10ea3:	89 e5                	mov    %esp,%ebp
   10ea5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10ea8:	83 ec 08             	sub    $0x8,%esp
   10eab:	68 57 23 01 00       	push   $0x12357
   10eb0:	ff 75 08             	pushl  0x8(%ebp)
   10eb3:	e8 98 fd ff ff       	call   10c50 <do_default_handler>
   10eb8:	83 c4 10             	add    $0x10,%esp
}
   10ebb:	90                   	nop
   10ebc:	c9                   	leave  
   10ebd:	c3                   	ret    

00010ebe <init_pic>:
static gate_desc_t idt_table[IDE_TABLE_NR];

// 初始化中断控制器
// 硬件相关 --- 待解决
static void init_pic(void)
{
   10ebe:	55                   	push   %ebp
   10ebf:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10ec1:	6a 11                	push   $0x11
   10ec3:	6a 20                	push   $0x20
   10ec5:	e8 36 fc ff ff       	call   10b00 <outb>
   10eca:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10ecd:	6a 20                	push   $0x20
   10ecf:	6a 21                	push   $0x21
   10ed1:	e8 2a fc ff ff       	call   10b00 <outb>
   10ed6:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10ed9:	6a 04                	push   $0x4
   10edb:	6a 21                	push   $0x21
   10edd:	e8 1e fc ff ff       	call   10b00 <outb>
   10ee2:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10ee5:	6a 01                	push   $0x1
   10ee7:	6a 21                	push   $0x21
   10ee9:	e8 12 fc ff ff       	call   10b00 <outb>
   10eee:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10ef1:	6a 11                	push   $0x11
   10ef3:	68 a0 00 00 00       	push   $0xa0
   10ef8:	e8 03 fc ff ff       	call   10b00 <outb>
   10efd:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10f00:	6a 28                	push   $0x28
   10f02:	68 a1 00 00 00       	push   $0xa1
   10f07:	e8 f4 fb ff ff       	call   10b00 <outb>
   10f0c:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10f0f:	6a 02                	push   $0x2
   10f11:	68 a1 00 00 00       	push   $0xa1
   10f16:	e8 e5 fb ff ff       	call   10b00 <outb>
   10f1b:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10f1e:	6a 01                	push   $0x1
   10f20:	68 a1 00 00 00       	push   $0xa1
   10f25:	e8 d6 fb ff ff       	call   10b00 <outb>
   10f2a:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10f2d:	68 fb 00 00 00       	push   $0xfb
   10f32:	6a 21                	push   $0x21
   10f34:	e8 c7 fb ff ff       	call   10b00 <outb>
   10f39:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10f3c:	68 ff 00 00 00       	push   $0xff
   10f41:	68 a1 00 00 00       	push   $0xa1
   10f46:	e8 b5 fb ff ff       	call   10b00 <outb>
   10f4b:	83 c4 08             	add    $0x8,%esp
}
   10f4e:	90                   	nop
   10f4f:	c9                   	leave  
   10f50:	c3                   	ret    

00010f51 <irq_init>:

void irq_init(void)
{
   10f51:	55                   	push   %ebp
   10f52:	89 e5                	mov    %esp,%ebp
   10f54:	83 ec 18             	sub    $0x18,%esp

    for (int i = 0; i < IDE_TABLE_NR; i++)
   10f57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10f5e:	eb 25                	jmp    10f85 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   10f60:	ba 28 00 01 00       	mov    $0x10028,%edx
   10f65:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f68:	c1 e0 03             	shl    $0x3,%eax
   10f6b:	05 00 3e 01 00       	add    $0x13e00,%eax
   10f70:	68 00 8e 00 00       	push   $0x8e00
   10f75:	52                   	push   %edx
   10f76:	6a 08                	push   $0x8
   10f78:	50                   	push   %eax
   10f79:	e8 77 fa ff ff       	call   109f5 <gate_desc_set>
   10f7e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDE_TABLE_NR; i++)
   10f81:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f85:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10f89:	7e d5                	jle    10f60 <irq_init+0xf>
                      GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);
    }
    // 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10f8b:	83 ec 08             	sub    $0x8,%esp
   10f8e:	68 47 00 01 00       	push   $0x10047
   10f93:	6a 00                	push   $0x0
   10f95:	e8 65 01 00 00       	call   110ff <irq_install>
   10f9a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, exception_handler_Debug);
   10f9d:	83 ec 08             	sub    $0x8,%esp
   10fa0:	68 66 00 01 00       	push   $0x10066
   10fa5:	6a 01                	push   $0x1
   10fa7:	e8 53 01 00 00       	call   110ff <irq_install>
   10fac:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, exception_handler_NMI);
   10faf:	83 ec 08             	sub    $0x8,%esp
   10fb2:	68 85 00 01 00       	push   $0x10085
   10fb7:	6a 02                	push   $0x2
   10fb9:	e8 41 01 00 00       	call   110ff <irq_install>
   10fbe:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, exception_handler_breakpoint);
   10fc1:	83 ec 08             	sub    $0x8,%esp
   10fc4:	68 a4 00 01 00       	push   $0x100a4
   10fc9:	6a 03                	push   $0x3
   10fcb:	e8 2f 01 00 00       	call   110ff <irq_install>
   10fd0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, exception_handler_overflow);
   10fd3:	83 ec 08             	sub    $0x8,%esp
   10fd6:	68 c3 00 01 00       	push   $0x100c3
   10fdb:	6a 04                	push   $0x4
   10fdd:	e8 1d 01 00 00       	call   110ff <irq_install>
   10fe2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, exception_handler_bound_range);
   10fe5:	83 ec 08             	sub    $0x8,%esp
   10fe8:	68 e2 00 01 00       	push   $0x100e2
   10fed:	6a 05                	push   $0x5
   10fef:	e8 0b 01 00 00       	call   110ff <irq_install>
   10ff4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10ff7:	83 ec 08             	sub    $0x8,%esp
   10ffa:	68 01 01 01 00       	push   $0x10101
   10fff:	6a 06                	push   $0x6
   11001:	e8 f9 00 00 00       	call   110ff <irq_install>
   11006:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, exception_handler_device_unavailable);
   11009:	83 ec 08             	sub    $0x8,%esp
   1100c:	68 20 01 01 00       	push   $0x10120
   11011:	6a 07                	push   $0x7
   11013:	e8 e7 00 00 00       	call   110ff <irq_install>
   11018:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, exception_handler_double_fault);
   1101b:	83 ec 08             	sub    $0x8,%esp
   1101e:	68 3f 01 01 00       	push   $0x1013f
   11023:	6a 08                	push   $0x8
   11025:	e8 d5 00 00 00       	call   110ff <irq_install>
   1102a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, exception_handler_invalid_tss);
   1102d:	83 ec 08             	sub    $0x8,%esp
   11030:	68 5c 01 01 00       	push   $0x1015c
   11035:	6a 0a                	push   $0xa
   11037:	e8 c3 00 00 00       	call   110ff <irq_install>
   1103c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, exception_handler_segment_not_present);
   1103f:	83 ec 08             	sub    $0x8,%esp
   11042:	68 79 01 01 00       	push   $0x10179
   11047:	6a 0b                	push   $0xb
   11049:	e8 b1 00 00 00       	call   110ff <irq_install>
   1104e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   11051:	83 ec 08             	sub    $0x8,%esp
   11054:	68 96 01 01 00       	push   $0x10196
   11059:	6a 0c                	push   $0xc
   1105b:	e8 9f 00 00 00       	call   110ff <irq_install>
   11060:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, exception_handler_general_protection);
   11063:	83 ec 08             	sub    $0x8,%esp
   11066:	68 b3 01 01 00       	push   $0x101b3
   1106b:	6a 0d                	push   $0xd
   1106d:	e8 8d 00 00 00       	call   110ff <irq_install>
   11072:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, exception_handler_page_fault);
   11075:	83 ec 08             	sub    $0x8,%esp
   11078:	68 d0 01 01 00       	push   $0x101d0
   1107d:	6a 0e                	push   $0xe
   1107f:	e8 7b 00 00 00       	call   110ff <irq_install>
   11084:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, exception_handler_fpu_error);
   11087:	83 ec 08             	sub    $0x8,%esp
   1108a:	68 ed 01 01 00       	push   $0x101ed
   1108f:	6a 10                	push   $0x10
   11091:	e8 69 00 00 00       	call   110ff <irq_install>
   11096:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, exception_handler_alignment_check);
   11099:	83 ec 08             	sub    $0x8,%esp
   1109c:	68 0c 02 01 00       	push   $0x1020c
   110a1:	6a 11                	push   $0x11
   110a3:	e8 57 00 00 00       	call   110ff <irq_install>
   110a8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, exception_handler_machine_check);
   110ab:	83 ec 08             	sub    $0x8,%esp
   110ae:	68 29 02 01 00       	push   $0x10229
   110b3:	6a 12                	push   $0x12
   110b5:	e8 45 00 00 00       	call   110ff <irq_install>
   110ba:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, exception_handler_smd_exception);
   110bd:	83 ec 08             	sub    $0x8,%esp
   110c0:	68 48 02 01 00       	push   $0x10248
   110c5:	6a 13                	push   $0x13
   110c7:	e8 33 00 00 00       	call   110ff <irq_install>
   110cc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, exception_handler_virtual_exception);
   110cf:	83 ec 08             	sub    $0x8,%esp
   110d2:	68 67 02 01 00       	push   $0x10267
   110d7:	6a 14                	push   $0x14
   110d9:	e8 21 00 00 00       	call   110ff <irq_install>
   110de:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   110e1:	b8 00 3e 01 00       	mov    $0x13e00,%eax
   110e6:	83 ec 08             	sub    $0x8,%esp
   110e9:	68 00 04 00 00       	push   $0x400
   110ee:	50                   	push   %eax
   110ef:	e8 39 fa ff ff       	call   10b2d <lidt>
   110f4:	83 c4 10             	add    $0x10,%esp

    // 初始化中断控制器
    init_pic();
   110f7:	e8 c2 fd ff ff       	call   10ebe <init_pic>
}
   110fc:	90                   	nop
   110fd:	c9                   	leave  
   110fe:	c3                   	ret    

000110ff <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   110ff:	55                   	push   %ebp
   11100:	89 e5                	mov    %esp,%ebp
   11102:	83 ec 08             	sub    $0x8,%esp

    if (irq_num >= IDE_TABLE_NR)
   11105:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11109:	7e 07                	jle    11112 <irq_install+0x13>
    {
        return -1;
   1110b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11110:	eb 25                	jmp    11137 <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS,
   11112:	8b 45 0c             	mov    0xc(%ebp),%eax
   11115:	8b 55 08             	mov    0x8(%ebp),%edx
   11118:	c1 e2 03             	shl    $0x3,%edx
   1111b:	81 c2 00 3e 01 00    	add    $0x13e00,%edx
   11121:	68 00 8e 00 00       	push   $0x8e00
   11126:	50                   	push   %eax
   11127:	6a 08                	push   $0x8
   11129:	52                   	push   %edx
   1112a:	e8 c6 f8 ff ff       	call   109f5 <gate_desc_set>
   1112f:	83 c4 10             	add    $0x10,%esp
                  (uint32_t)handler, GATE_TYPE_IDT | GATE_P_PRESENT | GATE_DPL0);

    return 0;
   11132:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11137:	c9                   	leave  
   11138:	c3                   	ret    

00011139 <irq_enable>:

// 设置 8259 的 IMR寄存器
void irq_enable(int irq_num)
{
   11139:	55                   	push   %ebp
   1113a:	89 e5                	mov    %esp,%ebp
   1113c:	53                   	push   %ebx
   1113d:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   11140:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11144:	7e 78                	jle    111be <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   11146:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   1114a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1114e:	7f 32                	jg     11182 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11150:	6a 21                	push   $0x21
   11152:	e8 8c f9 ff ff       	call   10ae3 <inb>
   11157:	83 c4 04             	add    $0x4,%esp
   1115a:	89 c2                	mov    %eax,%edx
   1115c:	8b 45 08             	mov    0x8(%ebp),%eax
   1115f:	bb 01 00 00 00       	mov    $0x1,%ebx
   11164:	89 c1                	mov    %eax,%ecx
   11166:	d3 e3                	shl    %cl,%ebx
   11168:	89 d8                	mov    %ebx,%eax
   1116a:	f7 d0                	not    %eax
   1116c:	21 d0                	and    %edx,%eax
   1116e:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11171:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11175:	50                   	push   %eax
   11176:	6a 21                	push   $0x21
   11178:	e8 83 f9 ff ff       	call   10b00 <outb>
   1117d:	83 c4 08             	add    $0x8,%esp
   11180:	eb 3d                	jmp    111bf <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   11182:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11186:	68 a1 00 00 00       	push   $0xa1
   1118b:	e8 53 f9 ff ff       	call   10ae3 <inb>
   11190:	83 c4 04             	add    $0x4,%esp
   11193:	89 c2                	mov    %eax,%edx
   11195:	8b 45 08             	mov    0x8(%ebp),%eax
   11198:	bb 01 00 00 00       	mov    $0x1,%ebx
   1119d:	89 c1                	mov    %eax,%ecx
   1119f:	d3 e3                	shl    %cl,%ebx
   111a1:	89 d8                	mov    %ebx,%eax
   111a3:	f7 d0                	not    %eax
   111a5:	21 d0                	and    %edx,%eax
   111a7:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   111aa:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   111ae:	50                   	push   %eax
   111af:	68 a1 00 00 00       	push   $0xa1
   111b4:	e8 47 f9 ff ff       	call   10b00 <outb>
   111b9:	83 c4 08             	add    $0x8,%esp
   111bc:	eb 01                	jmp    111bf <irq_enable+0x86>
        return;
   111be:	90                   	nop
    }
}
   111bf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   111c2:	c9                   	leave  
   111c3:	c3                   	ret    

000111c4 <irq_disable>:
void irq_disable(int irq_num)
{
   111c4:	55                   	push   %ebp
   111c5:	89 e5                	mov    %esp,%ebp
   111c7:	53                   	push   %ebx
   111c8:	83 ec 10             	sub    $0x10,%esp

    if (irq_num < IRQ_PIC_START)
   111cb:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   111cf:	7e 74                	jle    11245 <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   111d1:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   111d5:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   111d9:	7f 30                	jg     1120b <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   111db:	6a 21                	push   $0x21
   111dd:	e8 01 f9 ff ff       	call   10ae3 <inb>
   111e2:	83 c4 04             	add    $0x4,%esp
   111e5:	89 c3                	mov    %eax,%ebx
   111e7:	8b 45 08             	mov    0x8(%ebp),%eax
   111ea:	ba 01 00 00 00       	mov    $0x1,%edx
   111ef:	89 c1                	mov    %eax,%ecx
   111f1:	d3 e2                	shl    %cl,%edx
   111f3:	89 d0                	mov    %edx,%eax
   111f5:	09 d8                	or     %ebx,%eax
   111f7:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   111fa:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   111fe:	50                   	push   %eax
   111ff:	6a 21                	push   $0x21
   11201:	e8 fa f8 ff ff       	call   10b00 <outb>
   11206:	83 c4 08             	add    $0x8,%esp
   11209:	eb 3b                	jmp    11246 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   1120b:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   1120f:	68 a1 00 00 00       	push   $0xa1
   11214:	e8 ca f8 ff ff       	call   10ae3 <inb>
   11219:	83 c4 04             	add    $0x4,%esp
   1121c:	89 c3                	mov    %eax,%ebx
   1121e:	8b 45 08             	mov    0x8(%ebp),%eax
   11221:	ba 01 00 00 00       	mov    $0x1,%edx
   11226:	89 c1                	mov    %eax,%ecx
   11228:	d3 e2                	shl    %cl,%edx
   1122a:	89 d0                	mov    %edx,%eax
   1122c:	09 d8                	or     %ebx,%eax
   1122e:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11231:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11235:	50                   	push   %eax
   11236:	68 a1 00 00 00       	push   $0xa1
   1123b:	e8 c0 f8 ff ff       	call   10b00 <outb>
   11240:	83 c4 08             	add    $0x8,%esp
   11243:	eb 01                	jmp    11246 <irq_disable+0x82>
        return;
   11245:	90                   	nop
    }
}
   11246:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11249:	c9                   	leave  
   1124a:	c3                   	ret    

0001124b <irq_disable_global>:

// 将eflags中的IF位设置为0
void irq_disable_global(void)
{
   1124b:	55                   	push   %ebp
   1124c:	89 e5                	mov    %esp,%ebp
    cli();
   1124e:	e8 cc f8 ff ff       	call   10b1f <cli>
}
   11253:	90                   	nop
   11254:	5d                   	pop    %ebp
   11255:	c3                   	ret    

00011256 <irq_enable_global>:

// 将eflags中的IF位设置为0
void irq_enable_global(void)
{
   11256:	55                   	push   %ebp
   11257:	89 e5                	mov    %esp,%ebp
    sti();
   11259:	e8 c8 f8 ff ff       	call   10b26 <sti>
}
   1125e:	90                   	nop
   1125f:	5d                   	pop    %ebp
   11260:	c3                   	ret    

00011261 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   11261:	55                   	push   %ebp
   11262:	89 e5                	mov    %esp,%ebp

    irq_num -= IRQ_PIC_START;
   11264:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if (irq_num >= 8)
   11268:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1126c:	7e 0f                	jle    1127d <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   1126e:	6a 20                	push   $0x20
   11270:	68 a0 00 00 00       	push   $0xa0
   11275:	e8 86 f8 ff ff       	call   10b00 <outb>
   1127a:	83 c4 08             	add    $0x8,%esp
    }
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   1127d:	6a 20                	push   $0x20
   1127f:	6a 20                	push   $0x20
   11281:	e8 7a f8 ff ff       	call   10b00 <outb>
   11286:	83 c4 08             	add    $0x8,%esp
}
   11289:	90                   	nop
   1128a:	c9                   	leave  
   1128b:	c3                   	ret    

0001128c <irq_enter_protection>:
 * @brief 进入临界区
 *
 * @return irq_state_t
 */
irq_state_t irq_enter_protection(void)
{
   1128c:	55                   	push   %ebp
   1128d:	89 e5                	mov    %esp,%ebp
   1128f:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11292:	e8 c5 f8 ff ff       	call   10b5c <read_eflags>
   11297:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1129a:	e8 ac ff ff ff       	call   1124b <irq_disable_global>
    return state;
   1129f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   112a2:	c9                   	leave  
   112a3:	c3                   	ret    

000112a4 <irq_leave_protection>:
 * @brief 退出临界区
 *
 * @param state eflags寄存器的值
 */
void irq_leave_protection(irq_state_t state)
{
   112a4:	55                   	push   %ebp
   112a5:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   112a7:	ff 75 08             	pushl  0x8(%ebp)
   112aa:	e8 bd f8 ff ff       	call   10b6c <write_eflags>
   112af:	83 c4 04             	add    $0x4,%esp
}
   112b2:	90                   	nop
   112b3:	c9                   	leave  
   112b4:	c3                   	ret    

000112b5 <outb>:
static inline void outb(uint16_t port,uint8_t data){
   112b5:	55                   	push   %ebp
   112b6:	89 e5                	mov    %esp,%ebp
   112b8:	83 ec 08             	sub    $0x8,%esp
   112bb:	8b 55 08             	mov    0x8(%ebp),%edx
   112be:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   112c5:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   112c8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   112cc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   112d0:	ee                   	out    %al,(%dx)
}
   112d1:	90                   	nop
   112d2:	c9                   	leave  
   112d3:	c3                   	ret    

000112d4 <do_handler_timer>:


/**
 * 定时器中断处理函数
 */
void do_handler_timer(exception_frame_t * frame) {
   112d4:	55                   	push   %ebp
   112d5:	89 e5                	mov    %esp,%ebp
   112d7:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   112da:	a1 00 42 01 00       	mov    0x14200,%eax
   112df:	83 c0 01             	add    $0x1,%eax
   112e2:	a3 00 42 01 00       	mov    %eax,0x14200
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   112e7:	83 ec 0c             	sub    $0xc,%esp
   112ea:	6a 20                	push   $0x20
   112ec:	e8 70 ff ff ff       	call   11261 <pic_send_eoi>
   112f1:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   112f4:	e8 40 f4 ff ff       	call   10739 <task_time_tick>
}
   112f9:	90                   	nop
   112fa:	c9                   	leave  
   112fb:	c3                   	ret    

000112fc <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   112fc:	55                   	push   %ebp
   112fd:	89 e5                	mov    %esp,%ebp
   112ff:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   11302:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   11309:	6a 36                	push   $0x36
   1130b:	6a 43                	push   $0x43
   1130d:	e8 a3 ff ff ff       	call   112b5 <outb>
   11312:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);   // 加载低8位
   11315:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11318:	0f b6 c0             	movzbl %al,%eax
   1131b:	50                   	push   %eax
   1131c:	6a 40                	push   $0x40
   1131e:	e8 92 ff ff ff       	call   112b5 <outb>
   11323:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff); // 再加载高8位
   11326:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11329:	c1 e8 08             	shr    $0x8,%eax
   1132c:	0f b6 c0             	movzbl %al,%eax
   1132f:	50                   	push   %eax
   11330:	6a 40                	push   $0x40
   11332:	e8 7e ff ff ff       	call   112b5 <outb>
   11337:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1133a:	83 ec 08             	sub    $0x8,%esp
   1133d:	68 86 02 01 00       	push   $0x10286
   11342:	6a 20                	push   $0x20
   11344:	e8 b6 fd ff ff       	call   110ff <irq_install>
   11349:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   1134c:	83 ec 0c             	sub    $0xc,%esp
   1134f:	6a 20                	push   $0x20
   11351:	e8 e3 fd ff ff       	call   11139 <irq_enable>
   11356:	83 c4 10             	add    $0x10,%esp
}
   11359:	90                   	nop
   1135a:	c9                   	leave  
   1135b:	c3                   	ret    

0001135c <time_init>:


/**
 * 定时器初始化
 */
void time_init (void) {
   1135c:	55                   	push   %ebp
   1135d:	89 e5                	mov    %esp,%ebp
   1135f:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11362:	c7 05 00 42 01 00 00 	movl   $0x0,0x14200
   11369:	00 00 00 

    init_pit();
   1136c:	e8 8b ff ff ff       	call   112fc <init_pit>
   11371:	90                   	nop
   11372:	c9                   	leave  
   11373:	c3                   	ret    

00011374 <kernel_init>:
#include "ipc/sem.h"

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info){
   11374:	55                   	push   %ebp
   11375:	89 e5                	mov    %esp,%ebp
   11377:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   1137a:	e8 bd f6 ff ff       	call   10a3c <cpu_init>
    log_init();
   1137f:	e8 b8 0b 00 00       	call   11f3c <log_init>
    irq_init();
   11384:	e8 c8 fb ff ff       	call   10f51 <irq_init>
    time_init();
   11389:	e8 ce ff ff ff       	call   1135c <time_init>

    task_manager_init();
   1138e:	e8 db f1 ff ff       	call   1056e <task_manager_init>

}
   11393:	90                   	nop
   11394:	c9                   	leave  
   11395:	c3                   	ret    

00011396 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
static sem_t sem;

void init_task_entry(void) {
   11396:	55                   	push   %ebp
   11397:	89 e5                	mov    %esp,%ebp
   11399:	83 ec 18             	sub    $0x18,%esp
    
    int count = 0;
   1139c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        sem_wait(&sem);
   113a3:	83 ec 0c             	sub    $0xc,%esp
   113a6:	68 d4 52 01 00       	push   $0x152d4
   113ab:	e8 8f 02 00 00       	call   1163f <sem_wait>
   113b0:	83 c4 10             	add    $0x10,%esp
        
        log_printf("int task: %d",count++);
   113b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113b6:	8d 50 01             	lea    0x1(%eax),%edx
   113b9:	89 55 f4             	mov    %edx,-0xc(%ebp)
   113bc:	83 ec 08             	sub    $0x8,%esp
   113bf:	50                   	push   %eax
   113c0:	68 71 23 01 00       	push   $0x12371
   113c5:	e8 0f 0c 00 00       	call   11fd9 <log_printf>
   113ca:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem);
   113cd:	eb d4                	jmp    113a3 <init_task_entry+0xd>

000113cf <init_main>:
    }    

}

void init_main(void) {
   113cf:	55                   	push   %ebp
   113d0:	89 e5                	mov    %esp,%ebp
   113d2:	83 ec 18             	sub    $0x18,%esp

    log_printf("kernel is running....");
   113d5:	83 ec 0c             	sub    $0xc,%esp
   113d8:	68 7e 23 01 00       	push   $0x1237e
   113dd:	e8 f7 0b 00 00       	call   11fd9 <log_printf>
   113e2:	83 c4 10             	add    $0x10,%esp
    log_printf("version: %s %s",OS_VERSION,"diyx86os");
   113e5:	83 ec 04             	sub    $0x4,%esp
   113e8:	68 94 23 01 00       	push   $0x12394
   113ed:	68 9d 23 01 00       	push   $0x1239d
   113f2:	68 a3 23 01 00       	push   $0x123a3
   113f7:	e8 dd 0b 00 00       	call   11fd9 <log_printf>
   113fc:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c",123456,-123,0x12345,'a');
   113ff:	83 ec 0c             	sub    $0xc,%esp
   11402:	6a 61                	push   $0x61
   11404:	68 45 23 01 00       	push   $0x12345
   11409:	6a 85                	push   $0xffffff85
   1140b:	68 40 e2 01 00       	push   $0x1e240
   11410:	68 b2 23 01 00       	push   $0x123b2
   11415:	e8 bf 0b 00 00       	call   11fd9 <log_printf>
   1141a:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task,"init task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   1141d:	ba 20 52 01 00       	mov    $0x15220,%edx
   11422:	b8 96 13 01 00       	mov    $0x11396,%eax
   11427:	52                   	push   %edx
   11428:	50                   	push   %eax
   11429:	68 be 23 01 00       	push   $0x123be
   1142e:	68 20 52 01 00       	push   $0x15220
   11433:	e8 f8 ef ff ff       	call   10430 <task_init>
   11438:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   1143b:	e8 dd f0 ff ff       	call   1051d <task_first_init>
    sem_init(&sem,0);
   11440:	83 ec 08             	sub    $0x8,%esp
   11443:	6a 00                	push   $0x0
   11445:	68 d4 52 01 00       	push   $0x152d4
   1144a:	e8 cd 01 00 00       	call   1161c <sem_init>
   1144f:	83 c4 10             	add    $0x10,%esp

    irq_enable_global();
   11452:	e8 ff fd ff ff       	call   11256 <irq_enable_global>
    int count = 0; 
   11457:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("first main: %d",count++);
   1145e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11461:	8d 50 01             	lea    0x1(%eax),%edx
   11464:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11467:	83 ec 08             	sub    $0x8,%esp
   1146a:	50                   	push   %eax
   1146b:	68 c8 23 01 00       	push   $0x123c8
   11470:	e8 64 0b 00 00       	call   11fd9 <log_printf>
   11475:	83 c4 10             	add    $0x10,%esp
        sem_notify(&sem);
   11478:	83 ec 0c             	sub    $0xc,%esp
   1147b:	68 d4 52 01 00       	push   $0x152d4
   11480:	e8 25 02 00 00       	call   116aa <sem_notify>
   11485:	83 c4 10             	add    $0x10,%esp
        log_printf("first main: %d",count++);
   11488:	eb d4                	jmp    1145e <init_main+0x8f>

0001148a <list_count>:
static inline int list_count(list_t *list) {
   1148a:	55                   	push   %ebp
   1148b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1148d:	8b 45 08             	mov    0x8(%ebp),%eax
   11490:	8b 40 08             	mov    0x8(%eax),%eax
}
   11493:	5d                   	pop    %ebp
   11494:	c3                   	ret    

00011495 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/list.h"

void mutex_init (mutex_t *mutex) {
   11495:	55                   	push   %ebp
   11496:	89 e5                	mov    %esp,%ebp
   11498:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   1149b:	8b 45 08             	mov    0x8(%ebp),%eax
   1149e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   114a5:	8b 45 08             	mov    0x8(%ebp),%eax
   114a8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   114ae:	8b 45 08             	mov    0x8(%ebp),%eax
   114b1:	83 c0 08             	add    $0x8,%eax
   114b4:	83 ec 0c             	sub    $0xc,%esp
   114b7:	50                   	push   %eax
   114b8:	e8 5c 08 00 00       	call   11d19 <list_init>
   114bd:	83 c4 10             	add    $0x10,%esp
}
   114c0:	90                   	nop
   114c1:	c9                   	leave  
   114c2:	c3                   	ret    

000114c3 <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   114c3:	55                   	push   %ebp
   114c4:	89 e5                	mov    %esp,%ebp
   114c6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   114c9:	e8 be fd ff ff       	call   1128c <irq_enter_protection>
   114ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   114d1:	e8 9d f1 ff ff       	call   10673 <task_current>
   114d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   114d9:	8b 45 08             	mov    0x8(%ebp),%eax
   114dc:	8b 40 04             	mov    0x4(%eax),%eax
   114df:	85 c0                	test   %eax,%eax
   114e1:	75 19                	jne    114fc <mutex_lock+0x39>
        mutex->locked_count++;
   114e3:	8b 45 08             	mov    0x8(%ebp),%eax
   114e6:	8b 40 04             	mov    0x4(%eax),%eax
   114e9:	8d 50 01             	lea    0x1(%eax),%edx
   114ec:	8b 45 08             	mov    0x8(%ebp),%eax
   114ef:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   114f2:	8b 45 08             	mov    0x8(%ebp),%eax
   114f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   114f8:	89 10                	mov    %edx,(%eax)
   114fa:	eb 47                	jmp    11543 <mutex_lock+0x80>
    } else if (mutex->owner == curr){
   114fc:	8b 45 08             	mov    0x8(%ebp),%eax
   114ff:	8b 00                	mov    (%eax),%eax
   11501:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11504:	75 11                	jne    11517 <mutex_lock+0x54>
        mutex->locked_count++;
   11506:	8b 45 08             	mov    0x8(%ebp),%eax
   11509:	8b 40 04             	mov    0x4(%eax),%eax
   1150c:	8d 50 01             	lea    0x1(%eax),%edx
   1150f:	8b 45 08             	mov    0x8(%ebp),%eax
   11512:	89 50 04             	mov    %edx,0x4(%eax)
   11515:	eb 2c                	jmp    11543 <mutex_lock+0x80>
    } else {
        task_set_block(curr);
   11517:	83 ec 0c             	sub    $0xc,%esp
   1151a:	ff 75 f0             	pushl  -0x10(%ebp)
   1151d:	e8 e3 f0 ff ff       	call   10605 <task_set_block>
   11522:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list,&curr->wait_node);
   11525:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11528:	8d 50 38             	lea    0x38(%eax),%edx
   1152b:	8b 45 08             	mov    0x8(%ebp),%eax
   1152e:	83 c0 08             	add    $0x8,%eax
   11531:	83 ec 08             	sub    $0x8,%esp
   11534:	52                   	push   %edx
   11535:	50                   	push   %eax
   11536:	e8 63 08 00 00       	call   11d9e <list_insert_last>
   1153b:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1153e:	e8 3a f1 ff ff       	call   1067d <task_dispatch>
    }

    irq_leave_protection(state);
   11543:	83 ec 0c             	sub    $0xc,%esp
   11546:	ff 75 f4             	pushl  -0xc(%ebp)
   11549:	e8 56 fd ff ff       	call   112a4 <irq_leave_protection>
   1154e:	83 c4 10             	add    $0x10,%esp
}
   11551:	90                   	nop
   11552:	c9                   	leave  
   11553:	c3                   	ret    

00011554 <mutex_unlock>:


void mutex_unlock (mutex_t * mutex) {
   11554:	55                   	push   %ebp
   11555:	89 e5                	mov    %esp,%ebp
   11557:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1155a:	e8 2d fd ff ff       	call   1128c <irq_enter_protection>
   1155f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11562:	e8 0c f1 ff ff       	call   10673 <task_current>
   11567:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (mutex->owner == curr) {
   1156a:	8b 45 08             	mov    0x8(%ebp),%eax
   1156d:	8b 00                	mov    (%eax),%eax
   1156f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11572:	0f 85 88 00 00 00    	jne    11600 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   11578:	8b 45 08             	mov    0x8(%ebp),%eax
   1157b:	8b 40 04             	mov    0x4(%eax),%eax
   1157e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11581:	8b 45 08             	mov    0x8(%ebp),%eax
   11584:	89 50 04             	mov    %edx,0x4(%eax)
   11587:	8b 45 08             	mov    0x8(%ebp),%eax
   1158a:	8b 40 04             	mov    0x4(%eax),%eax
   1158d:	85 c0                	test   %eax,%eax
   1158f:	75 6f                	jne    11600 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   11591:	8b 45 08             	mov    0x8(%ebp),%eax
   11594:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   1159a:	8b 45 08             	mov    0x8(%ebp),%eax
   1159d:	83 c0 08             	add    $0x8,%eax
   115a0:	83 ec 0c             	sub    $0xc,%esp
   115a3:	50                   	push   %eax
   115a4:	e8 e1 fe ff ff       	call   1148a <list_count>
   115a9:	83 c4 10             	add    $0x10,%esp
   115ac:	85 c0                	test   %eax,%eax
   115ae:	74 50                	je     11600 <mutex_unlock+0xac>

                list_node_t * node = list_remove_first(&mutex->wait_list);
   115b0:	8b 45 08             	mov    0x8(%ebp),%eax
   115b3:	83 c0 08             	add    $0x8,%eax
   115b6:	83 ec 0c             	sub    $0xc,%esp
   115b9:	50                   	push   %eax
   115ba:	e8 43 08 00 00       	call   11e02 <list_remove_first>
   115bf:	83 c4 10             	add    $0x10,%esp
   115c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node,task_t,wait_node);
   115c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   115c9:	74 08                	je     115d3 <mutex_unlock+0x7f>
   115cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115ce:	83 e8 38             	sub    $0x38,%eax
   115d1:	eb 05                	jmp    115d8 <mutex_unlock+0x84>
   115d3:	b8 00 00 00 00       	mov    $0x0,%eax
   115d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   115db:	83 ec 0c             	sub    $0xc,%esp
   115de:	ff 75 e8             	pushl  -0x18(%ebp)
   115e1:	e8 eb ef ff ff       	call   105d1 <task_set_ready>
   115e6:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   115e9:	8b 45 08             	mov    0x8(%ebp),%eax
   115ec:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   115f3:	8b 45 08             	mov    0x8(%ebp),%eax
   115f6:	8b 55 e8             	mov    -0x18(%ebp),%edx
   115f9:	89 10                	mov    %edx,(%eax)
                task_dispatch();
   115fb:	e8 7d f0 ff ff       	call   1067d <task_dispatch>
            }

        }
    }
    irq_leave_protection(state);    
   11600:	83 ec 0c             	sub    $0xc,%esp
   11603:	ff 75 f4             	pushl  -0xc(%ebp)
   11606:	e8 99 fc ff ff       	call   112a4 <irq_leave_protection>
   1160b:	83 c4 10             	add    $0x10,%esp
   1160e:	90                   	nop
   1160f:	c9                   	leave  
   11610:	c3                   	ret    

00011611 <list_count>:
static inline int list_count(list_t *list) {
   11611:	55                   	push   %ebp
   11612:	89 e5                	mov    %esp,%ebp
    return list->count;
   11614:	8b 45 08             	mov    0x8(%ebp),%eax
   11617:	8b 40 08             	mov    0x8(%eax),%eax
}
   1161a:	5d                   	pop    %ebp
   1161b:	c3                   	ret    

0001161c <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init (sem_t *sem, int init_count) {
   1161c:	55                   	push   %ebp
   1161d:	89 e5                	mov    %esp,%ebp
   1161f:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11622:	8b 45 08             	mov    0x8(%ebp),%eax
   11625:	8b 55 0c             	mov    0xc(%ebp),%edx
   11628:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1162a:	8b 45 08             	mov    0x8(%ebp),%eax
   1162d:	83 c0 04             	add    $0x4,%eax
   11630:	83 ec 0c             	sub    $0xc,%esp
   11633:	50                   	push   %eax
   11634:	e8 e0 06 00 00       	call   11d19 <list_init>
   11639:	83 c4 10             	add    $0x10,%esp
}
   1163c:	90                   	nop
   1163d:	c9                   	leave  
   1163e:	c3                   	ret    

0001163f <sem_wait>:

void sem_wait (sem_t *sem) {
   1163f:	55                   	push   %ebp
   11640:	89 e5                	mov    %esp,%ebp
   11642:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   11645:	e8 42 fc ff ff       	call   1128c <irq_enter_protection>
   1164a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   1164d:	8b 45 08             	mov    0x8(%ebp),%eax
   11650:	8b 00                	mov    (%eax),%eax
   11652:	85 c0                	test   %eax,%eax
   11654:	7e 0f                	jle    11665 <sem_wait+0x26>
        sem->count--;
   11656:	8b 45 08             	mov    0x8(%ebp),%eax
   11659:	8b 00                	mov    (%eax),%eax
   1165b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1165e:	8b 45 08             	mov    0x8(%ebp),%eax
   11661:	89 10                	mov    %edx,(%eax)
   11663:	eb 34                	jmp    11699 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   11665:	e8 09 f0 ff ff       	call   10673 <task_current>
   1166a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   1166d:	83 ec 0c             	sub    $0xc,%esp
   11670:	ff 75 f0             	pushl  -0x10(%ebp)
   11673:	e8 8d ef ff ff       	call   10605 <task_set_block>
   11678:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   1167b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1167e:	8d 50 38             	lea    0x38(%eax),%edx
   11681:	8b 45 08             	mov    0x8(%ebp),%eax
   11684:	83 c0 04             	add    $0x4,%eax
   11687:	83 ec 08             	sub    $0x8,%esp
   1168a:	52                   	push   %edx
   1168b:	50                   	push   %eax
   1168c:	e8 0d 07 00 00       	call   11d9e <list_insert_last>
   11691:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11694:	e8 e4 ef ff ff       	call   1067d <task_dispatch>
    }

    irq_leave_protection(state);
   11699:	83 ec 0c             	sub    $0xc,%esp
   1169c:	ff 75 f4             	pushl  -0xc(%ebp)
   1169f:	e8 00 fc ff ff       	call   112a4 <irq_leave_protection>
   116a4:	83 c4 10             	add    $0x10,%esp

}
   116a7:	90                   	nop
   116a8:	c9                   	leave  
   116a9:	c3                   	ret    

000116aa <sem_notify>:
void sem_notify (sem_t *sem) {
   116aa:	55                   	push   %ebp
   116ab:	89 e5                	mov    %esp,%ebp
   116ad:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   116b0:	e8 d7 fb ff ff       	call   1128c <irq_enter_protection>
   116b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (list_count(&sem->wait_list)) {
   116b8:	8b 45 08             	mov    0x8(%ebp),%eax
   116bb:	83 c0 04             	add    $0x4,%eax
   116be:	83 ec 0c             	sub    $0xc,%esp
   116c1:	50                   	push   %eax
   116c2:	e8 4a ff ff ff       	call   11611 <list_count>
   116c7:	83 c4 10             	add    $0x10,%esp
   116ca:	85 c0                	test   %eax,%eax
   116cc:	74 40                	je     1170e <sem_notify+0x64>
        list_node_t * node = list_remove_first(&sem->wait_list);
   116ce:	8b 45 08             	mov    0x8(%ebp),%eax
   116d1:	83 c0 04             	add    $0x4,%eax
   116d4:	83 ec 0c             	sub    $0xc,%esp
   116d7:	50                   	push   %eax
   116d8:	e8 25 07 00 00       	call   11e02 <list_remove_first>
   116dd:	83 c4 10             	add    $0x10,%esp
   116e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node,task_t,wait_node);
   116e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   116e7:	74 08                	je     116f1 <sem_notify+0x47>
   116e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116ec:	83 e8 38             	sub    $0x38,%eax
   116ef:	eb 05                	jmp    116f6 <sem_notify+0x4c>
   116f1:	b8 00 00 00 00       	mov    $0x0,%eax
   116f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   116f9:	83 ec 0c             	sub    $0xc,%esp
   116fc:	ff 75 ec             	pushl  -0x14(%ebp)
   116ff:	e8 cd ee ff ff       	call   105d1 <task_set_ready>
   11704:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11707:	e8 71 ef ff ff       	call   1067d <task_dispatch>
   1170c:	eb 0d                	jmp    1171b <sem_notify+0x71>
    } else {
        sem->count++;
   1170e:	8b 45 08             	mov    0x8(%ebp),%eax
   11711:	8b 00                	mov    (%eax),%eax
   11713:	8d 50 01             	lea    0x1(%eax),%edx
   11716:	8b 45 08             	mov    0x8(%ebp),%eax
   11719:	89 10                	mov    %edx,(%eax)
    }
    
    irq_leave_protection(state);
   1171b:	83 ec 0c             	sub    $0xc,%esp
   1171e:	ff 75 f4             	pushl  -0xc(%ebp)
   11721:	e8 7e fb ff ff       	call   112a4 <irq_leave_protection>
   11726:	83 c4 10             	add    $0x10,%esp
}
   11729:	90                   	nop
   1172a:	c9                   	leave  
   1172b:	c3                   	ret    

0001172c <sem_count>:


int sem_count (sem_t *sem) {
   1172c:	55                   	push   %ebp
   1172d:	89 e5                	mov    %esp,%ebp
   1172f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11732:	e8 55 fb ff ff       	call   1128c <irq_enter_protection>
   11737:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;    
   1173a:	8b 45 08             	mov    0x8(%ebp),%eax
   1173d:	8b 00                	mov    (%eax),%eax
   1173f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   11742:	83 ec 0c             	sub    $0xc,%esp
   11745:	ff 75 f4             	pushl  -0xc(%ebp)
   11748:	e8 57 fb ff ff       	call   112a4 <irq_leave_protection>
   1174d:	83 c4 10             	add    $0x10,%esp

    return count;    
   11750:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   11753:	c9                   	leave  
   11754:	c3                   	ret    

00011755 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   11755:	55                   	push   %ebp
   11756:	89 e5                	mov    %esp,%ebp
    return bit_count / 8;
   11758:	8b 45 08             	mov    0x8(%ebp),%eax
   1175b:	8d 50 07             	lea    0x7(%eax),%edx
   1175e:	85 c0                	test   %eax,%eax
   11760:	0f 48 c2             	cmovs  %edx,%eax
   11763:	c1 f8 03             	sar    $0x3,%eax
}
   11766:	5d                   	pop    %ebp
   11767:	c3                   	ret    

00011768 <bitmap_init>:
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   11768:	55                   	push   %ebp
   11769:	89 e5                	mov    %esp,%ebp
   1176b:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1176e:	8b 45 08             	mov    0x8(%ebp),%eax
   11771:	8b 55 10             	mov    0x10(%ebp),%edx
   11774:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11776:	8b 45 08             	mov    0x8(%ebp),%eax
   11779:	8b 55 0c             	mov    0xc(%ebp),%edx
   1177c:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   1177f:	8b 45 08             	mov    0x8(%ebp),%eax
   11782:	8b 00                	mov    (%eax),%eax
   11784:	50                   	push   %eax
   11785:	e8 cb ff ff ff       	call   11755 <bitmap_byte_count>
   1178a:	83 c4 04             	add    $0x4,%esp
   1178d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   11790:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11794:	74 07                	je     1179d <bitmap_init+0x35>
   11796:	ba ff 00 00 00       	mov    $0xff,%edx
   1179b:	eb 05                	jmp    117a2 <bitmap_init+0x3a>
   1179d:	ba 00 00 00 00       	mov    $0x0,%edx
   117a2:	8b 45 08             	mov    0x8(%ebp),%eax
   117a5:	8b 40 04             	mov    0x4(%eax),%eax
   117a8:	83 ec 04             	sub    $0x4,%esp
   117ab:	ff 75 f4             	pushl  -0xc(%ebp)
   117ae:	52                   	push   %edx
   117af:	50                   	push   %eax
   117b0:	e8 c8 01 00 00       	call   1197d <kernel_memset>
   117b5:	83 c4 10             	add    $0x10,%esp
   117b8:	90                   	nop
   117b9:	c9                   	leave  
   117ba:	c3                   	ret    

000117bb <hlt>:
static inline void hlt (void) {
   117bb:	55                   	push   %ebp
   117bc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   117be:	f4                   	hlt    
}
   117bf:	90                   	nop
   117c0:	5d                   	pop    %ebp
   117c1:	c3                   	ret    

000117c2 <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char * dest,const char *src) {
   117c2:	55                   	push   %ebp
   117c3:	89 e5                	mov    %esp,%ebp
    if (!dest || !src){
   117c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117c9:	74 3b                	je     11806 <kernel_strcpy+0x44>
   117cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   117cf:	74 35                	je     11806 <kernel_strcpy+0x44>
        return;
    }
    while(*dest && *src) {
   117d1:	eb 17                	jmp    117ea <kernel_strcpy+0x28>
        *dest++ = *src++;
   117d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   117d6:	8d 42 01             	lea    0x1(%edx),%eax
   117d9:	89 45 0c             	mov    %eax,0xc(%ebp)
   117dc:	8b 45 08             	mov    0x8(%ebp),%eax
   117df:	8d 48 01             	lea    0x1(%eax),%ecx
   117e2:	89 4d 08             	mov    %ecx,0x8(%ebp)
   117e5:	0f b6 12             	movzbl (%edx),%edx
   117e8:	88 10                	mov    %dl,(%eax)
    while(*dest && *src) {
   117ea:	8b 45 08             	mov    0x8(%ebp),%eax
   117ed:	0f b6 00             	movzbl (%eax),%eax
   117f0:	84 c0                	test   %al,%al
   117f2:	74 0a                	je     117fe <kernel_strcpy+0x3c>
   117f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   117f7:	0f b6 00             	movzbl (%eax),%eax
   117fa:	84 c0                	test   %al,%al
   117fc:	75 d5                	jne    117d3 <kernel_strcpy+0x11>
    }

    *dest = '\0';
   117fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11801:	c6 00 00             	movb   $0x0,(%eax)
   11804:	eb 01                	jmp    11807 <kernel_strcpy+0x45>
        return;
   11806:	90                   	nop
}
   11807:	5d                   	pop    %ebp
   11808:	c3                   	ret    

00011809 <kernel_strncpy>:
void kernel_strncpy(char * dest,const char *src,int size) {
   11809:	55                   	push   %ebp
   1180a:	89 e5                	mov    %esp,%ebp
   1180c:	83 ec 10             	sub    $0x10,%esp
        if (!dest || !src || !size){
   1180f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11813:	74 61                	je     11876 <kernel_strncpy+0x6d>
   11815:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11819:	74 5b                	je     11876 <kernel_strncpy+0x6d>
   1181b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1181f:	74 55                	je     11876 <kernel_strncpy+0x6d>
        return;
    }
    char * d = dest;
   11821:	8b 45 08             	mov    0x8(%ebp),%eax
   11824:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   11827:	8b 45 0c             	mov    0xc(%ebp),%eax
   1182a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   1182d:	eb 17                	jmp    11846 <kernel_strncpy+0x3d>
        *d++ = *s++;
   1182f:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11832:	8d 42 01             	lea    0x1(%edx),%eax
   11835:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11838:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1183b:	8d 48 01             	lea    0x1(%eax),%ecx
   1183e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11841:	0f b6 12             	movzbl (%edx),%edx
   11844:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   11846:	8b 45 10             	mov    0x10(%ebp),%eax
   11849:	8d 50 ff             	lea    -0x1(%eax),%edx
   1184c:	89 55 10             	mov    %edx,0x10(%ebp)
   1184f:	85 c0                	test   %eax,%eax
   11851:	7e 0a                	jle    1185d <kernel_strncpy+0x54>
   11853:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11856:	0f b6 00             	movzbl (%eax),%eax
   11859:	84 c0                	test   %al,%al
   1185b:	75 d2                	jne    1182f <kernel_strncpy+0x26>
    }
    if (size == 0) {
   1185d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11861:	75 0b                	jne    1186e <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11863:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11866:	83 e8 01             	sub    $0x1,%eax
   11869:	c6 00 00             	movb   $0x0,(%eax)
   1186c:	eb 09                	jmp    11877 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   1186e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11871:	c6 00 00             	movb   $0x0,(%eax)
   11874:	eb 01                	jmp    11877 <kernel_strncpy+0x6e>
        return;
   11876:	90                   	nop
    }
}
   11877:	c9                   	leave  
   11878:	c3                   	ret    

00011879 <kernel_strncmp>:
// 不同返回 -1
int kernel_strncmp(const char * s1,const char * s2,int size){
   11879:	55                   	push   %ebp
   1187a:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2){
   1187c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11880:	74 06                	je     11888 <kernel_strncmp+0xf>
   11882:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11886:	75 0f                	jne    11897 <kernel_strncmp+0x1e>
        return -1;
   11888:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1188d:	eb 62                	jmp    118f1 <kernel_strncmp+0x78>
    }
    while(*s1 && *s2 &&(*s1 == *s2) && size){
        s1++;
   1188f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11893:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 &&(*s1 == *s2) && size){
   11897:	8b 45 08             	mov    0x8(%ebp),%eax
   1189a:	0f b6 00             	movzbl (%eax),%eax
   1189d:	84 c0                	test   %al,%al
   1189f:	74 20                	je     118c1 <kernel_strncmp+0x48>
   118a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   118a4:	0f b6 00             	movzbl (%eax),%eax
   118a7:	84 c0                	test   %al,%al
   118a9:	74 16                	je     118c1 <kernel_strncmp+0x48>
   118ab:	8b 45 08             	mov    0x8(%ebp),%eax
   118ae:	0f b6 10             	movzbl (%eax),%edx
   118b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   118b4:	0f b6 00             	movzbl (%eax),%eax
   118b7:	38 c2                	cmp    %al,%dl
   118b9:	75 06                	jne    118c1 <kernel_strncmp+0x48>
   118bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   118bf:	75 ce                	jne    1188f <kernel_strncmp+0x16>
    }    
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   118c1:	8b 45 08             	mov    0x8(%ebp),%eax
   118c4:	0f b6 00             	movzbl (%eax),%eax
   118c7:	84 c0                	test   %al,%al
   118c9:	74 21                	je     118ec <kernel_strncmp+0x73>
   118cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   118ce:	0f b6 00             	movzbl (%eax),%eax
   118d1:	84 c0                	test   %al,%al
   118d3:	74 17                	je     118ec <kernel_strncmp+0x73>
   118d5:	8b 45 08             	mov    0x8(%ebp),%eax
   118d8:	0f b6 10             	movzbl (%eax),%edx
   118db:	8b 45 0c             	mov    0xc(%ebp),%eax
   118de:	0f b6 00             	movzbl (%eax),%eax
   118e1:	38 c2                	cmp    %al,%dl
   118e3:	74 07                	je     118ec <kernel_strncmp+0x73>
   118e5:	b8 01 00 00 00       	mov    $0x1,%eax
   118ea:	eb 05                	jmp    118f1 <kernel_strncmp+0x78>
   118ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
   118f1:	5d                   	pop    %ebp
   118f2:	c3                   	ret    

000118f3 <kernel_strlen>:
int kernel_strlen(const char * str){
   118f3:	55                   	push   %ebp
   118f4:	89 e5                	mov    %esp,%ebp
   118f6:	83 ec 10             	sub    $0x10,%esp
    if (!str){
   118f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118fd:	75 07                	jne    11906 <kernel_strlen+0x13>
        return 0;
   118ff:	b8 00 00 00 00       	mov    $0x0,%eax
   11904:	eb 26                	jmp    1192c <kernel_strlen+0x39>
    }

    const char * c = str;
   11906:	8b 45 08             	mov    0x8(%ebp),%eax
   11909:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   1190c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11913:	eb 04                	jmp    11919 <kernel_strlen+0x26>
        len++;
   11915:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   11919:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1191c:	8d 50 01             	lea    0x1(%eax),%edx
   1191f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11922:	0f b6 00             	movzbl (%eax),%eax
   11925:	84 c0                	test   %al,%al
   11927:	75 ec                	jne    11915 <kernel_strlen+0x22>
    }
    return len;
   11929:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1192c:	c9                   	leave  
   1192d:	c3                   	ret    

0001192e <kernel_memcpy>:
void kernel_memcpy(void * dest,void *src,int size){
   1192e:	55                   	push   %ebp
   1192f:	89 e5                	mov    %esp,%ebp
   11931:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11934:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11938:	74 40                	je     1197a <kernel_memcpy+0x4c>
   1193a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1193e:	74 3a                	je     1197a <kernel_memcpy+0x4c>
   11940:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11944:	74 34                	je     1197a <kernel_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   11946:	8b 45 0c             	mov    0xc(%ebp),%eax
   11949:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   1194c:	8b 45 08             	mov    0x8(%ebp),%eax
   1194f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   11952:	eb 17                	jmp    1196b <kernel_memcpy+0x3d>
        *d++ = *s++;
   11954:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11957:	8d 42 01             	lea    0x1(%edx),%eax
   1195a:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1195d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11960:	8d 48 01             	lea    0x1(%eax),%ecx
   11963:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11966:	0f b6 12             	movzbl (%edx),%edx
   11969:	88 10                	mov    %dl,(%eax)
    while(size--){
   1196b:	8b 45 10             	mov    0x10(%ebp),%eax
   1196e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11971:	89 55 10             	mov    %edx,0x10(%ebp)
   11974:	85 c0                	test   %eax,%eax
   11976:	75 dc                	jne    11954 <kernel_memcpy+0x26>
   11978:	eb 01                	jmp    1197b <kernel_memcpy+0x4d>
        return;
   1197a:	90                   	nop
    }

}
   1197b:	c9                   	leave  
   1197c:	c3                   	ret    

0001197d <kernel_memset>:
void kernel_memset(void * dest, uint8_t v,int size){
   1197d:	55                   	push   %ebp
   1197e:	89 e5                	mov    %esp,%ebp
   11980:	83 ec 14             	sub    $0x14,%esp
   11983:	8b 45 0c             	mov    0xc(%ebp),%eax
   11986:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size){
   11989:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1198d:	74 2c                	je     119bb <kernel_memset+0x3e>
   1198f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11993:	74 26                	je     119bb <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   11995:	8b 45 08             	mov    0x8(%ebp),%eax
   11998:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   1199b:	eb 0f                	jmp    119ac <kernel_memset+0x2f>
       *d++ = v; 
   1199d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   119a0:	8d 50 01             	lea    0x1(%eax),%edx
   119a3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   119a6:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   119aa:	88 10                	mov    %dl,(%eax)
    while(size--){
   119ac:	8b 45 10             	mov    0x10(%ebp),%eax
   119af:	8d 50 ff             	lea    -0x1(%eax),%edx
   119b2:	89 55 10             	mov    %edx,0x10(%ebp)
   119b5:	85 c0                	test   %eax,%eax
   119b7:	75 e4                	jne    1199d <kernel_memset+0x20>
   119b9:	eb 01                	jmp    119bc <kernel_memset+0x3f>
        return;
   119bb:	90                   	nop
    }
}
   119bc:	c9                   	leave  
   119bd:	c3                   	ret    

000119be <kernel_memcmp>:
// 不同返回 -1
int kernel_memcmp(void * d1,void *d2,int size){
   119be:	55                   	push   %ebp
   119bf:	89 e5                	mov    %esp,%ebp
   119c1:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   119c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119c8:	74 0c                	je     119d6 <kernel_memcmp+0x18>
   119ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   119ce:	74 06                	je     119d6 <kernel_memcmp+0x18>
   119d0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   119d4:	75 07                	jne    119dd <kernel_memcmp+0x1f>
        return -1;
   119d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   119db:	eb 43                	jmp    11a20 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   119dd:	8b 45 08             	mov    0x8(%ebp),%eax
   119e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t*)d2;
   119e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   119e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   119e9:	eb 23                	jmp    11a0e <kernel_memcmp+0x50>
        if(*p_d1++ != *p_d2++){
   119eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   119ee:	8d 50 01             	lea    0x1(%eax),%edx
   119f1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   119f4:	0f b6 08             	movzbl (%eax),%ecx
   119f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   119fa:	8d 50 01             	lea    0x1(%eax),%edx
   119fd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11a00:	0f b6 00             	movzbl (%eax),%eax
   11a03:	38 c1                	cmp    %al,%cl
   11a05:	74 07                	je     11a0e <kernel_memcmp+0x50>
            return -1;
   11a07:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11a0c:	eb 12                	jmp    11a20 <kernel_memcmp+0x62>
    while(size--){
   11a0e:	8b 45 10             	mov    0x10(%ebp),%eax
   11a11:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a14:	89 55 10             	mov    %edx,0x10(%ebp)
   11a17:	85 c0                	test   %eax,%eax
   11a19:	75 d0                	jne    119eb <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11a1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11a20:	c9                   	leave  
   11a21:	c3                   	ret    

00011a22 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buf,const char * fmt,...){
   11a22:	55                   	push   %ebp
   11a23:	89 e5                	mov    %esp,%ebp
   11a25:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args,fmt);
   11a28:	8d 45 10             	lea    0x10(%ebp),%eax
   11a2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf,fmt,args);
   11a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a31:	83 ec 04             	sub    $0x4,%esp
   11a34:	50                   	push   %eax
   11a35:	ff 75 0c             	pushl  0xc(%ebp)
   11a38:	ff 75 08             	pushl  0x8(%ebp)
   11a3b:	e8 45 01 00 00       	call   11b85 <kernel_vsprintf>
   11a40:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11a43:	90                   	nop
   11a44:	c9                   	leave  
   11a45:	c3                   	ret    

00011a46 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   11a46:	55                   	push   %ebp
   11a47:	89 e5                	mov    %esp,%ebp
   11a49:	53                   	push   %ebx
   11a4a:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11a4d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a50:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11a53:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a56:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   11a59:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11a5d:	74 1d                	je     11a7c <kernel_itoa+0x36>
   11a5f:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11a63:	74 17                	je     11a7c <kernel_itoa+0x36>
   11a65:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11a69:	74 11                	je     11a7c <kernel_itoa+0x36>
   11a6b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11a6f:	74 0b                	je     11a7c <kernel_itoa+0x36>
        *p = '\0';
   11a71:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11a74:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11a77:	e9 03 01 00 00       	jmp    11b7f <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11a7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   11a83:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11a87:	79 19                	jns    11aa2 <kernel_itoa+0x5c>
   11a89:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11a8d:	75 13                	jne    11aa2 <kernel_itoa+0x5c>
        *p++ = '-';
   11a8f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11a92:	8d 50 01             	lea    0x1(%eax),%edx
   11a95:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11a98:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11a9b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   11aa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11aa6:	74 3b                	je     11ae3 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   11aa8:	8b 0d 28 24 01 00    	mov    0x12428,%ecx
   11aae:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ab1:	99                   	cltd   
   11ab2:	f7 7d 10             	idivl  0x10(%ebp)
   11ab5:	89 d0                	mov    %edx,%eax
   11ab7:	83 c0 0f             	add    $0xf,%eax
   11aba:	01 c8                	add    %ecx,%eax
   11abc:	0f b6 00             	movzbl (%eax),%eax
   11abf:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   11ac2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11ac5:	8d 50 01             	lea    0x1(%eax),%edx
   11ac8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11acb:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11acf:	88 10                	mov    %dl,(%eax)
            num /= base;
   11ad1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ad4:	99                   	cltd   
   11ad5:	f7 7d 10             	idivl  0x10(%ebp)
   11ad8:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11adb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11adf:	75 c7                	jne    11aa8 <kernel_itoa+0x62>
   11ae1:	eb 4b                	jmp    11b2e <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   11ae3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ae6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   11ae9:	8b 0d 28 24 01 00    	mov    0x12428,%ecx
   11aef:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11af2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11af5:	ba 00 00 00 00       	mov    $0x0,%edx
   11afa:	f7 f3                	div    %ebx
   11afc:	89 d0                	mov    %edx,%eax
   11afe:	83 c0 0f             	add    $0xf,%eax
   11b01:	01 c8                	add    %ecx,%eax
   11b03:	0f b6 00             	movzbl (%eax),%eax
   11b06:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11b09:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b0c:	8d 50 01             	lea    0x1(%eax),%edx
   11b0f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b12:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11b16:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11b18:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b1e:	ba 00 00 00 00       	mov    $0x0,%edx
   11b23:	f7 f3                	div    %ebx
   11b25:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11b28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b2c:	75 bb                	jne    11ae9 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11b2e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b31:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b34:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b37:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   11b3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11b3e:	74 08                	je     11b48 <kernel_itoa+0x102>
   11b40:	8b 45 08             	mov    0x8(%ebp),%eax
   11b43:	83 c0 01             	add    $0x1,%eax
   11b46:	eb 03                	jmp    11b4b <kernel_itoa+0x105>
   11b48:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   11b4e:	eb 27                	jmp    11b77 <kernel_itoa+0x131>
        char ch = *start;
   11b50:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b53:	0f b6 00             	movzbl (%eax),%eax
   11b56:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11b59:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b5c:	0f b6 10             	movzbl (%eax),%edx
   11b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b62:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11b64:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b67:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b6a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b6d:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11b71:	88 10                	mov    %dl,(%eax)
        start++;
   11b73:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   11b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b7a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11b7d:	72 d1                	jb     11b50 <kernel_itoa+0x10a>
    }
}
   11b7f:	83 c4 20             	add    $0x20,%esp
   11b82:	5b                   	pop    %ebx
   11b83:	5d                   	pop    %ebp
   11b84:	c3                   	ret    

00011b85 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
// "version: %s","1.0.0"
void kernel_vsprintf(char * buf,const char * fmt,va_list args) {
   11b85:	55                   	push   %ebp
   11b86:	89 e5                	mov    %esp,%ebp
   11b88:	83 ec 20             	sub    $0x20,%esp
    // 状态机
    enum{NORMAL,READ_FMT} state = NORMAL;
   11b8b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    
    char * curr = buf;
   11b92:	8b 45 08             	mov    0x8(%ebp),%eax
   11b95:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while ((ch = *fmt++)) {
   11b98:	e9 17 01 00 00       	jmp    11cb4 <kernel_vsprintf+0x12f>
        switch(state) {
   11b9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ba0:	85 c0                	test   %eax,%eax
   11ba2:	74 0a                	je     11bae <kernel_vsprintf+0x29>
   11ba4:	83 f8 01             	cmp    $0x1,%eax
   11ba7:	74 2b                	je     11bd4 <kernel_vsprintf+0x4f>
   11ba9:	e9 06 01 00 00       	jmp    11cb4 <kernel_vsprintf+0x12f>
            case NORMAL:
                if(ch == '%') {
   11bae:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11bb2:	75 0c                	jne    11bc0 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   11bb4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11bbb:	e9 f4 00 00 00       	jmp    11cb4 <kernel_vsprintf+0x12f>
                }else{
                    *curr++ = ch;
   11bc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11bc3:	8d 50 01             	lea    0x1(%eax),%edx
   11bc6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11bc9:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11bcd:	88 10                	mov    %dl,(%eax)
                }
                break;
   11bcf:	e9 e0 00 00 00       	jmp    11cb4 <kernel_vsprintf+0x12f>

            case READ_FMT:
                
                if (ch == 's') {
   11bd4:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11bd8:	75 47                	jne    11c21 <kernel_vsprintf+0x9c>
                    const char * str = va_arg(args,char *); // 反复调用va_arg 取变量
   11bda:	8b 45 10             	mov    0x10(%ebp),%eax
   11bdd:	8d 50 04             	lea    0x4(%eax),%edx
   11be0:	89 55 10             	mov    %edx,0x10(%ebp)
   11be3:	8b 00                	mov    (%eax),%eax
   11be5:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   11be8:	ff 75 f4             	pushl  -0xc(%ebp)
   11beb:	e8 03 fd ff ff       	call   118f3 <kernel_strlen>
   11bf0:	83 c4 04             	add    $0x4,%esp
   11bf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while(len--) {
   11bf6:	eb 17                	jmp    11c0f <kernel_vsprintf+0x8a>
                        *curr++ = *str++;
   11bf8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11bfb:	8d 42 01             	lea    0x1(%edx),%eax
   11bfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11c01:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11c04:	8d 48 01             	lea    0x1(%eax),%ecx
   11c07:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11c0a:	0f b6 12             	movzbl (%edx),%edx
   11c0d:	88 10                	mov    %dl,(%eax)
                    while(len--) {
   11c0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c12:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c15:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11c18:	85 c0                	test   %eax,%eax
   11c1a:	75 dc                	jne    11bf8 <kernel_vsprintf+0x73>
   11c1c:	e9 8b 00 00 00       	jmp    11cac <kernel_vsprintf+0x127>
                    }
                }else if(ch == 'd'){
   11c21:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11c25:	75 2e                	jne    11c55 <kernel_vsprintf+0xd0>
                    int num = va_arg(args,int);
   11c27:	8b 45 10             	mov    0x10(%ebp),%eax
   11c2a:	8d 50 04             	lea    0x4(%eax),%edx
   11c2d:	89 55 10             	mov    %edx,0x10(%ebp)
   11c30:	8b 00                	mov    (%eax),%eax
   11c32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr,num,10);
   11c35:	6a 0a                	push   $0xa
   11c37:	ff 75 e4             	pushl  -0x1c(%ebp)
   11c3a:	ff 75 f8             	pushl  -0x8(%ebp)
   11c3d:	e8 04 fe ff ff       	call   11a46 <kernel_itoa>
   11c42:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   11c45:	ff 75 f8             	pushl  -0x8(%ebp)
   11c48:	e8 a6 fc ff ff       	call   118f3 <kernel_strlen>
   11c4d:	83 c4 04             	add    $0x4,%esp
   11c50:	01 45 f8             	add    %eax,-0x8(%ebp)
   11c53:	eb 57                	jmp    11cac <kernel_vsprintf+0x127>
                }else if(ch == 'x'){
   11c55:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11c59:	75 2e                	jne    11c89 <kernel_vsprintf+0x104>
                    int num = va_arg(args,int);
   11c5b:	8b 45 10             	mov    0x10(%ebp),%eax
   11c5e:	8d 50 04             	lea    0x4(%eax),%edx
   11c61:	89 55 10             	mov    %edx,0x10(%ebp)
   11c64:	8b 00                	mov    (%eax),%eax
   11c66:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr,num,16);
   11c69:	6a 10                	push   $0x10
   11c6b:	ff 75 e8             	pushl  -0x18(%ebp)
   11c6e:	ff 75 f8             	pushl  -0x8(%ebp)
   11c71:	e8 d0 fd ff ff       	call   11a46 <kernel_itoa>
   11c76:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);                    
   11c79:	ff 75 f8             	pushl  -0x8(%ebp)
   11c7c:	e8 72 fc ff ff       	call   118f3 <kernel_strlen>
   11c81:	83 c4 04             	add    $0x4,%esp
   11c84:	01 45 f8             	add    %eax,-0x8(%ebp)
   11c87:	eb 23                	jmp    11cac <kernel_vsprintf+0x127>
                }else if(ch == 'c'){
   11c89:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11c8d:	75 1d                	jne    11cac <kernel_vsprintf+0x127>
                    char c = va_arg(args,int);
   11c8f:	8b 45 10             	mov    0x10(%ebp),%eax
   11c92:	8d 50 04             	lea    0x4(%eax),%edx
   11c95:	89 55 10             	mov    %edx,0x10(%ebp)
   11c98:	8b 00                	mov    (%eax),%eax
   11c9a:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11c9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11ca0:	8d 50 01             	lea    0x1(%eax),%edx
   11ca3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11ca6:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11caa:	88 10                	mov    %dl,(%eax)
                }
                state = NORMAL;
   11cac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   11cb3:	90                   	nop
    while ((ch = *fmt++)) {
   11cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb7:	8d 50 01             	lea    0x1(%eax),%edx
   11cba:	89 55 0c             	mov    %edx,0xc(%ebp)
   11cbd:	0f b6 00             	movzbl (%eax),%eax
   11cc0:	88 45 ef             	mov    %al,-0x11(%ebp)
   11cc3:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11cc7:	0f 85 d0 fe ff ff    	jne    11b9d <kernel_vsprintf+0x18>
        }
    }
}
   11ccd:	90                   	nop
   11cce:	c9                   	leave  
   11ccf:	c3                   	ret    

00011cd0 <panic>:

void panic(const char * file,int line, const char * func, const char * cond){
   11cd0:	55                   	push   %ebp
   11cd1:	89 e5                	mov    %esp,%ebp
   11cd3:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s",cond);
   11cd6:	83 ec 08             	sub    $0x8,%esp
   11cd9:	ff 75 14             	pushl  0x14(%ebp)
   11cdc:	68 d8 23 01 00       	push   $0x123d8
   11ce1:	e8 f3 02 00 00       	call   11fd9 <log_printf>
   11ce6:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   11ce9:	ff 75 10             	pushl  0x10(%ebp)
   11cec:	ff 75 0c             	pushl  0xc(%ebp)
   11cef:	ff 75 08             	pushl  0x8(%ebp)
   11cf2:	68 ea 23 01 00       	push   $0x123ea
   11cf7:	e8 dd 02 00 00       	call   11fd9 <log_printf>
   11cfc:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   11cff:	e8 b7 fa ff ff       	call   117bb <hlt>
   11d04:	eb f9                	jmp    11cff <panic+0x2f>

00011d06 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11d06:	55                   	push   %ebp
   11d07:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11d09:	8b 45 08             	mov    0x8(%ebp),%eax
   11d0c:	8b 40 08             	mov    0x8(%eax),%eax
   11d0f:	85 c0                	test   %eax,%eax
   11d11:	0f 94 c0             	sete   %al
   11d14:	0f b6 c0             	movzbl %al,%eax
}
   11d17:	5d                   	pop    %ebp
   11d18:	c3                   	ret    

00011d19 <list_init>:
 */
#include "tools/list.h"
#include "comm/types.h"


void list_init (list_t * list) {
   11d19:	55                   	push   %ebp
   11d1a:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11d1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11d26:	8b 45 08             	mov    0x8(%ebp),%eax
   11d29:	8b 50 04             	mov    0x4(%eax),%edx
   11d2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d2f:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11d31:	8b 45 08             	mov    0x8(%ebp),%eax
   11d34:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11d3b:	90                   	nop
   11d3c:	5d                   	pop    %ebp
   11d3d:	c3                   	ret    

00011d3e <list_insert_first>:

void list_insert_first(list_t *list, list_node_t *node){
   11d3e:	55                   	push   %ebp
   11d3f:	89 e5                	mov    %esp,%ebp

    node->next = list->first;
   11d41:	8b 45 08             	mov    0x8(%ebp),%eax
   11d44:	8b 10                	mov    (%eax),%edx
   11d46:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d49:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11d4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   11d55:	ff 75 08             	pushl  0x8(%ebp)
   11d58:	e8 a9 ff ff ff       	call   11d06 <list_is_empty>
   11d5d:	83 c4 04             	add    $0x4,%esp
   11d60:	85 c0                	test   %eax,%eax
   11d62:	74 16                	je     11d7a <list_insert_first+0x3c>
        list->first = list->last = node;
   11d64:	8b 45 08             	mov    0x8(%ebp),%eax
   11d67:	8b 55 0c             	mov    0xc(%ebp),%edx
   11d6a:	89 50 04             	mov    %edx,0x4(%eax)
   11d6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d70:	8b 50 04             	mov    0x4(%eax),%edx
   11d73:	8b 45 08             	mov    0x8(%ebp),%eax
   11d76:	89 10                	mov    %edx,(%eax)
   11d78:	eb 12                	jmp    11d8c <list_insert_first+0x4e>
    } else {
        list->first->pre = node;
   11d7a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d7d:	8b 00                	mov    (%eax),%eax
   11d7f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11d82:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11d84:	8b 45 08             	mov    0x8(%ebp),%eax
   11d87:	8b 55 0c             	mov    0xc(%ebp),%edx
   11d8a:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11d8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8f:	8b 40 08             	mov    0x8(%eax),%eax
   11d92:	8d 50 01             	lea    0x1(%eax),%edx
   11d95:	8b 45 08             	mov    0x8(%ebp),%eax
   11d98:	89 50 08             	mov    %edx,0x8(%eax)
}
   11d9b:	90                   	nop
   11d9c:	c9                   	leave  
   11d9d:	c3                   	ret    

00011d9e <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11d9e:	55                   	push   %ebp
   11d9f:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11da1:	8b 45 08             	mov    0x8(%ebp),%eax
   11da4:	8b 50 04             	mov    0x4(%eax),%edx
   11da7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11daa:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   11dac:	8b 45 0c             	mov    0xc(%ebp),%eax
   11daf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   11db6:	ff 75 08             	pushl  0x8(%ebp)
   11db9:	e8 48 ff ff ff       	call   11d06 <list_is_empty>
   11dbe:	83 c4 04             	add    $0x4,%esp
   11dc1:	85 c0                	test   %eax,%eax
   11dc3:	74 16                	je     11ddb <list_insert_last+0x3d>
        list->first = list->last = node;
   11dc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc8:	8b 55 0c             	mov    0xc(%ebp),%edx
   11dcb:	89 50 04             	mov    %edx,0x4(%eax)
   11dce:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd1:	8b 50 04             	mov    0x4(%eax),%edx
   11dd4:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd7:	89 10                	mov    %edx,(%eax)
   11dd9:	eb 15                	jmp    11df0 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11ddb:	8b 45 08             	mov    0x8(%ebp),%eax
   11dde:	8b 40 04             	mov    0x4(%eax),%eax
   11de1:	8b 55 0c             	mov    0xc(%ebp),%edx
   11de4:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11de7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dea:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ded:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   11df0:	8b 45 08             	mov    0x8(%ebp),%eax
   11df3:	8b 40 08             	mov    0x8(%eax),%eax
   11df6:	8d 50 01             	lea    0x1(%eax),%edx
   11df9:	8b 45 08             	mov    0x8(%ebp),%eax
   11dfc:	89 50 08             	mov    %edx,0x8(%eax)
}
   11dff:	90                   	nop
   11e00:	c9                   	leave  
   11e01:	c3                   	ret    

00011e02 <list_remove_first>:


list_node_t * list_remove_first(list_t *list) {
   11e02:	55                   	push   %ebp
   11e03:	89 e5                	mov    %esp,%ebp
   11e05:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   11e08:	ff 75 08             	pushl  0x8(%ebp)
   11e0b:	e8 f6 fe ff ff       	call   11d06 <list_is_empty>
   11e10:	83 c4 04             	add    $0x4,%esp
   11e13:	85 c0                	test   %eax,%eax
   11e15:	74 07                	je     11e1e <list_remove_first+0x1c>
        return (list_node_t *)0;
   11e17:	b8 00 00 00 00       	mov    $0x0,%eax
   11e1c:	eb 5b                	jmp    11e79 <list_remove_first+0x77>
    }

    list_node_t * remove_node = list->first;
   11e1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e21:	8b 00                	mov    (%eax),%eax
   11e23:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   11e26:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e29:	8b 50 04             	mov    0x4(%eax),%edx
   11e2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2f:	89 10                	mov    %edx,(%eax)

    if (list->first ==  (list_node_t *)0) {
   11e31:	8b 45 08             	mov    0x8(%ebp),%eax
   11e34:	8b 00                	mov    (%eax),%eax
   11e36:	85 c0                	test   %eax,%eax
   11e38:	75 0c                	jne    11e46 <list_remove_first+0x44>
        list->last = (list_node_t *)0;
   11e3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e3d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e44:	eb 0c                	jmp    11e52 <list_remove_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t *)0;
   11e46:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e49:	8b 40 04             	mov    0x4(%eax),%eax
   11e4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   11e52:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e55:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e5f:	8b 50 04             	mov    0x4(%eax),%edx
   11e62:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e65:	89 10                	mov    %edx,(%eax)
    list->count--;
   11e67:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6a:	8b 40 08             	mov    0x8(%eax),%eax
   11e6d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e70:	8b 45 08             	mov    0x8(%ebp),%eax
   11e73:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11e76:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11e79:	c9                   	leave  
   11e7a:	c3                   	ret    

00011e7b <list_remove>:


list_node_t* list_remove(list_t *list, list_node_t *node) {
   11e7b:	55                   	push   %ebp
   11e7c:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   11e7e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e81:	8b 00                	mov    (%eax),%eax
   11e83:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11e86:	75 0b                	jne    11e93 <list_remove+0x18>
        list->first = node->next;
   11e88:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e8b:	8b 50 04             	mov    0x4(%eax),%edx
   11e8e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e91:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   11e93:	8b 45 08             	mov    0x8(%ebp),%eax
   11e96:	8b 40 04             	mov    0x4(%eax),%eax
   11e99:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11e9c:	75 0b                	jne    11ea9 <list_remove+0x2e>
        list->last = node->pre;
   11e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ea1:	8b 10                	mov    (%eax),%edx
   11ea3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ea6:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   11ea9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eac:	8b 00                	mov    (%eax),%eax
   11eae:	85 c0                	test   %eax,%eax
   11eb0:	74 0e                	je     11ec0 <list_remove+0x45>
        node->pre->next = node->next;
   11eb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eb5:	8b 00                	mov    (%eax),%eax
   11eb7:	8b 55 0c             	mov    0xc(%ebp),%edx
   11eba:	8b 52 04             	mov    0x4(%edx),%edx
   11ebd:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   11ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ec3:	8b 40 04             	mov    0x4(%eax),%eax
   11ec6:	85 c0                	test   %eax,%eax
   11ec8:	74 0d                	je     11ed7 <list_remove+0x5c>
        node->next->pre = node->pre;
   11eca:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ecd:	8b 40 04             	mov    0x4(%eax),%eax
   11ed0:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ed3:	8b 12                	mov    (%edx),%edx
   11ed5:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   11ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eda:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ee1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ee4:	8b 50 04             	mov    0x4(%eax),%edx
   11ee7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eea:	89 10                	mov    %edx,(%eax)

    list->count--;
   11eec:	8b 45 08             	mov    0x8(%ebp),%eax
   11eef:	8b 40 08             	mov    0x8(%eax),%eax
   11ef2:	8d 50 ff             	lea    -0x1(%eax),%edx
   11ef5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef8:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11efb:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11efe:	5d                   	pop    %ebp
   11eff:	c3                   	ret    

00011f00 <inb>:
static inline uint8_t inb(uint16_t port) {
   11f00:	55                   	push   %ebp
   11f01:	89 e5                	mov    %esp,%ebp
   11f03:	83 ec 14             	sub    $0x14,%esp
   11f06:	8b 45 08             	mov    0x8(%ebp),%eax
   11f09:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
   11f0d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11f11:	89 c2                	mov    %eax,%edx
   11f13:	ec                   	in     (%dx),%al
   11f14:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11f17:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11f1b:	c9                   	leave  
   11f1c:	c3                   	ret    

00011f1d <outb>:
static inline void outb(uint16_t port,uint8_t data){
   11f1d:	55                   	push   %ebp
   11f1e:	89 e5                	mov    %esp,%ebp
   11f20:	83 ec 08             	sub    $0x8,%esp
   11f23:	8b 55 08             	mov    0x8(%ebp),%edx
   11f26:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f29:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11f2d:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
   11f30:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f34:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11f38:	ee                   	out    %al,(%dx)
}
   11f39:	90                   	nop
   11f3a:	c9                   	leave  
   11f3b:	c3                   	ret    

00011f3c <log_init>:
static mutex_t mutex;

#define COM1_PORT 0x3f8

void log_init(void)
{
   11f3c:	55                   	push   %ebp
   11f3d:	89 e5                	mov    %esp,%ebp
   11f3f:	83 ec 08             	sub    $0x8,%esp

    mutex_init(&mutex);
   11f42:	83 ec 0c             	sub    $0xc,%esp
   11f45:	68 e4 52 01 00       	push   $0x152e4
   11f4a:	e8 46 f5 ff ff       	call   11495 <mutex_init>
   11f4f:	83 c4 10             	add    $0x10,%esp
    // 初始化串行接口
    outb(COM1_PORT + 1, 0x00);
   11f52:	83 ec 08             	sub    $0x8,%esp
   11f55:	6a 00                	push   $0x0
   11f57:	68 f9 03 00 00       	push   $0x3f9
   11f5c:	e8 bc ff ff ff       	call   11f1d <outb>
   11f61:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   11f64:	83 ec 08             	sub    $0x8,%esp
   11f67:	68 80 00 00 00       	push   $0x80
   11f6c:	68 fb 03 00 00       	push   $0x3fb
   11f71:	e8 a7 ff ff ff       	call   11f1d <outb>
   11f76:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   11f79:	83 ec 08             	sub    $0x8,%esp
   11f7c:	6a 03                	push   $0x3
   11f7e:	68 f8 03 00 00       	push   $0x3f8
   11f83:	e8 95 ff ff ff       	call   11f1d <outb>
   11f88:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11f8b:	83 ec 08             	sub    $0x8,%esp
   11f8e:	6a 00                	push   $0x0
   11f90:	68 f9 03 00 00       	push   $0x3f9
   11f95:	e8 83 ff ff ff       	call   11f1d <outb>
   11f9a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   11f9d:	83 ec 08             	sub    $0x8,%esp
   11fa0:	6a 03                	push   $0x3
   11fa2:	68 fb 03 00 00       	push   $0x3fb
   11fa7:	e8 71 ff ff ff       	call   11f1d <outb>
   11fac:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   11faf:	83 ec 08             	sub    $0x8,%esp
   11fb2:	68 c7 00 00 00       	push   $0xc7
   11fb7:	68 fa 03 00 00       	push   $0x3fa
   11fbc:	e8 5c ff ff ff       	call   11f1d <outb>
   11fc1:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   11fc4:	83 ec 08             	sub    $0x8,%esp
   11fc7:	6a 0f                	push   $0xf
   11fc9:	68 fc 03 00 00       	push   $0x3fc
   11fce:	e8 4a ff ff ff       	call   11f1d <outb>
   11fd3:	83 c4 10             	add    $0x10,%esp
}
   11fd6:	90                   	nop
   11fd7:	c9                   	leave  
   11fd8:	c3                   	ret    

00011fd9 <log_printf>:
// 支持可变参数
void log_printf(const char *fmt, ...)
{
   11fd9:	55                   	push   %ebp
   11fda:	89 e5                	mov    %esp,%ebp
   11fdc:	81 ec 98 00 00 00    	sub    $0x98,%esp

    // 缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11fe2:	83 ec 04             	sub    $0x4,%esp
   11fe5:	68 80 00 00 00       	push   $0x80
   11fea:	6a 00                	push   $0x0
   11fec:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11ff2:	50                   	push   %eax
   11ff3:	e8 85 f9 ff ff       	call   1197d <kernel_memset>
   11ff8:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   11ffb:	8d 45 0c             	lea    0xc(%ebp),%eax
   11ffe:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   12004:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1200a:	83 ec 04             	sub    $0x4,%esp
   1200d:	50                   	push   %eax
   1200e:	ff 75 08             	pushl  0x8(%ebp)
   12011:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12017:	50                   	push   %eax
   12018:	e8 68 fb ff ff       	call   11b85 <kernel_vsprintf>
   1201d:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   12020:	83 ec 0c             	sub    $0xc,%esp
   12023:	68 e4 52 01 00       	push   $0x152e4
   12028:	e8 96 f4 ff ff       	call   114c3 <mutex_lock>
   1202d:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   12030:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12036:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   12039:	eb 31                	jmp    1206c <log_printf+0x93>
    {
        while (inb(COM1_PORT + 5) & (1 << 6) == 0)
   1203b:	90                   	nop
   1203c:	83 ec 0c             	sub    $0xc,%esp
   1203f:	68 fd 03 00 00       	push   $0x3fd
   12044:	e8 b7 fe ff ff       	call   11f00 <inb>
   12049:	83 c4 10             	add    $0x10,%esp
            ;
        outb(COM1_PORT, *p++);
   1204c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1204f:	8d 50 01             	lea    0x1(%eax),%edx
   12052:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12055:	0f b6 00             	movzbl (%eax),%eax
   12058:	0f b6 c0             	movzbl %al,%eax
   1205b:	83 ec 08             	sub    $0x8,%esp
   1205e:	50                   	push   %eax
   1205f:	68 f8 03 00 00       	push   $0x3f8
   12064:	e8 b4 fe ff ff       	call   11f1d <outb>
   12069:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   1206c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1206f:	0f b6 00             	movzbl (%eax),%eax
   12072:	84 c0                	test   %al,%al
   12074:	75 c5                	jne    1203b <log_printf+0x62>
    }
    // 变列
    outb(COM1_PORT, '\r');
   12076:	83 ec 08             	sub    $0x8,%esp
   12079:	6a 0d                	push   $0xd
   1207b:	68 f8 03 00 00       	push   $0x3f8
   12080:	e8 98 fe ff ff       	call   11f1d <outb>
   12085:	83 c4 10             	add    $0x10,%esp
    // 变行
    outb(COM1_PORT, '\n');
   12088:	83 ec 08             	sub    $0x8,%esp
   1208b:	6a 0a                	push   $0xa
   1208d:	68 f8 03 00 00       	push   $0x3f8
   12092:	e8 86 fe ff ff       	call   11f1d <outb>
   12097:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   1209a:	83 ec 0c             	sub    $0xc,%esp
   1209d:	68 e4 52 01 00       	push   $0x152e4
   120a2:	e8 ad f4 ff ff       	call   11554 <mutex_unlock>
   120a7:	83 c4 10             	add    $0x10,%esp
}
   120aa:	90                   	nop
   120ab:	c9                   	leave  
   120ac:	c3                   	ret    
