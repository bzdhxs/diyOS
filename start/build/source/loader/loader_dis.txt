
E:/code/myos/start/build/source/loader/loader.elf:     file format elf32-i386
E:/code/myos/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000663 memsz 0x00000663 flags r-x
    LOAD off    0x00001664 vaddr 0x00009664 paddr 0x00009664 align 2**12
         filesz 0x00000018 memsz 0x00000070 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000625  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000003e  00008625  00008625  00001625  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009664  00009664  00001664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009680  00009680  0000167c  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001690  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ad  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000031e  00000000  00000000  00001f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002da  00000000  00000000  000022bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00002598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f1  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002be9  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00008625 l    d  .rodata	00000000 .rodata
00009664 l    d  .data	00000000 .data
00009680 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
00008107 l     F .text	0000003b show_msg
00008142 l     F .text	00000139 detect_memory
0000827b l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008330 l     F .text	0000001d inb
0000834d l     F .text	0000001f outb
0000836c l     F .text	0000001f inw
0000838b l     F .text	0000012f read_disk
000084ba l     F .text	0000011a reload_elf_file
000085d4 l     F .text	00000005 dile
0000830d g     F .text	00000023 loader_entry
00009664 g     O .data	00000018 gdt_table
000085d9 g     F .text	0000004c load_kernel
00009680 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000967c g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
0000967c g       .data	00000000 _edata
000096d4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
	.global _start 
	.extern loader_entry
	
_start:
//;跳转到loader_16 c代码里 完成loader的加载
	jmp  loader_entry
    8000:	e9 0a 03             	jmp    830d <loader_entry>

00008003 <protect_mode_entry>:
	.text
	.global protect_mode_entry
	.extern load_kernel

protect_mode_entry:
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs
    8011:	ea d9 85 00 00       	ljmp   $0x0,$0x85d9
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
#ifndef CPU_INSTR_H
#define CPU_INSTR_H
#include "types.h"

static inline uint8_t inb(uint16_t port) {
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    // inb al,dx  从I/O端口dx 读取一个字节
    uint8_t rv; 
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:

static inline void outb(uint16_t port,uint8_t data){
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    // outb al,dx  向I/O端口al ,写入一个字节(dx) data
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
    805d:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8063:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8069:	ee                   	out    %al,(%dx)
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:
    uint16_t rv; 
    __asm__ __volatile__("in %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
    return rv;
}

static inline void cli(void){
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");    
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:
static inline void sti(void){
    __asm__ __volatile__("sti");    
}


static inline void lgdt(uint32_t start,uint32_t size){
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }gdt;
    
    gdt.start32_16 = start >> 16;
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel 
    80ae:	66 c3                	retl   

000080b0 <read_cr0>:


static inline uint32_t read_cr0(void){
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__("mov %%cr0, %[v]":[v]"=r"(cr0));
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c6:	66 c9                	leavel 
    80c8:	66 c3                	retl   

000080ca <write_cr0>:


static inline void write_cr0(uint32_t v){
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp

    __asm__ __volatile__("mov %[v],%%cr0"::[v]"r"(v));
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
}
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl   

000080dc <far_jump>:


static inline void far_jump(uint32_t selector,uint32_t offset){
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = {offset,selector};
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
}
    8102:	90                   	nop
    8103:	66 c9                	leavel 
    8105:	66 c3                	retl   

00008107 <show_msg>:

#include "loader.h"

boot_info_t boot_info;		// 启动参数信息  用来存放检测出的内存信息

static void show_msg(const char *msg){
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    char c;

    while((c = *msg++) != '\0'){
    8110:	eb 0c                	jmp    811e <show_msg+0x17>
        //使用内联汇编显示字符串
        __asm__  __volatile__ (
    8112:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8118:	b4 0e                	mov    $0xe,%ah
    811a:	88 c0                	mov    %al,%al
    811c:	cd 10                	int    $0x10
    while((c = *msg++) != '\0'){
    811e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8123:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8128:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8132:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8136:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813b:	75 d5                	jne    8112 <show_msg+0xb>
            "mov $0xe,%%ah\n\t"
            "mov %[ch],%%al\n\t"
            "int $0x10"::[ch]"r"(c)
        );
    }
}
    813d:	90                   	nop
    813e:	66 c9                	leavel 
    8140:	66 c3                	retl   

00008142 <detect_memory>:

// 参考：https://wiki.osdev.org/Memory_Map_(x86)
// 1MB以下比较标准, 在1M以上会有差别
// 检测：https://wiki.osdev.org/Detecting_Memory_(x86)#BIOS_Function:_INT_0x15.2C_AH_.3D_0xC7

static void detect_memory(void){
    8142:	66 55                	push   %ebp
    8144:	66 89 e5             	mov    %esp,%ebp
    8147:	66 57                	push   %edi
    8149:	66 56                	push   %esi
    814b:	66 53                	push   %ebx
    814d:	66 83 ec 30          	sub    $0x30,%esp

    uint32_t contID = 0;
    8151:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8158:	00 00 
    SMAP_entry_t smap_entry;
    int signature, bytes;

    show_msg("try to detect memory:");
    815a:	66 68 25 86 00 00    	pushl  $0x8625
    8160:	66 e8 a1 ff ff ff    	calll  8107 <show_msg>
    8166:	66 83 c4 04          	add    $0x4,%esp

    boot_info.ram_region_count = 0;
    816a:	66 c7 06 d0 96 00 00 	movl   $0x0,-0x6930
    8171:	00 00 
    for(int i = 0;i < BOOT_RAM_REGION_MAX;i++){
    8173:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817a:	00 00 
    817c:	e9 e0 00             	jmp    825f <detect_memory+0x11d>
        
        SMAP_entry_t *entry = &smap_entry;
    817f:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8184:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

      __asm__ __volatile__("int  $0x15"
    8189:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    818f:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8194:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819a:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a0:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a5:	66 89 f7             	mov    %esi,%edi
    81a8:	cd 15                	int    $0x15
    81aa:	66 89 da             	mov    %ebx,%edx
    81ad:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b2:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81b7:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));

        if(signature != 0x534D4150){
    81bc:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c3:	4d 53 
    81c5:	74 13                	je     81da <detect_memory+0x98>
            show_msg("failed\n\t");
    81c7:	66 68 3b 86 00 00    	pushl  $0x863b
    81cd:	66 e8 34 ff ff ff    	calll  8107 <show_msg>
    81d3:	66 83 c4 04          	add    $0x4,%esp
            return;
    81d7:	e9 92 00             	jmp    826c <detect_memory+0x12a>
        }
        
        // todo: 20字节
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    81da:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e0:	7e 13                	jle    81f5 <detect_memory+0xb3>
    81e2:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81e7:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ec:	66 83 e0 01          	and    $0x1,%eax
    81f0:	66 85 c0             	test   %eax,%eax
    81f3:	74 63                	je     8258 <detect_memory+0x116>
			continue;
		}


        if (entry->Type == 1){
    81f5:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fa:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    81ff:	66 83 f8 01          	cmp    $0x1,%eax
    8203:	75 39                	jne    823e <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8205:	66 a1 d0 96          	mov    0x96d0,%eax
    8209:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    820e:	67 66 8b 12          	mov    (%edx),%edx
    8212:	67 66 89 14 c5 80 96 	mov    %edx,0x9680(,%eax,8)
    8219:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    821b:	66 a1 d0 96          	mov    0x96d0,%eax
    821f:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8224:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8229:	67 66 89 14 c5 84 96 	mov    %edx,0x9684(,%eax,8)
    8230:	00 00 
            boot_info.ram_region_count++;
    8232:	66 a1 d0 96          	mov    0x96d0,%eax
    8236:	66 83 c0 01          	add    $0x1,%eax
    823a:	66 a3 d0 96          	mov    %eax,0x96d0
        }

        // EBX=0表明读取完毕
        if (contID == 0){
    823e:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8244:	74 25                	je     826b <detect_memory+0x129>
            break;
        }

        show_msg("ok.\r\n");
    8246:	66 68 44 86 00 00    	pushl  $0x8644
    824c:	66 e8 b5 fe ff ff    	calll  8107 <show_msg>
    8252:	66 83 c4 04          	add    $0x4,%esp
    8256:	eb 01                	jmp    8259 <detect_memory+0x117>
			continue;
    8258:	90                   	nop
    for(int i = 0;i < BOOT_RAM_REGION_MAX;i++){
    8259:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    825f:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8265:	0f 8e 16 ff          	jle    817f <detect_memory+0x3d>
    8269:	eb 01                	jmp    826c <detect_memory+0x12a>
            break;
    826b:	90                   	nop

    }
}
    826c:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8271:	66 5b                	pop    %ebx
    8273:	66 5e                	pop    %esi
    8275:	66 5f                	pop    %edi
    8277:	66 5d                	pop    %ebp
    8279:	66 c3                	retl   

0000827b <enter_protect_mode>:
    {0xffff,0X0000,0X9200,0X00cf},
};


// 进入保护模式
static void enter_protect_mode(void){
    827b:	66 55                	push   %ebp
    827d:	66 89 e5             	mov    %esp,%ebp
    8280:	66 83 ec 10          	sub    $0x10,%esp
    // 关中断
    cli();
    8284:	66 e8 e5 fd ff ff    	calll  806f <cli>
    // 开启A20地址线，使得可访问1M以上空间
    // 使用的是Fast A20 Gate方式，见https://wiki.osdev.org/A20#Fast_A20_Gate
    uint8_t v = inb(0x92);
    828a:	66 68 92 00 00 00    	pushl  $0x92
    8290:	66 e8 82 fd ff ff    	calll  8018 <inb>
    8296:	66 83 c4 04          	add    $0x4,%esp
    829a:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92,v | 0x2);
    829e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a4:	66 83 c8 02          	or     $0x2,%eax
    82a8:	66 0f b6 c0          	movzbl %al,%eax
    82ac:	66 50                	push   %eax
    82ae:	66 68 92 00 00 00    	pushl  $0x92
    82b4:	66 e8 88 fd ff ff    	calll  8042 <outb>
    82ba:	66 83 c4 08          	add    $0x8,%esp

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
    82be:	66 b8 64 96 00 00    	mov    $0x9664,%eax
    82c4:	66 6a 18             	pushl  $0x18
    82c7:	66 50                	push   %eax
    82c9:	66 e8 ab fd ff ff    	calll  807a <lgdt>
    82cf:	66 83 c4 08          	add    $0x8,%esp

//  开启cr0 
    uint32_t cr0 = read_cr0();
    82d3:	66 e8 d7 fd ff ff    	calll  80b0 <read_cr0>
    82d9:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    
    write_cr0(cr0 | (1<<0));
    82de:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e3:	66 83 c8 01          	or     $0x1,%eax
    82e7:	66 50                	push   %eax
    82e9:	66 e8 db fd ff ff    	calll  80ca <write_cr0>
    82ef:	66 83 c4 04          	add    $0x4,%esp


// far_jump 跳转到 start.S 的 protect_mode_entry
    far_jump(8,(uint32_t)protect_mode_entry);
    82f3:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82f9:	66 50                	push   %eax
    82fb:	66 6a 08             	pushl  $0x8
    82fe:	66 e8 d8 fd ff ff    	calll  80dc <far_jump>
    8304:	66 83 c4 08          	add    $0x8,%esp

}
    8308:	90                   	nop
    8309:	66 c9                	leavel 
    830b:	66 c3                	retl   

0000830d <loader_entry>:


void loader_entry(void){
    830d:	66 55                	push   %ebp
    830f:	66 89 e5             	mov    %esp,%ebp
    show_msg(".......loading........\n\r");
    8312:	66 68 4a 86 00 00    	pushl  $0x864a
    8318:	66 e8 e9 fd ff ff    	calll  8107 <show_msg>
    831e:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8322:	66 e8 1a fe ff ff    	calll  8142 <detect_memory>
    enter_protect_mode();
    8328:	66 e8 4d ff ff ff    	calll  827b <enter_protect_mode>
    for(;;){}
    832e:	eb fe                	jmp    832e <loader_entry+0x21>

00008330 <inb>:
static inline uint8_t inb(uint16_t port) {
    8330:	55                   	push   %bp
    8331:	89 e5                	mov    %sp,%bp
    8333:	83 ec 14             	sub    $0x14,%sp
    8336:	8b 45 08             	mov    0x8(%di),%ax
    8339:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
    833d:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8341:	89 c2                	mov    %ax,%dx
    8343:	ec                   	in     (%dx),%al
    8344:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    8347:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    834b:	c9                   	leave  
    834c:	c3                   	ret    

0000834d <outb>:
static inline void outb(uint16_t port,uint8_t data){
    834d:	55                   	push   %bp
    834e:	89 e5                	mov    %sp,%bp
    8350:	83 ec 08             	sub    $0x8,%sp
    8353:	8b 55 08             	mov    0x8(%di),%dx
    8356:	8b 45 0c             	mov    0xc(%di),%ax
    8359:	66 89 55 fc          	mov    %edx,-0x4(%di)
    835d:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
    8360:	0f b7 55 fc          	movzww -0x4(%di),%dx
    8364:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    8368:	ee                   	out    %al,(%dx)
}
    8369:	90                   	nop
    836a:	c9                   	leave  
    836b:	c3                   	ret    

0000836c <inw>:
static inline uint16_t inw(uint16_t port){
    836c:	55                   	push   %bp
    836d:	89 e5                	mov    %sp,%bp
    836f:	83 ec 14             	sub    $0x14,%sp
    8372:	8b 45 08             	mov    0x8(%di),%ax
    8375:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("in %[p],%[v]":[v]"=a"(rv):[p]"d"(port));
    8379:	0f b7 45 ec          	movzww -0x14(%di),%ax
    837d:	89 c2                	mov    %ax,%dx
    837f:	66 ed                	in     (%dx),%eax
    8381:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return rv;
    8385:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    8389:	c9                   	leave  
    838a:	c3                   	ret    

0000838b <read_disk>:
/**
    使用LBA48位模式读取磁盘
	将内核数据存入 从100号磁盘开始 读入到内存0x100000
    参数设置参考手册
*/
static void read_disk(int sector,int sector_count,uint8_t *buf){
    838b:	55                   	push   %bp
    838c:	89 e5                	mov    %sp,%bp
    838e:	53                   	push   %bx
    838f:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, (uint8_t) (0xE0));
    8392:	68 e0 00             	push   $0xe0
    8395:	00 00                	add    %al,(%bx,%si)
    8397:	68 f6 01             	push   $0x1f6
    839a:	00 00                	add    %al,(%bx,%si)
    839c:	e8 ac ff             	call   834b <inb+0x1b>
    839f:	ff                   	(bad)  
    83a0:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F2, (uint8_t) (sector_count >> 8));
    83a4:	8b 45 0c             	mov    0xc(%di),%ax
    83a7:	c1 f8 08             	sar    $0x8,%ax
    83aa:	0f b6 c0             	movzbw %al,%ax
    83ad:	50                   	push   %ax
    83ae:	68 f2 01             	push   $0x1f2
    83b1:	00 00                	add    %al,(%bx,%si)
    83b3:	e8 95 ff             	call   834b <inb+0x1b>
    83b6:	ff                   	(bad)  
    83b7:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t) (sector >> 24));		// LBA参数的24~31位
    83bb:	8b 45 08             	mov    0x8(%di),%ax
    83be:	c1 f8 18             	sar    $0x18,%ax
    83c1:	0f b6 c0             	movzbw %al,%ax
    83c4:	50                   	push   %ax
    83c5:	68 f3 01             	push   $0x1f3
    83c8:	00 00                	add    %al,(%bx,%si)
    83ca:	e8 7e ff             	call   834b <inb+0x1b>
    83cd:	ff                   	(bad)  
    83ce:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t) (0));					// LBA参数的32~39位
    83d2:	6a 00                	push   $0x0
    83d4:	68 f4 01             	push   $0x1f4
    83d7:	00 00                	add    %al,(%bx,%si)
    83d9:	e8 6f ff             	call   834b <inb+0x1b>
    83dc:	ff                   	(bad)  
    83dd:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t) (0));					// LBA参数的40~47位
    83e1:	6a 00                	push   $0x0
    83e3:	68 f5 01             	push   $0x1f5
    83e6:	00 00                	add    %al,(%bx,%si)
    83e8:	e8 60 ff             	call   834b <inb+0x1b>
    83eb:	ff                   	(bad)  
    83ec:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t) (sector_count));
    83f0:	8b 45 0c             	mov    0xc(%di),%ax
    83f3:	0f b6 c0             	movzbw %al,%ax
    83f6:	50                   	push   %ax
    83f7:	68 f2 01             	push   $0x1f2
    83fa:	00 00                	add    %al,(%bx,%si)
    83fc:	e8 4c ff             	call   834b <inb+0x1b>
    83ff:	ff                   	(bad)  
    8400:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F3, (uint8_t) (sector));			// LBA参数的0~7位
    8404:	8b 45 08             	mov    0x8(%di),%ax
    8407:	0f b6 c0             	movzbw %al,%ax
    840a:	50                   	push   %ax
    840b:	68 f3 01             	push   $0x1f3
    840e:	00 00                	add    %al,(%bx,%si)
    8410:	e8 38 ff             	call   834b <inb+0x1b>
    8413:	ff                   	(bad)  
    8414:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F4, (uint8_t) (sector >> 8));		// LBA参数的8~15位
    8418:	8b 45 08             	mov    0x8(%di),%ax
    841b:	c1 f8 08             	sar    $0x8,%ax
    841e:	0f b6 c0             	movzbw %al,%ax
    8421:	50                   	push   %ax
    8422:	68 f4 01             	push   $0x1f4
    8425:	00 00                	add    %al,(%bx,%si)
    8427:	e8 21 ff             	call   834b <inb+0x1b>
    842a:	ff                   	(bad)  
    842b:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F5, (uint8_t) (sector >> 16));		// LBA参数的16~23位
    842f:	8b 45 08             	mov    0x8(%di),%ax
    8432:	c1 f8 10             	sar    $0x10,%ax
    8435:	0f b6 c0             	movzbw %al,%ax
    8438:	50                   	push   %ax
    8439:	68 f5 01             	push   $0x1f5
    843c:	00 00                	add    %al,(%bx,%si)
    843e:	e8 0a ff             	call   834b <inb+0x1b>
    8441:	ff                   	(bad)  
    8442:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F7, (uint8_t) 0x24);  // 发送命令
    8446:	6a 24                	push   $0x24
    8448:	68 f7 01             	push   $0x1f7
    844b:	00 00                	add    %al,(%bx,%si)
    844d:	e8 fb fe             	call   834b <inb+0x1b>
    8450:	ff                   	(bad)  
    8451:	ff 83 c4 08          	incw   0x8c4(%bp,%di)


	// 读取数据
	uint16_t *data_buf = (uint16_t*) buf;
    8455:	8b 45 10             	mov    0x10(%di),%ax
    8458:	89 45 f8             	mov    %ax,-0x8(%di)
	while (sector_count-- > 0) {
    845b:	eb 4a                	jmp    84a7 <read_disk+0x11c>
		// 每次扇区读之前都要检查，等待数据就绪 根据手册中的Status register 来判断 取出 DRQ
		while ((inb(0x1F7) & 0x88) != 0x8) {}
    845d:	90                   	nop
    845e:	68 f7 01             	push   $0x1f7
    8461:	00 00                	add    %al,(%bx,%si)
    8463:	e8 c8 fe             	call   832e <loader_entry+0x21>
    8466:	ff                   	(bad)  
    8467:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    846b:	0f b6 c0             	movzbw %al,%ax
    846e:	25 88 00             	and    $0x88,%ax
    8471:	00 00                	add    %al,(%bx,%si)
    8473:	83 f8 08             	cmp    $0x8,%ax
    8476:	75 e6                	jne    845e <read_disk+0xd3>

		// 读取并将数据写入到缓存中
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    8478:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    847d:	00 00                	add    %al,(%bx,%si)
    847f:	eb 1d                	jmp    849e <read_disk+0x113>
            // inw指令  0X1F0:位数据寄存器
			*data_buf++ = inw(0x1F0);
    8481:	8b 5d f8             	mov    -0x8(%di),%bx
    8484:	8d 43 02             	lea    0x2(%bp,%di),%ax
    8487:	89 45 f8             	mov    %ax,-0x8(%di)
    848a:	68 f0 01             	push   $0x1f0
    848d:	00 00                	add    %al,(%bx,%si)
    848f:	e8 d8 fe             	call   836a <outb+0x1d>
    8492:	ff                   	(bad)  
    8493:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8497:	66 89 03             	mov    %eax,(%bp,%di)
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    849a:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    849e:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84a3:	00 00                	add    %al,(%bx,%si)
    84a5:	7e da                	jle    8481 <read_disk+0xf6>
	while (sector_count-- > 0) {
    84a7:	8b 45 0c             	mov    0xc(%di),%ax
    84aa:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84ad:	89 55 0c             	mov    %dx,0xc(%di)
    84b0:	85 c0                	test   %ax,%ax
    84b2:	7f a9                	jg     845d <read_disk+0xd2>
		}
	}
}
    84b4:	90                   	nop
    84b5:	8b 5d fc             	mov    -0x4(%di),%bx
    84b8:	c9                   	leave  
    84b9:	c3                   	ret    

000084ba <reload_elf_file>:
 * @return
 */

// file_buffer = SYS_KERNEL_LOAD_ADDR = 0x100000 

static uint32_t reload_elf_file (uint8_t * file_buffer){
    84ba:	55                   	push   %bp
    84bb:	89 e5                	mov    %sp,%bp
    84bd:	83 ec 20             	sub    $0x20,%sp
	// 读取的只是ELF文件，不像BIN那样可直接运行，需要从中加载出有效数据和代码
    // 简单判断是否是合法的ELF文件

	Elf32_Ehdr * elf_hdr = (Elf32_Ehdr *)file_buffer;
    84c0:	8b 45 08             	mov    0x8(%di),%ax
    84c3:	89 45 e8             	mov    %ax,-0x18(%di)
	
	if((elf_hdr->e_ident[0] != 0x7f) || (elf_hdr->e_ident[1] != 'E' || (elf_hdr->e_ident[2] != 'L') 
    84c6:	8b 45 e8             	mov    -0x18(%di),%ax
    84c9:	0f b6 00             	movzbw (%bx,%si),%ax
    84cc:	3c 7f                	cmp    $0x7f,%al
    84ce:	75 21                	jne    84f1 <reload_elf_file+0x37>
    84d0:	8b 45 e8             	mov    -0x18(%di),%ax
    84d3:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    84d7:	3c 45                	cmp    $0x45,%al
    84d9:	75 16                	jne    84f1 <reload_elf_file+0x37>
    84db:	8b 45 e8             	mov    -0x18(%di),%ax
    84de:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    84e2:	3c 4c                	cmp    $0x4c,%al
    84e4:	75 0b                	jne    84f1 <reload_elf_file+0x37>
	|| (elf_hdr->e_ident[3] != 'F'))){
    84e6:	8b 45 e8             	mov    -0x18(%di),%ax
    84e9:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    84ed:	3c 46                	cmp    $0x46,%al
    84ef:	74 0a                	je     84fb <reload_elf_file+0x41>
		return 0;
    84f1:	b8 00 00             	mov    $0x0,%ax
    84f4:	00 00                	add    %al,(%bx,%si)
    84f6:	e9 d7 00             	jmp    85d0 <reload_elf_file+0x116>
    84f9:	00 00                	add    %al,(%bx,%si)
	}

	// 然后从中加载程序头，将内容拷贝到相应的位置
	for(int i = 0 ;i < elf_hdr->e_phnum;i++){
    84fb:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    8500:	00 00                	add    %al,(%bx,%si)
    8502:	e9 b8 00             	jmp    85bd <reload_elf_file+0x103>
    8505:	00 00                	add    %al,(%bx,%si)
		Elf32_Phdr * phdr = (Elf32_Phdr *)(file_buffer +elf_hdr->e_phoff) + i;
    8507:	8b 45 e8             	mov    -0x18(%di),%ax
    850a:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    850d:	8b 45 08             	mov    0x8(%di),%ax
    8510:	01 c2                	add    %ax,%dx
    8512:	8b 45 fc             	mov    -0x4(%di),%ax
    8515:	c1 e0 05             	shl    $0x5,%ax
    8518:	01 d0                	add    %dx,%ax
    851a:	89 45 e4             	mov    %ax,-0x1c(%di)
		
		// 不是可加载的类型 就不往内存里拷贝
		if(phdr->p_type != PT_LOAD){
    851d:	8b 45 e4             	mov    -0x1c(%di),%ax
    8520:	8b 00                	mov    (%bx,%si),%ax
    8522:	83 f8 01             	cmp    $0x1,%ax
    8525:	74 09                	je     8530 <reload_elf_file+0x76>
	for(int i = 0 ;i < elf_hdr->e_phnum;i++){
    8527:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    852b:	e9 8f 00             	jmp    85bd <reload_elf_file+0x103>
    852e:	00 00                	add    %al,(%bx,%si)
			continue;
		}

	// ELF文件加载到内存 
		uint8_t *src = file_buffer + phdr->p_offset;
    8530:	8b 45 e4             	mov    -0x1c(%di),%ax
    8533:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8536:	8b 45 08             	mov    0x8(%di),%ax
    8539:	01 d0                	add    %dx,%ax
    853b:	89 45 f8             	mov    %ax,-0x8(%di)
		uint8_t *dest = (uint8_t *) phdr->p_paddr;
    853e:	8b 45 e4             	mov    -0x1c(%di),%ax
    8541:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8544:	89 45 f4             	mov    %ax,-0xc(%di)
		for(int j = 0;j<phdr->p_filesz;j++ ){
    8547:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    854c:	00 00                	add    %al,(%bx,%si)
    854e:	eb 1b                	jmp    856b <reload_elf_file+0xb1>
			*dest++ = *src++;
    8550:	8b 55 f8             	mov    -0x8(%di),%dx
    8553:	8d 42 01             	lea    0x1(%bp,%si),%ax
    8556:	89 45 f8             	mov    %ax,-0x8(%di)
    8559:	8b 45 f4             	mov    -0xc(%di),%ax
    855c:	8d 48 01             	lea    0x1(%bx,%si),%cx
    855f:	89 4d f4             	mov    %cx,-0xc(%di)
    8562:	0f b6 12             	movzbw (%bp,%si),%dx
    8565:	88 10                	mov    %dl,(%bx,%si)
		for(int j = 0;j<phdr->p_filesz;j++ ){
    8567:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    856b:	8b 45 e4             	mov    -0x1c(%di),%ax
    856e:	8b 50 10             	mov    0x10(%bx,%si),%dx
    8571:	8b 45 f0             	mov    -0x10(%di),%ax
    8574:	39 c2                	cmp    %ax,%dx
    8576:	77 d8                	ja     8550 <reload_elf_file+0x96>
		}

		dest = (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    8578:	8b 45 e4             	mov    -0x1c(%di),%ax
    857b:	8b 50 10             	mov    0x10(%bx,%si),%dx
    857e:	8b 45 e4             	mov    -0x1c(%di),%ax
    8581:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8584:	01 d0                	add    %dx,%ax
    8586:	89 45 f4             	mov    %ax,-0xc(%di)
		for(int j  = 0;j < phdr->p_memsz - phdr->p_filesz;j++){
    8589:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    858e:	00 00                	add    %al,(%bx,%si)
    8590:	eb 10                	jmp    85a2 <reload_elf_file+0xe8>
			*dest++ = 0;
    8592:	8b 45 f4             	mov    -0xc(%di),%ax
    8595:	8d 50 01             	lea    0x1(%bx,%si),%dx
    8598:	89 55 f4             	mov    %dx,-0xc(%di)
    859b:	c6 00 00             	movb   $0x0,(%bx,%si)
		for(int j  = 0;j < phdr->p_memsz - phdr->p_filesz;j++){
    859e:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85a2:	8b 45 e4             	mov    -0x1c(%di),%ax
    85a5:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85a8:	8b 45 e4             	mov    -0x1c(%di),%ax
    85ab:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85ae:	29 c2                	sub    %ax,%dx
    85b0:	8b 45 ec             	mov    -0x14(%di),%ax
    85b3:	39 c2                	cmp    %ax,%dx
    85b5:	77 db                	ja     8592 <reload_elf_file+0xd8>
		}

		return elf_hdr ->e_entry;
    85b7:	8b 45 e8             	mov    -0x18(%di),%ax
    85ba:	8b 40 18             	mov    0x18(%bx,%si),%ax
    85bd:	eb 13                	jmp    85d2 <reload_elf_file+0x118>
	for(int i = 0 ;i < elf_hdr->e_phnum;i++){
    85bf:	8b 45 e8             	mov    -0x18(%di),%ax
    85c2:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    85c6:	0f b7 c0             	movzww %ax,%ax
    85c9:	39 45 fc             	cmp    %ax,-0x4(%di)
    85cc:	0f 8c 35 ff          	jl     8505 <reload_elf_file+0x4b>
    85d0:	ff                   	(bad)  
    85d1:	ff c9                	dec    %cx


	}
}
    85d3:	c3                   	ret    

000085d4 <dile>:


static void dile(int code){
    85d4:	55                   	push   %bp
    85d5:	89 e5                	mov    %sp,%bp
	for(;;){}
    85d7:	eb fe                	jmp    85d7 <dile+0x3>

000085d9 <load_kernel>:
}



void load_kernel(void){
    85d9:	55                   	push   %bp
    85da:	89 e5                	mov    %sp,%bp
    85dc:	83 ec 18             	sub    $0x18,%sp
	// 读取的扇区数一定要大一些,保不准kernel.elf大小会变得很大
	// 从100号扇区开始 读500个扇区
    read_disk(100,500,(uint8_t *)SYS_KERNEL_LOAD_ADDR);
    85df:	68 00 00             	push   $0x0
    85e2:	10 00                	adc    %al,(%bx,%si)
    85e4:	68 f4 01             	push   $0x1f4
    85e7:	00 00                	add    %al,(%bx,%si)
    85e9:	6a 64                	push   $0x64
    85eb:	e8 9b fd             	call   8389 <inw+0x1d>
    85ee:	ff                   	(bad)  
    85ef:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
     // 解析ELF文件，并通过调用的方式，进入到内核中去执行，同时传递boot参数
	 // 临时将elf文件先读到SYS_KERNEL_LOAD_ADDR处，再进行解析
	uint32_t kernel_entry = reload_elf_file((uint8_t *)SYS_KERNEL_LOAD_ADDR);
    85f3:	68 00 00             	push   $0x0
    85f6:	10 00                	adc    %al,(%bx,%si)
    85f8:	e8 bd fe             	call   84b8 <read_disk+0x12d>
    85fb:	ff                   	(bad)  
    85fc:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8600:	89 45 f4             	mov    %ax,-0xc(%di)
	// 死机
	if(!kernel_entry){
    8603:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    8607:	75 0a                	jne    8613 <load_kernel+0x3a>
		dile(-1);
    8609:	6a ff                	push   $0xffff
    860b:	e8 c4 ff             	call   85d2 <reload_elf_file+0x118>
    860e:	ff                   	(bad)  
    860f:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
	}
	// 转换为函数指针，然后跳进内核
	((void (*)(boot_info_t *))kernel_entry)(&boot_info);
    8613:	8b 45 f4             	mov    -0xc(%di),%ax
    8616:	83 ec 0c             	sub    $0xc,%sp
    8619:	68 80 96             	push   $0x9680
    861c:	00 00                	add    %al,(%bx,%si)
    861e:	ff d0                	call   *%ax
    8620:	83 c4 10             	add    $0x10,%sp
    for(;;){}
    8623:	eb fe                	jmp    8623 <load_kernel+0x4a>
