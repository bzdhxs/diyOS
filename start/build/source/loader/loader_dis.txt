
E:/code/myos/start/build/source/loader/loader.elf:     file format elf32-i386
E:/code/myos/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000001d2 memsz 0x000001d2 flags r-x
    LOAD off    0x000011e0 vaddr 0x000091e0 paddr 0x000091e0 align 2**12
         filesz 0x00000000 memsz 0x00000054 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000003e  00008194  00008194  00001194  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000054  000091e0  000091e0  000011e0  2**5
                  ALLOC
  3 .comment      00000011  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000011e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000026d  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011d  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000137  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fb  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00008194 l    d  .rodata	00000000 .rodata
000091e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
000091e0 l     O .bss	00000054 boot_info
00008003 l     F .text	0000003b show_msg
0000803e l     F .text	00000139 detect_memory
00000000 l    df *ABS*	00000000 loader_32.c
00008177 g     F .text	0000001d loader_entry
00008000 g       .text	00000000 _start
000091d2 g       .bss	00000000 __bss_start
000091d2 g       .bss	00000000 _edata
00009234 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
	.global _start 
	.extern loader_entry
	
_start:
//;跳转到loader_16 c代码里 完成loader的加载
	jmp  loader_entry
    8000:	e9 74 01             	jmp    8177 <loader_entry>

00008003 <show_msg>:

#include "loader.h"

static boot_info_t boot_info;			// 启动参数信息

static void show_msg(const char *msg){
    8003:	66 55                	push   %ebp
    8005:	66 89 e5             	mov    %esp,%ebp
    8008:	66 83 ec 10          	sub    $0x10,%esp
    char c;

    while((c = *msg++) != '\0'){
    800c:	eb 0c                	jmp    801a <show_msg+0x17>
        //使用内联汇编显示字符串
        __asm__  __volatile__ (
    800e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8014:	b4 0e                	mov    $0xe,%ah
    8016:	88 c0                	mov    %al,%al
    8018:	cd 10                	int    $0x10
    while((c = *msg++) != '\0'){
    801a:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    801f:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8024:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8029:	67 66 0f b6 00       	movzbl (%eax),%eax
    802e:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8032:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    8037:	75 d5                	jne    800e <show_msg+0xb>
            "mov $0xe,%%ah\n\t"
            "mov %[ch],%%al\n\t"
            "int $0x10"::[ch]"r"(c)
        );
    }
}
    8039:	90                   	nop
    803a:	66 c9                	leavel 
    803c:	66 c3                	retl   

0000803e <detect_memory>:

// 参考：https://wiki.osdev.org/Memory_Map_(x86)
// 1MB以下比较标准, 在1M以上会有差别
// 检测：https://wiki.osdev.org/Detecting_Memory_(x86)#BIOS_Function:_INT_0x15.2C_AH_.3D_0xC7

static void detect_memory(void){
    803e:	66 55                	push   %ebp
    8040:	66 89 e5             	mov    %esp,%ebp
    8043:	66 57                	push   %edi
    8045:	66 56                	push   %esi
    8047:	66 53                	push   %ebx
    8049:	66 83 ec 30          	sub    $0x30,%esp


    uint32_t contID = 0;
    804d:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8054:	00 00 
    SMAP_entry_t smap_entry;
    int signature, bytes;

    show_msg("try to detect memory:");
    8056:	66 68 94 81 00 00    	pushl  $0x8194
    805c:	66 e8 a1 ff ff ff    	calll  8003 <show_msg>
    8062:	66 83 c4 04          	add    $0x4,%esp

    boot_info.ram_region_count = 0;
    8066:	66 c7 06 30 92 00 00 	movl   $0x0,-0x6dd0
    806d:	00 00 
    for(int i = 0;i < BOOT_RAM_REGION_MAX;i++){
    806f:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8076:	00 00 
    8078:	e9 e0 00             	jmp    815b <detect_memory+0x11d>
        SMAP_entry_t *entry = &smap_entry;
    807b:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8080:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

      __asm__ __volatile__("int  $0x15"
    8085:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    808b:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8090:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    8096:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    809c:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    80a1:	66 89 f7             	mov    %esi,%edi
    80a4:	cd 15                	int    $0x15
    80a6:	66 89 da             	mov    %ebx,%edx
    80a9:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    80ae:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    80b3:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));

        if(signature != 0x534D4150){
    80b8:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    80bf:	4d 53 
    80c1:	74 13                	je     80d6 <detect_memory+0x98>
            show_msg("failed\n\t");
    80c3:	66 68 aa 81 00 00    	pushl  $0x81aa
    80c9:	66 e8 34 ff ff ff    	calll  8003 <show_msg>
    80cf:	66 83 c4 04          	add    $0x4,%esp
            return;
    80d3:	e9 92 00             	jmp    8168 <detect_memory+0x12a>
        }
        
        // todo: 20字节
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    80d6:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    80dc:	7e 13                	jle    80f1 <detect_memory+0xb3>
    80de:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    80e3:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    80e8:	66 83 e0 01          	and    $0x1,%eax
    80ec:	66 85 c0             	test   %eax,%eax
    80ef:	74 63                	je     8154 <detect_memory+0x116>
			continue;
		}


        if (entry->Type == 1){
    80f1:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    80f6:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    80fb:	66 83 f8 01          	cmp    $0x1,%eax
    80ff:	75 39                	jne    813a <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8101:	66 a1 30 92          	mov    0x9230,%eax
    8105:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    810a:	67 66 8b 12          	mov    (%edx),%edx
    810e:	67 66 89 14 c5 e0 91 	mov    %edx,0x91e0(,%eax,8)
    8115:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8117:	66 a1 30 92          	mov    0x9230,%eax
    811b:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8120:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8125:	67 66 89 14 c5 e4 91 	mov    %edx,0x91e4(,%eax,8)
    812c:	00 00 
            boot_info.ram_region_count++;
    812e:	66 a1 30 92          	mov    0x9230,%eax
    8132:	66 83 c0 01          	add    $0x1,%eax
    8136:	66 a3 30 92          	mov    %eax,0x9230
        }

        if (contID == 0){
    813a:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8140:	74 25                	je     8167 <detect_memory+0x129>
            break;
        }

        show_msg("ok.\r\n");
    8142:	66 68 b3 81 00 00    	pushl  $0x81b3
    8148:	66 e8 b5 fe ff ff    	calll  8003 <show_msg>
    814e:	66 83 c4 04          	add    $0x4,%esp
    8152:	eb 01                	jmp    8155 <detect_memory+0x117>
			continue;
    8154:	90                   	nop
    for(int i = 0;i < BOOT_RAM_REGION_MAX;i++){
    8155:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    815b:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8161:	0f 8e 16 ff          	jle    807b <detect_memory+0x3d>
    8165:	eb 01                	jmp    8168 <detect_memory+0x12a>
            break;
    8167:	90                   	nop



    }
}
    8168:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    816d:	66 5b                	pop    %ebx
    816f:	66 5e                	pop    %esi
    8171:	66 5f                	pop    %edi
    8173:	66 5d                	pop    %ebp
    8175:	66 c3                	retl   

00008177 <loader_entry>:



void loader_entry(void){
    8177:	66 55                	push   %ebp
    8179:	66 89 e5             	mov    %esp,%ebp
    show_msg(".......loading........\n\r");
    817c:	66 68 b9 81 00 00    	pushl  $0x81b9
    8182:	66 e8 7b fe ff ff    	calll  8003 <show_msg>
    8188:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    818c:	66 e8 ac fe ff ff    	calll  803e <detect_memory>
    for(;;){}
    8192:	eb fe                	jmp    8192 <loader_entry+0x1b>
